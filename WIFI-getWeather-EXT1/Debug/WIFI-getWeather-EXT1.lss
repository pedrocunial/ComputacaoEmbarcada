
WIFI-getWeather-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f0c8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040f0c8  0040f0c8  0001f0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000944  20400000  0040f0d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000754  20400944  0040fa14  00020944  2**2
                  ALLOC
  4 .stack        00002000  20401098  00410168  00020944  2**0
                  ALLOC
  5 .heap         00000200  20403098  00412168  00020944  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020944  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020972  2**0
                  CONTENTS, READONLY
  8 .debug_info   00014cb6  00000000  00000000  000209cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000032b2  00000000  00000000  00035681  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a969  00000000  00000000  00038933  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012f0  00000000  00000000  0004329c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001318  00000000  00000000  0004458c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024393  00000000  00000000  000458a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015e34  00000000  00000000  00069c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00091b25  00000000  00000000  0007fa6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005f94  00000000  00000000  00111590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403098 	.word	0x20403098
  400004:	00406759 	.word	0x00406759
  400008:	00406809 	.word	0x00406809
  40000c:	00406809 	.word	0x00406809
  400010:	00406809 	.word	0x00406809
  400014:	00406809 	.word	0x00406809
  400018:	00406809 	.word	0x00406809
	...
  40002c:	00406809 	.word	0x00406809
  400030:	00406809 	.word	0x00406809
  400034:	00000000 	.word	0x00000000
  400038:	00406809 	.word	0x00406809
  40003c:	00406809 	.word	0x00406809
  400040:	00406809 	.word	0x00406809
  400044:	00406809 	.word	0x00406809
  400048:	00406809 	.word	0x00406809
  40004c:	00406809 	.word	0x00406809
  400050:	00406809 	.word	0x00406809
  400054:	00406809 	.word	0x00406809
  400058:	00406809 	.word	0x00406809
  40005c:	00406809 	.word	0x00406809
  400060:	00406809 	.word	0x00406809
  400064:	00000000 	.word	0x00000000
  400068:	00405bb1 	.word	0x00405bb1
  40006c:	00405bc9 	.word	0x00405bc9
  400070:	00405be1 	.word	0x00405be1
  400074:	00406809 	.word	0x00406809
  400078:	00406809 	.word	0x00406809
  40007c:	00406809 	.word	0x00406809
  400080:	00405bf9 	.word	0x00405bf9
  400084:	00405c11 	.word	0x00405c11
  400088:	00406809 	.word	0x00406809
  40008c:	00406809 	.word	0x00406809
  400090:	00406809 	.word	0x00406809
  400094:	00406809 	.word	0x00406809
  400098:	00406809 	.word	0x00406809
  40009c:	00406809 	.word	0x00406809
  4000a0:	00406809 	.word	0x00406809
  4000a4:	00406809 	.word	0x00406809
  4000a8:	00406809 	.word	0x00406809
  4000ac:	00406809 	.word	0x00406809
  4000b0:	00406809 	.word	0x00406809
  4000b4:	00406809 	.word	0x00406809
  4000b8:	00406809 	.word	0x00406809
  4000bc:	00406809 	.word	0x00406809
  4000c0:	00406809 	.word	0x00406809
  4000c4:	00406809 	.word	0x00406809
  4000c8:	00406809 	.word	0x00406809
  4000cc:	00406809 	.word	0x00406809
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00406809 	.word	0x00406809
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00406809 	.word	0x00406809
  4000e0:	00406809 	.word	0x00406809
  4000e4:	00406809 	.word	0x00406809
  4000e8:	00406809 	.word	0x00406809
  4000ec:	00406809 	.word	0x00406809
  4000f0:	00406809 	.word	0x00406809
  4000f4:	00406809 	.word	0x00406809
  4000f8:	00406809 	.word	0x00406809
  4000fc:	00406809 	.word	0x00406809
  400100:	00406809 	.word	0x00406809
  400104:	00406809 	.word	0x00406809
  400108:	00406809 	.word	0x00406809
  40010c:	00406809 	.word	0x00406809
  400110:	00406809 	.word	0x00406809
	...
  400120:	00406809 	.word	0x00406809
  400124:	00406809 	.word	0x00406809
  400128:	00406809 	.word	0x00406809
  40012c:	00406809 	.word	0x00406809
  400130:	00406809 	.word	0x00406809
  400134:	00000000 	.word	0x00000000
  400138:	00406809 	.word	0x00406809
  40013c:	00406809 	.word	0x00406809

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400944 	.word	0x20400944
  40015c:	00000000 	.word	0x00000000
  400160:	0040f0d0 	.word	0x0040f0d0

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400948 	.word	0x20400948
  400190:	0040f0d0 	.word	0x0040f0d0
  400194:	0040f0d0 	.word	0x0040f0d0
  400198:	00000000 	.word	0x00000000

0040019c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40019c:	b480      	push	{r7}
  40019e:	b083      	sub	sp, #12
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	4603      	mov	r3, r0
  4001a4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4001a6:	4909      	ldr	r1, [pc, #36]	; (4001cc <NVIC_EnableIRQ+0x30>)
  4001a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4001ac:	095b      	lsrs	r3, r3, #5
  4001ae:	79fa      	ldrb	r2, [r7, #7]
  4001b0:	f002 021f 	and.w	r2, r2, #31
  4001b4:	2001      	movs	r0, #1
  4001b6:	fa00 f202 	lsl.w	r2, r0, r2
  4001ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4001be:	bf00      	nop
  4001c0:	370c      	adds	r7, #12
  4001c2:	46bd      	mov	sp, r7
  4001c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001c8:	4770      	bx	lr
  4001ca:	bf00      	nop
  4001cc:	e000e100 	.word	0xe000e100

004001d0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4001d0:	b480      	push	{r7}
  4001d2:	b083      	sub	sp, #12
  4001d4:	af00      	add	r7, sp, #0
  4001d6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001d8:	687b      	ldr	r3, [r7, #4]
  4001da:	2b07      	cmp	r3, #7
  4001dc:	d825      	bhi.n	40022a <osc_get_rate+0x5a>
  4001de:	a201      	add	r2, pc, #4	; (adr r2, 4001e4 <osc_get_rate+0x14>)
  4001e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001e4:	00400205 	.word	0x00400205
  4001e8:	0040020b 	.word	0x0040020b
  4001ec:	00400211 	.word	0x00400211
  4001f0:	00400217 	.word	0x00400217
  4001f4:	0040021b 	.word	0x0040021b
  4001f8:	0040021f 	.word	0x0040021f
  4001fc:	00400223 	.word	0x00400223
  400200:	00400227 	.word	0x00400227
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400204:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400208:	e010      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40020a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40020e:	e00d      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400214:	e00a      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400216:	4b08      	ldr	r3, [pc, #32]	; (400238 <osc_get_rate+0x68>)
  400218:	e008      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40021a:	4b08      	ldr	r3, [pc, #32]	; (40023c <osc_get_rate+0x6c>)
  40021c:	e006      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40021e:	4b08      	ldr	r3, [pc, #32]	; (400240 <osc_get_rate+0x70>)
  400220:	e004      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400222:	4b07      	ldr	r3, [pc, #28]	; (400240 <osc_get_rate+0x70>)
  400224:	e002      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400226:	4b06      	ldr	r3, [pc, #24]	; (400240 <osc_get_rate+0x70>)
  400228:	e000      	b.n	40022c <osc_get_rate+0x5c>
	}

	return 0;
  40022a:	2300      	movs	r3, #0
}
  40022c:	4618      	mov	r0, r3
  40022e:	370c      	adds	r7, #12
  400230:	46bd      	mov	sp, r7
  400232:	f85d 7b04 	ldr.w	r7, [sp], #4
  400236:	4770      	bx	lr
  400238:	003d0900 	.word	0x003d0900
  40023c:	007a1200 	.word	0x007a1200
  400240:	00b71b00 	.word	0x00b71b00

00400244 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400244:	b580      	push	{r7, lr}
  400246:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400248:	2006      	movs	r0, #6
  40024a:	4b05      	ldr	r3, [pc, #20]	; (400260 <sysclk_get_main_hz+0x1c>)
  40024c:	4798      	blx	r3
  40024e:	4602      	mov	r2, r0
  400250:	4613      	mov	r3, r2
  400252:	009b      	lsls	r3, r3, #2
  400254:	4413      	add	r3, r2
  400256:	009a      	lsls	r2, r3, #2
  400258:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40025a:	4618      	mov	r0, r3
  40025c:	bd80      	pop	{r7, pc}
  40025e:	bf00      	nop
  400260:	004001d1 	.word	0x004001d1

00400264 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400264:	b580      	push	{r7, lr}
  400266:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400268:	4b02      	ldr	r3, [pc, #8]	; (400274 <sysclk_get_cpu_hz+0x10>)
  40026a:	4798      	blx	r3
  40026c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40026e:	4618      	mov	r0, r3
  400270:	bd80      	pop	{r7, pc}
  400272:	bf00      	nop
  400274:	00400245 	.word	0x00400245

00400278 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400278:	b580      	push	{r7, lr}
  40027a:	b082      	sub	sp, #8
  40027c:	af00      	add	r7, sp, #0
  40027e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400280:	6878      	ldr	r0, [r7, #4]
  400282:	4b03      	ldr	r3, [pc, #12]	; (400290 <sysclk_enable_peripheral_clock+0x18>)
  400284:	4798      	blx	r3
}
  400286:	bf00      	nop
  400288:	3708      	adds	r7, #8
  40028a:	46bd      	mov	sp, r7
  40028c:	bd80      	pop	{r7, pc}
  40028e:	bf00      	nop
  400290:	00405f71 	.word	0x00405f71

00400294 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400294:	b580      	push	{r7, lr}
  400296:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400298:	200a      	movs	r0, #10
  40029a:	4b08      	ldr	r3, [pc, #32]	; (4002bc <ioport_init+0x28>)
  40029c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40029e:	200b      	movs	r0, #11
  4002a0:	4b06      	ldr	r3, [pc, #24]	; (4002bc <ioport_init+0x28>)
  4002a2:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4002a4:	200c      	movs	r0, #12
  4002a6:	4b05      	ldr	r3, [pc, #20]	; (4002bc <ioport_init+0x28>)
  4002a8:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4002aa:	2010      	movs	r0, #16
  4002ac:	4b03      	ldr	r3, [pc, #12]	; (4002bc <ioport_init+0x28>)
  4002ae:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4002b0:	2011      	movs	r0, #17
  4002b2:	4b02      	ldr	r3, [pc, #8]	; (4002bc <ioport_init+0x28>)
  4002b4:	4798      	blx	r3
	arch_ioport_init();
}
  4002b6:	bf00      	nop
  4002b8:	bd80      	pop	{r7, pc}
  4002ba:	bf00      	nop
  4002bc:	00400279 	.word	0x00400279

004002c0 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4002c0:	b480      	push	{r7}
  4002c2:	b08d      	sub	sp, #52	; 0x34
  4002c4:	af00      	add	r7, sp, #0
  4002c6:	6078      	str	r0, [r7, #4]
  4002c8:	460b      	mov	r3, r1
  4002ca:	70fb      	strb	r3, [r7, #3]
  4002cc:	687b      	ldr	r3, [r7, #4]
  4002ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  4002d0:	78fb      	ldrb	r3, [r7, #3]
  4002d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4002d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4002d8:	627b      	str	r3, [r7, #36]	; 0x24
  4002da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4002dc:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4002de:	6a3b      	ldr	r3, [r7, #32]
  4002e0:	095b      	lsrs	r3, r3, #5
  4002e2:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4002e4:	69fa      	ldr	r2, [r7, #28]
  4002e6:	4b17      	ldr	r3, [pc, #92]	; (400344 <ioport_set_pin_dir+0x84>)
  4002e8:	4413      	add	r3, r2
  4002ea:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4002ec:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4002ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4002f2:	2b01      	cmp	r3, #1
  4002f4:	d109      	bne.n	40030a <ioport_set_pin_dir+0x4a>
  4002f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4002f8:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4002fa:	697b      	ldr	r3, [r7, #20]
  4002fc:	f003 031f 	and.w	r3, r3, #31
  400300:	2201      	movs	r2, #1
  400302:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400304:	69bb      	ldr	r3, [r7, #24]
  400306:	611a      	str	r2, [r3, #16]
  400308:	e00c      	b.n	400324 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40030a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40030e:	2b00      	cmp	r3, #0
  400310:	d108      	bne.n	400324 <ioport_set_pin_dir+0x64>
  400312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400314:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400316:	693b      	ldr	r3, [r7, #16]
  400318:	f003 031f 	and.w	r3, r3, #31
  40031c:	2201      	movs	r2, #1
  40031e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400320:	69bb      	ldr	r3, [r7, #24]
  400322:	615a      	str	r2, [r3, #20]
  400324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400326:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400328:	68fb      	ldr	r3, [r7, #12]
  40032a:	f003 031f 	and.w	r3, r3, #31
  40032e:	2201      	movs	r2, #1
  400330:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400332:	69bb      	ldr	r3, [r7, #24]
  400334:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400338:	bf00      	nop
  40033a:	3734      	adds	r7, #52	; 0x34
  40033c:	46bd      	mov	sp, r7
  40033e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400342:	4770      	bx	lr
  400344:	00200707 	.word	0x00200707

00400348 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400348:	b480      	push	{r7}
  40034a:	b08b      	sub	sp, #44	; 0x2c
  40034c:	af00      	add	r7, sp, #0
  40034e:	6078      	str	r0, [r7, #4]
  400350:	460b      	mov	r3, r1
  400352:	70fb      	strb	r3, [r7, #3]
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	627b      	str	r3, [r7, #36]	; 0x24
  400358:	78fb      	ldrb	r3, [r7, #3]
  40035a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400360:	61fb      	str	r3, [r7, #28]
  400362:	69fb      	ldr	r3, [r7, #28]
  400364:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400366:	69bb      	ldr	r3, [r7, #24]
  400368:	095b      	lsrs	r3, r3, #5
  40036a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40036c:	697a      	ldr	r2, [r7, #20]
  40036e:	4b10      	ldr	r3, [pc, #64]	; (4003b0 <ioport_set_pin_level+0x68>)
  400370:	4413      	add	r3, r2
  400372:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400374:	613b      	str	r3, [r7, #16]

	if (level) {
  400376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40037a:	2b00      	cmp	r3, #0
  40037c:	d009      	beq.n	400392 <ioport_set_pin_level+0x4a>
  40037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400380:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400382:	68fb      	ldr	r3, [r7, #12]
  400384:	f003 031f 	and.w	r3, r3, #31
  400388:	2201      	movs	r2, #1
  40038a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40038c:	693b      	ldr	r3, [r7, #16]
  40038e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400390:	e008      	b.n	4003a4 <ioport_set_pin_level+0x5c>
  400392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400394:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400396:	68bb      	ldr	r3, [r7, #8]
  400398:	f003 031f 	and.w	r3, r3, #31
  40039c:	2201      	movs	r2, #1
  40039e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4003a0:	693b      	ldr	r3, [r7, #16]
  4003a2:	635a      	str	r2, [r3, #52]	; 0x34
  4003a4:	bf00      	nop
  4003a6:	372c      	adds	r7, #44	; 0x2c
  4003a8:	46bd      	mov	sp, r7
  4003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003ae:	4770      	bx	lr
  4003b0:	00200707 	.word	0x00200707

004003b4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  4003b4:	b580      	push	{r7, lr}
  4003b6:	b082      	sub	sp, #8
  4003b8:	af00      	add	r7, sp, #0
  4003ba:	6078      	str	r0, [r7, #4]
  4003bc:	6039      	str	r1, [r7, #0]
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  4003be:	687b      	ldr	r3, [r7, #4]
  4003c0:	2b10      	cmp	r3, #16
  4003c2:	d10a      	bne.n	4003da <chip_isr+0x26>
  4003c4:	683b      	ldr	r3, [r7, #0]
  4003c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4003ca:	d106      	bne.n	4003da <chip_isr+0x26>
		if (gpfIsr) {
  4003cc:	4b05      	ldr	r3, [pc, #20]	; (4003e4 <chip_isr+0x30>)
  4003ce:	681b      	ldr	r3, [r3, #0]
  4003d0:	2b00      	cmp	r3, #0
  4003d2:	d002      	beq.n	4003da <chip_isr+0x26>
			gpfIsr();
  4003d4:	4b03      	ldr	r3, [pc, #12]	; (4003e4 <chip_isr+0x30>)
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	4798      	blx	r3
		}
	}
}
  4003da:	bf00      	nop
  4003dc:	3708      	adds	r7, #8
  4003de:	46bd      	mov	sp, r7
  4003e0:	bd80      	pop	{r7, pc}
  4003e2:	bf00      	nop
  4003e4:	20400960 	.word	0x20400960

004003e8 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
  4003e8:	b580      	push	{r7, lr}
  4003ea:	af00      	add	r7, sp, #0
	ioport_init();
  4003ec:	4b0d      	ldr	r3, [pc, #52]	; (400424 <init_chip_pins+0x3c>)
  4003ee:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_PIN_RESET, IOPORT_DIR_OUTPUT);
  4003f0:	2101      	movs	r1, #1
  4003f2:	2023      	movs	r0, #35	; 0x23
  4003f4:	4b0c      	ldr	r3, [pc, #48]	; (400428 <init_chip_pins+0x40>)
  4003f6:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
  4003f8:	2101      	movs	r1, #1
  4003fa:	2023      	movs	r0, #35	; 0x23
  4003fc:	4b0b      	ldr	r3, [pc, #44]	; (40042c <init_chip_pins+0x44>)
  4003fe:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_DIR_OUTPUT);
  400400:	2101      	movs	r1, #1
  400402:	2051      	movs	r0, #81	; 0x51
  400404:	4b08      	ldr	r3, [pc, #32]	; (400428 <init_chip_pins+0x40>)
  400406:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
  400408:	2101      	movs	r1, #1
  40040a:	2051      	movs	r0, #81	; 0x51
  40040c:	4b07      	ldr	r3, [pc, #28]	; (40042c <init_chip_pins+0x44>)
  40040e:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_PIN_WAKE, IOPORT_DIR_OUTPUT);
  400410:	2101      	movs	r1, #1
  400412:	2022      	movs	r0, #34	; 0x22
  400414:	4b04      	ldr	r3, [pc, #16]	; (400428 <init_chip_pins+0x40>)
  400416:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_WAKE, IOPORT_PIN_LEVEL_HIGH);
  400418:	2101      	movs	r1, #1
  40041a:	2022      	movs	r0, #34	; 0x22
  40041c:	4b03      	ldr	r3, [pc, #12]	; (40042c <init_chip_pins+0x44>)
  40041e:	4798      	blx	r3
}
  400420:	bf00      	nop
  400422:	bd80      	pop	{r7, pc}
  400424:	00400295 	.word	0x00400295
  400428:	004002c1 	.word	0x004002c1
  40042c:	00400349 	.word	0x00400349

00400430 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  400430:	b580      	push	{r7, lr}
  400432:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
  400434:	4b08      	ldr	r3, [pc, #32]	; (400458 <nm_bsp_init+0x28>)
  400436:	2200      	movs	r2, #0
  400438:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
  40043a:	4b08      	ldr	r3, [pc, #32]	; (40045c <nm_bsp_init+0x2c>)
  40043c:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  40043e:	4b08      	ldr	r3, [pc, #32]	; (400460 <nm_bsp_init+0x30>)
  400440:	681b      	ldr	r3, [r3, #0]
  400442:	f003 0301 	and.w	r3, r3, #1
  400446:	2b00      	cmp	r3, #0
  400448:	d001      	beq.n	40044e <nm_bsp_init+0x1e>
  40044a:	4b05      	ldr	r3, [pc, #20]	; (400460 <nm_bsp_init+0x30>)
  40044c:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  40044e:	4b05      	ldr	r3, [pc, #20]	; (400464 <nm_bsp_init+0x34>)
  400450:	4798      	blx	r3

	return 0;
  400452:	2300      	movs	r3, #0
}
  400454:	4618      	mov	r0, r3
  400456:	bd80      	pop	{r7, pc}
  400458:	20400960 	.word	0x20400960
  40045c:	004003e9 	.word	0x004003e9
  400460:	e000e010 	.word	0xe000e010
  400464:	00400469 	.word	0x00400469

00400468 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
  40046c:	2100      	movs	r1, #0
  40046e:	2051      	movs	r0, #81	; 0x51
  400470:	4b0c      	ldr	r3, [pc, #48]	; (4004a4 <nm_bsp_reset+0x3c>)
  400472:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
  400474:	2100      	movs	r1, #0
  400476:	2023      	movs	r0, #35	; 0x23
  400478:	4b0a      	ldr	r3, [pc, #40]	; (4004a4 <nm_bsp_reset+0x3c>)
  40047a:	4798      	blx	r3
	nm_bsp_sleep(100);
  40047c:	2064      	movs	r0, #100	; 0x64
  40047e:	4b0a      	ldr	r3, [pc, #40]	; (4004a8 <nm_bsp_reset+0x40>)
  400480:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
  400482:	2101      	movs	r1, #1
  400484:	2051      	movs	r0, #81	; 0x51
  400486:	4b07      	ldr	r3, [pc, #28]	; (4004a4 <nm_bsp_reset+0x3c>)
  400488:	4798      	blx	r3
	nm_bsp_sleep(100);
  40048a:	2064      	movs	r0, #100	; 0x64
  40048c:	4b06      	ldr	r3, [pc, #24]	; (4004a8 <nm_bsp_reset+0x40>)
  40048e:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
  400490:	2101      	movs	r1, #1
  400492:	2023      	movs	r0, #35	; 0x23
  400494:	4b03      	ldr	r3, [pc, #12]	; (4004a4 <nm_bsp_reset+0x3c>)
  400496:	4798      	blx	r3
	nm_bsp_sleep(100);
  400498:	2064      	movs	r0, #100	; 0x64
  40049a:	4b03      	ldr	r3, [pc, #12]	; (4004a8 <nm_bsp_reset+0x40>)
  40049c:	4798      	blx	r3
}
  40049e:	bf00      	nop
  4004a0:	bd80      	pop	{r7, pc}
  4004a2:	bf00      	nop
  4004a4:	00400349 	.word	0x00400349
  4004a8:	004004ad 	.word	0x004004ad

004004ac <nm_bsp_sleep>:
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  4004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
  4004b2:	6078      	str	r0, [r7, #4]
	while(u32TimeMsec--) {
  4004b4:	e01c      	b.n	4004f0 <nm_bsp_sleep+0x44>
		delay_ms(4);
  4004b6:	4b13      	ldr	r3, [pc, #76]	; (400504 <nm_bsp_sleep+0x58>)
  4004b8:	4798      	blx	r3
  4004ba:	4603      	mov	r3, r0
  4004bc:	461a      	mov	r2, r3
  4004be:	f04f 0300 	mov.w	r3, #0
  4004c2:	009d      	lsls	r5, r3, #2
  4004c4:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
  4004c8:	0094      	lsls	r4, r2, #2
  4004ca:	f241 722b 	movw	r2, #5931	; 0x172b
  4004ce:	f04f 0300 	mov.w	r3, #0
  4004d2:	18a0      	adds	r0, r4, r2
  4004d4:	eb45 0103 	adc.w	r1, r5, r3
  4004d8:	4e0b      	ldr	r6, [pc, #44]	; (400508 <nm_bsp_sleep+0x5c>)
  4004da:	f241 722c 	movw	r2, #5932	; 0x172c
  4004de:	f04f 0300 	mov.w	r3, #0
  4004e2:	47b0      	blx	r6
  4004e4:	4602      	mov	r2, r0
  4004e6:	460b      	mov	r3, r1
  4004e8:	4613      	mov	r3, r2
  4004ea:	4618      	mov	r0, r3
  4004ec:	4b07      	ldr	r3, [pc, #28]	; (40050c <nm_bsp_sleep+0x60>)
  4004ee:	4798      	blx	r3
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4004f0:	687b      	ldr	r3, [r7, #4]
  4004f2:	1e5a      	subs	r2, r3, #1
  4004f4:	607a      	str	r2, [r7, #4]
  4004f6:	2b00      	cmp	r3, #0
  4004f8:	d1dd      	bne.n	4004b6 <nm_bsp_sleep+0xa>
		delay_ms(4);
	}
}
  4004fa:	bf00      	nop
  4004fc:	370c      	adds	r7, #12
  4004fe:	46bd      	mov	sp, r7
  400500:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400502:	bf00      	nop
  400504:	00400265 	.word	0x00400265
  400508:	00407555 	.word	0x00407555
  40050c:	20400001 	.word	0x20400001

00400510 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400510:	b590      	push	{r4, r7, lr}
  400512:	b085      	sub	sp, #20
  400514:	af02      	add	r7, sp, #8
  400516:	6078      	str	r0, [r7, #4]
	gpfIsr = pfIsr;
  400518:	4a15      	ldr	r2, [pc, #84]	; (400570 <nm_bsp_register_isr+0x60>)
  40051a:	687b      	ldr	r3, [r7, #4]
  40051c:	6013      	str	r3, [r2, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  40051e:	2010      	movs	r0, #16
  400520:	4b14      	ldr	r3, [pc, #80]	; (400574 <nm_bsp_register_isr+0x64>)
  400522:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  400524:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400528:	207c      	movs	r0, #124	; 0x7c
  40052a:	4b13      	ldr	r3, [pc, #76]	; (400578 <nm_bsp_register_isr+0x68>)
  40052c:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  40052e:	2201      	movs	r2, #1
  400530:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400534:	4811      	ldr	r0, [pc, #68]	; (40057c <nm_bsp_register_isr+0x6c>)
  400536:	4b12      	ldr	r3, [pc, #72]	; (400580 <nm_bsp_register_isr+0x70>)
  400538:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  40053a:	4b12      	ldr	r3, [pc, #72]	; (400584 <nm_bsp_register_isr+0x74>)
  40053c:	9300      	str	r3, [sp, #0]
  40053e:	2351      	movs	r3, #81	; 0x51
  400540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400544:	2110      	movs	r1, #16
  400546:	480d      	ldr	r0, [pc, #52]	; (40057c <nm_bsp_register_isr+0x6c>)
  400548:	4c0f      	ldr	r4, [pc, #60]	; (400588 <nm_bsp_register_isr+0x78>)
  40054a:	47a0      	blx	r4
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40054c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400550:	480a      	ldr	r0, [pc, #40]	; (40057c <nm_bsp_register_isr+0x6c>)
  400552:	4b0e      	ldr	r3, [pc, #56]	; (40058c <nm_bsp_register_isr+0x7c>)
  400554:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
  400556:	2010      	movs	r0, #16
  400558:	4b0d      	ldr	r3, [pc, #52]	; (400590 <nm_bsp_register_isr+0x80>)
  40055a:	4798      	blx	r3
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  40055c:	2200      	movs	r2, #0
  40055e:	2110      	movs	r1, #16
  400560:	4806      	ldr	r0, [pc, #24]	; (40057c <nm_bsp_register_isr+0x6c>)
  400562:	4b0c      	ldr	r3, [pc, #48]	; (400594 <nm_bsp_register_isr+0x84>)
  400564:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  400566:	bf00      	nop
  400568:	370c      	adds	r7, #12
  40056a:	46bd      	mov	sp, r7
  40056c:	bd90      	pop	{r4, r7, pc}
  40056e:	bf00      	nop
  400570:	20400960 	.word	0x20400960
  400574:	00405f71 	.word	0x00405f71
  400578:	00405795 	.word	0x00405795
  40057c:	400e1400 	.word	0x400e1400
  400580:	004054a1 	.word	0x004054a1
  400584:	004003b5 	.word	0x004003b5
  400588:	00405b11 	.word	0x00405b11
  40058c:	0040572d 	.word	0x0040572d
  400590:	0040019d 	.word	0x0040019d
  400594:	00405c29 	.word	0x00405c29

00400598 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400598:	b580      	push	{r7, lr}
  40059a:	b082      	sub	sp, #8
  40059c:	af00      	add	r7, sp, #0
  40059e:	4603      	mov	r3, r0
  4005a0:	71fb      	strb	r3, [r7, #7]
	if (u8Enable) {
  4005a2:	79fb      	ldrb	r3, [r7, #7]
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	d005      	beq.n	4005b4 <nm_bsp_interrupt_ctrl+0x1c>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4005a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005ac:	4806      	ldr	r0, [pc, #24]	; (4005c8 <nm_bsp_interrupt_ctrl+0x30>)
  4005ae:	4b07      	ldr	r3, [pc, #28]	; (4005cc <nm_bsp_interrupt_ctrl+0x34>)
  4005b0:	4798      	blx	r3
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
}
  4005b2:	e004      	b.n	4005be <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4005b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005b8:	4803      	ldr	r0, [pc, #12]	; (4005c8 <nm_bsp_interrupt_ctrl+0x30>)
  4005ba:	4b05      	ldr	r3, [pc, #20]	; (4005d0 <nm_bsp_interrupt_ctrl+0x38>)
  4005bc:	4798      	blx	r3
	}
}
  4005be:	bf00      	nop
  4005c0:	3708      	adds	r7, #8
  4005c2:	46bd      	mov	sp, r7
  4005c4:	bd80      	pop	{r7, pc}
  4005c6:	bf00      	nop
  4005c8:	400e1400 	.word	0x400e1400
  4005cc:	0040572d 	.word	0x0040572d
  4005d0:	00405749 	.word	0x00405749

004005d4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4005d4:	b480      	push	{r7}
  4005d6:	b083      	sub	sp, #12
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4005dc:	687b      	ldr	r3, [r7, #4]
  4005de:	2b07      	cmp	r3, #7
  4005e0:	d825      	bhi.n	40062e <osc_get_rate+0x5a>
  4005e2:	a201      	add	r2, pc, #4	; (adr r2, 4005e8 <osc_get_rate+0x14>)
  4005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4005e8:	00400609 	.word	0x00400609
  4005ec:	0040060f 	.word	0x0040060f
  4005f0:	00400615 	.word	0x00400615
  4005f4:	0040061b 	.word	0x0040061b
  4005f8:	0040061f 	.word	0x0040061f
  4005fc:	00400623 	.word	0x00400623
  400600:	00400627 	.word	0x00400627
  400604:	0040062b 	.word	0x0040062b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400608:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40060c:	e010      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40060e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400612:	e00d      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400618:	e00a      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40061a:	4b08      	ldr	r3, [pc, #32]	; (40063c <osc_get_rate+0x68>)
  40061c:	e008      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40061e:	4b08      	ldr	r3, [pc, #32]	; (400640 <osc_get_rate+0x6c>)
  400620:	e006      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400622:	4b08      	ldr	r3, [pc, #32]	; (400644 <osc_get_rate+0x70>)
  400624:	e004      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400626:	4b07      	ldr	r3, [pc, #28]	; (400644 <osc_get_rate+0x70>)
  400628:	e002      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40062a:	4b06      	ldr	r3, [pc, #24]	; (400644 <osc_get_rate+0x70>)
  40062c:	e000      	b.n	400630 <osc_get_rate+0x5c>
	}

	return 0;
  40062e:	2300      	movs	r3, #0
}
  400630:	4618      	mov	r0, r3
  400632:	370c      	adds	r7, #12
  400634:	46bd      	mov	sp, r7
  400636:	f85d 7b04 	ldr.w	r7, [sp], #4
  40063a:	4770      	bx	lr
  40063c:	003d0900 	.word	0x003d0900
  400640:	007a1200 	.word	0x007a1200
  400644:	00b71b00 	.word	0x00b71b00

00400648 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400648:	b580      	push	{r7, lr}
  40064a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40064c:	2006      	movs	r0, #6
  40064e:	4b05      	ldr	r3, [pc, #20]	; (400664 <sysclk_get_main_hz+0x1c>)
  400650:	4798      	blx	r3
  400652:	4602      	mov	r2, r0
  400654:	4613      	mov	r3, r2
  400656:	009b      	lsls	r3, r3, #2
  400658:	4413      	add	r3, r2
  40065a:	009a      	lsls	r2, r3, #2
  40065c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40065e:	4618      	mov	r0, r3
  400660:	bd80      	pop	{r7, pc}
  400662:	bf00      	nop
  400664:	004005d5 	.word	0x004005d5

00400668 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400668:	b580      	push	{r7, lr}
  40066a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40066c:	4b02      	ldr	r3, [pc, #8]	; (400678 <sysclk_get_cpu_hz+0x10>)
  40066e:	4798      	blx	r3
  400670:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400672:	4618      	mov	r0, r3
  400674:	bd80      	pop	{r7, pc}
  400676:	bf00      	nop
  400678:	00400649 	.word	0x00400649

0040067c <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  40067c:	b480      	push	{r7}
  40067e:	b089      	sub	sp, #36	; 0x24
  400680:	af00      	add	r7, sp, #0
  400682:	6078      	str	r0, [r7, #4]
  400684:	687b      	ldr	r3, [r7, #4]
  400686:	61fb      	str	r3, [r7, #28]
  400688:	69fb      	ldr	r3, [r7, #28]
  40068a:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40068c:	69bb      	ldr	r3, [r7, #24]
  40068e:	095a      	lsrs	r2, r3, #5
  400690:	69fb      	ldr	r3, [r7, #28]
  400692:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400694:	697b      	ldr	r3, [r7, #20]
  400696:	f003 031f 	and.w	r3, r3, #31
  40069a:	2101      	movs	r1, #1
  40069c:	fa01 f303 	lsl.w	r3, r1, r3
  4006a0:	613a      	str	r2, [r7, #16]
  4006a2:	60fb      	str	r3, [r7, #12]
  4006a4:	693b      	ldr	r3, [r7, #16]
  4006a6:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006a8:	68ba      	ldr	r2, [r7, #8]
  4006aa:	4b06      	ldr	r3, [pc, #24]	; (4006c4 <ioport_disable_pin+0x48>)
  4006ac:	4413      	add	r3, r2
  4006ae:	025b      	lsls	r3, r3, #9
  4006b0:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006b2:	68fb      	ldr	r3, [r7, #12]
  4006b4:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  4006b6:	bf00      	nop
  4006b8:	3724      	adds	r7, #36	; 0x24
  4006ba:	46bd      	mov	sp, r7
  4006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006c0:	4770      	bx	lr
  4006c2:	bf00      	nop
  4006c4:	00200707 	.word	0x00200707

004006c8 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4006c8:	b480      	push	{r7}
  4006ca:	b08d      	sub	sp, #52	; 0x34
  4006cc:	af00      	add	r7, sp, #0
  4006ce:	6078      	str	r0, [r7, #4]
  4006d0:	6039      	str	r1, [r7, #0]
  4006d2:	687b      	ldr	r3, [r7, #4]
  4006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4006d6:	683b      	ldr	r3, [r7, #0]
  4006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  4006da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006dc:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006e0:	095a      	lsrs	r2, r3, #5
  4006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006e4:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4006e6:	6a3b      	ldr	r3, [r7, #32]
  4006e8:	f003 031f 	and.w	r3, r3, #31
  4006ec:	2101      	movs	r1, #1
  4006ee:	fa01 f303 	lsl.w	r3, r1, r3
  4006f2:	61fa      	str	r2, [r7, #28]
  4006f4:	61bb      	str	r3, [r7, #24]
  4006f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4006f8:	617b      	str	r3, [r7, #20]
  4006fa:	69fb      	ldr	r3, [r7, #28]
  4006fc:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006fe:	693a      	ldr	r2, [r7, #16]
  400700:	4b37      	ldr	r3, [pc, #220]	; (4007e0 <ioport_set_pin_mode+0x118>)
  400702:	4413      	add	r3, r2
  400704:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400706:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400708:	697b      	ldr	r3, [r7, #20]
  40070a:	f003 0308 	and.w	r3, r3, #8
  40070e:	2b00      	cmp	r3, #0
  400710:	d003      	beq.n	40071a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400712:	68fb      	ldr	r3, [r7, #12]
  400714:	69ba      	ldr	r2, [r7, #24]
  400716:	665a      	str	r2, [r3, #100]	; 0x64
  400718:	e002      	b.n	400720 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  40071a:	68fb      	ldr	r3, [r7, #12]
  40071c:	69ba      	ldr	r2, [r7, #24]
  40071e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400720:	697b      	ldr	r3, [r7, #20]
  400722:	f003 0310 	and.w	r3, r3, #16
  400726:	2b00      	cmp	r3, #0
  400728:	d004      	beq.n	400734 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  40072a:	68fb      	ldr	r3, [r7, #12]
  40072c:	69ba      	ldr	r2, [r7, #24]
  40072e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400732:	e003      	b.n	40073c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400734:	68fb      	ldr	r3, [r7, #12]
  400736:	69ba      	ldr	r2, [r7, #24]
  400738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	f003 0320 	and.w	r3, r3, #32
  400742:	2b00      	cmp	r3, #0
  400744:	d003      	beq.n	40074e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400746:	68fb      	ldr	r3, [r7, #12]
  400748:	69ba      	ldr	r2, [r7, #24]
  40074a:	651a      	str	r2, [r3, #80]	; 0x50
  40074c:	e002      	b.n	400754 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40074e:	68fb      	ldr	r3, [r7, #12]
  400750:	69ba      	ldr	r2, [r7, #24]
  400752:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400754:	697b      	ldr	r3, [r7, #20]
  400756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40075a:	2b00      	cmp	r3, #0
  40075c:	d003      	beq.n	400766 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40075e:	68fb      	ldr	r3, [r7, #12]
  400760:	69ba      	ldr	r2, [r7, #24]
  400762:	621a      	str	r2, [r3, #32]
  400764:	e002      	b.n	40076c <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400766:	68fb      	ldr	r3, [r7, #12]
  400768:	69ba      	ldr	r2, [r7, #24]
  40076a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40076c:	697b      	ldr	r3, [r7, #20]
  40076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400772:	2b00      	cmp	r3, #0
  400774:	d004      	beq.n	400780 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400776:	68fb      	ldr	r3, [r7, #12]
  400778:	69ba      	ldr	r2, [r7, #24]
  40077a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40077e:	e003      	b.n	400788 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400780:	68fb      	ldr	r3, [r7, #12]
  400782:	69ba      	ldr	r2, [r7, #24]
  400784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400788:	697b      	ldr	r3, [r7, #20]
  40078a:	f003 0301 	and.w	r3, r3, #1
  40078e:	2b00      	cmp	r3, #0
  400790:	d006      	beq.n	4007a0 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400792:	68fb      	ldr	r3, [r7, #12]
  400794:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400796:	69bb      	ldr	r3, [r7, #24]
  400798:	431a      	orrs	r2, r3
  40079a:	68fb      	ldr	r3, [r7, #12]
  40079c:	671a      	str	r2, [r3, #112]	; 0x70
  40079e:	e006      	b.n	4007ae <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4007a0:	68fb      	ldr	r3, [r7, #12]
  4007a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007a4:	69bb      	ldr	r3, [r7, #24]
  4007a6:	43db      	mvns	r3, r3
  4007a8:	401a      	ands	r2, r3
  4007aa:	68fb      	ldr	r3, [r7, #12]
  4007ac:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4007ae:	697b      	ldr	r3, [r7, #20]
  4007b0:	f003 0302 	and.w	r3, r3, #2
  4007b4:	2b00      	cmp	r3, #0
  4007b6:	d006      	beq.n	4007c6 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  4007b8:	68fb      	ldr	r3, [r7, #12]
  4007ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007bc:	69bb      	ldr	r3, [r7, #24]
  4007be:	431a      	orrs	r2, r3
  4007c0:	68fb      	ldr	r3, [r7, #12]
  4007c2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4007c4:	e006      	b.n	4007d4 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4007c6:	68fb      	ldr	r3, [r7, #12]
  4007c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007ca:	69bb      	ldr	r3, [r7, #24]
  4007cc:	43db      	mvns	r3, r3
  4007ce:	401a      	ands	r2, r3
  4007d0:	68fb      	ldr	r3, [r7, #12]
  4007d2:	675a      	str	r2, [r3, #116]	; 0x74
  4007d4:	bf00      	nop
  4007d6:	3734      	adds	r7, #52	; 0x34
  4007d8:	46bd      	mov	sp, r7
  4007da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007de:	4770      	bx	lr
  4007e0:	00200707 	.word	0x00200707

004007e4 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4007e4:	b480      	push	{r7}
  4007e6:	b08d      	sub	sp, #52	; 0x34
  4007e8:	af00      	add	r7, sp, #0
  4007ea:	6078      	str	r0, [r7, #4]
  4007ec:	460b      	mov	r3, r1
  4007ee:	70fb      	strb	r3, [r7, #3]
  4007f0:	687b      	ldr	r3, [r7, #4]
  4007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4007f4:	78fb      	ldrb	r3, [r7, #3]
  4007f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007fc:	627b      	str	r3, [r7, #36]	; 0x24
  4007fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400800:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400802:	6a3b      	ldr	r3, [r7, #32]
  400804:	095b      	lsrs	r3, r3, #5
  400806:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400808:	69fa      	ldr	r2, [r7, #28]
  40080a:	4b17      	ldr	r3, [pc, #92]	; (400868 <ioport_set_pin_dir+0x84>)
  40080c:	4413      	add	r3, r2
  40080e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400810:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400816:	2b01      	cmp	r3, #1
  400818:	d109      	bne.n	40082e <ioport_set_pin_dir+0x4a>
  40081a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40081c:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40081e:	697b      	ldr	r3, [r7, #20]
  400820:	f003 031f 	and.w	r3, r3, #31
  400824:	2201      	movs	r2, #1
  400826:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400828:	69bb      	ldr	r3, [r7, #24]
  40082a:	611a      	str	r2, [r3, #16]
  40082c:	e00c      	b.n	400848 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40082e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400832:	2b00      	cmp	r3, #0
  400834:	d108      	bne.n	400848 <ioport_set_pin_dir+0x64>
  400836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400838:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40083a:	693b      	ldr	r3, [r7, #16]
  40083c:	f003 031f 	and.w	r3, r3, #31
  400840:	2201      	movs	r2, #1
  400842:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400844:	69bb      	ldr	r3, [r7, #24]
  400846:	615a      	str	r2, [r3, #20]
  400848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40084a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40084c:	68fb      	ldr	r3, [r7, #12]
  40084e:	f003 031f 	and.w	r3, r3, #31
  400852:	2201      	movs	r2, #1
  400854:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400856:	69bb      	ldr	r3, [r7, #24]
  400858:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40085c:	bf00      	nop
  40085e:	3734      	adds	r7, #52	; 0x34
  400860:	46bd      	mov	sp, r7
  400862:	f85d 7b04 	ldr.w	r7, [sp], #4
  400866:	4770      	bx	lr
  400868:	00200707 	.word	0x00200707

0040086c <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  40086c:	b480      	push	{r7}
  40086e:	b083      	sub	sp, #12
  400870:	af00      	add	r7, sp, #0
  400872:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400874:	687b      	ldr	r3, [r7, #4]
  400876:	2280      	movs	r2, #128	; 0x80
  400878:	601a      	str	r2, [r3, #0]
}
  40087a:	bf00      	nop
  40087c:	370c      	adds	r7, #12
  40087e:	46bd      	mov	sp, r7
  400880:	f85d 7b04 	ldr.w	r7, [sp], #4
  400884:	4770      	bx	lr
  400886:	bf00      	nop

00400888 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
  400888:	b480      	push	{r7}
  40088a:	b083      	sub	sp, #12
  40088c:	af00      	add	r7, sp, #0
  40088e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400890:	687b      	ldr	r3, [r7, #4]
  400892:	2201      	movs	r2, #1
  400894:	601a      	str	r2, [r3, #0]
}
  400896:	bf00      	nop
  400898:	370c      	adds	r7, #12
  40089a:	46bd      	mov	sp, r7
  40089c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a0:	4770      	bx	lr
  4008a2:	bf00      	nop

004008a4 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
  4008a4:	b480      	push	{r7}
  4008a6:	b083      	sub	sp, #12
  4008a8:	af00      	add	r7, sp, #0
  4008aa:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4008ac:	687b      	ldr	r3, [r7, #4]
  4008ae:	2202      	movs	r2, #2
  4008b0:	601a      	str	r2, [r3, #0]
}
  4008b2:	bf00      	nop
  4008b4:	370c      	adds	r7, #12
  4008b6:	46bd      	mov	sp, r7
  4008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop

004008c0 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  4008c0:	b480      	push	{r7}
  4008c2:	b083      	sub	sp, #12
  4008c4:	af00      	add	r7, sp, #0
  4008c6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4008c8:	687b      	ldr	r3, [r7, #4]
  4008ca:	685b      	ldr	r3, [r3, #4]
  4008cc:	f043 0201 	orr.w	r2, r3, #1
  4008d0:	687b      	ldr	r3, [r7, #4]
  4008d2:	605a      	str	r2, [r3, #4]
}
  4008d4:	bf00      	nop
  4008d6:	370c      	adds	r7, #12
  4008d8:	46bd      	mov	sp, r7
  4008da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008de:	4770      	bx	lr

004008e0 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  4008e0:	b480      	push	{r7}
  4008e2:	b083      	sub	sp, #12
  4008e4:	af00      	add	r7, sp, #0
  4008e6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4008e8:	687b      	ldr	r3, [r7, #4]
  4008ea:	685b      	ldr	r3, [r3, #4]
  4008ec:	f043 0210 	orr.w	r2, r3, #16
  4008f0:	687b      	ldr	r3, [r7, #4]
  4008f2:	605a      	str	r2, [r3, #4]
}
  4008f4:	bf00      	nop
  4008f6:	370c      	adds	r7, #12
  4008f8:	46bd      	mov	sp, r7
  4008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008fe:	4770      	bx	lr

00400900 <spi_rw>:
/** Fast CS macro. */
#define SPI_ASSERT_CS()		do {PIOD->PIO_CODR = (1 << 25);} while(0)
#define SPI_DEASSERT_CS()	do {PIOD->PIO_SODR = (1 << 25);} while(0)

static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
  400900:	b590      	push	{r4, r7, lr}
  400902:	b089      	sub	sp, #36	; 0x24
  400904:	af00      	add	r7, sp, #0
  400906:	60f8      	str	r0, [r7, #12]
  400908:	60b9      	str	r1, [r7, #8]
  40090a:	4613      	mov	r3, r2
  40090c:	80fb      	strh	r3, [r7, #6]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  40090e:	2300      	movs	r3, #0
  400910:	76fb      	strb	r3, [r7, #27]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400912:	2300      	movs	r3, #0
  400914:	77fb      	strb	r3, [r7, #31]
  400916:	2300      	movs	r3, #0
  400918:	77bb      	strb	r3, [r7, #30]
	uint16_t txd_data = 0;
  40091a:	2300      	movs	r3, #0
  40091c:	83bb      	strh	r3, [r7, #28]
	uint16_t rxd_data = 0;
  40091e:	2300      	movs	r3, #0
  400920:	833b      	strh	r3, [r7, #24]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  400922:	68fb      	ldr	r3, [r7, #12]
  400924:	2b00      	cmp	r3, #0
  400926:	d105      	bne.n	400934 <spi_rw+0x34>
		pu8Mosi = &u8Dummy;
  400928:	f107 031b 	add.w	r3, r7, #27
  40092c:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
  40092e:	2301      	movs	r3, #1
  400930:	77fb      	strb	r3, [r7, #31]
  400932:	e00b      	b.n	40094c <spi_rw+0x4c>
	}
	else if(!pu8Miso) {
  400934:	68bb      	ldr	r3, [r7, #8]
  400936:	2b00      	cmp	r3, #0
  400938:	d105      	bne.n	400946 <spi_rw+0x46>
		pu8Miso = &u8Dummy;
  40093a:	f107 031b 	add.w	r3, r7, #27
  40093e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
  400940:	2301      	movs	r3, #1
  400942:	77bb      	strb	r3, [r7, #30]
  400944:	e002      	b.n	40094c <spi_rw+0x4c>
	}
	else {
		return M2M_ERR_BUS_FAIL;
  400946:	f06f 0305 	mvn.w	r3, #5
  40094a:	e030      	b.n	4009ae <spi_rw+0xae>
	}
	
	SPI_ASSERT_CS();
  40094c:	4b1a      	ldr	r3, [pc, #104]	; (4009b8 <spi_rw+0xb8>)
  40094e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400952:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  400954:	e023      	b.n	40099e <spi_rw+0x9e>
		txd_data = *pu8Mosi;
  400956:	68fb      	ldr	r3, [r7, #12]
  400958:	781b      	ldrb	r3, [r3, #0]
  40095a:	83bb      	strh	r3, [r7, #28]
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40095c:	8bb9      	ldrh	r1, [r7, #28]
  40095e:	2300      	movs	r3, #0
  400960:	2200      	movs	r2, #0
  400962:	4816      	ldr	r0, [pc, #88]	; (4009bc <spi_rw+0xbc>)
  400964:	4c16      	ldr	r4, [pc, #88]	; (4009c0 <spi_rw+0xc0>)
  400966:	47a0      	blx	r4
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400968:	f107 0217 	add.w	r2, r7, #23
  40096c:	f107 0318 	add.w	r3, r7, #24
  400970:	4619      	mov	r1, r3
  400972:	4812      	ldr	r0, [pc, #72]	; (4009bc <spi_rw+0xbc>)
  400974:	4b13      	ldr	r3, [pc, #76]	; (4009c4 <spi_rw+0xc4>)
  400976:	4798      	blx	r3
		*pu8Miso = rxd_data;
  400978:	8b3b      	ldrh	r3, [r7, #24]
  40097a:	b2da      	uxtb	r2, r3
  40097c:	68bb      	ldr	r3, [r7, #8]
  40097e:	701a      	strb	r2, [r3, #0]

		u16Sz--;
  400980:	88fb      	ldrh	r3, [r7, #6]
  400982:	3b01      	subs	r3, #1
  400984:	80fb      	strh	r3, [r7, #6]
		if (!u8SkipMiso)
  400986:	7fbb      	ldrb	r3, [r7, #30]
  400988:	2b00      	cmp	r3, #0
  40098a:	d102      	bne.n	400992 <spi_rw+0x92>
			pu8Miso++;
  40098c:	68bb      	ldr	r3, [r7, #8]
  40098e:	3301      	adds	r3, #1
  400990:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
  400992:	7ffb      	ldrb	r3, [r7, #31]
  400994:	2b00      	cmp	r3, #0
  400996:	d102      	bne.n	40099e <spi_rw+0x9e>
			pu8Mosi++;
  400998:	68fb      	ldr	r3, [r7, #12]
  40099a:	3301      	adds	r3, #1
  40099c:	60fb      	str	r3, [r7, #12]
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  40099e:	88fb      	ldrh	r3, [r7, #6]
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d1d8      	bne.n	400956 <spi_rw+0x56>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  4009a4:	4b04      	ldr	r3, [pc, #16]	; (4009b8 <spi_rw+0xb8>)
  4009a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4009aa:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  4009ac:	2300      	movs	r3, #0
}
  4009ae:	4618      	mov	r0, r3
  4009b0:	3724      	adds	r7, #36	; 0x24
  4009b2:	46bd      	mov	sp, r7
  4009b4:	bd90      	pop	{r4, r7, pc}
  4009b6:	bf00      	nop
  4009b8:	400e1400 	.word	0x400e1400
  4009bc:	40008000 	.word	0x40008000
  4009c0:	00406119 	.word	0x00406119
  4009c4:	004060a9 	.word	0x004060a9

004009c8 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4009c8:	b590      	push	{r4, r7, lr}
  4009ca:	b085      	sub	sp, #20
  4009cc:	af00      	add	r7, sp, #0
  4009ce:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
  4009d0:	2300      	movs	r3, #0
  4009d2:	73fb      	strb	r3, [r7, #15]
		}
	}

#elif CONF_WINC_USE_SPI
	/* Configure SPI pins. */
	ioport_set_pin_mode(CONF_WINC_SPI_MISO_GPIO, CONF_WINC_SPI_MISO_FLAGS);
  4009d4:	2101      	movs	r1, #1
  4009d6:	2074      	movs	r0, #116	; 0x74
  4009d8:	4b33      	ldr	r3, [pc, #204]	; (400aa8 <nm_bus_init+0xe0>)
  4009da:	4798      	blx	r3
	ioport_set_pin_mode(CONF_WINC_SPI_MOSI_GPIO, CONF_WINC_SPI_MOSI_FLAGS);
  4009dc:	2101      	movs	r1, #1
  4009de:	2075      	movs	r0, #117	; 0x75
  4009e0:	4b31      	ldr	r3, [pc, #196]	; (400aa8 <nm_bus_init+0xe0>)
  4009e2:	4798      	blx	r3
	ioport_set_pin_mode(CONF_WINC_SPI_CLK_GPIO, CONF_WINC_SPI_CLK_FLAGS);
  4009e4:	2101      	movs	r1, #1
  4009e6:	2076      	movs	r0, #118	; 0x76
  4009e8:	4b2f      	ldr	r3, [pc, #188]	; (400aa8 <nm_bus_init+0xe0>)
  4009ea:	4798      	blx	r3
	//ioport_set_pin_mode(CONF_WINC_SPI_CS_GPIO, CONF_WINC_SPI_CS_FLAGS);

	ioport_disable_pin(CONF_WINC_SPI_MISO_GPIO);
  4009ec:	2074      	movs	r0, #116	; 0x74
  4009ee:	4b2f      	ldr	r3, [pc, #188]	; (400aac <nm_bus_init+0xe4>)
  4009f0:	4798      	blx	r3
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
  4009f2:	2075      	movs	r0, #117	; 0x75
  4009f4:	4b2d      	ldr	r3, [pc, #180]	; (400aac <nm_bus_init+0xe4>)
  4009f6:	4798      	blx	r3
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
  4009f8:	2076      	movs	r0, #118	; 0x76
  4009fa:	4b2c      	ldr	r3, [pc, #176]	; (400aac <nm_bus_init+0xe4>)
  4009fc:	4798      	blx	r3
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
  4009fe:	2079      	movs	r0, #121	; 0x79
  400a00:	4b2a      	ldr	r3, [pc, #168]	; (400aac <nm_bus_init+0xe4>)
  400a02:	4798      	blx	r3
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  400a04:	4b2a      	ldr	r3, [pc, #168]	; (400ab0 <nm_bus_init+0xe8>)
  400a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a0a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER = (1<<25);
  400a0c:	4b28      	ldr	r3, [pc, #160]	; (400ab0 <nm_bus_init+0xe8>)
  400a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a12:	611a      	str	r2, [r3, #16]
	SPI_DEASSERT_CS();
  400a14:	4b26      	ldr	r3, [pc, #152]	; (400ab0 <nm_bus_init+0xe8>)
  400a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a1a:	631a      	str	r2, [r3, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  400a1c:	4825      	ldr	r0, [pc, #148]	; (400ab4 <nm_bus_init+0xec>)
  400a1e:	4b26      	ldr	r3, [pc, #152]	; (400ab8 <nm_bus_init+0xf0>)
  400a20:	4798      	blx	r3
	spi_disable(CONF_WINC_SPI);
  400a22:	4824      	ldr	r0, [pc, #144]	; (400ab4 <nm_bus_init+0xec>)
  400a24:	4b25      	ldr	r3, [pc, #148]	; (400abc <nm_bus_init+0xf4>)
  400a26:	4798      	blx	r3
	spi_reset(CONF_WINC_SPI);
  400a28:	4822      	ldr	r0, [pc, #136]	; (400ab4 <nm_bus_init+0xec>)
  400a2a:	4b25      	ldr	r3, [pc, #148]	; (400ac0 <nm_bus_init+0xf8>)
  400a2c:	4798      	blx	r3
	spi_set_master_mode(CONF_WINC_SPI);
  400a2e:	4821      	ldr	r0, [pc, #132]	; (400ab4 <nm_bus_init+0xec>)
  400a30:	4b24      	ldr	r3, [pc, #144]	; (400ac4 <nm_bus_init+0xfc>)
  400a32:	4798      	blx	r3
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
  400a34:	481f      	ldr	r0, [pc, #124]	; (400ab4 <nm_bus_init+0xec>)
  400a36:	4b24      	ldr	r3, [pc, #144]	; (400ac8 <nm_bus_init+0x100>)
  400a38:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  400a3a:	2101      	movs	r1, #1
  400a3c:	481d      	ldr	r0, [pc, #116]	; (400ab4 <nm_bus_init+0xec>)
  400a3e:	4b23      	ldr	r3, [pc, #140]	; (400acc <nm_bus_init+0x104>)
  400a40:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  400a42:	2200      	movs	r2, #0
  400a44:	2101      	movs	r1, #1
  400a46:	481b      	ldr	r0, [pc, #108]	; (400ab4 <nm_bus_init+0xec>)
  400a48:	4b21      	ldr	r3, [pc, #132]	; (400ad0 <nm_bus_init+0x108>)
  400a4a:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  400a4c:	2201      	movs	r2, #1
  400a4e:	2101      	movs	r1, #1
  400a50:	4818      	ldr	r0, [pc, #96]	; (400ab4 <nm_bus_init+0xec>)
  400a52:	4b20      	ldr	r3, [pc, #128]	; (400ad4 <nm_bus_init+0x10c>)
  400a54:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  400a56:	2200      	movs	r2, #0
  400a58:	2101      	movs	r1, #1
  400a5a:	4816      	ldr	r0, [pc, #88]	; (400ab4 <nm_bus_init+0xec>)
  400a5c:	4b1e      	ldr	r3, [pc, #120]	; (400ad8 <nm_bus_init+0x110>)
  400a5e:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  400a60:	4b1e      	ldr	r3, [pc, #120]	; (400adc <nm_bus_init+0x114>)
  400a62:	4798      	blx	r3
  400a64:	4603      	mov	r3, r0
  400a66:	4619      	mov	r1, r3
  400a68:	481d      	ldr	r0, [pc, #116]	; (400ae0 <nm_bus_init+0x118>)
  400a6a:	4b1e      	ldr	r3, [pc, #120]	; (400ae4 <nm_bus_init+0x11c>)
  400a6c:	4798      	blx	r3
  400a6e:	4603      	mov	r3, r0
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  400a70:	b2db      	uxtb	r3, r3
  400a72:	461a      	mov	r2, r3
  400a74:	2101      	movs	r1, #1
  400a76:	480f      	ldr	r0, [pc, #60]	; (400ab4 <nm_bus_init+0xec>)
  400a78:	4b1b      	ldr	r3, [pc, #108]	; (400ae8 <nm_bus_init+0x120>)
  400a7a:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  400a7c:	2300      	movs	r3, #0
  400a7e:	2200      	movs	r2, #0
  400a80:	2101      	movs	r1, #1
  400a82:	480c      	ldr	r0, [pc, #48]	; (400ab4 <nm_bus_init+0xec>)
  400a84:	4c19      	ldr	r4, [pc, #100]	; (400aec <nm_bus_init+0x124>)
  400a86:	47a0      	blx	r4
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
  400a88:	480a      	ldr	r0, [pc, #40]	; (400ab4 <nm_bus_init+0xec>)
  400a8a:	4b19      	ldr	r3, [pc, #100]	; (400af0 <nm_bus_init+0x128>)
  400a8c:	4798      	blx	r3
	
	SPI_DEASSERT_CS();
  400a8e:	4b08      	ldr	r3, [pc, #32]	; (400ab0 <nm_bus_init+0xe8>)
  400a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a94:	631a      	str	r2, [r3, #48]	; 0x30
	nm_bsp_reset();
  400a96:	4b17      	ldr	r3, [pc, #92]	; (400af4 <nm_bus_init+0x12c>)
  400a98:	4798      	blx	r3
#endif
	return result;
  400a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  400a9e:	4618      	mov	r0, r3
  400aa0:	3714      	adds	r7, #20
  400aa2:	46bd      	mov	sp, r7
  400aa4:	bd90      	pop	{r4, r7, pc}
  400aa6:	bf00      	nop
  400aa8:	004006c9 	.word	0x004006c9
  400aac:	0040067d 	.word	0x0040067d
  400ab0:	400e1400 	.word	0x400e1400
  400ab4:	40008000 	.word	0x40008000
  400ab8:	00406039 	.word	0x00406039
  400abc:	004008a5 	.word	0x004008a5
  400ac0:	0040086d 	.word	0x0040086d
  400ac4:	004008c1 	.word	0x004008c1
  400ac8:	004008e1 	.word	0x004008e1
  400acc:	00406075 	.word	0x00406075
  400ad0:	00406199 	.word	0x00406199
  400ad4:	004061e9 	.word	0x004061e9
  400ad8:	00406239 	.word	0x00406239
  400adc:	00400669 	.word	0x00400669
  400ae0:	02dc6c00 	.word	0x02dc6c00
  400ae4:	00406285 	.word	0x00406285
  400ae8:	004062c1 	.word	0x004062c1
  400aec:	00406321 	.word	0x00406321
  400af0:	00400889 	.word	0x00400889
  400af4:	00400469 	.word	0x00400469

00400af8 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400af8:	b580      	push	{r7, lr}
  400afa:	b084      	sub	sp, #16
  400afc:	af00      	add	r7, sp, #0
  400afe:	4603      	mov	r3, r0
  400b00:	6039      	str	r1, [r7, #0]
  400b02:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
  400b04:	2300      	movs	r3, #0
  400b06:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
  400b08:	79fb      	ldrb	r3, [r7, #7]
  400b0a:	2b03      	cmp	r3, #3
  400b0c:	d10d      	bne.n	400b2a <nm_bus_ioctl+0x32>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
  400b0e:	683b      	ldr	r3, [r7, #0]
  400b10:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  400b12:	68bb      	ldr	r3, [r7, #8]
  400b14:	6818      	ldr	r0, [r3, #0]
  400b16:	68bb      	ldr	r3, [r7, #8]
  400b18:	6859      	ldr	r1, [r3, #4]
  400b1a:	68bb      	ldr	r3, [r7, #8]
  400b1c:	891b      	ldrh	r3, [r3, #8]
  400b1e:	461a      	mov	r2, r3
  400b20:	4b0c      	ldr	r3, [pc, #48]	; (400b54 <nm_bus_ioctl+0x5c>)
  400b22:	4798      	blx	r3
  400b24:	4603      	mov	r3, r0
  400b26:	73fb      	strb	r3, [r7, #15]
		}
		break;
  400b28:	e00e      	b.n	400b48 <nm_bus_ioctl+0x50>
#endif
		default:
			s8Ret = -1;
  400b2a:	23ff      	movs	r3, #255	; 0xff
  400b2c:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("Invalid IOCTL command!\n");
  400b2e:	f240 121f 	movw	r2, #287	; 0x11f
  400b32:	4909      	ldr	r1, [pc, #36]	; (400b58 <nm_bus_ioctl+0x60>)
  400b34:	4809      	ldr	r0, [pc, #36]	; (400b5c <nm_bus_ioctl+0x64>)
  400b36:	4b0a      	ldr	r3, [pc, #40]	; (400b60 <nm_bus_ioctl+0x68>)
  400b38:	4798      	blx	r3
  400b3a:	480a      	ldr	r0, [pc, #40]	; (400b64 <nm_bus_ioctl+0x6c>)
  400b3c:	4b08      	ldr	r3, [pc, #32]	; (400b60 <nm_bus_ioctl+0x68>)
  400b3e:	4798      	blx	r3
  400b40:	4809      	ldr	r0, [pc, #36]	; (400b68 <nm_bus_ioctl+0x70>)
  400b42:	4b07      	ldr	r3, [pc, #28]	; (400b60 <nm_bus_ioctl+0x68>)
  400b44:	4798      	blx	r3
			break;
  400b46:	bf00      	nop
	}

	return s8Ret;
  400b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  400b4c:	4618      	mov	r0, r3
  400b4e:	3710      	adds	r7, #16
  400b50:	46bd      	mov	sp, r7
  400b52:	bd80      	pop	{r7, pc}
  400b54:	00400901 	.word	0x00400901
  400b58:	0040dce4 	.word	0x0040dce4
  400b5c:	0040dcb4 	.word	0x0040dcb4
  400b60:	004078bd 	.word	0x004078bd
  400b64:	0040dcc8 	.word	0x0040dcc8
  400b68:	0040dce0 	.word	0x0040dce0

00400b6c <nm_bus_deinit>:
/*
 *	@fn		nm_bus_deinit
 *	@brief	De-initialize the bus wrapper
 */
sint8 nm_bus_deinit(void)
{
  400b6c:	b580      	push	{r7, lr}
  400b6e:	af00      	add	r7, sp, #0
	spi_disable(CONF_WINC_SPI);
  400b70:	480a      	ldr	r0, [pc, #40]	; (400b9c <nm_bus_deinit+0x30>)
  400b72:	4b0b      	ldr	r3, [pc, #44]	; (400ba0 <nm_bus_deinit+0x34>)
  400b74:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
  400b76:	2100      	movs	r1, #0
  400b78:	2075      	movs	r0, #117	; 0x75
  400b7a:	4b0a      	ldr	r3, [pc, #40]	; (400ba4 <nm_bus_deinit+0x38>)
  400b7c:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
  400b7e:	2100      	movs	r1, #0
  400b80:	2074      	movs	r0, #116	; 0x74
  400b82:	4b08      	ldr	r3, [pc, #32]	; (400ba4 <nm_bus_deinit+0x38>)
  400b84:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
  400b86:	2100      	movs	r1, #0
  400b88:	2076      	movs	r0, #118	; 0x76
  400b8a:	4b06      	ldr	r3, [pc, #24]	; (400ba4 <nm_bus_deinit+0x38>)
  400b8c:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
  400b8e:	2100      	movs	r1, #0
  400b90:	2079      	movs	r0, #121	; 0x79
  400b92:	4b04      	ldr	r3, [pc, #16]	; (400ba4 <nm_bus_deinit+0x38>)
  400b94:	4798      	blx	r3
	return M2M_SUCCESS;
  400b96:	2300      	movs	r3, #0
}
  400b98:	4618      	mov	r0, r3
  400b9a:	bd80      	pop	{r7, pc}
  400b9c:	40008000 	.word	0x40008000
  400ba0:	004008a5 	.word	0x004008a5
  400ba4:	004007e5 	.word	0x004007e5

00400ba8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
  400ba8:	b480      	push	{r7}
  400baa:	b085      	sub	sp, #20
  400bac:	af00      	add	r7, sp, #0
  400bae:	60f8      	str	r0, [r7, #12]
  400bb0:	60b9      	str	r1, [r7, #8]
  400bb2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
  400bb4:	687b      	ldr	r3, [r7, #4]
  400bb6:	2b00      	cmp	r3, #0
  400bb8:	d010      	beq.n	400bdc <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
  400bba:	68bb      	ldr	r3, [r7, #8]
  400bbc:	781a      	ldrb	r2, [r3, #0]
  400bbe:	68fb      	ldr	r3, [r7, #12]
  400bc0:	701a      	strb	r2, [r3, #0]
		pDst++;
  400bc2:	68fb      	ldr	r3, [r7, #12]
  400bc4:	3301      	adds	r3, #1
  400bc6:	60fb      	str	r3, [r7, #12]
		pSrc++;
  400bc8:	68bb      	ldr	r3, [r7, #8]
  400bca:	3301      	adds	r3, #1
  400bcc:	60bb      	str	r3, [r7, #8]
	}while(--sz);
  400bce:	687b      	ldr	r3, [r7, #4]
  400bd0:	3b01      	subs	r3, #1
  400bd2:	607b      	str	r3, [r7, #4]
  400bd4:	687b      	ldr	r3, [r7, #4]
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	d1ef      	bne.n	400bba <m2m_memcpy+0x12>
  400bda:	e000      	b.n	400bde <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  400bdc:	bf00      	nop
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
  400bde:	3714      	adds	r7, #20
  400be0:	46bd      	mov	sp, r7
  400be2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be6:	4770      	bx	lr

00400be8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
  400be8:	b480      	push	{r7}
  400bea:	b085      	sub	sp, #20
  400bec:	af00      	add	r7, sp, #0
  400bee:	60f8      	str	r0, [r7, #12]
  400bf0:	460b      	mov	r3, r1
  400bf2:	607a      	str	r2, [r7, #4]
  400bf4:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
  400bf6:	687b      	ldr	r3, [r7, #4]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	d00c      	beq.n	400c16 <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
  400bfc:	68fb      	ldr	r3, [r7, #12]
  400bfe:	7afa      	ldrb	r2, [r7, #11]
  400c00:	701a      	strb	r2, [r3, #0]
		pBuf++;
  400c02:	68fb      	ldr	r3, [r7, #12]
  400c04:	3301      	adds	r3, #1
  400c06:	60fb      	str	r3, [r7, #12]
	}while(--sz);
  400c08:	687b      	ldr	r3, [r7, #4]
  400c0a:	3b01      	subs	r3, #1
  400c0c:	607b      	str	r3, [r7, #4]
  400c0e:	687b      	ldr	r3, [r7, #4]
  400c10:	2b00      	cmp	r3, #0
  400c12:	d1f3      	bne.n	400bfc <m2m_memset+0x14>
  400c14:	e000      	b.n	400c18 <m2m_memset+0x30>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  400c16:	bf00      	nop
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
  400c18:	3714      	adds	r7, #20
  400c1a:	46bd      	mov	sp, r7
  400c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop

00400c24 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
  400c24:	b480      	push	{r7}
  400c26:	b085      	sub	sp, #20
  400c28:	af00      	add	r7, sp, #0
  400c2a:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
  400c2c:	2300      	movs	r3, #0
  400c2e:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
  400c30:	e005      	b.n	400c3e <m2m_strlen+0x1a>
	{
		u16StrLen ++;
  400c32:	89fb      	ldrh	r3, [r7, #14]
  400c34:	3301      	adds	r3, #1
  400c36:	81fb      	strh	r3, [r7, #14]
		pcStr++;
  400c38:	687b      	ldr	r3, [r7, #4]
  400c3a:	3301      	adds	r3, #1
  400c3c:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  400c3e:	687b      	ldr	r3, [r7, #4]
  400c40:	781b      	ldrb	r3, [r3, #0]
  400c42:	2b00      	cmp	r3, #0
  400c44:	d1f5      	bne.n	400c32 <m2m_strlen+0xe>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
  400c46:	89fb      	ldrh	r3, [r7, #14]
}
  400c48:	4618      	mov	r0, r3
  400c4a:	3714      	adds	r7, #20
  400c4c:	46bd      	mov	sp, r7
  400c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c52:	4770      	bx	lr

00400c54 <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
  400c54:	b480      	push	{r7}
  400c56:	af00      	add	r7, sp, #0
	gu8Interrupt++;
  400c58:	4b05      	ldr	r3, [pc, #20]	; (400c70 <isr+0x1c>)
  400c5a:	781b      	ldrb	r3, [r3, #0]
  400c5c:	b2db      	uxtb	r3, r3
  400c5e:	3301      	adds	r3, #1
  400c60:	b2da      	uxtb	r2, r3
  400c62:	4b03      	ldr	r3, [pc, #12]	; (400c70 <isr+0x1c>)
  400c64:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
  400c66:	bf00      	nop
  400c68:	46bd      	mov	sp, r7
  400c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c6e:	4770      	bx	lr
  400c70:	20400967 	.word	0x20400967

00400c74 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
  400c74:	b580      	push	{r7, lr}
  400c76:	b082      	sub	sp, #8
  400c78:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
  400c7a:	2300      	movs	r3, #0
  400c7c:	71fb      	strb	r3, [r7, #7]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  400c7e:	2001      	movs	r0, #1
  400c80:	4b12      	ldr	r3, [pc, #72]	; (400ccc <hif_set_rx_done+0x58>)
  400c82:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400c84:	463b      	mov	r3, r7
  400c86:	4619      	mov	r1, r3
  400c88:	f241 0070 	movw	r0, #4208	; 0x1070
  400c8c:	4b10      	ldr	r3, [pc, #64]	; (400cd0 <hif_set_rx_done+0x5c>)
  400c8e:	4798      	blx	r3
  400c90:	4603      	mov	r3, r0
  400c92:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
  400c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c98:	2b00      	cmp	r3, #0
  400c9a:	d10f      	bne.n	400cbc <hif_set_rx_done+0x48>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  400c9c:	683b      	ldr	r3, [r7, #0]
  400c9e:	f043 0302 	orr.w	r3, r3, #2
  400ca2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  400ca4:	683b      	ldr	r3, [r7, #0]
  400ca6:	4619      	mov	r1, r3
  400ca8:	f241 0070 	movw	r0, #4208	; 0x1070
  400cac:	4b09      	ldr	r3, [pc, #36]	; (400cd4 <hif_set_rx_done+0x60>)
  400cae:	4798      	blx	r3
  400cb0:	4603      	mov	r3, r0
  400cb2:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
  400cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400cb8:	2b00      	cmp	r3, #0
  400cba:	e000      	b.n	400cbe <hif_set_rx_done+0x4a>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
  400cbc:	bf00      	nop
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
  400cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
  400cc2:	4618      	mov	r0, r3
  400cc4:	3708      	adds	r7, #8
  400cc6:	46bd      	mov	sp, r7
  400cc8:	bd80      	pop	{r7, pc}
  400cca:	bf00      	nop
  400ccc:	00400599 	.word	0x00400599
  400cd0:	00402c25 	.word	0x00402c25
  400cd4:	00402c45 	.word	0x00402c45

00400cd8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400cd8:	b480      	push	{r7}
  400cda:	b083      	sub	sp, #12
  400cdc:	af00      	add	r7, sp, #0
  400cde:	4603      	mov	r3, r0
  400ce0:	603a      	str	r2, [r7, #0]
  400ce2:	71fb      	strb	r3, [r7, #7]
  400ce4:	460b      	mov	r3, r1
  400ce6:	80bb      	strh	r3, [r7, #4]


}
  400ce8:	bf00      	nop
  400cea:	370c      	adds	r7, #12
  400cec:	46bd      	mov	sp, r7
  400cee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cf2:	4770      	bx	lr

00400cf4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  400cf4:	b580      	push	{r7, lr}
  400cf6:	b082      	sub	sp, #8
  400cf8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  400cfa:	2300      	movs	r3, #0
  400cfc:	71fb      	strb	r3, [r7, #7]
	if(gu8ChipSleep == 0)
  400cfe:	4b1a      	ldr	r3, [pc, #104]	; (400d68 <hif_chip_wake+0x74>)
  400d00:	781b      	ldrb	r3, [r3, #0]
  400d02:	b2db      	uxtb	r3, r3
  400d04:	2b00      	cmp	r3, #0
  400d06:	d11d      	bne.n	400d44 <hif_chip_wake+0x50>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400d08:	4b18      	ldr	r3, [pc, #96]	; (400d6c <hif_chip_wake+0x78>)
  400d0a:	781b      	ldrb	r3, [r3, #0]
  400d0c:	b2db      	uxtb	r3, r3
  400d0e:	2b03      	cmp	r3, #3
  400d10:	d004      	beq.n	400d1c <hif_chip_wake+0x28>
  400d12:	4b16      	ldr	r3, [pc, #88]	; (400d6c <hif_chip_wake+0x78>)
  400d14:	781b      	ldrb	r3, [r3, #0]
  400d16:	b2db      	uxtb	r3, r3
  400d18:	2b04      	cmp	r3, #4
  400d1a:	d113      	bne.n	400d44 <hif_chip_wake+0x50>
		{
			ret = nm_clkless_wake();
  400d1c:	4b14      	ldr	r3, [pc, #80]	; (400d70 <hif_chip_wake+0x7c>)
  400d1e:	4798      	blx	r3
  400d20:	4603      	mov	r3, r0
  400d22:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
  400d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400d28:	2b00      	cmp	r3, #0
  400d2a:	d113      	bne.n	400d54 <hif_chip_wake+0x60>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  400d2c:	f245 6178 	movw	r1, #22136	; 0x5678
  400d30:	f241 0074 	movw	r0, #4212	; 0x1074
  400d34:	4b0f      	ldr	r3, [pc, #60]	; (400d74 <hif_chip_wake+0x80>)
  400d36:	4798      	blx	r3
  400d38:	4603      	mov	r3, r0
  400d3a:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
  400d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400d40:	2b00      	cmp	r3, #0
  400d42:	d109      	bne.n	400d58 <hif_chip_wake+0x64>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  400d44:	4b08      	ldr	r3, [pc, #32]	; (400d68 <hif_chip_wake+0x74>)
  400d46:	781b      	ldrb	r3, [r3, #0]
  400d48:	b2db      	uxtb	r3, r3
  400d4a:	3301      	adds	r3, #1
  400d4c:	b2da      	uxtb	r2, r3
  400d4e:	4b06      	ldr	r3, [pc, #24]	; (400d68 <hif_chip_wake+0x74>)
  400d50:	701a      	strb	r2, [r3, #0]
  400d52:	e002      	b.n	400d5a <hif_chip_wake+0x66>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
  400d54:	bf00      	nop
  400d56:	e000      	b.n	400d5a <hif_chip_wake+0x66>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
  400d58:	bf00      	nop
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
  400d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  400d5e:	4618      	mov	r0, r3
  400d60:	3708      	adds	r7, #8
  400d62:	46bd      	mov	sp, r7
  400d64:	bd80      	pop	{r7, pc}
  400d66:	bf00      	nop
  400d68:	20400965 	.word	0x20400965
  400d6c:	20400964 	.word	0x20400964
  400d70:	00402431 	.word	0x00402431
  400d74:	00402c45 	.word	0x00402c45

00400d78 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  400d78:	b580      	push	{r7, lr}
  400d7a:	b082      	sub	sp, #8
  400d7c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  400d7e:	2300      	movs	r3, #0
  400d80:	71fb      	strb	r3, [r7, #7]

	if(gu8ChipSleep >= 1)
  400d82:	4b27      	ldr	r3, [pc, #156]	; (400e20 <hif_chip_sleep+0xa8>)
  400d84:	781b      	ldrb	r3, [r3, #0]
  400d86:	b2db      	uxtb	r3, r3
  400d88:	2b00      	cmp	r3, #0
  400d8a:	d006      	beq.n	400d9a <hif_chip_sleep+0x22>
	{
		gu8ChipSleep--;
  400d8c:	4b24      	ldr	r3, [pc, #144]	; (400e20 <hif_chip_sleep+0xa8>)
  400d8e:	781b      	ldrb	r3, [r3, #0]
  400d90:	b2db      	uxtb	r3, r3
  400d92:	3b01      	subs	r3, #1
  400d94:	b2da      	uxtb	r2, r3
  400d96:	4b22      	ldr	r3, [pc, #136]	; (400e20 <hif_chip_sleep+0xa8>)
  400d98:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
  400d9a:	4b21      	ldr	r3, [pc, #132]	; (400e20 <hif_chip_sleep+0xa8>)
  400d9c:	781b      	ldrb	r3, [r3, #0]
  400d9e:	b2db      	uxtb	r3, r3
  400da0:	2b00      	cmp	r3, #0
  400da2:	d136      	bne.n	400e12 <hif_chip_sleep+0x9a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400da4:	4b1f      	ldr	r3, [pc, #124]	; (400e24 <hif_chip_sleep+0xac>)
  400da6:	781b      	ldrb	r3, [r3, #0]
  400da8:	b2db      	uxtb	r3, r3
  400daa:	2b03      	cmp	r3, #3
  400dac:	d004      	beq.n	400db8 <hif_chip_sleep+0x40>
  400dae:	4b1d      	ldr	r3, [pc, #116]	; (400e24 <hif_chip_sleep+0xac>)
  400db0:	781b      	ldrb	r3, [r3, #0]
  400db2:	b2db      	uxtb	r3, r3
  400db4:	2b04      	cmp	r3, #4
  400db6:	d12c      	bne.n	400e12 <hif_chip_sleep+0x9a>
		{
			uint32 reg = 0;
  400db8:	2300      	movs	r3, #0
  400dba:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  400dbc:	f244 3121 	movw	r1, #17185	; 0x4321
  400dc0:	f241 0074 	movw	r0, #4212	; 0x1074
  400dc4:	4b18      	ldr	r3, [pc, #96]	; (400e28 <hif_chip_sleep+0xb0>)
  400dc6:	4798      	blx	r3
  400dc8:	4603      	mov	r3, r0
  400dca:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
  400dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400dd0:	2b00      	cmp	r3, #0
  400dd2:	d11b      	bne.n	400e0c <hif_chip_sleep+0x94>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  400dd4:	463b      	mov	r3, r7
  400dd6:	4619      	mov	r1, r3
  400dd8:	2001      	movs	r0, #1
  400dda:	4b14      	ldr	r3, [pc, #80]	; (400e2c <hif_chip_sleep+0xb4>)
  400ddc:	4798      	blx	r3
  400dde:	4603      	mov	r3, r0
  400de0:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
  400de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400de6:	2b00      	cmp	r3, #0
  400de8:	d112      	bne.n	400e10 <hif_chip_sleep+0x98>
			if(reg&0x2)
  400dea:	683b      	ldr	r3, [r7, #0]
  400dec:	f003 0302 	and.w	r3, r3, #2
  400df0:	2b00      	cmp	r3, #0
  400df2:	d00e      	beq.n	400e12 <hif_chip_sleep+0x9a>
			{
				reg &=~(1 << 1);
  400df4:	683b      	ldr	r3, [r7, #0]
  400df6:	f023 0302 	bic.w	r3, r3, #2
  400dfa:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
  400dfc:	683b      	ldr	r3, [r7, #0]
  400dfe:	4619      	mov	r1, r3
  400e00:	2001      	movs	r0, #1
  400e02:	4b09      	ldr	r3, [pc, #36]	; (400e28 <hif_chip_sleep+0xb0>)
  400e04:	4798      	blx	r3
  400e06:	4603      	mov	r3, r0
  400e08:	71fb      	strb	r3, [r7, #7]
  400e0a:	e002      	b.n	400e12 <hif_chip_sleep+0x9a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
  400e0c:	bf00      	nop
  400e0e:	e000      	b.n	400e12 <hif_chip_sleep+0x9a>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
  400e10:	bf00      	nop
		else
		{
		}
	}
ERR1:
	return ret;
  400e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  400e16:	4618      	mov	r0, r3
  400e18:	3708      	adds	r7, #8
  400e1a:	46bd      	mov	sp, r7
  400e1c:	bd80      	pop	{r7, pc}
  400e1e:	bf00      	nop
  400e20:	20400965 	.word	0x20400965
  400e24:	20400964 	.word	0x20400964
  400e28:	00402c45 	.word	0x00402c45
  400e2c:	00402c25 	.word	0x00402c25

00400e30 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  400e30:	b580      	push	{r7, lr}
  400e32:	b082      	sub	sp, #8
  400e34:	af00      	add	r7, sp, #0
  400e36:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
  400e38:	4b0d      	ldr	r3, [pc, #52]	; (400e70 <hif_init+0x40>)
  400e3a:	2200      	movs	r2, #0
  400e3c:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
  400e3e:	4b0d      	ldr	r3, [pc, #52]	; (400e74 <hif_init+0x44>)
  400e40:	2200      	movs	r2, #0
  400e42:	601a      	str	r2, [r3, #0]

	gu8ChipSleep = 0;
  400e44:	4b0c      	ldr	r3, [pc, #48]	; (400e78 <hif_init+0x48>)
  400e46:	2200      	movs	r2, #0
  400e48:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  400e4a:	4b0c      	ldr	r3, [pc, #48]	; (400e7c <hif_init+0x4c>)
  400e4c:	2200      	movs	r2, #0
  400e4e:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
  400e50:	4b0b      	ldr	r3, [pc, #44]	; (400e80 <hif_init+0x50>)
  400e52:	2200      	movs	r2, #0
  400e54:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
  400e56:	480b      	ldr	r0, [pc, #44]	; (400e84 <hif_init+0x54>)
  400e58:	4b0b      	ldr	r3, [pc, #44]	; (400e88 <hif_init+0x58>)
  400e5a:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  400e5c:	490b      	ldr	r1, [pc, #44]	; (400e8c <hif_init+0x5c>)
  400e5e:	2003      	movs	r0, #3
  400e60:	4b0b      	ldr	r3, [pc, #44]	; (400e90 <hif_init+0x60>)
  400e62:	4798      	blx	r3

	return M2M_SUCCESS;
  400e64:	2300      	movs	r3, #0
}
  400e66:	4618      	mov	r0, r3
  400e68:	3708      	adds	r7, #8
  400e6a:	46bd      	mov	sp, r7
  400e6c:	bd80      	pop	{r7, pc}
  400e6e:	bf00      	nop
  400e70:	20400968 	.word	0x20400968
  400e74:	2040096c 	.word	0x2040096c
  400e78:	20400965 	.word	0x20400965
  400e7c:	20400964 	.word	0x20400964
  400e80:	20400967 	.word	0x20400967
  400e84:	00400c55 	.word	0x00400c55
  400e88:	00400511 	.word	0x00400511
  400e8c:	00400cd9 	.word	0x00400cd9
  400e90:	0040165d 	.word	0x0040165d

00400e94 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  400e94:	b580      	push	{r7, lr}
  400e96:	b088      	sub	sp, #32
  400e98:	af00      	add	r7, sp, #0
  400e9a:	603a      	str	r2, [r7, #0]
  400e9c:	461a      	mov	r2, r3
  400e9e:	4603      	mov	r3, r0
  400ea0:	71fb      	strb	r3, [r7, #7]
  400ea2:	460b      	mov	r3, r1
  400ea4:	71bb      	strb	r3, [r7, #6]
  400ea6:	4613      	mov	r3, r2
  400ea8:	80bb      	strh	r3, [r7, #4]
	sint8		ret = M2M_ERR_SEND;
  400eaa:	23ff      	movs	r3, #255	; 0xff
  400eac:	77fb      	strb	r3, [r7, #31]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  400eae:	79bb      	ldrb	r3, [r7, #6]
  400eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400eb4:	b2db      	uxtb	r3, r3
  400eb6:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
  400eb8:	79fb      	ldrb	r3, [r7, #7]
  400eba:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  400ebc:	2308      	movs	r3, #8
  400ebe:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
  400ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400ec2:	2b00      	cmp	r3, #0
  400ec4:	d009      	beq.n	400eda <hif_send+0x46>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  400ec6:	8b7b      	ldrh	r3, [r7, #26]
  400ec8:	b29a      	uxth	r2, r3
  400eca:	8e39      	ldrh	r1, [r7, #48]	; 0x30
  400ecc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  400ece:	440b      	add	r3, r1
  400ed0:	b29b      	uxth	r3, r3
  400ed2:	4413      	add	r3, r2
  400ed4:	b29b      	uxth	r3, r3
  400ed6:	837b      	strh	r3, [r7, #26]
  400ed8:	e005      	b.n	400ee6 <hif_send+0x52>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  400eda:	8b7b      	ldrh	r3, [r7, #26]
  400edc:	b29a      	uxth	r2, r3
  400ede:	88bb      	ldrh	r3, [r7, #4]
  400ee0:	4413      	add	r3, r2
  400ee2:	b29b      	uxth	r3, r3
  400ee4:	837b      	strh	r3, [r7, #26]
	}
	ret = hif_chip_wake();
  400ee6:	4b77      	ldr	r3, [pc, #476]	; (4010c4 <hif_send+0x230>)
  400ee8:	4798      	blx	r3
  400eea:	4603      	mov	r3, r0
  400eec:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
  400eee:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400ef2:	2b00      	cmp	r3, #0
  400ef4:	f040 80c5 	bne.w	401082 <hif_send+0x1ee>
	{
		volatile uint32 reg, dma_addr = 0;
  400ef8:	2300      	movs	r3, #0
  400efa:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
  400efc:	2300      	movs	r3, #0
  400efe:	81fb      	strh	r3, [r7, #14]

		reg = 0UL;
  400f00:	2300      	movs	r3, #0
  400f02:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
  400f04:	79fa      	ldrb	r2, [r7, #7]
  400f06:	697b      	ldr	r3, [r7, #20]
  400f08:	4313      	orrs	r3, r2
  400f0a:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
  400f0c:	79bb      	ldrb	r3, [r7, #6]
  400f0e:	021a      	lsls	r2, r3, #8
  400f10:	697b      	ldr	r3, [r7, #20]
  400f12:	4313      	orrs	r3, r2
  400f14:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
  400f16:	8b7b      	ldrh	r3, [r7, #26]
  400f18:	b29b      	uxth	r3, r3
  400f1a:	041a      	lsls	r2, r3, #16
  400f1c:	697b      	ldr	r3, [r7, #20]
  400f1e:	4313      	orrs	r3, r2
  400f20:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  400f22:	697b      	ldr	r3, [r7, #20]
  400f24:	4619      	mov	r1, r3
  400f26:	f241 008c 	movw	r0, #4236	; 0x108c
  400f2a:	4b67      	ldr	r3, [pc, #412]	; (4010c8 <hif_send+0x234>)
  400f2c:	4798      	blx	r3
  400f2e:	4603      	mov	r3, r0
  400f30:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
  400f32:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400f36:	2b00      	cmp	r3, #0
  400f38:	f040 80b5 	bne.w	4010a6 <hif_send+0x212>


		reg = 0;
  400f3c:	2300      	movs	r3, #0
  400f3e:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
  400f40:	697b      	ldr	r3, [r7, #20]
  400f42:	f043 0302 	orr.w	r3, r3, #2
  400f46:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400f48:	697b      	ldr	r3, [r7, #20]
  400f4a:	4619      	mov	r1, r3
  400f4c:	f241 0078 	movw	r0, #4216	; 0x1078
  400f50:	4b5d      	ldr	r3, [pc, #372]	; (4010c8 <hif_send+0x234>)
  400f52:	4798      	blx	r3
  400f54:	4603      	mov	r3, r0
  400f56:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
  400f58:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400f5c:	2b00      	cmp	r3, #0
  400f5e:	f040 80a4 	bne.w	4010aa <hif_send+0x216>
		dma_addr = 0;
  400f62:	2300      	movs	r3, #0
  400f64:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400f66:	2300      	movs	r3, #0
  400f68:	81fb      	strh	r3, [r7, #14]
  400f6a:	e025      	b.n	400fb8 <hif_send+0x124>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  400f6c:	f107 0314 	add.w	r3, r7, #20
  400f70:	4619      	mov	r1, r3
  400f72:	f241 0078 	movw	r0, #4216	; 0x1078
  400f76:	4b55      	ldr	r3, [pc, #340]	; (4010cc <hif_send+0x238>)
  400f78:	4798      	blx	r3
  400f7a:	4603      	mov	r3, r0
  400f7c:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
  400f7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400f82:	2b00      	cmp	r3, #0
  400f84:	d11e      	bne.n	400fc4 <hif_send+0x130>
			if (!(reg & 0x2))
  400f86:	697b      	ldr	r3, [r7, #20]
  400f88:	f003 0302 	and.w	r3, r3, #2
  400f8c:	2b00      	cmp	r3, #0
  400f8e:	d10e      	bne.n	400fae <hif_send+0x11a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  400f90:	f107 0310 	add.w	r3, r7, #16
  400f94:	4619      	mov	r1, r3
  400f96:	484e      	ldr	r0, [pc, #312]	; (4010d0 <hif_send+0x23c>)
  400f98:	4b4c      	ldr	r3, [pc, #304]	; (4010cc <hif_send+0x238>)
  400f9a:	4798      	blx	r3
  400f9c:	4603      	mov	r3, r0
  400f9e:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
  400fa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400fa4:	2b00      	cmp	r3, #0
  400fa6:	d00f      	beq.n	400fc8 <hif_send+0x134>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  400fa8:	2300      	movs	r3, #0
  400faa:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
  400fac:	e00c      	b.n	400fc8 <hif_send+0x134>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400fae:	89fb      	ldrh	r3, [r7, #14]
  400fb0:	b29b      	uxth	r3, r3
  400fb2:	3301      	adds	r3, #1
  400fb4:	b29b      	uxth	r3, r3
  400fb6:	81fb      	strh	r3, [r7, #14]
  400fb8:	89fb      	ldrh	r3, [r7, #14]
  400fba:	b29b      	uxth	r3, r3
  400fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400fc0:	d3d4      	bcc.n	400f6c <hif_send+0xd8>
  400fc2:	e002      	b.n	400fca <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
  400fc4:	bf00      	nop
  400fc6:	e000      	b.n	400fca <hif_send+0x136>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
  400fc8:	bf00      	nop
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  400fca:	693b      	ldr	r3, [r7, #16]
  400fcc:	2b00      	cmp	r3, #0
  400fce:	d055      	beq.n	40107c <hif_send+0x1e8>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  400fd0:	693b      	ldr	r3, [r7, #16]
  400fd2:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  400fd4:	8b7b      	ldrh	r3, [r7, #26]
  400fd6:	b29b      	uxth	r3, r3
  400fd8:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  400fda:	68bb      	ldr	r3, [r7, #8]
  400fdc:	f107 0118 	add.w	r1, r7, #24
  400fe0:	2208      	movs	r2, #8
  400fe2:	4618      	mov	r0, r3
  400fe4:	4b3b      	ldr	r3, [pc, #236]	; (4010d4 <hif_send+0x240>)
  400fe6:	4798      	blx	r3
  400fe8:	4603      	mov	r3, r0
  400fea:	77fb      	strb	r3, [r7, #31]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  400fec:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400ff0:	2b00      	cmp	r3, #0
  400ff2:	d15c      	bne.n	4010ae <hif_send+0x21a>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  400ff4:	68bb      	ldr	r3, [r7, #8]
  400ff6:	3308      	adds	r3, #8
  400ff8:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
  400ffa:	683b      	ldr	r3, [r7, #0]
  400ffc:	2b00      	cmp	r3, #0
  400ffe:	d00f      	beq.n	401020 <hif_send+0x18c>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  401000:	68bb      	ldr	r3, [r7, #8]
  401002:	88ba      	ldrh	r2, [r7, #4]
  401004:	6839      	ldr	r1, [r7, #0]
  401006:	4618      	mov	r0, r3
  401008:	4b32      	ldr	r3, [pc, #200]	; (4010d4 <hif_send+0x240>)
  40100a:	4798      	blx	r3
  40100c:	4603      	mov	r3, r0
  40100e:	77fb      	strb	r3, [r7, #31]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  401010:	f997 301f 	ldrsb.w	r3, [r7, #31]
  401014:	2b00      	cmp	r3, #0
  401016:	d14c      	bne.n	4010b2 <hif_send+0x21e>
				u32CurrAddr += u16CtrlBufSize;
  401018:	88ba      	ldrh	r2, [r7, #4]
  40101a:	68bb      	ldr	r3, [r7, #8]
  40101c:	4413      	add	r3, r2
  40101e:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
  401020:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401022:	2b00      	cmp	r3, #0
  401024:	d016      	beq.n	401054 <hif_send+0x1c0>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  401026:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
  401028:	88bb      	ldrh	r3, [r7, #4]
  40102a:	1ad3      	subs	r3, r2, r3
  40102c:	461a      	mov	r2, r3
  40102e:	68bb      	ldr	r3, [r7, #8]
  401030:	4413      	add	r3, r2
  401032:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  401034:	68bb      	ldr	r3, [r7, #8]
  401036:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  401038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  40103a:	4618      	mov	r0, r3
  40103c:	4b25      	ldr	r3, [pc, #148]	; (4010d4 <hif_send+0x240>)
  40103e:	4798      	blx	r3
  401040:	4603      	mov	r3, r0
  401042:	77fb      	strb	r3, [r7, #31]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  401044:	f997 301f 	ldrsb.w	r3, [r7, #31]
  401048:	2b00      	cmp	r3, #0
  40104a:	d134      	bne.n	4010b6 <hif_send+0x222>
				u32CurrAddr += u16DataSize;
  40104c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  40104e:	68bb      	ldr	r3, [r7, #8]
  401050:	4413      	add	r3, r2
  401052:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
  401054:	693b      	ldr	r3, [r7, #16]
  401056:	009b      	lsls	r3, r3, #2
  401058:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
  40105a:	697b      	ldr	r3, [r7, #20]
  40105c:	f043 0302 	orr.w	r3, r3, #2
  401060:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  401062:	697b      	ldr	r3, [r7, #20]
  401064:	4619      	mov	r1, r3
  401066:	f241 006c 	movw	r0, #4204	; 0x106c
  40106a:	4b17      	ldr	r3, [pc, #92]	; (4010c8 <hif_send+0x234>)
  40106c:	4798      	blx	r3
  40106e:	4603      	mov	r3, r0
  401070:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
  401072:	f997 301f 	ldrsb.w	r3, [r7, #31]
  401076:	2b00      	cmp	r3, #0
  401078:	d010      	beq.n	40109c <hif_send+0x208>
  40107a:	e01d      	b.n	4010b8 <hif_send+0x224>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  40107c:	23fd      	movs	r3, #253	; 0xfd
  40107e:	77fb      	strb	r3, [r7, #31]
			goto ERR1;
  401080:	e01a      	b.n	4010b8 <hif_send+0x224>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  401082:	f240 129f 	movw	r2, #415	; 0x19f
  401086:	4914      	ldr	r1, [pc, #80]	; (4010d8 <hif_send+0x244>)
  401088:	4814      	ldr	r0, [pc, #80]	; (4010dc <hif_send+0x248>)
  40108a:	4b15      	ldr	r3, [pc, #84]	; (4010e0 <hif_send+0x24c>)
  40108c:	4798      	blx	r3
  40108e:	4815      	ldr	r0, [pc, #84]	; (4010e4 <hif_send+0x250>)
  401090:	4b13      	ldr	r3, [pc, #76]	; (4010e0 <hif_send+0x24c>)
  401092:	4798      	blx	r3
  401094:	4814      	ldr	r0, [pc, #80]	; (4010e8 <hif_send+0x254>)
  401096:	4b12      	ldr	r3, [pc, #72]	; (4010e0 <hif_send+0x24c>)
  401098:	4798      	blx	r3
		goto ERR1;
  40109a:	e00d      	b.n	4010b8 <hif_send+0x224>
	}
	ret = hif_chip_sleep();
  40109c:	4b13      	ldr	r3, [pc, #76]	; (4010ec <hif_send+0x258>)
  40109e:	4798      	blx	r3
  4010a0:	4603      	mov	r3, r0
  4010a2:	77fb      	strb	r3, [r7, #31]
  4010a4:	e008      	b.n	4010b8 <hif_send+0x224>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
  4010a6:	bf00      	nop
  4010a8:	e006      	b.n	4010b8 <hif_send+0x224>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
  4010aa:	bf00      	nop
  4010ac:	e004      	b.n	4010b8 <hif_send+0x224>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4010ae:	bf00      	nop
  4010b0:	e002      	b.n	4010b8 <hif_send+0x224>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4010b2:	bf00      	nop
  4010b4:	e000      	b.n	4010b8 <hif_send+0x224>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4010b6:	bf00      	nop
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
  4010b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  4010bc:	4618      	mov	r0, r3
  4010be:	3720      	adds	r7, #32
  4010c0:	46bd      	mov	sp, r7
  4010c2:	bd80      	pop	{r7, pc}
  4010c4:	00400cf5 	.word	0x00400cf5
  4010c8:	00402c45 	.word	0x00402c45
  4010cc:	00402c25 	.word	0x00402c25
  4010d0:	00150400 	.word	0x00150400
  4010d4:	00402d4d 	.word	0x00402d4d
  4010d8:	0040df40 	.word	0x0040df40
  4010dc:	0040dcf4 	.word	0x0040dcf4
  4010e0:	004078bd 	.word	0x004078bd
  4010e4:	0040dd08 	.word	0x0040dd08
  4010e8:	0040dd28 	.word	0x0040dd28
  4010ec:	00400d79 	.word	0x00400d79

004010f0 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
  4010f0:	b590      	push	{r4, r7, lr}
  4010f2:	b087      	sub	sp, #28
  4010f4:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
  4010f6:	23fa      	movs	r3, #250	; 0xfa
  4010f8:	73fb      	strb	r3, [r7, #15]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4010fa:	4b9e      	ldr	r3, [pc, #632]	; (401374 <hif_isr+0x284>)
  4010fc:	4798      	blx	r3
  4010fe:	4603      	mov	r3, r0
  401100:	73fb      	strb	r3, [r7, #15]
	if(ret == M2M_SUCCESS)
  401102:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401106:	2b00      	cmp	r3, #0
  401108:	f040 817c 	bne.w	401404 <hif_isr+0x314>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  40110c:	f107 0308 	add.w	r3, r7, #8
  401110:	4619      	mov	r1, r3
  401112:	f241 0070 	movw	r0, #4208	; 0x1070
  401116:	4b98      	ldr	r3, [pc, #608]	; (401378 <hif_isr+0x288>)
  401118:	4798      	blx	r3
  40111a:	4603      	mov	r3, r0
  40111c:	73fb      	strb	r3, [r7, #15]
		if(M2M_SUCCESS == ret)
  40111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401122:	2b00      	cmp	r3, #0
  401124:	f040 8161 	bne.w	4013ea <hif_isr+0x2fa>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  401128:	68bb      	ldr	r3, [r7, #8]
  40112a:	f003 0301 	and.w	r3, r3, #1
  40112e:	2b00      	cmp	r3, #0
  401130:	f000 814c 	beq.w	4013cc <hif_isr+0x2dc>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  401134:	2000      	movs	r0, #0
  401136:	4b91      	ldr	r3, [pc, #580]	; (40137c <hif_isr+0x28c>)
  401138:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  40113a:	68bb      	ldr	r3, [r7, #8]
  40113c:	f023 0301 	bic.w	r3, r3, #1
  401140:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  401142:	68bb      	ldr	r3, [r7, #8]
  401144:	4619      	mov	r1, r3
  401146:	f241 0070 	movw	r0, #4208	; 0x1070
  40114a:	4b8d      	ldr	r3, [pc, #564]	; (401380 <hif_isr+0x290>)
  40114c:	4798      	blx	r3
  40114e:	4603      	mov	r3, r0
  401150:	73fb      	strb	r3, [r7, #15]
				if(ret != M2M_SUCCESS)goto ERR1;
  401152:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401156:	2b00      	cmp	r3, #0
  401158:	f040 8166 	bne.w	401428 <hif_isr+0x338>
				gu8HifSizeDone = 0;
  40115c:	4b89      	ldr	r3, [pc, #548]	; (401384 <hif_isr+0x294>)
  40115e:	2200      	movs	r2, #0
  401160:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  401162:	68bb      	ldr	r3, [r7, #8]
  401164:	089b      	lsrs	r3, r3, #2
  401166:	b29b      	uxth	r3, r3
  401168:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40116c:	81bb      	strh	r3, [r7, #12]
				if (size > 0) {
  40116e:	89bb      	ldrh	r3, [r7, #12]
  401170:	2b00      	cmp	r3, #0
  401172:	f000 80ef 	beq.w	401354 <hif_isr+0x264>
					uint32 address = 0;
  401176:	2300      	movs	r3, #0
  401178:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  40117a:	463b      	mov	r3, r7
  40117c:	4619      	mov	r1, r3
  40117e:	f241 0084 	movw	r0, #4228	; 0x1084
  401182:	4b7d      	ldr	r3, [pc, #500]	; (401378 <hif_isr+0x288>)
  401184:	4798      	blx	r3
  401186:	4603      	mov	r3, r0
  401188:	73fb      	strb	r3, [r7, #15]
					if(M2M_SUCCESS != ret)
  40118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40118e:	2b00      	cmp	r3, #0
  401190:	d00f      	beq.n	4011b2 <hif_isr+0xc2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  401192:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  401196:	497c      	ldr	r1, [pc, #496]	; (401388 <hif_isr+0x298>)
  401198:	487c      	ldr	r0, [pc, #496]	; (40138c <hif_isr+0x29c>)
  40119a:	4b7d      	ldr	r3, [pc, #500]	; (401390 <hif_isr+0x2a0>)
  40119c:	4798      	blx	r3
  40119e:	487d      	ldr	r0, [pc, #500]	; (401394 <hif_isr+0x2a4>)
  4011a0:	4b7b      	ldr	r3, [pc, #492]	; (401390 <hif_isr+0x2a0>)
  4011a2:	4798      	blx	r3
  4011a4:	487c      	ldr	r0, [pc, #496]	; (401398 <hif_isr+0x2a8>)
  4011a6:	4b7a      	ldr	r3, [pc, #488]	; (401390 <hif_isr+0x2a0>)
  4011a8:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
  4011aa:	2001      	movs	r0, #1
  4011ac:	4b73      	ldr	r3, [pc, #460]	; (40137c <hif_isr+0x28c>)
  4011ae:	4798      	blx	r3
						goto ERR1;
  4011b0:	e13b      	b.n	40142a <hif_isr+0x33a>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4011b2:	683b      	ldr	r3, [r7, #0]
  4011b4:	1d39      	adds	r1, r7, #4
  4011b6:	2204      	movs	r2, #4
  4011b8:	4618      	mov	r0, r3
  4011ba:	4b78      	ldr	r3, [pc, #480]	; (40139c <hif_isr+0x2ac>)
  4011bc:	4798      	blx	r3
  4011be:	4603      	mov	r3, r0
  4011c0:	73fb      	strb	r3, [r7, #15]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4011c2:	88fb      	ldrh	r3, [r7, #6]
  4011c4:	b29b      	uxth	r3, r3
  4011c6:	80fb      	strh	r3, [r7, #6]
					if(M2M_SUCCESS != ret)
  4011c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4011cc:	2b00      	cmp	r3, #0
  4011ce:	d00f      	beq.n	4011f0 <hif_isr+0x100>
					{
						M2M_ERR("(hif) address bus fail\n");
  4011d0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  4011d4:	496c      	ldr	r1, [pc, #432]	; (401388 <hif_isr+0x298>)
  4011d6:	486d      	ldr	r0, [pc, #436]	; (40138c <hif_isr+0x29c>)
  4011d8:	4b6d      	ldr	r3, [pc, #436]	; (401390 <hif_isr+0x2a0>)
  4011da:	4798      	blx	r3
  4011dc:	4870      	ldr	r0, [pc, #448]	; (4013a0 <hif_isr+0x2b0>)
  4011de:	4b6c      	ldr	r3, [pc, #432]	; (401390 <hif_isr+0x2a0>)
  4011e0:	4798      	blx	r3
  4011e2:	486d      	ldr	r0, [pc, #436]	; (401398 <hif_isr+0x2a8>)
  4011e4:	4b6a      	ldr	r3, [pc, #424]	; (401390 <hif_isr+0x2a0>)
  4011e6:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
  4011e8:	2001      	movs	r0, #1
  4011ea:	4b64      	ldr	r3, [pc, #400]	; (40137c <hif_isr+0x28c>)
  4011ec:	4798      	blx	r3
						goto ERR1;
  4011ee:	e11c      	b.n	40142a <hif_isr+0x33a>
					}
					if(strHif.u16Length != size)
  4011f0:	88fb      	ldrh	r3, [r7, #6]
  4011f2:	b29b      	uxth	r3, r3
  4011f4:	89ba      	ldrh	r2, [r7, #12]
  4011f6:	429a      	cmp	r2, r3
  4011f8:	d022      	beq.n	401240 <hif_isr+0x150>
					{
						if((size - strHif.u16Length) > 4)
  4011fa:	89bb      	ldrh	r3, [r7, #12]
  4011fc:	88fa      	ldrh	r2, [r7, #6]
  4011fe:	b292      	uxth	r2, r2
  401200:	1a9b      	subs	r3, r3, r2
  401202:	2b04      	cmp	r3, #4
  401204:	dd1c      	ble.n	401240 <hif_isr+0x150>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  401206:	f240 12df 	movw	r2, #479	; 0x1df
  40120a:	495f      	ldr	r1, [pc, #380]	; (401388 <hif_isr+0x298>)
  40120c:	485f      	ldr	r0, [pc, #380]	; (40138c <hif_isr+0x29c>)
  40120e:	4b60      	ldr	r3, [pc, #384]	; (401390 <hif_isr+0x2a0>)
  401210:	4798      	blx	r3
  401212:	89b9      	ldrh	r1, [r7, #12]
  401214:	88fb      	ldrh	r3, [r7, #6]
  401216:	b29b      	uxth	r3, r3
  401218:	461a      	mov	r2, r3
  40121a:	793b      	ldrb	r3, [r7, #4]
  40121c:	b2db      	uxtb	r3, r3
  40121e:	4618      	mov	r0, r3
  401220:	797b      	ldrb	r3, [r7, #5]
  401222:	b2db      	uxtb	r3, r3
  401224:	9300      	str	r3, [sp, #0]
  401226:	4603      	mov	r3, r0
  401228:	485e      	ldr	r0, [pc, #376]	; (4013a4 <hif_isr+0x2b4>)
  40122a:	4c59      	ldr	r4, [pc, #356]	; (401390 <hif_isr+0x2a0>)
  40122c:	47a0      	blx	r4
  40122e:	485a      	ldr	r0, [pc, #360]	; (401398 <hif_isr+0x2a8>)
  401230:	4b57      	ldr	r3, [pc, #348]	; (401390 <hif_isr+0x2a0>)
  401232:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  401234:	2001      	movs	r0, #1
  401236:	4b51      	ldr	r3, [pc, #324]	; (40137c <hif_isr+0x28c>)
  401238:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  40123a:	23fa      	movs	r3, #250	; 0xfa
  40123c:	73fb      	strb	r3, [r7, #15]
							goto ERR1;
  40123e:	e0f4      	b.n	40142a <hif_isr+0x33a>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  401240:	793b      	ldrb	r3, [r7, #4]
  401242:	b2db      	uxtb	r3, r3
  401244:	2b01      	cmp	r3, #1
  401246:	d10f      	bne.n	401268 <hif_isr+0x178>
					{
						if(pfWifiCb)
  401248:	4b57      	ldr	r3, [pc, #348]	; (4013a8 <hif_isr+0x2b8>)
  40124a:	681b      	ldr	r3, [r3, #0]
  40124c:	2b00      	cmp	r3, #0
  40124e:	d06b      	beq.n	401328 <hif_isr+0x238>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401250:	4b55      	ldr	r3, [pc, #340]	; (4013a8 <hif_isr+0x2b8>)
  401252:	681b      	ldr	r3, [r3, #0]
  401254:	797a      	ldrb	r2, [r7, #5]
  401256:	b2d0      	uxtb	r0, r2
  401258:	88fa      	ldrh	r2, [r7, #6]
  40125a:	b292      	uxth	r2, r2
  40125c:	3a08      	subs	r2, #8
  40125e:	b291      	uxth	r1, r2
  401260:	683a      	ldr	r2, [r7, #0]
  401262:	3208      	adds	r2, #8
  401264:	4798      	blx	r3
  401266:	e05f      	b.n	401328 <hif_isr+0x238>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  401268:	793b      	ldrb	r3, [r7, #4]
  40126a:	b2db      	uxtb	r3, r3
  40126c:	2b02      	cmp	r3, #2
  40126e:	d10f      	bne.n	401290 <hif_isr+0x1a0>
					{
						if(pfIpCb)
  401270:	4b4e      	ldr	r3, [pc, #312]	; (4013ac <hif_isr+0x2bc>)
  401272:	681b      	ldr	r3, [r3, #0]
  401274:	2b00      	cmp	r3, #0
  401276:	d057      	beq.n	401328 <hif_isr+0x238>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401278:	4b4c      	ldr	r3, [pc, #304]	; (4013ac <hif_isr+0x2bc>)
  40127a:	681b      	ldr	r3, [r3, #0]
  40127c:	797a      	ldrb	r2, [r7, #5]
  40127e:	b2d0      	uxtb	r0, r2
  401280:	88fa      	ldrh	r2, [r7, #6]
  401282:	b292      	uxth	r2, r2
  401284:	3a08      	subs	r2, #8
  401286:	b291      	uxth	r1, r2
  401288:	683a      	ldr	r2, [r7, #0]
  40128a:	3208      	adds	r2, #8
  40128c:	4798      	blx	r3
  40128e:	e04b      	b.n	401328 <hif_isr+0x238>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  401290:	793b      	ldrb	r3, [r7, #4]
  401292:	b2db      	uxtb	r3, r3
  401294:	2b04      	cmp	r3, #4
  401296:	d10f      	bne.n	4012b8 <hif_isr+0x1c8>
					{
						if(pfOtaCb)
  401298:	4b45      	ldr	r3, [pc, #276]	; (4013b0 <hif_isr+0x2c0>)
  40129a:	681b      	ldr	r3, [r3, #0]
  40129c:	2b00      	cmp	r3, #0
  40129e:	d043      	beq.n	401328 <hif_isr+0x238>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4012a0:	4b43      	ldr	r3, [pc, #268]	; (4013b0 <hif_isr+0x2c0>)
  4012a2:	681b      	ldr	r3, [r3, #0]
  4012a4:	797a      	ldrb	r2, [r7, #5]
  4012a6:	b2d0      	uxtb	r0, r2
  4012a8:	88fa      	ldrh	r2, [r7, #6]
  4012aa:	b292      	uxth	r2, r2
  4012ac:	3a08      	subs	r2, #8
  4012ae:	b291      	uxth	r1, r2
  4012b0:	683a      	ldr	r2, [r7, #0]
  4012b2:	3208      	adds	r2, #8
  4012b4:	4798      	blx	r3
  4012b6:	e037      	b.n	401328 <hif_isr+0x238>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4012b8:	793b      	ldrb	r3, [r7, #4]
  4012ba:	b2db      	uxtb	r3, r3
  4012bc:	2b06      	cmp	r3, #6
  4012be:	d10f      	bne.n	4012e0 <hif_isr+0x1f0>
					{
						if(pfCryptoCb)
  4012c0:	4b3c      	ldr	r3, [pc, #240]	; (4013b4 <hif_isr+0x2c4>)
  4012c2:	681b      	ldr	r3, [r3, #0]
  4012c4:	2b00      	cmp	r3, #0
  4012c6:	d02f      	beq.n	401328 <hif_isr+0x238>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4012c8:	4b3a      	ldr	r3, [pc, #232]	; (4013b4 <hif_isr+0x2c4>)
  4012ca:	681b      	ldr	r3, [r3, #0]
  4012cc:	797a      	ldrb	r2, [r7, #5]
  4012ce:	b2d0      	uxtb	r0, r2
  4012d0:	88fa      	ldrh	r2, [r7, #6]
  4012d2:	b292      	uxth	r2, r2
  4012d4:	3a08      	subs	r2, #8
  4012d6:	b291      	uxth	r1, r2
  4012d8:	683a      	ldr	r2, [r7, #0]
  4012da:	3208      	adds	r2, #8
  4012dc:	4798      	blx	r3
  4012de:	e023      	b.n	401328 <hif_isr+0x238>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4012e0:	793b      	ldrb	r3, [r7, #4]
  4012e2:	b2db      	uxtb	r3, r3
  4012e4:	2b07      	cmp	r3, #7
  4012e6:	d10f      	bne.n	401308 <hif_isr+0x218>
					{
						if(pfSigmaCb)
  4012e8:	4b33      	ldr	r3, [pc, #204]	; (4013b8 <hif_isr+0x2c8>)
  4012ea:	681b      	ldr	r3, [r3, #0]
  4012ec:	2b00      	cmp	r3, #0
  4012ee:	d01b      	beq.n	401328 <hif_isr+0x238>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4012f0:	4b31      	ldr	r3, [pc, #196]	; (4013b8 <hif_isr+0x2c8>)
  4012f2:	681b      	ldr	r3, [r3, #0]
  4012f4:	797a      	ldrb	r2, [r7, #5]
  4012f6:	b2d0      	uxtb	r0, r2
  4012f8:	88fa      	ldrh	r2, [r7, #6]
  4012fa:	b292      	uxth	r2, r2
  4012fc:	3a08      	subs	r2, #8
  4012fe:	b291      	uxth	r1, r2
  401300:	683a      	ldr	r2, [r7, #0]
  401302:	3208      	adds	r2, #8
  401304:	4798      	blx	r3
  401306:	e00f      	b.n	401328 <hif_isr+0x238>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  401308:	f240 2202 	movw	r2, #514	; 0x202
  40130c:	491e      	ldr	r1, [pc, #120]	; (401388 <hif_isr+0x298>)
  40130e:	481f      	ldr	r0, [pc, #124]	; (40138c <hif_isr+0x29c>)
  401310:	4b1f      	ldr	r3, [pc, #124]	; (401390 <hif_isr+0x2a0>)
  401312:	4798      	blx	r3
  401314:	4829      	ldr	r0, [pc, #164]	; (4013bc <hif_isr+0x2cc>)
  401316:	4b1e      	ldr	r3, [pc, #120]	; (401390 <hif_isr+0x2a0>)
  401318:	4798      	blx	r3
  40131a:	481f      	ldr	r0, [pc, #124]	; (401398 <hif_isr+0x2a8>)
  40131c:	4b1c      	ldr	r3, [pc, #112]	; (401390 <hif_isr+0x2a0>)
  40131e:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
  401320:	23fa      	movs	r3, #250	; 0xfa
  401322:	73fb      	strb	r3, [r7, #15]
						goto ERR1;
  401324:	bf00      	nop
  401326:	e080      	b.n	40142a <hif_isr+0x33a>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  401328:	4b16      	ldr	r3, [pc, #88]	; (401384 <hif_isr+0x294>)
  40132a:	781b      	ldrb	r3, [r3, #0]
  40132c:	b2db      	uxtb	r3, r3
  40132e:	2b00      	cmp	r3, #0
  401330:	d175      	bne.n	40141e <hif_isr+0x32e>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  401332:	f240 2209 	movw	r2, #521	; 0x209
  401336:	4914      	ldr	r1, [pc, #80]	; (401388 <hif_isr+0x298>)
  401338:	4814      	ldr	r0, [pc, #80]	; (40138c <hif_isr+0x29c>)
  40133a:	4b15      	ldr	r3, [pc, #84]	; (401390 <hif_isr+0x2a0>)
  40133c:	4798      	blx	r3
  40133e:	4820      	ldr	r0, [pc, #128]	; (4013c0 <hif_isr+0x2d0>)
  401340:	4b13      	ldr	r3, [pc, #76]	; (401390 <hif_isr+0x2a0>)
  401342:	4798      	blx	r3
  401344:	4814      	ldr	r0, [pc, #80]	; (401398 <hif_isr+0x2a8>)
  401346:	4b12      	ldr	r3, [pc, #72]	; (401390 <hif_isr+0x2a0>)
  401348:	4798      	blx	r3
						ret = hif_set_rx_done();
  40134a:	4b1e      	ldr	r3, [pc, #120]	; (4013c4 <hif_isr+0x2d4>)
  40134c:	4798      	blx	r3
  40134e:	4603      	mov	r3, r0
  401350:	73fb      	strb	r3, [r7, #15]
  401352:	e064      	b.n	40141e <hif_isr+0x32e>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  401354:	23fe      	movs	r3, #254	; 0xfe
  401356:	73fb      	strb	r3, [r7, #15]
					M2M_ERR("(hif) Wrong Size\n");
  401358:	f240 2211 	movw	r2, #529	; 0x211
  40135c:	490a      	ldr	r1, [pc, #40]	; (401388 <hif_isr+0x298>)
  40135e:	480b      	ldr	r0, [pc, #44]	; (40138c <hif_isr+0x29c>)
  401360:	4b0b      	ldr	r3, [pc, #44]	; (401390 <hif_isr+0x2a0>)
  401362:	4798      	blx	r3
  401364:	4818      	ldr	r0, [pc, #96]	; (4013c8 <hif_isr+0x2d8>)
  401366:	4b0a      	ldr	r3, [pc, #40]	; (401390 <hif_isr+0x2a0>)
  401368:	4798      	blx	r3
  40136a:	480b      	ldr	r0, [pc, #44]	; (401398 <hif_isr+0x2a8>)
  40136c:	4b08      	ldr	r3, [pc, #32]	; (401390 <hif_isr+0x2a0>)
  40136e:	4798      	blx	r3
					goto ERR1;
  401370:	e05b      	b.n	40142a <hif_isr+0x33a>
  401372:	bf00      	nop
  401374:	00400cf5 	.word	0x00400cf5
  401378:	00402c25 	.word	0x00402c25
  40137c:	00400599 	.word	0x00400599
  401380:	00402c45 	.word	0x00402c45
  401384:	20400966 	.word	0x20400966
  401388:	0040df4c 	.word	0x0040df4c
  40138c:	0040dcf4 	.word	0x0040dcf4
  401390:	004078bd 	.word	0x004078bd
  401394:	0040dd2c 	.word	0x0040dd2c
  401398:	0040dd28 	.word	0x0040dd28
  40139c:	00402c8d 	.word	0x00402c8d
  4013a0:	0040dd54 	.word	0x0040dd54
  4013a4:	0040dd6c 	.word	0x0040dd6c
  4013a8:	20400968 	.word	0x20400968
  4013ac:	2040096c 	.word	0x2040096c
  4013b0:	20400970 	.word	0x20400970
  4013b4:	2040097c 	.word	0x2040097c
  4013b8:	20400974 	.word	0x20400974
  4013bc:	0040ddac 	.word	0x0040ddac
  4013c0:	0040ddc4 	.word	0x0040ddc4
  4013c4:	00400c75 	.word	0x00400c75
  4013c8:	0040dde8 	.word	0x0040dde8
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  4013cc:	f44f 7206 	mov.w	r2, #536	; 0x218
  4013d0:	4919      	ldr	r1, [pc, #100]	; (401438 <hif_isr+0x348>)
  4013d2:	481a      	ldr	r0, [pc, #104]	; (40143c <hif_isr+0x34c>)
  4013d4:	4b1a      	ldr	r3, [pc, #104]	; (401440 <hif_isr+0x350>)
  4013d6:	4798      	blx	r3
  4013d8:	68bb      	ldr	r3, [r7, #8]
  4013da:	4619      	mov	r1, r3
  4013dc:	4819      	ldr	r0, [pc, #100]	; (401444 <hif_isr+0x354>)
  4013de:	4b18      	ldr	r3, [pc, #96]	; (401440 <hif_isr+0x350>)
  4013e0:	4798      	blx	r3
  4013e2:	4819      	ldr	r0, [pc, #100]	; (401448 <hif_isr+0x358>)
  4013e4:	4b16      	ldr	r3, [pc, #88]	; (401440 <hif_isr+0x350>)
  4013e6:	4798      	blx	r3
  4013e8:	e019      	b.n	40141e <hif_isr+0x32e>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  4013ea:	f240 221e 	movw	r2, #542	; 0x21e
  4013ee:	4912      	ldr	r1, [pc, #72]	; (401438 <hif_isr+0x348>)
  4013f0:	4812      	ldr	r0, [pc, #72]	; (40143c <hif_isr+0x34c>)
  4013f2:	4b13      	ldr	r3, [pc, #76]	; (401440 <hif_isr+0x350>)
  4013f4:	4798      	blx	r3
  4013f6:	4815      	ldr	r0, [pc, #84]	; (40144c <hif_isr+0x35c>)
  4013f8:	4b11      	ldr	r3, [pc, #68]	; (401440 <hif_isr+0x350>)
  4013fa:	4798      	blx	r3
  4013fc:	4812      	ldr	r0, [pc, #72]	; (401448 <hif_isr+0x358>)
  4013fe:	4b10      	ldr	r3, [pc, #64]	; (401440 <hif_isr+0x350>)
  401400:	4798      	blx	r3
			goto ERR1;
  401402:	e012      	b.n	40142a <hif_isr+0x33a>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  401404:	f44f 7209 	mov.w	r2, #548	; 0x224
  401408:	490b      	ldr	r1, [pc, #44]	; (401438 <hif_isr+0x348>)
  40140a:	480c      	ldr	r0, [pc, #48]	; (40143c <hif_isr+0x34c>)
  40140c:	4b0c      	ldr	r3, [pc, #48]	; (401440 <hif_isr+0x350>)
  40140e:	4798      	blx	r3
  401410:	480f      	ldr	r0, [pc, #60]	; (401450 <hif_isr+0x360>)
  401412:	4b0b      	ldr	r3, [pc, #44]	; (401440 <hif_isr+0x350>)
  401414:	4798      	blx	r3
  401416:	480c      	ldr	r0, [pc, #48]	; (401448 <hif_isr+0x358>)
  401418:	4b09      	ldr	r3, [pc, #36]	; (401440 <hif_isr+0x350>)
  40141a:	4798      	blx	r3
		goto ERR1;
  40141c:	e005      	b.n	40142a <hif_isr+0x33a>
	}

	ret = hif_chip_sleep();
  40141e:	4b0d      	ldr	r3, [pc, #52]	; (401454 <hif_isr+0x364>)
  401420:	4798      	blx	r3
  401422:	4603      	mov	r3, r0
  401424:	73fb      	strb	r3, [r7, #15]
  401426:	e000      	b.n	40142a <hif_isr+0x33a>

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
  401428:	bf00      	nop
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
  40142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  40142e:	4618      	mov	r0, r3
  401430:	3714      	adds	r7, #20
  401432:	46bd      	mov	sp, r7
  401434:	bd90      	pop	{r4, r7, pc}
  401436:	bf00      	nop
  401438:	0040df4c 	.word	0x0040df4c
  40143c:	0040dcf4 	.word	0x0040dcf4
  401440:	004078bd 	.word	0x004078bd
  401444:	0040ddfc 	.word	0x0040ddfc
  401448:	0040dd28 	.word	0x0040dd28
  40144c:	0040de18 	.word	0x0040de18
  401450:	0040de3c 	.word	0x0040de3c
  401454:	00400d79 	.word	0x00400d79

00401458 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  401458:	b580      	push	{r7, lr}
  40145a:	b082      	sub	sp, #8
  40145c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  40145e:	2300      	movs	r3, #0
  401460:	71fb      	strb	r3, [r7, #7]

	while (gu8Interrupt) {
  401462:	e01f      	b.n	4014a4 <hif_handle_isr+0x4c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  401464:	4b15      	ldr	r3, [pc, #84]	; (4014bc <hif_handle_isr+0x64>)
  401466:	781b      	ldrb	r3, [r3, #0]
  401468:	b2db      	uxtb	r3, r3
  40146a:	3b01      	subs	r3, #1
  40146c:	b2da      	uxtb	r2, r3
  40146e:	4b13      	ldr	r3, [pc, #76]	; (4014bc <hif_handle_isr+0x64>)
  401470:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
  401472:	4b13      	ldr	r3, [pc, #76]	; (4014c0 <hif_handle_isr+0x68>)
  401474:	4798      	blx	r3
  401476:	4603      	mov	r3, r0
  401478:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
  40147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40147e:	2b00      	cmp	r3, #0
  401480:	d100      	bne.n	401484 <hif_handle_isr+0x2c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
  401482:	e00f      	b.n	4014a4 <hif_handle_isr+0x4c>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  401484:	f240 2243 	movw	r2, #579	; 0x243
  401488:	490e      	ldr	r1, [pc, #56]	; (4014c4 <hif_handle_isr+0x6c>)
  40148a:	480f      	ldr	r0, [pc, #60]	; (4014c8 <hif_handle_isr+0x70>)
  40148c:	4b0f      	ldr	r3, [pc, #60]	; (4014cc <hif_handle_isr+0x74>)
  40148e:	4798      	blx	r3
  401490:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401494:	4619      	mov	r1, r3
  401496:	480e      	ldr	r0, [pc, #56]	; (4014d0 <hif_handle_isr+0x78>)
  401498:	4b0c      	ldr	r3, [pc, #48]	; (4014cc <hif_handle_isr+0x74>)
  40149a:	4798      	blx	r3
  40149c:	480d      	ldr	r0, [pc, #52]	; (4014d4 <hif_handle_isr+0x7c>)
  40149e:	4b0b      	ldr	r3, [pc, #44]	; (4014cc <hif_handle_isr+0x74>)
  4014a0:	4798      	blx	r3
			}
		}
  4014a2:	e7e6      	b.n	401472 <hif_handle_isr+0x1a>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4014a4:	4b05      	ldr	r3, [pc, #20]	; (4014bc <hif_handle_isr+0x64>)
  4014a6:	781b      	ldrb	r3, [r3, #0]
  4014a8:	b2db      	uxtb	r3, r3
  4014aa:	2b00      	cmp	r3, #0
  4014ac:	d1da      	bne.n	401464 <hif_handle_isr+0xc>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
  4014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  4014b2:	4618      	mov	r0, r3
  4014b4:	3708      	adds	r7, #8
  4014b6:	46bd      	mov	sp, r7
  4014b8:	bd80      	pop	{r7, pc}
  4014ba:	bf00      	nop
  4014bc:	20400967 	.word	0x20400967
  4014c0:	004010f1 	.word	0x004010f1
  4014c4:	0040df54 	.word	0x0040df54
  4014c8:	0040dcf4 	.word	0x0040dcf4
  4014cc:	004078bd 	.word	0x004078bd
  4014d0:	0040de5c 	.word	0x0040de5c
  4014d4:	0040dd28 	.word	0x0040dd28

004014d8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  4014d8:	b580      	push	{r7, lr}
  4014da:	b088      	sub	sp, #32
  4014dc:	af00      	add	r7, sp, #0
  4014de:	60f8      	str	r0, [r7, #12]
  4014e0:	60b9      	str	r1, [r7, #8]
  4014e2:	4611      	mov	r1, r2
  4014e4:	461a      	mov	r2, r3
  4014e6:	460b      	mov	r3, r1
  4014e8:	80fb      	strh	r3, [r7, #6]
  4014ea:	4613      	mov	r3, r2
  4014ec:	717b      	strb	r3, [r7, #5]
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;
  4014ee:	2300      	movs	r3, #0
  4014f0:	77fb      	strb	r3, [r7, #31]

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  4014f2:	68fb      	ldr	r3, [r7, #12]
  4014f4:	2b00      	cmp	r3, #0
  4014f6:	d005      	beq.n	401504 <hif_receive+0x2c>
  4014f8:	68bb      	ldr	r3, [r7, #8]
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	d002      	beq.n	401504 <hif_receive+0x2c>
  4014fe:	88fb      	ldrh	r3, [r7, #6]
  401500:	2b00      	cmp	r3, #0
  401502:	d119      	bne.n	401538 <hif_receive+0x60>
	{
		if(isDone)
  401504:	797b      	ldrb	r3, [r7, #5]
  401506:	2b00      	cmp	r3, #0
  401508:	d007      	beq.n	40151a <hif_receive+0x42>
		{
			gu8HifSizeDone = 1;
  40150a:	4b49      	ldr	r3, [pc, #292]	; (401630 <hif_receive+0x158>)
  40150c:	2201      	movs	r2, #1
  40150e:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  401510:	4b48      	ldr	r3, [pc, #288]	; (401634 <hif_receive+0x15c>)
  401512:	4798      	blx	r3
  401514:	4603      	mov	r3, r0
  401516:	77fb      	strb	r3, [r7, #31]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
  401518:	e083      	b.n	401622 <hif_receive+0x14a>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  40151a:	23f4      	movs	r3, #244	; 0xf4
  40151c:	77fb      	strb	r3, [r7, #31]
			M2M_ERR(" hif_receive: Invalid argument\n");
  40151e:	f240 2269 	movw	r2, #617	; 0x269
  401522:	4945      	ldr	r1, [pc, #276]	; (401638 <hif_receive+0x160>)
  401524:	4845      	ldr	r0, [pc, #276]	; (40163c <hif_receive+0x164>)
  401526:	4b46      	ldr	r3, [pc, #280]	; (401640 <hif_receive+0x168>)
  401528:	4798      	blx	r3
  40152a:	4846      	ldr	r0, [pc, #280]	; (401644 <hif_receive+0x16c>)
  40152c:	4b44      	ldr	r3, [pc, #272]	; (401640 <hif_receive+0x168>)
  40152e:	4798      	blx	r3
  401530:	4845      	ldr	r0, [pc, #276]	; (401648 <hif_receive+0x170>)
  401532:	4b43      	ldr	r3, [pc, #268]	; (401640 <hif_receive+0x168>)
  401534:	4798      	blx	r3
		}
		goto ERR1;
  401536:	e074      	b.n	401622 <hif_receive+0x14a>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  401538:	f107 0314 	add.w	r3, r7, #20
  40153c:	4619      	mov	r1, r3
  40153e:	f241 0070 	movw	r0, #4208	; 0x1070
  401542:	4b42      	ldr	r3, [pc, #264]	; (40164c <hif_receive+0x174>)
  401544:	4798      	blx	r3
  401546:	4603      	mov	r3, r0
  401548:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS)goto ERR1;
  40154a:	f997 301f 	ldrsb.w	r3, [r7, #31]
  40154e:	2b00      	cmp	r3, #0
  401550:	d162      	bne.n	401618 <hif_receive+0x140>


	size = (uint16)((reg >> 2) & 0xfff);
  401552:	697b      	ldr	r3, [r7, #20]
  401554:	089b      	lsrs	r3, r3, #2
  401556:	b29b      	uxth	r3, r3
  401558:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40155c:	83bb      	strh	r3, [r7, #28]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  40155e:	f107 0318 	add.w	r3, r7, #24
  401562:	4619      	mov	r1, r3
  401564:	f241 0084 	movw	r0, #4228	; 0x1084
  401568:	4b38      	ldr	r3, [pc, #224]	; (40164c <hif_receive+0x174>)
  40156a:	4798      	blx	r3
  40156c:	4603      	mov	r3, r0
  40156e:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS)goto ERR1;
  401570:	f997 301f 	ldrsb.w	r3, [r7, #31]
  401574:	2b00      	cmp	r3, #0
  401576:	d151      	bne.n	40161c <hif_receive+0x144>


	if(u16Sz > size)
  401578:	88fa      	ldrh	r2, [r7, #6]
  40157a:	8bbb      	ldrh	r3, [r7, #28]
  40157c:	429a      	cmp	r2, r3
  40157e:	d911      	bls.n	4015a4 <hif_receive+0xcc>
	{
		ret = M2M_ERR_FAIL;
  401580:	23f4      	movs	r3, #244	; 0xf4
  401582:	77fb      	strb	r3, [r7, #31]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  401584:	f240 227a 	movw	r2, #634	; 0x27a
  401588:	492b      	ldr	r1, [pc, #172]	; (401638 <hif_receive+0x160>)
  40158a:	482c      	ldr	r0, [pc, #176]	; (40163c <hif_receive+0x164>)
  40158c:	4b2c      	ldr	r3, [pc, #176]	; (401640 <hif_receive+0x168>)
  40158e:	4798      	blx	r3
  401590:	88fb      	ldrh	r3, [r7, #6]
  401592:	8bba      	ldrh	r2, [r7, #28]
  401594:	4619      	mov	r1, r3
  401596:	482e      	ldr	r0, [pc, #184]	; (401650 <hif_receive+0x178>)
  401598:	4b29      	ldr	r3, [pc, #164]	; (401640 <hif_receive+0x168>)
  40159a:	4798      	blx	r3
  40159c:	482a      	ldr	r0, [pc, #168]	; (401648 <hif_receive+0x170>)
  40159e:	4b28      	ldr	r3, [pc, #160]	; (401640 <hif_receive+0x168>)
  4015a0:	4798      	blx	r3
		goto ERR1;
  4015a2:	e03e      	b.n	401622 <hif_receive+0x14a>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  4015a4:	69bb      	ldr	r3, [r7, #24]
  4015a6:	68fa      	ldr	r2, [r7, #12]
  4015a8:	429a      	cmp	r2, r3
  4015aa:	d307      	bcc.n	4015bc <hif_receive+0xe4>
  4015ac:	88fa      	ldrh	r2, [r7, #6]
  4015ae:	68fb      	ldr	r3, [r7, #12]
  4015b0:	441a      	add	r2, r3
  4015b2:	8bb9      	ldrh	r1, [r7, #28]
  4015b4:	69bb      	ldr	r3, [r7, #24]
  4015b6:	440b      	add	r3, r1
  4015b8:	429a      	cmp	r2, r3
  4015ba:	d90e      	bls.n	4015da <hif_receive+0x102>
	{
		ret = M2M_ERR_FAIL;
  4015bc:	23f4      	movs	r3, #244	; 0xf4
  4015be:	77fb      	strb	r3, [r7, #31]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  4015c0:	f44f 7220 	mov.w	r2, #640	; 0x280
  4015c4:	491c      	ldr	r1, [pc, #112]	; (401638 <hif_receive+0x160>)
  4015c6:	481d      	ldr	r0, [pc, #116]	; (40163c <hif_receive+0x164>)
  4015c8:	4b1d      	ldr	r3, [pc, #116]	; (401640 <hif_receive+0x168>)
  4015ca:	4798      	blx	r3
  4015cc:	4821      	ldr	r0, [pc, #132]	; (401654 <hif_receive+0x17c>)
  4015ce:	4b1c      	ldr	r3, [pc, #112]	; (401640 <hif_receive+0x168>)
  4015d0:	4798      	blx	r3
  4015d2:	481d      	ldr	r0, [pc, #116]	; (401648 <hif_receive+0x170>)
  4015d4:	4b1a      	ldr	r3, [pc, #104]	; (401640 <hif_receive+0x168>)
  4015d6:	4798      	blx	r3
		goto ERR1;
  4015d8:	e023      	b.n	401622 <hif_receive+0x14a>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  4015da:	88fb      	ldrh	r3, [r7, #6]
  4015dc:	461a      	mov	r2, r3
  4015de:	68b9      	ldr	r1, [r7, #8]
  4015e0:	68f8      	ldr	r0, [r7, #12]
  4015e2:	4b1d      	ldr	r3, [pc, #116]	; (401658 <hif_receive+0x180>)
  4015e4:	4798      	blx	r3
  4015e6:	4603      	mov	r3, r0
  4015e8:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS)goto ERR1;
  4015ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
  4015ee:	2b00      	cmp	r3, #0
  4015f0:	d116      	bne.n	401620 <hif_receive+0x148>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  4015f2:	8bba      	ldrh	r2, [r7, #28]
  4015f4:	69bb      	ldr	r3, [r7, #24]
  4015f6:	441a      	add	r2, r3
  4015f8:	88f9      	ldrh	r1, [r7, #6]
  4015fa:	68fb      	ldr	r3, [r7, #12]
  4015fc:	440b      	add	r3, r1
  4015fe:	429a      	cmp	r2, r3
  401600:	d002      	beq.n	401608 <hif_receive+0x130>
  401602:	797b      	ldrb	r3, [r7, #5]
  401604:	2b00      	cmp	r3, #0
  401606:	d00c      	beq.n	401622 <hif_receive+0x14a>
	{
		gu8HifSizeDone = 1;
  401608:	4b09      	ldr	r3, [pc, #36]	; (401630 <hif_receive+0x158>)
  40160a:	2201      	movs	r2, #1
  40160c:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  40160e:	4b09      	ldr	r3, [pc, #36]	; (401634 <hif_receive+0x15c>)
  401610:	4798      	blx	r3
  401612:	4603      	mov	r3, r0
  401614:	77fb      	strb	r3, [r7, #31]
  401616:	e004      	b.n	401622 <hif_receive+0x14a>
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
  401618:	bf00      	nop
  40161a:	e002      	b.n	401622 <hif_receive+0x14a>


	size = (uint16)((reg >> 2) & 0xfff);
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;
  40161c:	bf00      	nop
  40161e:	e000      	b.n	401622 <hif_receive+0x14a>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
  401620:	bf00      	nop
	}



ERR1:
	return ret;
  401622:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  401626:	4618      	mov	r0, r3
  401628:	3720      	adds	r7, #32
  40162a:	46bd      	mov	sp, r7
  40162c:	bd80      	pop	{r7, pc}
  40162e:	bf00      	nop
  401630:	20400966 	.word	0x20400966
  401634:	00400c75 	.word	0x00400c75
  401638:	0040df64 	.word	0x0040df64
  40163c:	0040dcf4 	.word	0x0040dcf4
  401640:	004078bd 	.word	0x004078bd
  401644:	0040de8c 	.word	0x0040de8c
  401648:	0040dd28 	.word	0x0040dd28
  40164c:	00402c25 	.word	0x00402c25
  401650:	0040deac 	.word	0x0040deac
  401654:	0040def0 	.word	0x0040def0
  401658:	00402c8d 	.word	0x00402c8d

0040165c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  40165c:	b580      	push	{r7, lr}
  40165e:	b084      	sub	sp, #16
  401660:	af00      	add	r7, sp, #0
  401662:	4603      	mov	r3, r0
  401664:	6039      	str	r1, [r7, #0]
  401666:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
  401668:	2300      	movs	r3, #0
  40166a:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
  40166c:	79fb      	ldrb	r3, [r7, #7]
  40166e:	3b01      	subs	r3, #1
  401670:	2b06      	cmp	r3, #6
  401672:	d829      	bhi.n	4016c8 <hif_register_cb+0x6c>
  401674:	a201      	add	r2, pc, #4	; (adr r2, 40167c <hif_register_cb+0x20>)
  401676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40167a:	bf00      	nop
  40167c:	004016a1 	.word	0x004016a1
  401680:	00401699 	.word	0x00401699
  401684:	004016b1 	.word	0x004016b1
  401688:	004016a9 	.word	0x004016a9
  40168c:	004016c9 	.word	0x004016c9
  401690:	004016b9 	.word	0x004016b9
  401694:	004016c1 	.word	0x004016c1
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  401698:	4a17      	ldr	r2, [pc, #92]	; (4016f8 <hif_register_cb+0x9c>)
  40169a:	683b      	ldr	r3, [r7, #0]
  40169c:	6013      	str	r3, [r2, #0]
			break;
  40169e:	e024      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  4016a0:	4a16      	ldr	r2, [pc, #88]	; (4016fc <hif_register_cb+0xa0>)
  4016a2:	683b      	ldr	r3, [r7, #0]
  4016a4:	6013      	str	r3, [r2, #0]
			break;
  4016a6:	e020      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  4016a8:	4a15      	ldr	r2, [pc, #84]	; (401700 <hif_register_cb+0xa4>)
  4016aa:	683b      	ldr	r3, [r7, #0]
  4016ac:	6013      	str	r3, [r2, #0]
			break;
  4016ae:	e01c      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  4016b0:	4a14      	ldr	r2, [pc, #80]	; (401704 <hif_register_cb+0xa8>)
  4016b2:	683b      	ldr	r3, [r7, #0]
  4016b4:	6013      	str	r3, [r2, #0]
			break;
  4016b6:	e018      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  4016b8:	4a13      	ldr	r2, [pc, #76]	; (401708 <hif_register_cb+0xac>)
  4016ba:	683b      	ldr	r3, [r7, #0]
  4016bc:	6013      	str	r3, [r2, #0]
			break;
  4016be:	e014      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  4016c0:	4a12      	ldr	r2, [pc, #72]	; (40170c <hif_register_cb+0xb0>)
  4016c2:	683b      	ldr	r3, [r7, #0]
  4016c4:	6013      	str	r3, [r2, #0]
			break;
  4016c6:	e010      	b.n	4016ea <hif_register_cb+0x8e>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  4016c8:	f240 22b9 	movw	r2, #697	; 0x2b9
  4016cc:	4910      	ldr	r1, [pc, #64]	; (401710 <hif_register_cb+0xb4>)
  4016ce:	4811      	ldr	r0, [pc, #68]	; (401714 <hif_register_cb+0xb8>)
  4016d0:	4b11      	ldr	r3, [pc, #68]	; (401718 <hif_register_cb+0xbc>)
  4016d2:	4798      	blx	r3
  4016d4:	79fb      	ldrb	r3, [r7, #7]
  4016d6:	4619      	mov	r1, r3
  4016d8:	4810      	ldr	r0, [pc, #64]	; (40171c <hif_register_cb+0xc0>)
  4016da:	4b0f      	ldr	r3, [pc, #60]	; (401718 <hif_register_cb+0xbc>)
  4016dc:	4798      	blx	r3
  4016de:	4810      	ldr	r0, [pc, #64]	; (401720 <hif_register_cb+0xc4>)
  4016e0:	4b0d      	ldr	r3, [pc, #52]	; (401718 <hif_register_cb+0xbc>)
  4016e2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  4016e4:	23f4      	movs	r3, #244	; 0xf4
  4016e6:	73fb      	strb	r3, [r7, #15]
			break;
  4016e8:	bf00      	nop
	}
	return ret;
  4016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  4016ee:	4618      	mov	r0, r3
  4016f0:	3710      	adds	r7, #16
  4016f2:	46bd      	mov	sp, r7
  4016f4:	bd80      	pop	{r7, pc}
  4016f6:	bf00      	nop
  4016f8:	2040096c 	.word	0x2040096c
  4016fc:	20400968 	.word	0x20400968
  401700:	20400970 	.word	0x20400970
  401704:	20400978 	.word	0x20400978
  401708:	2040097c 	.word	0x2040097c
  40170c:	20400974 	.word	0x20400974
  401710:	0040df70 	.word	0x0040df70
  401714:	0040dcf4 	.word	0x0040dcf4
  401718:	004078bd 	.word	0x004078bd
  40171c:	0040df34 	.word	0x0040df34
  401720:	0040dd28 	.word	0x0040dd28

00401724 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  401724:	b590      	push	{r4, r7, lr}
  401726:	b0ad      	sub	sp, #180	; 0xb4
  401728:	af02      	add	r7, sp, #8
  40172a:	4603      	mov	r3, r0
  40172c:	603a      	str	r2, [r7, #0]
  40172e:	71fb      	strb	r3, [r7, #7]
  401730:	460b      	mov	r3, r1
  401732:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  401734:	79fb      	ldrb	r3, [r7, #7]
  401736:	2b2c      	cmp	r3, #44	; 0x2c
  401738:	d117      	bne.n	40176a <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  40173a:	f107 019c 	add.w	r1, r7, #156	; 0x9c
  40173e:	2300      	movs	r3, #0
  401740:	2204      	movs	r2, #4
  401742:	6838      	ldr	r0, [r7, #0]
  401744:	4caf      	ldr	r4, [pc, #700]	; (401a04 <m2m_wifi_cb+0x2e0>)
  401746:	47a0      	blx	r4
  401748:	4603      	mov	r3, r0
  40174a:	2b00      	cmp	r3, #0
  40174c:	f040 819f 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  401750:	4bad      	ldr	r3, [pc, #692]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401752:	681b      	ldr	r3, [r3, #0]
  401754:	2b00      	cmp	r3, #0
  401756:	f000 819a 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  40175a:	4bab      	ldr	r3, [pc, #684]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40175c:	681b      	ldr	r3, [r3, #0]
  40175e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
  401762:	4611      	mov	r1, r2
  401764:	202c      	movs	r0, #44	; 0x2c
  401766:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401768:	e191      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  40176a:	79fb      	ldrb	r3, [r7, #7]
  40176c:	2b1b      	cmp	r3, #27
  40176e:	d117      	bne.n	4017a0 <m2m_wifi_cb+0x7c>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  401770:	f107 0194 	add.w	r1, r7, #148	; 0x94
  401774:	2300      	movs	r3, #0
  401776:	2208      	movs	r2, #8
  401778:	6838      	ldr	r0, [r7, #0]
  40177a:	4ca2      	ldr	r4, [pc, #648]	; (401a04 <m2m_wifi_cb+0x2e0>)
  40177c:	47a0      	blx	r4
  40177e:	4603      	mov	r3, r0
  401780:	2b00      	cmp	r3, #0
  401782:	f040 8184 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  401786:	4ba0      	ldr	r3, [pc, #640]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401788:	681b      	ldr	r3, [r3, #0]
  40178a:	2b00      	cmp	r3, #0
  40178c:	f000 817f 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  401790:	4b9d      	ldr	r3, [pc, #628]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401792:	681b      	ldr	r3, [r3, #0]
  401794:	f107 0294 	add.w	r2, r7, #148	; 0x94
  401798:	4611      	mov	r1, r2
  40179a:	201b      	movs	r0, #27
  40179c:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  40179e:	e176      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  4017a0:	79fb      	ldrb	r3, [r7, #7]
  4017a2:	2b06      	cmp	r3, #6
  4017a4:	d117      	bne.n	4017d6 <m2m_wifi_cb+0xb2>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  4017a6:	f107 010c 	add.w	r1, r7, #12
  4017aa:	2301      	movs	r3, #1
  4017ac:	2230      	movs	r2, #48	; 0x30
  4017ae:	6838      	ldr	r0, [r7, #0]
  4017b0:	4c94      	ldr	r4, [pc, #592]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4017b2:	47a0      	blx	r4
  4017b4:	4603      	mov	r3, r0
  4017b6:	2b00      	cmp	r3, #0
  4017b8:	f040 8169 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
  4017bc:	4b92      	ldr	r3, [pc, #584]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4017be:	681b      	ldr	r3, [r3, #0]
  4017c0:	2b00      	cmp	r3, #0
  4017c2:	f000 8164 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  4017c6:	4b90      	ldr	r3, [pc, #576]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4017c8:	681b      	ldr	r3, [r3, #0]
  4017ca:	f107 020c 	add.w	r2, r7, #12
  4017ce:	4611      	mov	r1, r2
  4017d0:	2006      	movs	r0, #6
  4017d2:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  4017d4:	e15b      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  4017d6:	79fb      	ldrb	r3, [r7, #7]
  4017d8:	2b0e      	cmp	r3, #14
  4017da:	f000 8158 	beq.w	401a8e <m2m_wifi_cb+0x36a>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  4017de:	79fb      	ldrb	r3, [r7, #7]
  4017e0:	2b32      	cmp	r3, #50	; 0x32
  4017e2:	d117      	bne.n	401814 <m2m_wifi_cb+0xf0>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  4017e4:	f107 0184 	add.w	r1, r7, #132	; 0x84
  4017e8:	2300      	movs	r3, #0
  4017ea:	2210      	movs	r2, #16
  4017ec:	6838      	ldr	r0, [r7, #0]
  4017ee:	4c85      	ldr	r4, [pc, #532]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4017f0:	47a0      	blx	r4
  4017f2:	4603      	mov	r3, r0
  4017f4:	2b00      	cmp	r3, #0
  4017f6:	f040 814a 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  4017fa:	4b83      	ldr	r3, [pc, #524]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4017fc:	681b      	ldr	r3, [r3, #0]
  4017fe:	2b00      	cmp	r3, #0
  401800:	f000 8145 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  401804:	4b80      	ldr	r3, [pc, #512]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401806:	681b      	ldr	r3, [r3, #0]
  401808:	f107 0284 	add.w	r2, r7, #132	; 0x84
  40180c:	4611      	mov	r1, r2
  40180e:	2032      	movs	r0, #50	; 0x32
  401810:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401812:	e13c      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  401814:	79fb      	ldrb	r3, [r7, #7]
  401816:	2b2f      	cmp	r3, #47	; 0x2f
  401818:	d11e      	bne.n	401858 <m2m_wifi_cb+0x134>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  40181a:	f107 030c 	add.w	r3, r7, #12
  40181e:	2264      	movs	r2, #100	; 0x64
  401820:	2100      	movs	r1, #0
  401822:	4618      	mov	r0, r3
  401824:	4b79      	ldr	r3, [pc, #484]	; (401a0c <m2m_wifi_cb+0x2e8>)
  401826:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  401828:	f107 010c 	add.w	r1, r7, #12
  40182c:	2300      	movs	r3, #0
  40182e:	2264      	movs	r2, #100	; 0x64
  401830:	6838      	ldr	r0, [r7, #0]
  401832:	4c74      	ldr	r4, [pc, #464]	; (401a04 <m2m_wifi_cb+0x2e0>)
  401834:	47a0      	blx	r4
  401836:	4603      	mov	r3, r0
  401838:	2b00      	cmp	r3, #0
  40183a:	f040 8128 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  40183e:	4b72      	ldr	r3, [pc, #456]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401840:	681b      	ldr	r3, [r3, #0]
  401842:	2b00      	cmp	r3, #0
  401844:	f000 8123 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  401848:	4b6f      	ldr	r3, [pc, #444]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40184a:	681b      	ldr	r3, [r3, #0]
  40184c:	f107 020c 	add.w	r2, r7, #12
  401850:	4611      	mov	r1, r2
  401852:	202f      	movs	r0, #47	; 0x2f
  401854:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401856:	e11a      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  401858:	79fb      	ldrb	r3, [r7, #7]
  40185a:	2b34      	cmp	r3, #52	; 0x34
  40185c:	d12e      	bne.n	4018bc <m2m_wifi_cb+0x198>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  40185e:	f107 0180 	add.w	r1, r7, #128	; 0x80
  401862:	2300      	movs	r3, #0
  401864:	2204      	movs	r2, #4
  401866:	6838      	ldr	r0, [r7, #0]
  401868:	4c66      	ldr	r4, [pc, #408]	; (401a04 <m2m_wifi_cb+0x2e0>)
  40186a:	47a0      	blx	r4
  40186c:	4603      	mov	r3, r0
  40186e:	2b00      	cmp	r3, #0
  401870:	f040 810d 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  401874:	4866      	ldr	r0, [pc, #408]	; (401a10 <m2m_wifi_cb+0x2ec>)
  401876:	4b67      	ldr	r3, [pc, #412]	; (401a14 <m2m_wifi_cb+0x2f0>)
  401878:	4798      	blx	r3
  40187a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  40187e:	b2d9      	uxtb	r1, r3
  401880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  401884:	0a1b      	lsrs	r3, r3, #8
  401886:	b2da      	uxtb	r2, r3
  401888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  40188c:	0c1b      	lsrs	r3, r3, #16
  40188e:	b2d8      	uxtb	r0, r3
  401890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  401894:	0e1b      	lsrs	r3, r3, #24
  401896:	9300      	str	r3, [sp, #0]
  401898:	4603      	mov	r3, r0
  40189a:	485f      	ldr	r0, [pc, #380]	; (401a18 <m2m_wifi_cb+0x2f4>)
  40189c:	4c5d      	ldr	r4, [pc, #372]	; (401a14 <m2m_wifi_cb+0x2f0>)
  40189e:	47a0      	blx	r4
  4018a0:	485e      	ldr	r0, [pc, #376]	; (401a1c <m2m_wifi_cb+0x2f8>)
  4018a2:	4b5c      	ldr	r3, [pc, #368]	; (401a14 <m2m_wifi_cb+0x2f0>)
  4018a4:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  4018a6:	4b58      	ldr	r3, [pc, #352]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4018a8:	681b      	ldr	r3, [r3, #0]
  4018aa:	2b00      	cmp	r3, #0
  4018ac:	f000 80ef 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  4018b0:	4b55      	ldr	r3, [pc, #340]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4018b2:	681b      	ldr	r3, [r3, #0]
  4018b4:	2100      	movs	r1, #0
  4018b6:	2034      	movs	r0, #52	; 0x34
  4018b8:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  4018ba:	e0e8      	b.n	401a8e <m2m_wifi_cb+0x36a>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  4018bc:	79fb      	ldrb	r3, [r7, #7]
  4018be:	2b11      	cmp	r3, #17
  4018c0:	d11e      	bne.n	401900 <m2m_wifi_cb+0x1dc>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  4018c2:	4b57      	ldr	r3, [pc, #348]	; (401a20 <m2m_wifi_cb+0x2fc>)
  4018c4:	2200      	movs	r2, #0
  4018c6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  4018c8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
  4018cc:	2300      	movs	r3, #0
  4018ce:	2204      	movs	r2, #4
  4018d0:	6838      	ldr	r0, [r7, #0]
  4018d2:	4c4c      	ldr	r4, [pc, #304]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4018d4:	47a0      	blx	r4
  4018d6:	4603      	mov	r3, r0
  4018d8:	2b00      	cmp	r3, #0
  4018da:	f040 80d8 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			gu8ChNum = strState.u8NumofCh;
  4018de:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
  4018e2:	4b50      	ldr	r3, [pc, #320]	; (401a24 <m2m_wifi_cb+0x300>)
  4018e4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  4018e6:	4b48      	ldr	r3, [pc, #288]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4018e8:	681b      	ldr	r3, [r3, #0]
  4018ea:	2b00      	cmp	r3, #0
  4018ec:	f000 80cf 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  4018f0:	4b45      	ldr	r3, [pc, #276]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4018f2:	681b      	ldr	r3, [r3, #0]
  4018f4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
  4018f8:	4611      	mov	r1, r2
  4018fa:	2011      	movs	r0, #17
  4018fc:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  4018fe:	e0c6      	b.n	401a8e <m2m_wifi_cb+0x36a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  401900:	79fb      	ldrb	r3, [r7, #7]
  401902:	2b13      	cmp	r3, #19
  401904:	d117      	bne.n	401936 <m2m_wifi_cb+0x212>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  401906:	f107 010c 	add.w	r1, r7, #12
  40190a:	2300      	movs	r3, #0
  40190c:	222c      	movs	r2, #44	; 0x2c
  40190e:	6838      	ldr	r0, [r7, #0]
  401910:	4c3c      	ldr	r4, [pc, #240]	; (401a04 <m2m_wifi_cb+0x2e0>)
  401912:	47a0      	blx	r4
  401914:	4603      	mov	r3, r0
  401916:	2b00      	cmp	r3, #0
  401918:	f040 80b9 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  40191c:	4b3a      	ldr	r3, [pc, #232]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40191e:	681b      	ldr	r3, [r3, #0]
  401920:	2b00      	cmp	r3, #0
  401922:	f000 80b4 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  401926:	4b38      	ldr	r3, [pc, #224]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401928:	681b      	ldr	r3, [r3, #0]
  40192a:	f107 020c 	add.w	r2, r7, #12
  40192e:	4611      	mov	r1, r2
  401930:	2013      	movs	r0, #19
  401932:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401934:	e0ab      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  401936:	79fb      	ldrb	r3, [r7, #7]
  401938:	2b04      	cmp	r3, #4
  40193a:	d117      	bne.n	40196c <m2m_wifi_cb+0x248>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  40193c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
  401940:	2300      	movs	r3, #0
  401942:	2204      	movs	r2, #4
  401944:	6838      	ldr	r0, [r7, #0]
  401946:	4c2f      	ldr	r4, [pc, #188]	; (401a04 <m2m_wifi_cb+0x2e0>)
  401948:	47a0      	blx	r4
  40194a:	4603      	mov	r3, r0
  40194c:	2b00      	cmp	r3, #0
  40194e:	f040 809e 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  401952:	4b2d      	ldr	r3, [pc, #180]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401954:	681b      	ldr	r3, [r3, #0]
  401956:	2b00      	cmp	r3, #0
  401958:	f000 8099 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  40195c:	4b2a      	ldr	r3, [pc, #168]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40195e:	681b      	ldr	r3, [r3, #0]
  401960:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
  401964:	4611      	mov	r1, r2
  401966:	2004      	movs	r0, #4
  401968:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  40196a:	e090      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  40196c:	79fb      	ldrb	r3, [r7, #7]
  40196e:	2b65      	cmp	r3, #101	; 0x65
  401970:	d116      	bne.n	4019a0 <m2m_wifi_cb+0x27c>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401972:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
  401976:	2300      	movs	r3, #0
  401978:	2204      	movs	r2, #4
  40197a:	6838      	ldr	r0, [r7, #0]
  40197c:	4c21      	ldr	r4, [pc, #132]	; (401a04 <m2m_wifi_cb+0x2e0>)
  40197e:	47a0      	blx	r4
  401980:	4603      	mov	r3, r0
  401982:	2b00      	cmp	r3, #0
  401984:	f040 8083 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  401988:	4b1f      	ldr	r3, [pc, #124]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40198a:	681b      	ldr	r3, [r3, #0]
  40198c:	2b00      	cmp	r3, #0
  40198e:	d07e      	beq.n	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  401990:	4b1d      	ldr	r3, [pc, #116]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401992:	681b      	ldr	r3, [r3, #0]
  401994:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
  401998:	4611      	mov	r1, r2
  40199a:	2065      	movs	r0, #101	; 0x65
  40199c:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  40199e:	e076      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  4019a0:	79fb      	ldrb	r3, [r7, #7]
  4019a2:	2b09      	cmp	r3, #9
  4019a4:	d115      	bne.n	4019d2 <m2m_wifi_cb+0x2ae>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  4019a6:	f107 010c 	add.w	r1, r7, #12
  4019aa:	2301      	movs	r3, #1
  4019ac:	2264      	movs	r2, #100	; 0x64
  4019ae:	6838      	ldr	r0, [r7, #0]
  4019b0:	4c14      	ldr	r4, [pc, #80]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4019b2:	47a0      	blx	r4
  4019b4:	4603      	mov	r3, r0
  4019b6:	2b00      	cmp	r3, #0
  4019b8:	d169      	bne.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
  4019ba:	4b13      	ldr	r3, [pc, #76]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4019bc:	681b      	ldr	r3, [r3, #0]
  4019be:	2b00      	cmp	r3, #0
  4019c0:	d065      	beq.n	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  4019c2:	4b11      	ldr	r3, [pc, #68]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4019c4:	681b      	ldr	r3, [r3, #0]
  4019c6:	f107 020c 	add.w	r2, r7, #12
  4019ca:	4611      	mov	r1, r2
  4019cc:	2009      	movs	r0, #9
  4019ce:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  4019d0:	e05d      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  4019d2:	79fb      	ldrb	r3, [r7, #7]
  4019d4:	2b2a      	cmp	r3, #42	; 0x2a
  4019d6:	d127      	bne.n	401a28 <m2m_wifi_cb+0x304>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  4019d8:	f107 0178 	add.w	r1, r7, #120	; 0x78
  4019dc:	2301      	movs	r3, #1
  4019de:	2204      	movs	r2, #4
  4019e0:	6838      	ldr	r0, [r7, #0]
  4019e2:	4c08      	ldr	r4, [pc, #32]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4019e4:	47a0      	blx	r4
  4019e6:	4603      	mov	r3, r0
  4019e8:	2b00      	cmp	r3, #0
  4019ea:	d150      	bne.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
  4019ec:	4b06      	ldr	r3, [pc, #24]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4019ee:	681b      	ldr	r3, [r3, #0]
  4019f0:	2b00      	cmp	r3, #0
  4019f2:	d04c      	beq.n	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  4019f4:	4b04      	ldr	r3, [pc, #16]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4019f6:	681b      	ldr	r3, [r3, #0]
  4019f8:	f107 0278 	add.w	r2, r7, #120	; 0x78
  4019fc:	4611      	mov	r1, r2
  4019fe:	202a      	movs	r0, #42	; 0x2a
  401a00:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401a02:	e044      	b.n	401a8e <m2m_wifi_cb+0x36a>
  401a04:	004014d9 	.word	0x004014d9
  401a08:	20400984 	.word	0x20400984
  401a0c:	00400be9 	.word	0x00400be9
  401a10:	0040df80 	.word	0x0040df80
  401a14:	004078bd 	.word	0x004078bd
  401a18:	0040df8c 	.word	0x0040df8c
  401a1c:	0040dfac 	.word	0x0040dfac
  401a20:	20400981 	.word	0x20400981
  401a24:	20400980 	.word	0x20400980
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  401a28:	79fb      	ldrb	r3, [r7, #7]
  401a2a:	2b20      	cmp	r3, #32
  401a2c:	d121      	bne.n	401a72 <m2m_wifi_cb+0x34e>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  401a2e:	f107 0170 	add.w	r1, r7, #112	; 0x70
  401a32:	2300      	movs	r3, #0
  401a34:	2208      	movs	r2, #8
  401a36:	6838      	ldr	r0, [r7, #0]
  401a38:	4c17      	ldr	r4, [pc, #92]	; (401a98 <m2m_wifi_cb+0x374>)
  401a3a:	47a0      	blx	r4
  401a3c:	4603      	mov	r3, r0
  401a3e:	2b00      	cmp	r3, #0
  401a40:	d125      	bne.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  401a42:	683b      	ldr	r3, [r7, #0]
  401a44:	f103 0008 	add.w	r0, r3, #8
  401a48:	6f39      	ldr	r1, [r7, #112]	; 0x70
  401a4a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
  401a4e:	2301      	movs	r3, #1
  401a50:	4c11      	ldr	r4, [pc, #68]	; (401a98 <m2m_wifi_cb+0x374>)
  401a52:	47a0      	blx	r4
  401a54:	4603      	mov	r3, r0
  401a56:	2b00      	cmp	r3, #0
  401a58:	d119      	bne.n	401a8e <m2m_wifi_cb+0x36a>
			{
				if(gpfAppWifiCb)
  401a5a:	4b10      	ldr	r3, [pc, #64]	; (401a9c <m2m_wifi_cb+0x378>)
  401a5c:	681b      	ldr	r3, [r3, #0]
  401a5e:	2b00      	cmp	r3, #0
  401a60:	d015      	beq.n	401a8e <m2m_wifi_cb+0x36a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  401a62:	4b0e      	ldr	r3, [pc, #56]	; (401a9c <m2m_wifi_cb+0x378>)
  401a64:	681b      	ldr	r3, [r3, #0]
  401a66:	f107 0270 	add.w	r2, r7, #112	; 0x70
  401a6a:	4611      	mov	r1, r2
  401a6c:	2020      	movs	r0, #32
  401a6e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401a70:	e00d      	b.n	401a8e <m2m_wifi_cb+0x36a>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  401a72:	f44f 7295 	mov.w	r2, #298	; 0x12a
  401a76:	490a      	ldr	r1, [pc, #40]	; (401aa0 <m2m_wifi_cb+0x37c>)
  401a78:	480a      	ldr	r0, [pc, #40]	; (401aa4 <m2m_wifi_cb+0x380>)
  401a7a:	4b0b      	ldr	r3, [pc, #44]	; (401aa8 <m2m_wifi_cb+0x384>)
  401a7c:	4798      	blx	r3
  401a7e:	79fb      	ldrb	r3, [r7, #7]
  401a80:	4619      	mov	r1, r3
  401a82:	480a      	ldr	r0, [pc, #40]	; (401aac <m2m_wifi_cb+0x388>)
  401a84:	4b08      	ldr	r3, [pc, #32]	; (401aa8 <m2m_wifi_cb+0x384>)
  401a86:	4798      	blx	r3
  401a88:	4809      	ldr	r0, [pc, #36]	; (401ab0 <m2m_wifi_cb+0x38c>)
  401a8a:	4b07      	ldr	r3, [pc, #28]	; (401aa8 <m2m_wifi_cb+0x384>)
  401a8c:	4798      	blx	r3
	}
}
  401a8e:	bf00      	nop
  401a90:	37ac      	adds	r7, #172	; 0xac
  401a92:	46bd      	mov	sp, r7
  401a94:	bd90      	pop	{r4, r7, pc}
  401a96:	bf00      	nop
  401a98:	004014d9 	.word	0x004014d9
  401a9c:	20400984 	.word	0x20400984
  401aa0:	0040e2c0 	.word	0x0040e2c0
  401aa4:	0040dfb0 	.word	0x0040dfb0
  401aa8:	004078bd 	.word	0x004078bd
  401aac:	0040dfc4 	.word	0x0040dfc4
  401ab0:	0040dfac 	.word	0x0040dfac

00401ab4 <m2m_validate_ap_parameters>:
_EXIT0:
	return ret;
}

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
  401ab4:	b580      	push	{r7, lr}
  401ab6:	b084      	sub	sp, #16
  401ab8:	af00      	add	r7, sp, #0
  401aba:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
  401abc:	2300      	movs	r3, #0
  401abe:	73fb      	strb	r3, [r7, #15]
	/* Check for incoming pointer */
	if(pstrM2MAPConfig == NULL)
  401ac0:	687b      	ldr	r3, [r7, #4]
  401ac2:	2b00      	cmp	r3, #0
  401ac4:	d10e      	bne.n	401ae4 <m2m_validate_ap_parameters+0x30>
	{
		M2M_ERR("INVALID POINTER\n");
  401ac6:	f240 1243 	movw	r2, #323	; 0x143
  401aca:	4968      	ldr	r1, [pc, #416]	; (401c6c <m2m_validate_ap_parameters+0x1b8>)
  401acc:	4868      	ldr	r0, [pc, #416]	; (401c70 <m2m_validate_ap_parameters+0x1bc>)
  401ace:	4b69      	ldr	r3, [pc, #420]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401ad0:	4798      	blx	r3
  401ad2:	4869      	ldr	r0, [pc, #420]	; (401c78 <m2m_validate_ap_parameters+0x1c4>)
  401ad4:	4b67      	ldr	r3, [pc, #412]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401ad6:	4798      	blx	r3
  401ad8:	4868      	ldr	r0, [pc, #416]	; (401c7c <m2m_validate_ap_parameters+0x1c8>)
  401ada:	4b66      	ldr	r3, [pc, #408]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401adc:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
  401ade:	23f4      	movs	r3, #244	; 0xf4
  401ae0:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
  401ae2:	e0bd      	b.n	401c60 <m2m_validate_ap_parameters+0x1ac>
	}
	/* Check for SSID */
	if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) >= M2M_MAX_SSID_LEN))
  401ae4:	687b      	ldr	r3, [r7, #4]
  401ae6:	4618      	mov	r0, r3
  401ae8:	4b65      	ldr	r3, [pc, #404]	; (401c80 <m2m_validate_ap_parameters+0x1cc>)
  401aea:	4798      	blx	r3
  401aec:	4603      	mov	r3, r0
  401aee:	2b00      	cmp	r3, #0
  401af0:	d006      	beq.n	401b00 <m2m_validate_ap_parameters+0x4c>
  401af2:	687b      	ldr	r3, [r7, #4]
  401af4:	4618      	mov	r0, r3
  401af6:	4b62      	ldr	r3, [pc, #392]	; (401c80 <m2m_validate_ap_parameters+0x1cc>)
  401af8:	4798      	blx	r3
  401afa:	4603      	mov	r3, r0
  401afc:	2b20      	cmp	r3, #32
  401afe:	d90e      	bls.n	401b1e <m2m_validate_ap_parameters+0x6a>
	{
		M2M_ERR("INVALID SSID\n");
  401b00:	f44f 72a5 	mov.w	r2, #330	; 0x14a
  401b04:	4959      	ldr	r1, [pc, #356]	; (401c6c <m2m_validate_ap_parameters+0x1b8>)
  401b06:	485a      	ldr	r0, [pc, #360]	; (401c70 <m2m_validate_ap_parameters+0x1bc>)
  401b08:	4b5a      	ldr	r3, [pc, #360]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401b0a:	4798      	blx	r3
  401b0c:	485d      	ldr	r0, [pc, #372]	; (401c84 <m2m_validate_ap_parameters+0x1d0>)
  401b0e:	4b59      	ldr	r3, [pc, #356]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401b10:	4798      	blx	r3
  401b12:	485a      	ldr	r0, [pc, #360]	; (401c7c <m2m_validate_ap_parameters+0x1c8>)
  401b14:	4b57      	ldr	r3, [pc, #348]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401b16:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
  401b18:	23f4      	movs	r3, #244	; 0xf4
  401b1a:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
  401b1c:	e0a0      	b.n	401c60 <m2m_validate_ap_parameters+0x1ac>
	}
	/* Check for Channel */
	if(pstrM2MAPConfig->u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPConfig->u8ListenChannel < M2M_WIFI_CH_1)
  401b1e:	687b      	ldr	r3, [r7, #4]
  401b20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  401b24:	2b0d      	cmp	r3, #13
  401b26:	d90e      	bls.n	401b46 <m2m_validate_ap_parameters+0x92>
	{
		M2M_ERR("INVALID CH\n");
  401b28:	f240 1251 	movw	r2, #337	; 0x151
  401b2c:	494f      	ldr	r1, [pc, #316]	; (401c6c <m2m_validate_ap_parameters+0x1b8>)
  401b2e:	4850      	ldr	r0, [pc, #320]	; (401c70 <m2m_validate_ap_parameters+0x1bc>)
  401b30:	4b50      	ldr	r3, [pc, #320]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401b32:	4798      	blx	r3
  401b34:	4854      	ldr	r0, [pc, #336]	; (401c88 <m2m_validate_ap_parameters+0x1d4>)
  401b36:	4b4f      	ldr	r3, [pc, #316]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401b38:	4798      	blx	r3
  401b3a:	4850      	ldr	r0, [pc, #320]	; (401c7c <m2m_validate_ap_parameters+0x1c8>)
  401b3c:	4b4d      	ldr	r3, [pc, #308]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401b3e:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
  401b40:	23f4      	movs	r3, #244	; 0xf4
  401b42:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
  401b44:	e08c      	b.n	401c60 <m2m_validate_ap_parameters+0x1ac>
	}
	/* Check for DHCP Server IP address */
	if(!(pstrM2MAPConfig->au8DHCPServerIP[0] || pstrM2MAPConfig->au8DHCPServerIP[1]))
  401b46:	687b      	ldr	r3, [r7, #4]
  401b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  401b4c:	2b00      	cmp	r3, #0
  401b4e:	d118      	bne.n	401b82 <m2m_validate_ap_parameters+0xce>
  401b50:	687b      	ldr	r3, [r7, #4]
  401b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
  401b56:	2b00      	cmp	r3, #0
  401b58:	d113      	bne.n	401b82 <m2m_validate_ap_parameters+0xce>
	{
		if(!(pstrM2MAPConfig->au8DHCPServerIP[2]))
  401b5a:	687b      	ldr	r3, [r7, #4]
  401b5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
  401b60:	2b00      	cmp	r3, #0
  401b62:	d10e      	bne.n	401b82 <m2m_validate_ap_parameters+0xce>
		{
			M2M_ERR("INVALID DHCP SERVER IP\n");
  401b64:	f44f 72ad 	mov.w	r2, #346	; 0x15a
  401b68:	4940      	ldr	r1, [pc, #256]	; (401c6c <m2m_validate_ap_parameters+0x1b8>)
  401b6a:	4841      	ldr	r0, [pc, #260]	; (401c70 <m2m_validate_ap_parameters+0x1bc>)
  401b6c:	4b41      	ldr	r3, [pc, #260]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401b6e:	4798      	blx	r3
  401b70:	4846      	ldr	r0, [pc, #280]	; (401c8c <m2m_validate_ap_parameters+0x1d8>)
  401b72:	4b40      	ldr	r3, [pc, #256]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401b74:	4798      	blx	r3
  401b76:	4841      	ldr	r0, [pc, #260]	; (401c7c <m2m_validate_ap_parameters+0x1c8>)
  401b78:	4b3e      	ldr	r3, [pc, #248]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401b7a:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
  401b7c:	23f4      	movs	r3, #244	; 0xf4
  401b7e:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
  401b80:	e06e      	b.n	401c60 <m2m_validate_ap_parameters+0x1ac>
		}
	}
	/* Check for Security */
	if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_OPEN)
  401b82:	687b      	ldr	r3, [r7, #4]
  401b84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  401b88:	2b01      	cmp	r3, #1
  401b8a:	d068      	beq.n	401c5e <m2m_validate_ap_parameters+0x1aa>
	{
		goto ERR1;
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WEP)
  401b8c:	687b      	ldr	r3, [r7, #4]
  401b8e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  401b92:	2b03      	cmp	r3, #3
  401b94:	d154      	bne.n	401c40 <m2m_validate_ap_parameters+0x18c>
	{
		/* Check for WEP Key index */
		if((pstrM2MAPConfig->u8KeyIndx <= 0) || (pstrM2MAPConfig->u8KeyIndx > WEP_KEY_MAX_INDEX))
  401b96:	687b      	ldr	r3, [r7, #4]
  401b98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401b9c:	2b00      	cmp	r3, #0
  401b9e:	d004      	beq.n	401baa <m2m_validate_ap_parameters+0xf6>
  401ba0:	687b      	ldr	r3, [r7, #4]
  401ba2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401ba6:	2b04      	cmp	r3, #4
  401ba8:	d90e      	bls.n	401bc8 <m2m_validate_ap_parameters+0x114>
		{
			M2M_ERR("INVALID KEY INDEX\n");
  401baa:	f240 1269 	movw	r2, #361	; 0x169
  401bae:	492f      	ldr	r1, [pc, #188]	; (401c6c <m2m_validate_ap_parameters+0x1b8>)
  401bb0:	482f      	ldr	r0, [pc, #188]	; (401c70 <m2m_validate_ap_parameters+0x1bc>)
  401bb2:	4b30      	ldr	r3, [pc, #192]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401bb4:	4798      	blx	r3
  401bb6:	4836      	ldr	r0, [pc, #216]	; (401c90 <m2m_validate_ap_parameters+0x1dc>)
  401bb8:	4b2e      	ldr	r3, [pc, #184]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401bba:	4798      	blx	r3
  401bbc:	482f      	ldr	r0, [pc, #188]	; (401c7c <m2m_validate_ap_parameters+0x1c8>)
  401bbe:	4b2d      	ldr	r3, [pc, #180]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401bc0:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
  401bc2:	23f4      	movs	r3, #244	; 0xf4
  401bc4:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
  401bc6:	e04b      	b.n	401c60 <m2m_validate_ap_parameters+0x1ac>
		}
		/* Check for WEP Key size */
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
  401bc8:	687b      	ldr	r3, [r7, #4]
  401bca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401bce:	2b0a      	cmp	r3, #10
  401bd0:	d013      	beq.n	401bfa <m2m_validate_ap_parameters+0x146>
			(pstrM2MAPConfig->u8KeySz != WEP_104_KEY_STRING_SIZE)
  401bd2:	687b      	ldr	r3, [r7, #4]
  401bd4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
			M2M_ERR("INVALID KEY INDEX\n");
			s8Ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		/* Check for WEP Key size */
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
  401bd8:	2b1a      	cmp	r3, #26
  401bda:	d00e      	beq.n	401bfa <m2m_validate_ap_parameters+0x146>
			(pstrM2MAPConfig->u8KeySz != WEP_104_KEY_STRING_SIZE)
		)
		{
			M2M_ERR("INVALID KEY SIZE\n");
  401bdc:	f44f 72b9 	mov.w	r2, #370	; 0x172
  401be0:	4922      	ldr	r1, [pc, #136]	; (401c6c <m2m_validate_ap_parameters+0x1b8>)
  401be2:	4823      	ldr	r0, [pc, #140]	; (401c70 <m2m_validate_ap_parameters+0x1bc>)
  401be4:	4b23      	ldr	r3, [pc, #140]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401be6:	4798      	blx	r3
  401be8:	482a      	ldr	r0, [pc, #168]	; (401c94 <m2m_validate_ap_parameters+0x1e0>)
  401bea:	4b22      	ldr	r3, [pc, #136]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401bec:	4798      	blx	r3
  401bee:	4823      	ldr	r0, [pc, #140]	; (401c7c <m2m_validate_ap_parameters+0x1c8>)
  401bf0:	4b20      	ldr	r3, [pc, #128]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401bf2:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
  401bf4:	23f4      	movs	r3, #244	; 0xf4
  401bf6:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
  401bf8:	e032      	b.n	401c60 <m2m_validate_ap_parameters+0x1ac>
		}
		/* Check for WEP Key */
		if((pstrM2MAPConfig->au8WepKey == NULL) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) > WEP_104_KEY_STRING_SIZE))
  401bfa:	687b      	ldr	r3, [r7, #4]
  401bfc:	3324      	adds	r3, #36	; 0x24
  401bfe:	2b00      	cmp	r3, #0
  401c00:	d00f      	beq.n	401c22 <m2m_validate_ap_parameters+0x16e>
  401c02:	687b      	ldr	r3, [r7, #4]
  401c04:	3324      	adds	r3, #36	; 0x24
  401c06:	4618      	mov	r0, r3
  401c08:	4b1d      	ldr	r3, [pc, #116]	; (401c80 <m2m_validate_ap_parameters+0x1cc>)
  401c0a:	4798      	blx	r3
  401c0c:	4603      	mov	r3, r0
  401c0e:	2b00      	cmp	r3, #0
  401c10:	d007      	beq.n	401c22 <m2m_validate_ap_parameters+0x16e>
  401c12:	687b      	ldr	r3, [r7, #4]
  401c14:	3324      	adds	r3, #36	; 0x24
  401c16:	4618      	mov	r0, r3
  401c18:	4b19      	ldr	r3, [pc, #100]	; (401c80 <m2m_validate_ap_parameters+0x1cc>)
  401c1a:	4798      	blx	r3
  401c1c:	4603      	mov	r3, r0
  401c1e:	2b1a      	cmp	r3, #26
  401c20:	d91e      	bls.n	401c60 <m2m_validate_ap_parameters+0x1ac>
		{
			M2M_ERR("INVALID WEP KEY\n");
  401c22:	f240 1279 	movw	r2, #377	; 0x179
  401c26:	4911      	ldr	r1, [pc, #68]	; (401c6c <m2m_validate_ap_parameters+0x1b8>)
  401c28:	4811      	ldr	r0, [pc, #68]	; (401c70 <m2m_validate_ap_parameters+0x1bc>)
  401c2a:	4b12      	ldr	r3, [pc, #72]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401c2c:	4798      	blx	r3
  401c2e:	481a      	ldr	r0, [pc, #104]	; (401c98 <m2m_validate_ap_parameters+0x1e4>)
  401c30:	4b10      	ldr	r3, [pc, #64]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401c32:	4798      	blx	r3
  401c34:	4811      	ldr	r0, [pc, #68]	; (401c7c <m2m_validate_ap_parameters+0x1c8>)
  401c36:	4b0f      	ldr	r3, [pc, #60]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401c38:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
  401c3a:	23f4      	movs	r3, #244	; 0xf4
  401c3c:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
  401c3e:	e00f      	b.n	401c60 <m2m_validate_ap_parameters+0x1ac>
		}
	}
	else
	{
		M2M_ERR("INVALID AUTHENTICATION MODE\n");
  401c40:	f44f 72c0 	mov.w	r2, #384	; 0x180
  401c44:	4909      	ldr	r1, [pc, #36]	; (401c6c <m2m_validate_ap_parameters+0x1b8>)
  401c46:	480a      	ldr	r0, [pc, #40]	; (401c70 <m2m_validate_ap_parameters+0x1bc>)
  401c48:	4b0a      	ldr	r3, [pc, #40]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401c4a:	4798      	blx	r3
  401c4c:	4813      	ldr	r0, [pc, #76]	; (401c9c <m2m_validate_ap_parameters+0x1e8>)
  401c4e:	4b09      	ldr	r3, [pc, #36]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401c50:	4798      	blx	r3
  401c52:	480a      	ldr	r0, [pc, #40]	; (401c7c <m2m_validate_ap_parameters+0x1c8>)
  401c54:	4b07      	ldr	r3, [pc, #28]	; (401c74 <m2m_validate_ap_parameters+0x1c0>)
  401c56:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
  401c58:	23f4      	movs	r3, #244	; 0xf4
  401c5a:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
  401c5c:	e000      	b.n	401c60 <m2m_validate_ap_parameters+0x1ac>
		}
	}
	/* Check for Security */
	if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_OPEN)
	{
		goto ERR1;
  401c5e:	bf00      	nop
		s8Ret = M2M_ERR_FAIL;
		goto ERR1;
	}
	
ERR1:
	return s8Ret;
  401c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  401c64:	4618      	mov	r0, r3
  401c66:	3710      	adds	r7, #16
  401c68:	46bd      	mov	sp, r7
  401c6a:	bd80      	pop	{r7, pc}
  401c6c:	0040e2cc 	.word	0x0040e2cc
  401c70:	0040dfb0 	.word	0x0040dfb0
  401c74:	004078bd 	.word	0x004078bd
  401c78:	0040dfd8 	.word	0x0040dfd8
  401c7c:	0040dfac 	.word	0x0040dfac
  401c80:	00400c25 	.word	0x00400c25
  401c84:	0040dfec 	.word	0x0040dfec
  401c88:	0040dffc 	.word	0x0040dffc
  401c8c:	0040e008 	.word	0x0040e008
  401c90:	0040e020 	.word	0x0040e020
  401c94:	0040e034 	.word	0x0040e034
  401c98:	0040e048 	.word	0x0040e048
  401c9c:	0040e05c 	.word	0x0040e05c

00401ca0 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401ca0:	b590      	push	{r4, r7, lr}
  401ca2:	b08d      	sub	sp, #52	; 0x34
  401ca4:	af00      	add	r7, sp, #0
  401ca6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
  401ca8:	2300      	movs	r3, #0
  401caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  401cae:	2301      	movs	r3, #1
  401cb0:	72fb      	strb	r3, [r7, #11]
	
	if(param == NULL) {
  401cb2:	687b      	ldr	r3, [r7, #4]
  401cb4:	2b00      	cmp	r3, #0
  401cb6:	d103      	bne.n	401cc0 <m2m_wifi_init+0x20>
		ret = M2M_ERR_FAIL;
  401cb8:	23f4      	movs	r3, #244	; 0xf4
  401cba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		goto _EXIT0;
  401cbe:	e06a      	b.n	401d96 <m2m_wifi_init+0xf6>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401cc0:	687b      	ldr	r3, [r7, #4]
  401cc2:	681b      	ldr	r3, [r3, #0]
  401cc4:	4a37      	ldr	r2, [pc, #220]	; (401da4 <m2m_wifi_init+0x104>)
  401cc6:	6013      	str	r3, [r2, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  401cc8:	4b37      	ldr	r3, [pc, #220]	; (401da8 <m2m_wifi_init+0x108>)
  401cca:	2200      	movs	r2, #0
  401ccc:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  401cce:	f107 030b 	add.w	r3, r7, #11
  401cd2:	4618      	mov	r0, r3
  401cd4:	4b35      	ldr	r3, [pc, #212]	; (401dac <m2m_wifi_init+0x10c>)
  401cd6:	4798      	blx	r3
  401cd8:	4603      	mov	r3, r0
  401cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  401cde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
  401ce2:	2b00      	cmp	r3, #0
  401ce4:	d154      	bne.n	401d90 <m2m_wifi_init+0xf0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  401ce6:	2000      	movs	r0, #0
  401ce8:	4b31      	ldr	r3, [pc, #196]	; (401db0 <m2m_wifi_init+0x110>)
  401cea:	4798      	blx	r3
  401cec:	4603      	mov	r3, r0
  401cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401cf2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
  401cf6:	2b00      	cmp	r3, #0
  401cf8:	d145      	bne.n	401d86 <m2m_wifi_init+0xe6>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  401cfa:	492e      	ldr	r1, [pc, #184]	; (401db4 <m2m_wifi_init+0x114>)
  401cfc:	2001      	movs	r0, #1
  401cfe:	4b2e      	ldr	r3, [pc, #184]	; (401db8 <m2m_wifi_init+0x118>)
  401d00:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  401d02:	f107 030c 	add.w	r3, r7, #12
  401d06:	4618      	mov	r0, r3
  401d08:	4b2c      	ldr	r3, [pc, #176]	; (401dbc <m2m_wifi_init+0x11c>)
  401d0a:	4798      	blx	r3
  401d0c:	4603      	mov	r3, r0
  401d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  401d12:	482b      	ldr	r0, [pc, #172]	; (401dc0 <m2m_wifi_init+0x120>)
  401d14:	4b2b      	ldr	r3, [pc, #172]	; (401dc4 <m2m_wifi_init+0x124>)
  401d16:	4798      	blx	r3
  401d18:	7c3b      	ldrb	r3, [r7, #16]
  401d1a:	4619      	mov	r1, r3
  401d1c:	7c7b      	ldrb	r3, [r7, #17]
  401d1e:	461a      	mov	r2, r3
  401d20:	7cbb      	ldrb	r3, [r7, #18]
  401d22:	4829      	ldr	r0, [pc, #164]	; (401dc8 <m2m_wifi_init+0x128>)
  401d24:	4c27      	ldr	r4, [pc, #156]	; (401dc4 <m2m_wifi_init+0x124>)
  401d26:	47a0      	blx	r4
  401d28:	4828      	ldr	r0, [pc, #160]	; (401dcc <m2m_wifi_init+0x12c>)
  401d2a:	4b26      	ldr	r3, [pc, #152]	; (401dc4 <m2m_wifi_init+0x124>)
  401d2c:	4798      	blx	r3
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  401d2e:	4824      	ldr	r0, [pc, #144]	; (401dc0 <m2m_wifi_init+0x120>)
  401d30:	4b24      	ldr	r3, [pc, #144]	; (401dc4 <m2m_wifi_init+0x124>)
  401d32:	4798      	blx	r3
  401d34:	7cfb      	ldrb	r3, [r7, #19]
  401d36:	4619      	mov	r1, r3
  401d38:	7d3b      	ldrb	r3, [r7, #20]
  401d3a:	461a      	mov	r2, r3
  401d3c:	7d7b      	ldrb	r3, [r7, #21]
  401d3e:	4824      	ldr	r0, [pc, #144]	; (401dd0 <m2m_wifi_init+0x130>)
  401d40:	4c20      	ldr	r4, [pc, #128]	; (401dc4 <m2m_wifi_init+0x124>)
  401d42:	47a0      	blx	r4
  401d44:	4821      	ldr	r0, [pc, #132]	; (401dcc <m2m_wifi_init+0x12c>)
  401d46:	4b1f      	ldr	r3, [pc, #124]	; (401dc4 <m2m_wifi_init+0x124>)
  401d48:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  401d4a:	481d      	ldr	r0, [pc, #116]	; (401dc0 <m2m_wifi_init+0x120>)
  401d4c:	4b1d      	ldr	r3, [pc, #116]	; (401dc4 <m2m_wifi_init+0x124>)
  401d4e:	4798      	blx	r3
  401d50:	2300      	movs	r3, #0
  401d52:	2203      	movs	r2, #3
  401d54:	2113      	movs	r1, #19
  401d56:	481f      	ldr	r0, [pc, #124]	; (401dd4 <m2m_wifi_init+0x134>)
  401d58:	4c1a      	ldr	r4, [pc, #104]	; (401dc4 <m2m_wifi_init+0x124>)
  401d5a:	47a0      	blx	r4
  401d5c:	481b      	ldr	r0, [pc, #108]	; (401dcc <m2m_wifi_init+0x12c>)
  401d5e:	4b19      	ldr	r3, [pc, #100]	; (401dc4 <m2m_wifi_init+0x124>)
  401d60:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  401d62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
  401d66:	f113 0f0d 	cmn.w	r3, #13
  401d6a:	d113      	bne.n	401d94 <m2m_wifi_init+0xf4>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  401d6c:	f240 12d5 	movw	r2, #469	; 0x1d5
  401d70:	4919      	ldr	r1, [pc, #100]	; (401dd8 <m2m_wifi_init+0x138>)
  401d72:	481a      	ldr	r0, [pc, #104]	; (401ddc <m2m_wifi_init+0x13c>)
  401d74:	4b13      	ldr	r3, [pc, #76]	; (401dc4 <m2m_wifi_init+0x124>)
  401d76:	4798      	blx	r3
  401d78:	4819      	ldr	r0, [pc, #100]	; (401de0 <m2m_wifi_init+0x140>)
  401d7a:	4b12      	ldr	r3, [pc, #72]	; (401dc4 <m2m_wifi_init+0x124>)
  401d7c:	4798      	blx	r3
  401d7e:	4813      	ldr	r0, [pc, #76]	; (401dcc <m2m_wifi_init+0x12c>)
  401d80:	4b10      	ldr	r3, [pc, #64]	; (401dc4 <m2m_wifi_init+0x124>)
  401d82:	4798      	blx	r3
	}

	goto _EXIT0;
  401d84:	e006      	b.n	401d94 <m2m_wifi_init+0xf4>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401d86:	bf00      	nop
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  401d88:	2000      	movs	r0, #0
  401d8a:	4b16      	ldr	r3, [pc, #88]	; (401de4 <m2m_wifi_init+0x144>)
  401d8c:	4798      	blx	r3
  401d8e:	e002      	b.n	401d96 <m2m_wifi_init+0xf6>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  401d90:	bf00      	nop
  401d92:	e000      	b.n	401d96 <m2m_wifi_init+0xf6>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
  401d94:	bf00      	nop

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
  401d96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
  401d9a:	4618      	mov	r0, r3
  401d9c:	3734      	adds	r7, #52	; 0x34
  401d9e:	46bd      	mov	sp, r7
  401da0:	bd90      	pop	{r4, r7, pc}
  401da2:	bf00      	nop
  401da4:	20400984 	.word	0x20400984
  401da8:	20400981 	.word	0x20400981
  401dac:	00402f0d 	.word	0x00402f0d
  401db0:	00400e31 	.word	0x00400e31
  401db4:	00401725 	.word	0x00401725
  401db8:	0040165d 	.word	0x0040165d
  401dbc:	00402de5 	.word	0x00402de5
  401dc0:	0040df80 	.word	0x0040df80
  401dc4:	004078bd 	.word	0x004078bd
  401dc8:	0040e0fc 	.word	0x0040e0fc
  401dcc:	0040dfac 	.word	0x0040dfac
  401dd0:	0040e118 	.word	0x0040e118
  401dd4:	0040e134 	.word	0x0040e134
  401dd8:	0040e2e8 	.word	0x0040e2e8
  401ddc:	0040dfb0 	.word	0x0040dfb0
  401de0:	0040e150 	.word	0x0040e150
  401de4:	0040303d 	.word	0x0040303d

00401de8 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  401de8:	b580      	push	{r7, lr}
  401dea:	b082      	sub	sp, #8
  401dec:	af00      	add	r7, sp, #0
  401dee:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
  401df0:	4b03      	ldr	r3, [pc, #12]	; (401e00 <m2m_wifi_handle_events+0x18>)
  401df2:	4798      	blx	r3
  401df4:	4603      	mov	r3, r0
}
  401df6:	4618      	mov	r0, r3
  401df8:	3708      	adds	r7, #8
  401dfa:	46bd      	mov	sp, r7
  401dfc:	bd80      	pop	{r7, pc}
  401dfe:	bf00      	nop
  401e00:	00401459 	.word	0x00401459

00401e04 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  401e04:	b590      	push	{r4, r7, lr}
  401e06:	b087      	sub	sp, #28
  401e08:	af02      	add	r7, sp, #8
  401e0a:	60f8      	str	r0, [r7, #12]
  401e0c:	607b      	str	r3, [r7, #4]
  401e0e:	460b      	mov	r3, r1
  401e10:	72fb      	strb	r3, [r7, #11]
  401e12:	4613      	mov	r3, r2
  401e14:	72bb      	strb	r3, [r7, #10]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  401e16:	7aba      	ldrb	r2, [r7, #10]
  401e18:	7af9      	ldrb	r1, [r7, #11]
  401e1a:	2300      	movs	r3, #0
  401e1c:	9301      	str	r3, [sp, #4]
  401e1e:	8c3b      	ldrh	r3, [r7, #32]
  401e20:	9300      	str	r3, [sp, #0]
  401e22:	687b      	ldr	r3, [r7, #4]
  401e24:	68f8      	ldr	r0, [r7, #12]
  401e26:	4c03      	ldr	r4, [pc, #12]	; (401e34 <m2m_wifi_connect+0x30>)
  401e28:	47a0      	blx	r4
  401e2a:	4603      	mov	r3, r0
}
  401e2c:	4618      	mov	r0, r3
  401e2e:	3714      	adds	r7, #20
  401e30:	46bd      	mov	sp, r7
  401e32:	bd90      	pop	{r4, r7, pc}
  401e34:	00401e39 	.word	0x00401e39

00401e38 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  401e38:	b590      	push	{r4, r7, lr}
  401e3a:	b0ab      	sub	sp, #172	; 0xac
  401e3c:	af04      	add	r7, sp, #16
  401e3e:	60f8      	str	r0, [r7, #12]
  401e40:	607b      	str	r3, [r7, #4]
  401e42:	460b      	mov	r3, r1
  401e44:	72fb      	strb	r3, [r7, #11]
  401e46:	4613      	mov	r3, r2
  401e48:	72bb      	strb	r3, [r7, #10]
	sint8				ret = M2M_SUCCESS;
  401e4a:	2300      	movs	r3, #0
  401e4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  401e50:	7abb      	ldrb	r3, [r7, #10]
  401e52:	2b01      	cmp	r3, #1
  401e54:	d06b      	beq.n	401f2e <m2m_wifi_connect_sc+0xf6>
	{
		if(pvAuthInfo == NULL)
  401e56:	687b      	ldr	r3, [r7, #4]
  401e58:	2b00      	cmp	r3, #0
  401e5a:	d10f      	bne.n	401e7c <m2m_wifi_connect_sc+0x44>
		{
			M2M_ERR("Key is not valid\n");
  401e5c:	f240 2203 	movw	r2, #515	; 0x203
  401e60:	49ab      	ldr	r1, [pc, #684]	; (402110 <m2m_wifi_connect_sc+0x2d8>)
  401e62:	48ac      	ldr	r0, [pc, #688]	; (402114 <m2m_wifi_connect_sc+0x2dc>)
  401e64:	4bac      	ldr	r3, [pc, #688]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401e66:	4798      	blx	r3
  401e68:	48ac      	ldr	r0, [pc, #688]	; (40211c <m2m_wifi_connect_sc+0x2e4>)
  401e6a:	4bab      	ldr	r3, [pc, #684]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401e6c:	4798      	blx	r3
  401e6e:	48ac      	ldr	r0, [pc, #688]	; (402120 <m2m_wifi_connect_sc+0x2e8>)
  401e70:	4ba9      	ldr	r3, [pc, #676]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401e72:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  401e74:	23f4      	movs	r3, #244	; 0xf4
  401e76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  401e7a:	e186      	b.n	40218a <m2m_wifi_connect_sc+0x352>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401e7c:	7abb      	ldrb	r3, [r7, #10]
  401e7e:	2b02      	cmp	r3, #2
  401e80:	d155      	bne.n	401f2e <m2m_wifi_connect_sc+0xf6>
  401e82:	6878      	ldr	r0, [r7, #4]
  401e84:	4ba7      	ldr	r3, [pc, #668]	; (402124 <m2m_wifi_connect_sc+0x2ec>)
  401e86:	4798      	blx	r3
  401e88:	4603      	mov	r3, r0
  401e8a:	2b40      	cmp	r3, #64	; 0x40
  401e8c:	d14f      	bne.n	401f2e <m2m_wifi_connect_sc+0xf6>
		{
			uint8 i = 0;
  401e8e:	2300      	movs	r3, #0
  401e90:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			uint8* pu8Psk = (uint8*)pvAuthInfo;
  401e94:	687b      	ldr	r3, [r7, #4]
  401e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			while(i < (M2M_MAX_PSK_LEN-1))
  401e9a:	e044      	b.n	401f26 <m2m_wifi_connect_sc+0xee>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  401e9c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401ea0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401ea4:	4413      	add	r3, r2
  401ea6:	781b      	ldrb	r3, [r3, #0]
  401ea8:	2b2f      	cmp	r3, #47	; 0x2f
  401eaa:	d927      	bls.n	401efc <m2m_wifi_connect_sc+0xc4>
  401eac:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401eb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401eb4:	4413      	add	r3, r2
  401eb6:	781b      	ldrb	r3, [r3, #0]
  401eb8:	2b39      	cmp	r3, #57	; 0x39
  401eba:	d907      	bls.n	401ecc <m2m_wifi_connect_sc+0x94>
  401ebc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401ec0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401ec4:	4413      	add	r3, r2
  401ec6:	781b      	ldrb	r3, [r3, #0]
  401ec8:	2b40      	cmp	r3, #64	; 0x40
  401eca:	d917      	bls.n	401efc <m2m_wifi_connect_sc+0xc4>
  401ecc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401ed0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401ed4:	4413      	add	r3, r2
  401ed6:	781b      	ldrb	r3, [r3, #0]
  401ed8:	2b46      	cmp	r3, #70	; 0x46
  401eda:	d907      	bls.n	401eec <m2m_wifi_connect_sc+0xb4>
  401edc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401ee0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401ee4:	4413      	add	r3, r2
  401ee6:	781b      	ldrb	r3, [r3, #0]
  401ee8:	2b60      	cmp	r3, #96	; 0x60
  401eea:	d907      	bls.n	401efc <m2m_wifi_connect_sc+0xc4>
  401eec:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401ef0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401ef4:	4413      	add	r3, r2
  401ef6:	781b      	ldrb	r3, [r3, #0]
  401ef8:	2b66      	cmp	r3, #102	; 0x66
  401efa:	d90f      	bls.n	401f1c <m2m_wifi_connect_sc+0xe4>
				{
					M2M_ERR("Invalid Key\n");
  401efc:	f240 220f 	movw	r2, #527	; 0x20f
  401f00:	4983      	ldr	r1, [pc, #524]	; (402110 <m2m_wifi_connect_sc+0x2d8>)
  401f02:	4884      	ldr	r0, [pc, #528]	; (402114 <m2m_wifi_connect_sc+0x2dc>)
  401f04:	4b84      	ldr	r3, [pc, #528]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401f06:	4798      	blx	r3
  401f08:	4887      	ldr	r0, [pc, #540]	; (402128 <m2m_wifi_connect_sc+0x2f0>)
  401f0a:	4b83      	ldr	r3, [pc, #524]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401f0c:	4798      	blx	r3
  401f0e:	4884      	ldr	r0, [pc, #528]	; (402120 <m2m_wifi_connect_sc+0x2e8>)
  401f10:	4b81      	ldr	r3, [pc, #516]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401f12:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
  401f14:	23f4      	movs	r3, #244	; 0xf4
  401f16:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					goto ERR1;
  401f1a:	e136      	b.n	40218a <m2m_wifi_connect_sc+0x352>
				}
				i++;
  401f1c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401f20:	3301      	adds	r3, #1
  401f22:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  401f26:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401f2a:	2b3f      	cmp	r3, #63	; 0x3f
  401f2c:	d9b6      	bls.n	401e9c <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  401f2e:	7afb      	ldrb	r3, [r7, #11]
  401f30:	2b00      	cmp	r3, #0
  401f32:	d002      	beq.n	401f3a <m2m_wifi_connect_sc+0x102>
  401f34:	7afb      	ldrb	r3, [r7, #11]
  401f36:	2b20      	cmp	r3, #32
  401f38:	d90f      	bls.n	401f5a <m2m_wifi_connect_sc+0x122>
	{
		M2M_ERR("SSID LEN INVALID\n");
  401f3a:	f240 2219 	movw	r2, #537	; 0x219
  401f3e:	4974      	ldr	r1, [pc, #464]	; (402110 <m2m_wifi_connect_sc+0x2d8>)
  401f40:	4874      	ldr	r0, [pc, #464]	; (402114 <m2m_wifi_connect_sc+0x2dc>)
  401f42:	4b75      	ldr	r3, [pc, #468]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401f44:	4798      	blx	r3
  401f46:	4879      	ldr	r0, [pc, #484]	; (40212c <m2m_wifi_connect_sc+0x2f4>)
  401f48:	4b73      	ldr	r3, [pc, #460]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401f4a:	4798      	blx	r3
  401f4c:	4874      	ldr	r0, [pc, #464]	; (402120 <m2m_wifi_connect_sc+0x2e8>)
  401f4e:	4b72      	ldr	r3, [pc, #456]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401f50:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
  401f52:	23f4      	movs	r3, #244	; 0xf4
  401f54:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
  401f58:	e117      	b.n	40218a <m2m_wifi_connect_sc+0x352>
	}

	if(u16Ch>M2M_WIFI_CH_14)
  401f5a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
  401f5e:	2b0d      	cmp	r3, #13
  401f60:	d913      	bls.n	401f8a <m2m_wifi_connect_sc+0x152>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  401f62:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
  401f66:	2bff      	cmp	r3, #255	; 0xff
  401f68:	d00f      	beq.n	401f8a <m2m_wifi_connect_sc+0x152>
		{
			M2M_ERR("CH INVALID\n");
  401f6a:	f240 2222 	movw	r2, #546	; 0x222
  401f6e:	4968      	ldr	r1, [pc, #416]	; (402110 <m2m_wifi_connect_sc+0x2d8>)
  401f70:	4868      	ldr	r0, [pc, #416]	; (402114 <m2m_wifi_connect_sc+0x2dc>)
  401f72:	4b69      	ldr	r3, [pc, #420]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401f74:	4798      	blx	r3
  401f76:	486e      	ldr	r0, [pc, #440]	; (402130 <m2m_wifi_connect_sc+0x2f8>)
  401f78:	4b67      	ldr	r3, [pc, #412]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401f7a:	4798      	blx	r3
  401f7c:	4868      	ldr	r0, [pc, #416]	; (402120 <m2m_wifi_connect_sc+0x2e8>)
  401f7e:	4b66      	ldr	r3, [pc, #408]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  401f80:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  401f82:	23f4      	movs	r3, #244	; 0xf4
  401f84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  401f88:	e0ff      	b.n	40218a <m2m_wifi_connect_sc+0x352>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  401f8a:	7afa      	ldrb	r2, [r7, #11]
  401f8c:	f107 0314 	add.w	r3, r7, #20
  401f90:	3346      	adds	r3, #70	; 0x46
  401f92:	68f9      	ldr	r1, [r7, #12]
  401f94:	4618      	mov	r0, r3
  401f96:	4b67      	ldr	r3, [pc, #412]	; (402134 <m2m_wifi_connect_sc+0x2fc>)
  401f98:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  401f9a:	7afb      	ldrb	r3, [r7, #11]
  401f9c:	f107 0298 	add.w	r2, r7, #152	; 0x98
  401fa0:	4413      	add	r3, r2
  401fa2:	2200      	movs	r2, #0
  401fa4:	f803 2c3e 	strb.w	r2, [r3, #-62]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  401fa8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
  401fac:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  401fb0:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
  401fb4:	2b00      	cmp	r3, #0
  401fb6:	bf14      	ite	ne
  401fb8:	2301      	movne	r3, #1
  401fba:	2300      	moveq	r3, #0
  401fbc:	b2db      	uxtb	r3, r3
  401fbe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
  401fc2:	f107 0314 	add.w	r3, r7, #20
  401fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	pstrAuthInfo->u8SecType		= u8SecType;
  401fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  401fce:	7aba      	ldrb	r2, [r7, #10]
  401fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if(u8SecType == M2M_WIFI_SEC_WEP)
  401fd4:	7abb      	ldrb	r3, [r7, #10]
  401fd6:	2b03      	cmp	r3, #3
  401fd8:	d163      	bne.n	4020a2 <m2m_wifi_connect_sc+0x26a>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
  401fda:	687b      	ldr	r3, [r7, #4]
  401fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
  401fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  401fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  401fe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401fec:	781b      	ldrb	r3, [r3, #0]
  401fee:	3b01      	subs	r3, #1
  401ff0:	b2da      	uxtb	r2, r3
  401ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401ff6:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  401ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401ffc:	781b      	ldrb	r3, [r3, #0]
  401ffe:	2b03      	cmp	r3, #3
  402000:	d913      	bls.n	40202a <m2m_wifi_connect_sc+0x1f2>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  402002:	f240 2239 	movw	r2, #569	; 0x239
  402006:	4942      	ldr	r1, [pc, #264]	; (402110 <m2m_wifi_connect_sc+0x2d8>)
  402008:	4842      	ldr	r0, [pc, #264]	; (402114 <m2m_wifi_connect_sc+0x2dc>)
  40200a:	4b43      	ldr	r3, [pc, #268]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  40200c:	4798      	blx	r3
  40200e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  402012:	781b      	ldrb	r3, [r3, #0]
  402014:	4619      	mov	r1, r3
  402016:	4848      	ldr	r0, [pc, #288]	; (402138 <m2m_wifi_connect_sc+0x300>)
  402018:	4b3f      	ldr	r3, [pc, #252]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  40201a:	4798      	blx	r3
  40201c:	4840      	ldr	r0, [pc, #256]	; (402120 <m2m_wifi_connect_sc+0x2e8>)
  40201e:	4b3e      	ldr	r3, [pc, #248]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  402020:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  402022:	23f4      	movs	r3, #244	; 0xf4
  402024:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  402028:	e0af      	b.n	40218a <m2m_wifi_connect_sc+0x352>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  40202a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  40202e:	785b      	ldrb	r3, [r3, #1]
  402030:	3b01      	subs	r3, #1
  402032:	b2da      	uxtb	r2, r3
  402034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  402038:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  40203a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  40203e:	785b      	ldrb	r3, [r3, #1]
  402040:	2b0a      	cmp	r3, #10
  402042:	d018      	beq.n	402076 <m2m_wifi_connect_sc+0x23e>
  402044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  402048:	785b      	ldrb	r3, [r3, #1]
  40204a:	2b1a      	cmp	r3, #26
  40204c:	d013      	beq.n	402076 <m2m_wifi_connect_sc+0x23e>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  40204e:	f44f 7210 	mov.w	r2, #576	; 0x240
  402052:	492f      	ldr	r1, [pc, #188]	; (402110 <m2m_wifi_connect_sc+0x2d8>)
  402054:	482f      	ldr	r0, [pc, #188]	; (402114 <m2m_wifi_connect_sc+0x2dc>)
  402056:	4b30      	ldr	r3, [pc, #192]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  402058:	4798      	blx	r3
  40205a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  40205e:	785b      	ldrb	r3, [r3, #1]
  402060:	4619      	mov	r1, r3
  402062:	4836      	ldr	r0, [pc, #216]	; (40213c <m2m_wifi_connect_sc+0x304>)
  402064:	4b2c      	ldr	r3, [pc, #176]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  402066:	4798      	blx	r3
  402068:	482d      	ldr	r0, [pc, #180]	; (402120 <m2m_wifi_connect_sc+0x2e8>)
  40206a:	4b2b      	ldr	r3, [pc, #172]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  40206c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  40206e:	23f4      	movs	r3, #244	; 0xf4
  402070:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  402074:	e089      	b.n	40218a <m2m_wifi_connect_sc+0x352>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  402076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  40207a:	1c98      	adds	r0, r3, #2
  40207c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  402080:	1c99      	adds	r1, r3, #2
  402082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  402086:	785b      	ldrb	r3, [r3, #1]
  402088:	461a      	mov	r2, r3
  40208a:	4b2a      	ldr	r3, [pc, #168]	; (402134 <m2m_wifi_connect_sc+0x2fc>)
  40208c:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  40208e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  402092:	785b      	ldrb	r3, [r3, #1]
  402094:	461a      	mov	r2, r3
  402096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  40209a:	4413      	add	r3, r2
  40209c:	2200      	movs	r2, #0
  40209e:	709a      	strb	r2, [r3, #2]
  4020a0:	e063      	b.n	40216a <m2m_wifi_connect_sc+0x332>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4020a2:	7abb      	ldrb	r3, [r7, #10]
  4020a4:	2b02      	cmp	r3, #2
  4020a6:	d127      	bne.n	4020f8 <m2m_wifi_connect_sc+0x2c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4020a8:	6878      	ldr	r0, [r7, #4]
  4020aa:	4b1e      	ldr	r3, [pc, #120]	; (402124 <m2m_wifi_connect_sc+0x2ec>)
  4020ac:	4798      	blx	r3
  4020ae:	4603      	mov	r3, r0
  4020b0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  4020b4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
  4020b8:	2b00      	cmp	r3, #0
  4020ba:	d003      	beq.n	4020c4 <m2m_wifi_connect_sc+0x28c>
  4020bc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
  4020c0:	2b40      	cmp	r3, #64	; 0x40
  4020c2:	d90f      	bls.n	4020e4 <m2m_wifi_connect_sc+0x2ac>
		{
			M2M_ERR("Incorrect PSK key length\n");
  4020c4:	f240 224f 	movw	r2, #591	; 0x24f
  4020c8:	4911      	ldr	r1, [pc, #68]	; (402110 <m2m_wifi_connect_sc+0x2d8>)
  4020ca:	4812      	ldr	r0, [pc, #72]	; (402114 <m2m_wifi_connect_sc+0x2dc>)
  4020cc:	4b12      	ldr	r3, [pc, #72]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  4020ce:	4798      	blx	r3
  4020d0:	481b      	ldr	r0, [pc, #108]	; (402140 <m2m_wifi_connect_sc+0x308>)
  4020d2:	4b11      	ldr	r3, [pc, #68]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  4020d4:	4798      	blx	r3
  4020d6:	4812      	ldr	r0, [pc, #72]	; (402120 <m2m_wifi_connect_sc+0x2e8>)
  4020d8:	4b0f      	ldr	r3, [pc, #60]	; (402118 <m2m_wifi_connect_sc+0x2e0>)
  4020da:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  4020dc:	23f4      	movs	r3, #244	; 0xf4
  4020de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  4020e2:	e052      	b.n	40218a <m2m_wifi_connect_sc+0x352>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4020e4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  4020e8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
  4020ec:	3301      	adds	r3, #1
  4020ee:	461a      	mov	r2, r3
  4020f0:	6879      	ldr	r1, [r7, #4]
  4020f2:	4b10      	ldr	r3, [pc, #64]	; (402134 <m2m_wifi_connect_sc+0x2fc>)
  4020f4:	4798      	blx	r3
  4020f6:	e038      	b.n	40216a <m2m_wifi_connect_sc+0x332>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  4020f8:	7abb      	ldrb	r3, [r7, #10]
  4020fa:	2b04      	cmp	r3, #4
  4020fc:	d122      	bne.n	402144 <m2m_wifi_connect_sc+0x30c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  4020fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  402102:	223e      	movs	r2, #62	; 0x3e
  402104:	6879      	ldr	r1, [r7, #4]
  402106:	4618      	mov	r0, r3
  402108:	4b0a      	ldr	r3, [pc, #40]	; (402134 <m2m_wifi_connect_sc+0x2fc>)
  40210a:	4798      	blx	r3
  40210c:	e02d      	b.n	40216a <m2m_wifi_connect_sc+0x332>
  40210e:	bf00      	nop
  402110:	0040e2f8 	.word	0x0040e2f8
  402114:	0040dfb0 	.word	0x0040dfb0
  402118:	004078bd 	.word	0x004078bd
  40211c:	0040e16c 	.word	0x0040e16c
  402120:	0040dfac 	.word	0x0040dfac
  402124:	00400c25 	.word	0x00400c25
  402128:	0040e180 	.word	0x0040e180
  40212c:	0040e190 	.word	0x0040e190
  402130:	0040e1a4 	.word	0x0040e1a4
  402134:	00400ba9 	.word	0x00400ba9
  402138:	0040e1b0 	.word	0x0040e1b0
  40213c:	0040e1cc 	.word	0x0040e1cc
  402140:	0040e1e8 	.word	0x0040e1e8
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  402144:	7abb      	ldrb	r3, [r7, #10]
  402146:	2b01      	cmp	r3, #1
  402148:	d00f      	beq.n	40216a <m2m_wifi_connect_sc+0x332>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  40214a:	f240 225f 	movw	r2, #607	; 0x25f
  40214e:	4912      	ldr	r1, [pc, #72]	; (402198 <m2m_wifi_connect_sc+0x360>)
  402150:	4812      	ldr	r0, [pc, #72]	; (40219c <m2m_wifi_connect_sc+0x364>)
  402152:	4b13      	ldr	r3, [pc, #76]	; (4021a0 <m2m_wifi_connect_sc+0x368>)
  402154:	4798      	blx	r3
  402156:	4813      	ldr	r0, [pc, #76]	; (4021a4 <m2m_wifi_connect_sc+0x36c>)
  402158:	4b11      	ldr	r3, [pc, #68]	; (4021a0 <m2m_wifi_connect_sc+0x368>)
  40215a:	4798      	blx	r3
  40215c:	4812      	ldr	r0, [pc, #72]	; (4021a8 <m2m_wifi_connect_sc+0x370>)
  40215e:	4b10      	ldr	r3, [pc, #64]	; (4021a0 <m2m_wifi_connect_sc+0x368>)
  402160:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
  402162:	23f4      	movs	r3, #244	; 0xf4
  402164:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
  402168:	e00f      	b.n	40218a <m2m_wifi_connect_sc+0x352>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  40216a:	f107 0214 	add.w	r2, r7, #20
  40216e:	2300      	movs	r3, #0
  402170:	9302      	str	r3, [sp, #8]
  402172:	2300      	movs	r3, #0
  402174:	9301      	str	r3, [sp, #4]
  402176:	2300      	movs	r3, #0
  402178:	9300      	str	r3, [sp, #0]
  40217a:	236c      	movs	r3, #108	; 0x6c
  40217c:	2128      	movs	r1, #40	; 0x28
  40217e:	2001      	movs	r0, #1
  402180:	4c0a      	ldr	r4, [pc, #40]	; (4021ac <m2m_wifi_connect_sc+0x374>)
  402182:	47a0      	blx	r4
  402184:	4603      	mov	r3, r0
  402186:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

ERR1:
	return ret;
  40218a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
  40218e:	4618      	mov	r0, r3
  402190:	379c      	adds	r7, #156	; 0x9c
  402192:	46bd      	mov	sp, r7
  402194:	bd90      	pop	{r4, r7, pc}
  402196:	bf00      	nop
  402198:	0040e2f8 	.word	0x0040e2f8
  40219c:	0040dfb0 	.word	0x0040dfb0
  4021a0:	004078bd 	.word	0x004078bd
  4021a4:	0040e204 	.word	0x0040e204
  4021a8:	0040dfac 	.word	0x0040dfac
  4021ac:	00400e95 	.word	0x00400e95

004021b0 <m2m_wifi_set_mac_address>:
sint8 m2m_wifi_disconnect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
}
sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
  4021b0:	b590      	push	{r4, r7, lr}
  4021b2:	b089      	sub	sp, #36	; 0x24
  4021b4:	af04      	add	r7, sp, #16
  4021b6:	6078      	str	r0, [r7, #4]
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
  4021b8:	f107 0308 	add.w	r3, r7, #8
  4021bc:	2206      	movs	r2, #6
  4021be:	6879      	ldr	r1, [r7, #4]
  4021c0:	4618      	mov	r0, r3
  4021c2:	4b0a      	ldr	r3, [pc, #40]	; (4021ec <m2m_wifi_set_mac_address+0x3c>)
  4021c4:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
  4021c6:	f107 0208 	add.w	r2, r7, #8
  4021ca:	2300      	movs	r3, #0
  4021cc:	9302      	str	r3, [sp, #8]
  4021ce:	2300      	movs	r3, #0
  4021d0:	9301      	str	r3, [sp, #4]
  4021d2:	2300      	movs	r3, #0
  4021d4:	9300      	str	r3, [sp, #0]
  4021d6:	2308      	movs	r3, #8
  4021d8:	2102      	movs	r1, #2
  4021da:	2001      	movs	r0, #1
  4021dc:	4c04      	ldr	r4, [pc, #16]	; (4021f0 <m2m_wifi_set_mac_address+0x40>)
  4021de:	47a0      	blx	r4
  4021e0:	4603      	mov	r3, r0
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
  4021e2:	4618      	mov	r0, r3
  4021e4:	3714      	adds	r7, #20
  4021e6:	46bd      	mov	sp, r7
  4021e8:	bd90      	pop	{r4, r7, pc}
  4021ea:	bf00      	nop
  4021ec:	00400ba9 	.word	0x00400ba9
  4021f0:	00400e95 	.word	0x00400e95

004021f4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
  4021f4:	b480      	push	{r7}
  4021f6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
  4021f8:	2300      	movs	r3, #0
}
  4021fa:	4618      	mov	r0, r3
  4021fc:	46bd      	mov	sp, r7
  4021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402202:	4770      	bx	lr

00402204 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
  402204:	b580      	push	{r7, lr}
  402206:	b084      	sub	sp, #16
  402208:	af00      	add	r7, sp, #0
  40220a:	6078      	str	r0, [r7, #4]
  40220c:	6039      	str	r1, [r7, #0]
	sint8 ret = M2M_SUCCESS;
  40220e:	2300      	movs	r3, #0
  402210:	73fb      	strb	r3, [r7, #15]
	ret = hif_chip_wake();
  402212:	4b0e      	ldr	r3, [pc, #56]	; (40224c <m2m_wifi_get_otp_mac_address+0x48>)
  402214:	4798      	blx	r3
  402216:	4603      	mov	r3, r0
  402218:	73fb      	strb	r3, [r7, #15]
	if(ret == M2M_SUCCESS)
  40221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40221e:	2b00      	cmp	r3, #0
  402220:	d10d      	bne.n	40223e <m2m_wifi_get_otp_mac_address+0x3a>
	{
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
  402222:	6839      	ldr	r1, [r7, #0]
  402224:	6878      	ldr	r0, [r7, #4]
  402226:	4b0a      	ldr	r3, [pc, #40]	; (402250 <m2m_wifi_get_otp_mac_address+0x4c>)
  402228:	4798      	blx	r3
  40222a:	4603      	mov	r3, r0
  40222c:	73fb      	strb	r3, [r7, #15]
		if(ret == M2M_SUCCESS)
  40222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402232:	2b00      	cmp	r3, #0
  402234:	d103      	bne.n	40223e <m2m_wifi_get_otp_mac_address+0x3a>
		{
			ret = hif_chip_sleep();
  402236:	4b07      	ldr	r3, [pc, #28]	; (402254 <m2m_wifi_get_otp_mac_address+0x50>)
  402238:	4798      	blx	r3
  40223a:	4603      	mov	r3, r0
  40223c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return ret;
  40223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  402242:	4618      	mov	r0, r3
  402244:	3710      	adds	r7, #16
  402246:	46bd      	mov	sp, r7
  402248:	bd80      	pop	{r7, pc}
  40224a:	bf00      	nop
  40224c:	00400cf5 	.word	0x00400cf5
  402250:	00402a45 	.word	0x00402a45
  402254:	00400d79 	.word	0x00400d79

00402258 <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
  402258:	b580      	push	{r7, lr}
  40225a:	b084      	sub	sp, #16
  40225c:	af00      	add	r7, sp, #0
  40225e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
  402260:	2300      	movs	r3, #0
  402262:	73fb      	strb	r3, [r7, #15]
	ret = hif_chip_wake();
  402264:	4b0d      	ldr	r3, [pc, #52]	; (40229c <m2m_wifi_get_mac_address+0x44>)
  402266:	4798      	blx	r3
  402268:	4603      	mov	r3, r0
  40226a:	73fb      	strb	r3, [r7, #15]
	if(ret == M2M_SUCCESS)
  40226c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402270:	2b00      	cmp	r3, #0
  402272:	d10c      	bne.n	40228e <m2m_wifi_get_mac_address+0x36>
	{
		ret = nmi_get_mac_address(pu8MacAddr);
  402274:	6878      	ldr	r0, [r7, #4]
  402276:	4b0a      	ldr	r3, [pc, #40]	; (4022a0 <m2m_wifi_get_mac_address+0x48>)
  402278:	4798      	blx	r3
  40227a:	4603      	mov	r3, r0
  40227c:	73fb      	strb	r3, [r7, #15]
		if(ret == M2M_SUCCESS)
  40227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402282:	2b00      	cmp	r3, #0
  402284:	d103      	bne.n	40228e <m2m_wifi_get_mac_address+0x36>
		{
			ret = hif_chip_sleep();
  402286:	4b07      	ldr	r3, [pc, #28]	; (4022a4 <m2m_wifi_get_mac_address+0x4c>)
  402288:	4798      	blx	r3
  40228a:	4603      	mov	r3, r0
  40228c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return ret;
  40228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  402292:	4618      	mov	r0, r3
  402294:	3710      	adds	r7, #16
  402296:	46bd      	mov	sp, r7
  402298:	bd80      	pop	{r7, pc}
  40229a:	bf00      	nop
  40229c:	00400cf5 	.word	0x00400cf5
  4022a0:	00402b1d 	.word	0x00402b1d
  4022a4:	00400d79 	.word	0x00400d79

004022a8 <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization. 
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
  4022a8:	b590      	push	{r4, r7, lr}
  4022aa:	b093      	sub	sp, #76	; 0x4c
  4022ac:	af04      	add	r7, sp, #16
  4022ae:	6078      	str	r0, [r7, #4]
  4022b0:	460b      	mov	r3, r1
  4022b2:	70fb      	strb	r3, [r7, #3]
	tstrM2MDeviceNameConfig strDeviceName;
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
  4022b4:	78fb      	ldrb	r3, [r7, #3]
  4022b6:	2b2f      	cmp	r3, #47	; 0x2f
  4022b8:	d901      	bls.n	4022be <m2m_wifi_set_device_name+0x16>
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
  4022ba:	2330      	movs	r3, #48	; 0x30
  4022bc:	70fb      	strb	r3, [r7, #3]
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
  4022be:	78fb      	ldrb	r3, [r7, #3]
  4022c0:	3301      	adds	r3, #1
  4022c2:	70fb      	strb	r3, [r7, #3]
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
  4022c4:	78fa      	ldrb	r2, [r7, #3]
  4022c6:	f107 0308 	add.w	r3, r7, #8
  4022ca:	6879      	ldr	r1, [r7, #4]
  4022cc:	4618      	mov	r0, r3
  4022ce:	4b0a      	ldr	r3, [pc, #40]	; (4022f8 <m2m_wifi_set_device_name+0x50>)
  4022d0:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
  4022d2:	f107 0208 	add.w	r2, r7, #8
  4022d6:	2300      	movs	r3, #0
  4022d8:	9302      	str	r3, [sp, #8]
  4022da:	2300      	movs	r3, #0
  4022dc:	9301      	str	r3, [sp, #4]
  4022de:	2300      	movs	r3, #0
  4022e0:	9300      	str	r3, [sp, #0]
  4022e2:	2330      	movs	r3, #48	; 0x30
  4022e4:	2107      	movs	r1, #7
  4022e6:	2001      	movs	r0, #1
  4022e8:	4c04      	ldr	r4, [pc, #16]	; (4022fc <m2m_wifi_set_device_name+0x54>)
  4022ea:	47a0      	blx	r4
  4022ec:	4603      	mov	r3, r0
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
  4022ee:	4618      	mov	r0, r3
  4022f0:	373c      	adds	r7, #60	; 0x3c
  4022f2:	46bd      	mov	sp, r7
  4022f4:	bd90      	pop	{r4, r7, pc}
  4022f6:	bf00      	nop
  4022f8:	00400ba9 	.word	0x00400ba9
  4022fc:	00400e95 	.word	0x00400e95

00402300 <m2m_wifi_start_provision_mode>:
	return s8Ret;
}
#endif

sint8 m2m_wifi_start_provision_mode(tstrM2MAPConfig *pstrAPConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
  402300:	b590      	push	{r4, r7, lr}
  402302:	b0ad      	sub	sp, #180	; 0xb4
  402304:	af04      	add	r7, sp, #16
  402306:	60f8      	str	r0, [r7, #12]
  402308:	60b9      	str	r1, [r7, #8]
  40230a:	4613      	mov	r3, r2
  40230c:	71fb      	strb	r3, [r7, #7]
	sint8	s8Ret = M2M_ERR_FAIL;
  40230e:	23f4      	movs	r3, #244	; 0xf4
  402310:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	if((pstrAPConfig != NULL))
  402314:	68fb      	ldr	r3, [r7, #12]
  402316:	2b00      	cmp	r3, #0
  402318:	d040      	beq.n	40239c <m2m_wifi_start_provision_mode+0x9c>
	{
		tstrM2MProvisionModeConfig	strProvConfig;
		if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrAPConfig))
  40231a:	68f8      	ldr	r0, [r7, #12]
  40231c:	4b22      	ldr	r3, [pc, #136]	; (4023a8 <m2m_wifi_start_provision_mode+0xa8>)
  40231e:	4798      	blx	r3
  402320:	4603      	mov	r3, r0
  402322:	2b00      	cmp	r3, #0
  402324:	d13a      	bne.n	40239c <m2m_wifi_start_provision_mode+0x9c>
		{
			m2m_memcpy((uint8*)&strProvConfig.strApConfig, (uint8*)pstrAPConfig, sizeof(tstrM2MAPConfig));
  402326:	f107 0310 	add.w	r3, r7, #16
  40232a:	2248      	movs	r2, #72	; 0x48
  40232c:	68f9      	ldr	r1, [r7, #12]
  40232e:	4618      	mov	r0, r3
  402330:	4b1e      	ldr	r3, [pc, #120]	; (4023ac <m2m_wifi_start_provision_mode+0xac>)
  402332:	4798      	blx	r3
			if((m2m_strlen((uint8 *)pcHttpServerDomainName) <= 0) || (NULL == pcHttpServerDomainName))
  402334:	68b8      	ldr	r0, [r7, #8]
  402336:	4b1e      	ldr	r3, [pc, #120]	; (4023b0 <m2m_wifi_start_provision_mode+0xb0>)
  402338:	4798      	blx	r3
  40233a:	4603      	mov	r3, r0
  40233c:	2b00      	cmp	r3, #0
  40233e:	d002      	beq.n	402346 <m2m_wifi_start_provision_mode+0x46>
  402340:	68bb      	ldr	r3, [r7, #8]
  402342:	2b00      	cmp	r3, #0
  402344:	d10c      	bne.n	402360 <m2m_wifi_start_provision_mode+0x60>
			{
				M2M_ERR("INVALID DOMAIN NAME\n");
  402346:	f240 424a 	movw	r2, #1098	; 0x44a
  40234a:	491a      	ldr	r1, [pc, #104]	; (4023b4 <m2m_wifi_start_provision_mode+0xb4>)
  40234c:	481a      	ldr	r0, [pc, #104]	; (4023b8 <m2m_wifi_start_provision_mode+0xb8>)
  40234e:	4b1b      	ldr	r3, [pc, #108]	; (4023bc <m2m_wifi_start_provision_mode+0xbc>)
  402350:	4798      	blx	r3
  402352:	481b      	ldr	r0, [pc, #108]	; (4023c0 <m2m_wifi_start_provision_mode+0xc0>)
  402354:	4b19      	ldr	r3, [pc, #100]	; (4023bc <m2m_wifi_start_provision_mode+0xbc>)
  402356:	4798      	blx	r3
  402358:	481a      	ldr	r0, [pc, #104]	; (4023c4 <m2m_wifi_start_provision_mode+0xc4>)
  40235a:	4b18      	ldr	r3, [pc, #96]	; (4023bc <m2m_wifi_start_provision_mode+0xbc>)
  40235c:	4798      	blx	r3
  40235e:	e01d      	b.n	40239c <m2m_wifi_start_provision_mode+0x9c>
				goto ERR1;
			}
			m2m_memcpy((uint8*)strProvConfig.acHttpServerDomainName, (uint8*)pcHttpServerDomainName, 64);
  402360:	f107 0310 	add.w	r3, r7, #16
  402364:	3348      	adds	r3, #72	; 0x48
  402366:	2240      	movs	r2, #64	; 0x40
  402368:	68b9      	ldr	r1, [r7, #8]
  40236a:	4618      	mov	r0, r3
  40236c:	4b0f      	ldr	r3, [pc, #60]	; (4023ac <m2m_wifi_start_provision_mode+0xac>)
  40236e:	4798      	blx	r3
			strProvConfig.u8EnableRedirect = bEnableHttpRedirect;
  402370:	79fb      	ldrb	r3, [r7, #7]
  402372:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
		
			/* Stop Scan if it is ongoing.
			*/
			gu8scanInProgress = 0;
  402376:	4b14      	ldr	r3, [pc, #80]	; (4023c8 <m2m_wifi_start_provision_mode+0xc8>)
  402378:	2200      	movs	r2, #0
  40237a:	701a      	strb	r2, [r3, #0]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_START_PROVISION_MODE | M2M_REQ_DATA_PKT, 
  40237c:	f107 0210 	add.w	r2, r7, #16
  402380:	2300      	movs	r3, #0
  402382:	9302      	str	r3, [sp, #8]
  402384:	2300      	movs	r3, #0
  402386:	9301      	str	r3, [sp, #4]
  402388:	2300      	movs	r3, #0
  40238a:	9300      	str	r3, [sp, #0]
  40238c:	238c      	movs	r3, #140	; 0x8c
  40238e:	2188      	movs	r1, #136	; 0x88
  402390:	2001      	movs	r0, #1
  402392:	4c0e      	ldr	r4, [pc, #56]	; (4023cc <m2m_wifi_start_provision_mode+0xcc>)
  402394:	47a0      	blx	r4
  402396:	4603      	mov	r3, r0
  402398:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		{
			/*goto ERR1;*/
		}
	}
ERR1:
	return s8Ret;
  40239c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
  4023a0:	4618      	mov	r0, r3
  4023a2:	37a4      	adds	r7, #164	; 0xa4
  4023a4:	46bd      	mov	sp, r7
  4023a6:	bd90      	pop	{r4, r7, pc}
  4023a8:	00401ab5 	.word	0x00401ab5
  4023ac:	00400ba9 	.word	0x00400ba9
  4023b0:	00400c25 	.word	0x00400c25
  4023b4:	0040e30c 	.word	0x0040e30c
  4023b8:	0040dfb0 	.word	0x0040dfb0
  4023bc:	004078bd 	.word	0x004078bd
  4023c0:	0040e270 	.word	0x0040e270
  4023c4:	0040dfac 	.word	0x0040dfac
  4023c8:	20400981 	.word	0x20400981
  4023cc:	00400e95 	.word	0x00400e95

004023d0 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4023d0:	b580      	push	{r7, lr}
  4023d2:	b086      	sub	sp, #24
  4023d4:	af00      	add	r7, sp, #0
  4023d6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
  4023d8:	2300      	movs	r3, #0
  4023da:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
  4023dc:	687b      	ldr	r3, [r7, #4]
  4023de:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4023e0:	6939      	ldr	r1, [r7, #16]
  4023e2:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
  4023e6:	4b10      	ldr	r3, [pc, #64]	; (402428 <chip_apply_conf+0x58>)
  4023e8:	4798      	blx	r3
		if(val32 != 0) {		
  4023ea:	693b      	ldr	r3, [r7, #16]
  4023ec:	2b00      	cmp	r3, #0
  4023ee:	d013      	beq.n	402418 <chip_apply_conf+0x48>
			uint32 reg = 0;
  4023f0:	2300      	movs	r3, #0
  4023f2:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4023f4:	f107 030c 	add.w	r3, r7, #12
  4023f8:	4619      	mov	r1, r3
  4023fa:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
  4023fe:	4b0b      	ldr	r3, [pc, #44]	; (40242c <chip_apply_conf+0x5c>)
  402400:	4798      	blx	r3
  402402:	4603      	mov	r3, r0
  402404:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
  402406:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40240a:	2b00      	cmp	r3, #0
  40240c:	d1e8      	bne.n	4023e0 <chip_apply_conf+0x10>
				if(reg == val32)
  40240e:	68fa      	ldr	r2, [r7, #12]
  402410:	693b      	ldr	r3, [r7, #16]
  402412:	429a      	cmp	r2, r3
  402414:	d002      	beq.n	40241c <chip_apply_conf+0x4c>
					break;
			}
		} else {
			break;
		}
	} while(1);
  402416:	e7e3      	b.n	4023e0 <chip_apply_conf+0x10>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
  402418:	bf00      	nop
  40241a:	e000      	b.n	40241e <chip_apply_conf+0x4e>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
  40241c:	bf00      	nop
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
  40241e:	2300      	movs	r3, #0
}
  402420:	4618      	mov	r0, r3
  402422:	3718      	adds	r7, #24
  402424:	46bd      	mov	sp, r7
  402426:	bd80      	pop	{r7, pc}
  402428:	00402c45 	.word	0x00402c45
  40242c:	00402c25 	.word	0x00402c25

00402430 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  402430:	b580      	push	{r7, lr}
  402432:	b084      	sub	sp, #16
  402434:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  402436:	2300      	movs	r3, #0
  402438:	73fb      	strb	r3, [r7, #15]
	uint32 reg, clk_status_reg,trials = 0;
  40243a:	2300      	movs	r3, #0
  40243c:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  40243e:	2001      	movs	r0, #1
  402440:	4b5a      	ldr	r3, [pc, #360]	; (4025ac <nm_clkless_wake+0x17c>)
  402442:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  402444:	1d3b      	adds	r3, r7, #4
  402446:	4619      	mov	r1, r3
  402448:	2001      	movs	r0, #1
  40244a:	4b59      	ldr	r3, [pc, #356]	; (4025b0 <nm_clkless_wake+0x180>)
  40244c:	4798      	blx	r3
  40244e:	4603      	mov	r3, r0
  402450:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS) {
  402452:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402456:	2b00      	cmp	r3, #0
  402458:	d00b      	beq.n	402472 <nm_clkless_wake+0x42>
		M2M_ERR("Bus error (1). Wake up failed\n");
  40245a:	2272      	movs	r2, #114	; 0x72
  40245c:	4955      	ldr	r1, [pc, #340]	; (4025b4 <nm_clkless_wake+0x184>)
  40245e:	4856      	ldr	r0, [pc, #344]	; (4025b8 <nm_clkless_wake+0x188>)
  402460:	4b56      	ldr	r3, [pc, #344]	; (4025bc <nm_clkless_wake+0x18c>)
  402462:	4798      	blx	r3
  402464:	4856      	ldr	r0, [pc, #344]	; (4025c0 <nm_clkless_wake+0x190>)
  402466:	4b55      	ldr	r3, [pc, #340]	; (4025bc <nm_clkless_wake+0x18c>)
  402468:	4798      	blx	r3
  40246a:	4856      	ldr	r0, [pc, #344]	; (4025c4 <nm_clkless_wake+0x194>)
  40246c:	4b53      	ldr	r3, [pc, #332]	; (4025bc <nm_clkless_wake+0x18c>)
  40246e:	4798      	blx	r3
		goto _WAKE_EXIT;
  402470:	e095      	b.n	40259e <nm_clkless_wake+0x16e>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  402472:	687b      	ldr	r3, [r7, #4]
  402474:	f043 0302 	orr.w	r3, r3, #2
  402478:	4619      	mov	r1, r3
  40247a:	2001      	movs	r0, #1
  40247c:	4b52      	ldr	r3, [pc, #328]	; (4025c8 <nm_clkless_wake+0x198>)
  40247e:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  402480:	2001      	movs	r0, #1
  402482:	4b4a      	ldr	r3, [pc, #296]	; (4025ac <nm_clkless_wake+0x17c>)
  402484:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402486:	4b51      	ldr	r3, [pc, #324]	; (4025cc <nm_clkless_wake+0x19c>)
  402488:	681b      	ldr	r3, [r3, #0]
  40248a:	463a      	mov	r2, r7
  40248c:	4611      	mov	r1, r2
  40248e:	4618      	mov	r0, r3
  402490:	4b47      	ldr	r3, [pc, #284]	; (4025b0 <nm_clkless_wake+0x180>)
  402492:	4798      	blx	r3
  402494:	4603      	mov	r3, r0
  402496:	73fb      	strb	r3, [r7, #15]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  402498:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40249c:	2b00      	cmp	r3, #0
  40249e:	d106      	bne.n	4024ae <nm_clkless_wake+0x7e>
  4024a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4024a4:	2b00      	cmp	r3, #0
  4024a6:	d155      	bne.n	402554 <nm_clkless_wake+0x124>
  4024a8:	683b      	ldr	r3, [r7, #0]
  4024aa:	2b00      	cmp	r3, #0
  4024ac:	d152      	bne.n	402554 <nm_clkless_wake+0x124>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  4024ae:	4b47      	ldr	r3, [pc, #284]	; (4025cc <nm_clkless_wake+0x19c>)
  4024b0:	220e      	movs	r2, #14
  4024b2:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  4024b4:	2001      	movs	r0, #1
  4024b6:	4b3d      	ldr	r3, [pc, #244]	; (4025ac <nm_clkless_wake+0x17c>)
  4024b8:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4024ba:	4b44      	ldr	r3, [pc, #272]	; (4025cc <nm_clkless_wake+0x19c>)
  4024bc:	681b      	ldr	r3, [r3, #0]
  4024be:	463a      	mov	r2, r7
  4024c0:	4611      	mov	r1, r2
  4024c2:	4618      	mov	r0, r3
  4024c4:	4b3a      	ldr	r3, [pc, #232]	; (4025b0 <nm_clkless_wake+0x180>)
  4024c6:	4798      	blx	r3
  4024c8:	4603      	mov	r3, r0
  4024ca:	73fb      	strb	r3, [r7, #15]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4024cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4024d0:	2b00      	cmp	r3, #0
  4024d2:	d106      	bne.n	4024e2 <nm_clkless_wake+0xb2>
  4024d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4024d8:	2b00      	cmp	r3, #0
  4024da:	d13b      	bne.n	402554 <nm_clkless_wake+0x124>
  4024dc:	683b      	ldr	r3, [r7, #0]
  4024de:	2b00      	cmp	r3, #0
  4024e0:	d138      	bne.n	402554 <nm_clkless_wake+0x124>
				 
				clk_status_reg_adr = 0x13;
  4024e2:	4b3a      	ldr	r3, [pc, #232]	; (4025cc <nm_clkless_wake+0x19c>)
  4024e4:	2213      	movs	r2, #19
  4024e6:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  4024e8:	2001      	movs	r0, #1
  4024ea:	4b30      	ldr	r3, [pc, #192]	; (4025ac <nm_clkless_wake+0x17c>)
  4024ec:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4024ee:	4b37      	ldr	r3, [pc, #220]	; (4025cc <nm_clkless_wake+0x19c>)
  4024f0:	681b      	ldr	r3, [r3, #0]
  4024f2:	463a      	mov	r2, r7
  4024f4:	4611      	mov	r1, r2
  4024f6:	4618      	mov	r0, r3
  4024f8:	4b2d      	ldr	r3, [pc, #180]	; (4025b0 <nm_clkless_wake+0x180>)
  4024fa:	4798      	blx	r3
  4024fc:	4603      	mov	r3, r0
  4024fe:	73fb      	strb	r3, [r7, #15]
			
				if(ret != M2M_SUCCESS) {
  402500:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402504:	2b00      	cmp	r3, #0
  402506:	d025      	beq.n	402554 <nm_clkless_wake+0x124>
					M2M_ERR("Bus error (2). Wake up failed\n");
  402508:	2296      	movs	r2, #150	; 0x96
  40250a:	492a      	ldr	r1, [pc, #168]	; (4025b4 <nm_clkless_wake+0x184>)
  40250c:	482a      	ldr	r0, [pc, #168]	; (4025b8 <nm_clkless_wake+0x188>)
  40250e:	4b2b      	ldr	r3, [pc, #172]	; (4025bc <nm_clkless_wake+0x18c>)
  402510:	4798      	blx	r3
  402512:	482f      	ldr	r0, [pc, #188]	; (4025d0 <nm_clkless_wake+0x1a0>)
  402514:	4b29      	ldr	r3, [pc, #164]	; (4025bc <nm_clkless_wake+0x18c>)
  402516:	4798      	blx	r3
  402518:	482a      	ldr	r0, [pc, #168]	; (4025c4 <nm_clkless_wake+0x194>)
  40251a:	4b28      	ldr	r3, [pc, #160]	; (4025bc <nm_clkless_wake+0x18c>)
  40251c:	4798      	blx	r3
					goto _WAKE_EXIT;
  40251e:	e03e      	b.n	40259e <nm_clkless_wake+0x16e>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  402520:	2002      	movs	r0, #2
  402522:	4b22      	ldr	r3, [pc, #136]	; (4025ac <nm_clkless_wake+0x17c>)
  402524:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402526:	4b29      	ldr	r3, [pc, #164]	; (4025cc <nm_clkless_wake+0x19c>)
  402528:	681b      	ldr	r3, [r3, #0]
  40252a:	463a      	mov	r2, r7
  40252c:	4611      	mov	r1, r2
  40252e:	4618      	mov	r0, r3
  402530:	4b1f      	ldr	r3, [pc, #124]	; (4025b0 <nm_clkless_wake+0x180>)
  402532:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  402534:	683b      	ldr	r3, [r7, #0]
  402536:	f003 0304 	and.w	r3, r3, #4
  40253a:	2b00      	cmp	r3, #0
  40253c:	d10a      	bne.n	402554 <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  40253e:	22aa      	movs	r2, #170	; 0xaa
  402540:	491c      	ldr	r1, [pc, #112]	; (4025b4 <nm_clkless_wake+0x184>)
  402542:	481d      	ldr	r0, [pc, #116]	; (4025b8 <nm_clkless_wake+0x188>)
  402544:	4b1d      	ldr	r3, [pc, #116]	; (4025bc <nm_clkless_wake+0x18c>)
  402546:	4798      	blx	r3
  402548:	4822      	ldr	r0, [pc, #136]	; (4025d4 <nm_clkless_wake+0x1a4>)
  40254a:	4b1c      	ldr	r3, [pc, #112]	; (4025bc <nm_clkless_wake+0x18c>)
  40254c:	4798      	blx	r3
  40254e:	481d      	ldr	r0, [pc, #116]	; (4025c4 <nm_clkless_wake+0x194>)
  402550:	4b1a      	ldr	r3, [pc, #104]	; (4025bc <nm_clkless_wake+0x18c>)
  402552:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  402554:	683b      	ldr	r3, [r7, #0]
  402556:	f003 0304 	and.w	r3, r3, #4
  40255a:	2b00      	cmp	r3, #0
  40255c:	d10d      	bne.n	40257a <nm_clkless_wake+0x14a>
  40255e:	68bb      	ldr	r3, [r7, #8]
  402560:	3301      	adds	r3, #1
  402562:	60bb      	str	r3, [r7, #8]
  402564:	68b9      	ldr	r1, [r7, #8]
  402566:	4b1c      	ldr	r3, [pc, #112]	; (4025d8 <nm_clkless_wake+0x1a8>)
  402568:	fba3 2301 	umull	r2, r3, r3, r1
  40256c:	085a      	lsrs	r2, r3, #1
  40256e:	4613      	mov	r3, r2
  402570:	005b      	lsls	r3, r3, #1
  402572:	4413      	add	r3, r2
  402574:	1aca      	subs	r2, r1, r3
  402576:	2a00      	cmp	r2, #0
  402578:	d0d2      	beq.n	402520 <nm_clkless_wake+0xf0>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
  40257a:	683b      	ldr	r3, [r7, #0]
  40257c:	f003 0304 	and.w	r3, r3, #4
  402580:	2b00      	cmp	r3, #0
  402582:	d106      	bne.n	402592 <nm_clkless_wake+0x162>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  402584:	687b      	ldr	r3, [r7, #4]
  402586:	f043 0302 	orr.w	r3, r3, #2
  40258a:	4619      	mov	r1, r3
  40258c:	2001      	movs	r0, #1
  40258e:	4b0e      	ldr	r3, [pc, #56]	; (4025c8 <nm_clkless_wake+0x198>)
  402590:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
  402592:	683b      	ldr	r3, [r7, #0]
  402594:	f003 0304 	and.w	r3, r3, #4
  402598:	2b00      	cmp	r3, #0
  40259a:	f43f af6a 	beq.w	402472 <nm_clkless_wake+0x42>

_WAKE_EXIT:
	return ret;
  40259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  4025a2:	4618      	mov	r0, r3
  4025a4:	3710      	adds	r7, #16
  4025a6:	46bd      	mov	sp, r7
  4025a8:	bd80      	pop	{r7, pc}
  4025aa:	bf00      	nop
  4025ac:	004004ad 	.word	0x004004ad
  4025b0:	00402c25 	.word	0x00402c25
  4025b4:	0040e474 	.word	0x0040e474
  4025b8:	0040e32c 	.word	0x0040e32c
  4025bc:	004078bd 	.word	0x004078bd
  4025c0:	0040e340 	.word	0x0040e340
  4025c4:	0040e360 	.word	0x0040e360
  4025c8:	00402c45 	.word	0x00402c45
  4025cc:	20400010 	.word	0x20400010
  4025d0:	0040e364 	.word	0x0040e364
  4025d4:	0040e384 	.word	0x0040e384
  4025d8:	aaaaaaab 	.word	0xaaaaaaab

004025dc <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4025dc:	b580      	push	{r7, lr}
  4025de:	b082      	sub	sp, #8
  4025e0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4025e2:	463b      	mov	r3, r7
  4025e4:	4619      	mov	r1, r3
  4025e6:	f241 4008 	movw	r0, #5128	; 0x1408
  4025ea:	4b22      	ldr	r3, [pc, #136]	; (402674 <enable_interrupts+0x98>)
  4025ec:	4798      	blx	r3
  4025ee:	4603      	mov	r3, r0
  4025f0:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
  4025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4025f6:	2b00      	cmp	r3, #0
  4025f8:	d002      	beq.n	402600 <enable_interrupts+0x24>
		return M2M_ERR_BUS_FAIL;
  4025fa:	f06f 0305 	mvn.w	r3, #5
  4025fe:	e035      	b.n	40266c <enable_interrupts+0x90>
	}
	reg |= ((uint32) 1 << 8);
  402600:	683b      	ldr	r3, [r7, #0]
  402602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402606:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  402608:	683b      	ldr	r3, [r7, #0]
  40260a:	4619      	mov	r1, r3
  40260c:	f241 4008 	movw	r0, #5128	; 0x1408
  402610:	4b19      	ldr	r3, [pc, #100]	; (402678 <enable_interrupts+0x9c>)
  402612:	4798      	blx	r3
  402614:	4603      	mov	r3, r0
  402616:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
  402618:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40261c:	2b00      	cmp	r3, #0
  40261e:	d002      	beq.n	402626 <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
  402620:	f06f 0305 	mvn.w	r3, #5
  402624:	e022      	b.n	40266c <enable_interrupts+0x90>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  402626:	463b      	mov	r3, r7
  402628:	4619      	mov	r1, r3
  40262a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40262e:	4b11      	ldr	r3, [pc, #68]	; (402674 <enable_interrupts+0x98>)
  402630:	4798      	blx	r3
  402632:	4603      	mov	r3, r0
  402634:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
  402636:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40263a:	2b00      	cmp	r3, #0
  40263c:	d002      	beq.n	402644 <enable_interrupts+0x68>
		return M2M_ERR_BUS_FAIL;
  40263e:	f06f 0305 	mvn.w	r3, #5
  402642:	e013      	b.n	40266c <enable_interrupts+0x90>
	}
	reg |= ((uint32) 1 << 16);
  402644:	683b      	ldr	r3, [r7, #0]
  402646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40264a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  40264c:	683b      	ldr	r3, [r7, #0]
  40264e:	4619      	mov	r1, r3
  402650:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  402654:	4b08      	ldr	r3, [pc, #32]	; (402678 <enable_interrupts+0x9c>)
  402656:	4798      	blx	r3
  402658:	4603      	mov	r3, r0
  40265a:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
  40265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402660:	2b00      	cmp	r3, #0
  402662:	d002      	beq.n	40266a <enable_interrupts+0x8e>
		return M2M_ERR_BUS_FAIL;
  402664:	f06f 0305 	mvn.w	r3, #5
  402668:	e000      	b.n	40266c <enable_interrupts+0x90>
	}
	return M2M_SUCCESS;
  40266a:	2300      	movs	r3, #0
}
  40266c:	4618      	mov	r0, r3
  40266e:	3708      	adds	r7, #8
  402670:	46bd      	mov	sp, r7
  402672:	bd80      	pop	{r7, pc}
  402674:	00402c25 	.word	0x00402c25
  402678:	00402c45 	.word	0x00402c45

0040267c <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  40267c:	b580      	push	{r7, lr}
  40267e:	b082      	sub	sp, #8
  402680:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
  402682:	4b31      	ldr	r3, [pc, #196]	; (402748 <nmi_get_chipid+0xcc>)
  402684:	681b      	ldr	r3, [r3, #0]
  402686:	2b00      	cmp	r3, #0
  402688:	d157      	bne.n	40273a <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  40268a:	492f      	ldr	r1, [pc, #188]	; (402748 <nmi_get_chipid+0xcc>)
  40268c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402690:	4b2e      	ldr	r3, [pc, #184]	; (40274c <nmi_get_chipid+0xd0>)
  402692:	4798      	blx	r3
  402694:	4603      	mov	r3, r0
  402696:	2b00      	cmp	r3, #0
  402698:	d004      	beq.n	4026a4 <nmi_get_chipid+0x28>
			chipid = 0;
  40269a:	4b2b      	ldr	r3, [pc, #172]	; (402748 <nmi_get_chipid+0xcc>)
  40269c:	2200      	movs	r2, #0
  40269e:	601a      	str	r2, [r3, #0]
			return 0;
  4026a0:	2300      	movs	r3, #0
  4026a2:	e04c      	b.n	40273e <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4026a4:	1d3b      	adds	r3, r7, #4
  4026a6:	4619      	mov	r1, r3
  4026a8:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4026ac:	4b27      	ldr	r3, [pc, #156]	; (40274c <nmi_get_chipid+0xd0>)
  4026ae:	4798      	blx	r3
  4026b0:	4603      	mov	r3, r0
  4026b2:	2b00      	cmp	r3, #0
  4026b4:	d004      	beq.n	4026c0 <nmi_get_chipid+0x44>
			chipid = 0;
  4026b6:	4b24      	ldr	r3, [pc, #144]	; (402748 <nmi_get_chipid+0xcc>)
  4026b8:	2200      	movs	r2, #0
  4026ba:	601a      	str	r2, [r3, #0]
			return 0;
  4026bc:	2300      	movs	r3, #0
  4026be:	e03e      	b.n	40273e <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
  4026c0:	4b21      	ldr	r3, [pc, #132]	; (402748 <nmi_get_chipid+0xcc>)
  4026c2:	681b      	ldr	r3, [r3, #0]
  4026c4:	4a22      	ldr	r2, [pc, #136]	; (402750 <nmi_get_chipid+0xd4>)
  4026c6:	4293      	cmp	r3, r2
  4026c8:	d106      	bne.n	4026d8 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
  4026ca:	687b      	ldr	r3, [r7, #4]
  4026cc:	2b01      	cmp	r3, #1
  4026ce:	d028      	beq.n	402722 <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  4026d0:	4b1d      	ldr	r3, [pc, #116]	; (402748 <nmi_get_chipid+0xcc>)
  4026d2:	4a20      	ldr	r2, [pc, #128]	; (402754 <nmi_get_chipid+0xd8>)
  4026d4:	601a      	str	r2, [r3, #0]
  4026d6:	e024      	b.n	402722 <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
  4026d8:	4b1b      	ldr	r3, [pc, #108]	; (402748 <nmi_get_chipid+0xcc>)
  4026da:	681b      	ldr	r3, [r3, #0]
  4026dc:	4a1e      	ldr	r2, [pc, #120]	; (402758 <nmi_get_chipid+0xdc>)
  4026de:	4293      	cmp	r3, r2
  4026e0:	d10d      	bne.n	4026fe <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
  4026e2:	687b      	ldr	r3, [r7, #4]
  4026e4:	2b03      	cmp	r3, #3
  4026e6:	d01c      	beq.n	402722 <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
  4026e8:	687b      	ldr	r3, [r7, #4]
  4026ea:	2b04      	cmp	r3, #4
  4026ec:	d103      	bne.n	4026f6 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
  4026ee:	4b16      	ldr	r3, [pc, #88]	; (402748 <nmi_get_chipid+0xcc>)
  4026f0:	4a1a      	ldr	r2, [pc, #104]	; (40275c <nmi_get_chipid+0xe0>)
  4026f2:	601a      	str	r2, [r3, #0]
  4026f4:	e015      	b.n	402722 <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  4026f6:	4b14      	ldr	r3, [pc, #80]	; (402748 <nmi_get_chipid+0xcc>)
  4026f8:	4a19      	ldr	r2, [pc, #100]	; (402760 <nmi_get_chipid+0xe4>)
  4026fa:	601a      	str	r2, [r3, #0]
  4026fc:	e011      	b.n	402722 <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1000F0) { 
  4026fe:	4b12      	ldr	r3, [pc, #72]	; (402748 <nmi_get_chipid+0xcc>)
  402700:	681b      	ldr	r3, [r3, #0]
  402702:	4a18      	ldr	r2, [pc, #96]	; (402764 <nmi_get_chipid+0xe8>)
  402704:	4293      	cmp	r3, r2
  402706:	d10c      	bne.n	402722 <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  402708:	490f      	ldr	r1, [pc, #60]	; (402748 <nmi_get_chipid+0xcc>)
  40270a:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  40270e:	4b0f      	ldr	r3, [pc, #60]	; (40274c <nmi_get_chipid+0xd0>)
  402710:	4798      	blx	r3
  402712:	4603      	mov	r3, r0
  402714:	2b00      	cmp	r3, #0
  402716:	d004      	beq.n	402722 <nmi_get_chipid+0xa6>
			chipid = 0;
  402718:	4b0b      	ldr	r3, [pc, #44]	; (402748 <nmi_get_chipid+0xcc>)
  40271a:	2200      	movs	r2, #0
  40271c:	601a      	str	r2, [r3, #0]
			return 0;
  40271e:	2300      	movs	r3, #0
  402720:	e00d      	b.n	40273e <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
  402722:	4b09      	ldr	r3, [pc, #36]	; (402748 <nmi_get_chipid+0xcc>)
  402724:	681b      	ldr	r3, [r3, #0]
  402726:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40272a:	4a07      	ldr	r2, [pc, #28]	; (402748 <nmi_get_chipid+0xcc>)
  40272c:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
  40272e:	4b06      	ldr	r3, [pc, #24]	; (402748 <nmi_get_chipid+0xcc>)
  402730:	681b      	ldr	r3, [r3, #0]
  402732:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  402736:	4a04      	ldr	r2, [pc, #16]	; (402748 <nmi_get_chipid+0xcc>)
  402738:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  40273a:	4b03      	ldr	r3, [pc, #12]	; (402748 <nmi_get_chipid+0xcc>)
  40273c:	681b      	ldr	r3, [r3, #0]
}
  40273e:	4618      	mov	r0, r3
  402740:	3708      	adds	r7, #8
  402742:	46bd      	mov	sp, r7
  402744:	bd80      	pop	{r7, pc}
  402746:	bf00      	nop
  402748:	20400988 	.word	0x20400988
  40274c:	00402c25 	.word	0x00402c25
  402750:	001002a0 	.word	0x001002a0
  402754:	001002a1 	.word	0x001002a1
  402758:	001002b0 	.word	0x001002b0
  40275c:	001002b1 	.word	0x001002b1
  402760:	001002b2 	.word	0x001002b2
  402764:	001000f0 	.word	0x001000f0

00402768 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  402768:	b580      	push	{r7, lr}
  40276a:	b086      	sub	sp, #24
  40276c:	af00      	add	r7, sp, #0
  40276e:	4603      	mov	r3, r0
  402770:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
  402772:	2300      	movs	r3, #0
  402774:	72fb      	strb	r3, [r7, #11]
	uint32 reg = 0, cnt = 0;
  402776:	2300      	movs	r3, #0
  402778:	617b      	str	r3, [r7, #20]
  40277a:	2300      	movs	r3, #0
  40277c:	613b      	str	r3, [r7, #16]
	uint32 u32GpReg1 = 0;
  40277e:	2300      	movs	r3, #0
  402780:	60fb      	str	r3, [r7, #12]

	reg = 0;
  402782:	2300      	movs	r3, #0
  402784:	617b      	str	r3, [r7, #20]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  402786:	f241 0014 	movw	r0, #4116	; 0x1014
  40278a:	4b35      	ldr	r3, [pc, #212]	; (402860 <wait_for_bootrom+0xf8>)
  40278c:	4798      	blx	r3
  40278e:	6178      	str	r0, [r7, #20]
		if (reg & 0x80000000) {
  402790:	697b      	ldr	r3, [r7, #20]
  402792:	2b00      	cmp	r3, #0
  402794:	db03      	blt.n	40279e <wait_for_bootrom+0x36>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  402796:	2001      	movs	r0, #1
  402798:	4b32      	ldr	r3, [pc, #200]	; (402864 <wait_for_bootrom+0xfc>)
  40279a:	4798      	blx	r3
	}
  40279c:	e7f3      	b.n	402786 <wait_for_bootrom+0x1e>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
  40279e:	bf00      	nop
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  4027a0:	4831      	ldr	r0, [pc, #196]	; (402868 <wait_for_bootrom+0x100>)
  4027a2:	4b2f      	ldr	r3, [pc, #188]	; (402860 <wait_for_bootrom+0xf8>)
  4027a4:	4798      	blx	r3
  4027a6:	6178      	str	r0, [r7, #20]
	reg &= 0x1;
  4027a8:	697b      	ldr	r3, [r7, #20]
  4027aa:	f003 0301 	and.w	r3, r3, #1
  4027ae:	617b      	str	r3, [r7, #20]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  4027b0:	697b      	ldr	r3, [r7, #20]
  4027b2:	2b00      	cmp	r3, #0
  4027b4:	d116      	bne.n	4027e4 <wait_for_bootrom+0x7c>
	{
		reg = 0;
  4027b6:	2300      	movs	r3, #0
  4027b8:	617b      	str	r3, [r7, #20]
		while(reg != M2M_FINISH_BOOT_ROM)
  4027ba:	e00f      	b.n	4027dc <wait_for_bootrom+0x74>
		{
			nm_bsp_sleep(1);
  4027bc:	2001      	movs	r0, #1
  4027be:	4b29      	ldr	r3, [pc, #164]	; (402864 <wait_for_bootrom+0xfc>)
  4027c0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
  4027c2:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4027c6:	4b26      	ldr	r3, [pc, #152]	; (402860 <wait_for_bootrom+0xf8>)
  4027c8:	4798      	blx	r3
  4027ca:	6178      	str	r0, [r7, #20]

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4027cc:	4a27      	ldr	r2, [pc, #156]	; (40286c <wait_for_bootrom+0x104>)
  4027ce:	6979      	ldr	r1, [r7, #20]
  4027d0:	4827      	ldr	r0, [pc, #156]	; (402870 <wait_for_bootrom+0x108>)
  4027d2:	4b28      	ldr	r3, [pc, #160]	; (402874 <wait_for_bootrom+0x10c>)
  4027d4:	4798      	blx	r3

			if(++cnt > TIMEOUT)
  4027d6:	693b      	ldr	r3, [r7, #16]
  4027d8:	3301      	adds	r3, #1
  4027da:	613b      	str	r3, [r7, #16]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  4027dc:	697b      	ldr	r3, [r7, #20]
  4027de:	4a23      	ldr	r2, [pc, #140]	; (40286c <wait_for_bootrom+0x104>)
  4027e0:	4293      	cmp	r3, r2
  4027e2:	d1eb      	bne.n	4027bc <wait_for_bootrom+0x54>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4027e4:	79fb      	ldrb	r3, [r7, #7]
  4027e6:	2b02      	cmp	r3, #2
  4027e8:	d10a      	bne.n	402800 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4027ea:	4923      	ldr	r1, [pc, #140]	; (402878 <wait_for_bootrom+0x110>)
  4027ec:	4823      	ldr	r0, [pc, #140]	; (40287c <wait_for_bootrom+0x114>)
  4027ee:	4b24      	ldr	r3, [pc, #144]	; (402880 <wait_for_bootrom+0x118>)
  4027f0:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4027f2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4027f6:	f241 008c 	movw	r0, #4236	; 0x108c
  4027fa:	4b21      	ldr	r3, [pc, #132]	; (402880 <wait_for_bootrom+0x118>)
  4027fc:	4798      	blx	r3
  4027fe:	e011      	b.n	402824 <wait_for_bootrom+0xbc>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  402800:	79fb      	ldrb	r3, [r7, #7]
  402802:	2b03      	cmp	r3, #3
  402804:	d109      	bne.n	40281a <wait_for_bootrom+0xb2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  402806:	491c      	ldr	r1, [pc, #112]	; (402878 <wait_for_bootrom+0x110>)
  402808:	481c      	ldr	r0, [pc, #112]	; (40287c <wait_for_bootrom+0x114>)
  40280a:	4b1d      	ldr	r3, [pc, #116]	; (402880 <wait_for_bootrom+0x118>)
  40280c:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
  40280e:	2100      	movs	r1, #0
  402810:	f241 008c 	movw	r0, #4236	; 0x108c
  402814:	4b1a      	ldr	r3, [pc, #104]	; (402880 <wait_for_bootrom+0x118>)
  402816:	4798      	blx	r3
  402818:	e004      	b.n	402824 <wait_for_bootrom+0xbc>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
  40281a:	79fb      	ldrb	r3, [r7, #7]
  40281c:	2b04      	cmp	r3, #4
  40281e:	d101      	bne.n	402824 <wait_for_bootrom+0xbc>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  402820:	2380      	movs	r3, #128	; 0x80
  402822:	60fb      	str	r3, [r7, #12]
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  402824:	4b17      	ldr	r3, [pc, #92]	; (402884 <wait_for_bootrom+0x11c>)
  402826:	4798      	blx	r3
  402828:	4603      	mov	r3, r0
  40282a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40282e:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
  402832:	d106      	bne.n	402842 <wait_for_bootrom+0xda>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  402834:	68fb      	ldr	r3, [r7, #12]
  402836:	f043 0302 	orr.w	r3, r3, #2
  40283a:	4618      	mov	r0, r3
  40283c:	4b12      	ldr	r3, [pc, #72]	; (402888 <wait_for_bootrom+0x120>)
  40283e:	4798      	blx	r3
  402840:	e002      	b.n	402848 <wait_for_bootrom+0xe0>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  402842:	68f8      	ldr	r0, [r7, #12]
  402844:	4b10      	ldr	r3, [pc, #64]	; (402888 <wait_for_bootrom+0x120>)
  402846:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  402848:	4910      	ldr	r1, [pc, #64]	; (40288c <wait_for_bootrom+0x124>)
  40284a:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  40284e:	4b0c      	ldr	r3, [pc, #48]	; (402880 <wait_for_bootrom+0x118>)
  402850:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
  402852:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402856:	4618      	mov	r0, r3
  402858:	3718      	adds	r7, #24
  40285a:	46bd      	mov	sp, r7
  40285c:	bd80      	pop	{r7, pc}
  40285e:	bf00      	nop
  402860:	00402c09 	.word	0x00402c09
  402864:	004004ad 	.word	0x004004ad
  402868:	000207bc 	.word	0x000207bc
  40286c:	10add09e 	.word	0x10add09e
  402870:	0040e3d0 	.word	0x0040e3d0
  402874:	004078bd 	.word	0x004078bd
  402878:	3c1cd57d 	.word	0x3c1cd57d
  40287c:	000207ac 	.word	0x000207ac
  402880:	00402c45 	.word	0x00402c45
  402884:	0040267d 	.word	0x0040267d
  402888:	004023d1 	.word	0x004023d1
  40288c:	ef522f61 	.word	0xef522f61

00402890 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  402890:	b580      	push	{r7, lr}
  402892:	b088      	sub	sp, #32
  402894:	af00      	add	r7, sp, #0
  402896:	4603      	mov	r3, r0
  402898:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
  40289a:	2300      	movs	r3, #0
  40289c:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
  40289e:	2300      	movs	r3, #0
  4028a0:	61bb      	str	r3, [r7, #24]
  4028a2:	2300      	movs	r3, #0
  4028a4:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
  4028a6:	f04f 33ff 	mov.w	r3, #4294967295
  4028aa:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
  4028ac:	f241 038c 	movw	r3, #4236	; 0x108c
  4028b0:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4028b2:	4b19      	ldr	r3, [pc, #100]	; (402918 <wait_for_firmware_start+0x88>)
  4028b4:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4028b6:	79fb      	ldrb	r3, [r7, #7]
  4028b8:	2b02      	cmp	r3, #2
  4028ba:	d002      	beq.n	4028c2 <wait_for_firmware_start+0x32>
  4028bc:	79fb      	ldrb	r3, [r7, #7]
  4028be:	2b03      	cmp	r3, #3
  4028c0:	d116      	bne.n	4028f0 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
  4028c2:	4b16      	ldr	r3, [pc, #88]	; (40291c <wait_for_firmware_start+0x8c>)
  4028c4:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  4028c6:	4b16      	ldr	r3, [pc, #88]	; (402920 <wait_for_firmware_start+0x90>)
  4028c8:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  4028ca:	e011      	b.n	4028f0 <wait_for_firmware_start+0x60>
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4028cc:	2002      	movs	r0, #2
  4028ce:	4b15      	ldr	r3, [pc, #84]	; (402924 <wait_for_firmware_start+0x94>)
  4028d0:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4028d2:	68fb      	ldr	r3, [r7, #12]
  4028d4:	4618      	mov	r0, r3
  4028d6:	4b14      	ldr	r3, [pc, #80]	; (402928 <wait_for_firmware_start+0x98>)
  4028d8:	4798      	blx	r3
  4028da:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
  4028dc:	697b      	ldr	r3, [r7, #20]
  4028de:	3301      	adds	r3, #1
  4028e0:	617b      	str	r3, [r7, #20]
  4028e2:	697a      	ldr	r2, [r7, #20]
  4028e4:	693b      	ldr	r3, [r7, #16]
  4028e6:	429a      	cmp	r2, r3
  4028e8:	d302      	bcc.n	4028f0 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  4028ea:	23fb      	movs	r3, #251	; 0xfb
  4028ec:	77fb      	strb	r3, [r7, #31]
			goto ERR;
  4028ee:	e00c      	b.n	40290a <wait_for_firmware_start+0x7a>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  4028f0:	68ba      	ldr	r2, [r7, #8]
  4028f2:	69bb      	ldr	r3, [r7, #24]
  4028f4:	429a      	cmp	r2, r3
  4028f6:	d1e9      	bne.n	4028cc <wait_for_firmware_start+0x3c>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  4028f8:	68bb      	ldr	r3, [r7, #8]
  4028fa:	4a07      	ldr	r2, [pc, #28]	; (402918 <wait_for_firmware_start+0x88>)
  4028fc:	4293      	cmp	r3, r2
  4028fe:	d104      	bne.n	40290a <wait_for_firmware_start+0x7a>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  402900:	2100      	movs	r1, #0
  402902:	f241 008c 	movw	r0, #4236	; 0x108c
  402906:	4b09      	ldr	r3, [pc, #36]	; (40292c <wait_for_firmware_start+0x9c>)
  402908:	4798      	blx	r3
	}
ERR:
	return ret;
  40290a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  40290e:	4618      	mov	r0, r3
  402910:	3720      	adds	r7, #32
  402912:	46bd      	mov	sp, r7
  402914:	bd80      	pop	{r7, pc}
  402916:	bf00      	nop
  402918:	02532636 	.word	0x02532636
  40291c:	000207ac 	.word	0x000207ac
  402920:	d75dc1c3 	.word	0xd75dc1c3
  402924:	004004ad 	.word	0x004004ad
  402928:	00402c09 	.word	0x00402c09
  40292c:	00402c45 	.word	0x00402c45

00402930 <chip_deinit>:

sint8 chip_deinit(void)
{
  402930:	b580      	push	{r7, lr}
  402932:	b082      	sub	sp, #8
  402934:	af00      	add	r7, sp, #0
	uint32 reg = 0;
  402936:	2300      	movs	r3, #0
  402938:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
  40293a:	230a      	movs	r3, #10
  40293c:	71bb      	strb	r3, [r7, #6]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40293e:	463b      	mov	r3, r7
  402940:	4619      	mov	r1, r3
  402942:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  402946:	4b36      	ldr	r3, [pc, #216]	; (402a20 <chip_deinit+0xf0>)
  402948:	4798      	blx	r3
  40294a:	4603      	mov	r3, r0
  40294c:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
  40294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402952:	2b00      	cmp	r3, #0
  402954:	d00b      	beq.n	40296e <chip_deinit+0x3e>
		M2M_ERR("failed to de-initialize\n");
  402956:	f240 2231 	movw	r2, #561	; 0x231
  40295a:	4932      	ldr	r1, [pc, #200]	; (402a24 <chip_deinit+0xf4>)
  40295c:	4832      	ldr	r0, [pc, #200]	; (402a28 <chip_deinit+0xf8>)
  40295e:	4b33      	ldr	r3, [pc, #204]	; (402a2c <chip_deinit+0xfc>)
  402960:	4798      	blx	r3
  402962:	4833      	ldr	r0, [pc, #204]	; (402a30 <chip_deinit+0x100>)
  402964:	4b31      	ldr	r3, [pc, #196]	; (402a2c <chip_deinit+0xfc>)
  402966:	4798      	blx	r3
  402968:	4832      	ldr	r0, [pc, #200]	; (402a34 <chip_deinit+0x104>)
  40296a:	4b30      	ldr	r3, [pc, #192]	; (402a2c <chip_deinit+0xfc>)
  40296c:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
  40296e:	683b      	ldr	r3, [r7, #0]
  402970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402974:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  402976:	683b      	ldr	r3, [r7, #0]
  402978:	4619      	mov	r1, r3
  40297a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40297e:	4b2e      	ldr	r3, [pc, #184]	; (402a38 <chip_deinit+0x108>)
  402980:	4798      	blx	r3
  402982:	4603      	mov	r3, r0
  402984:	71fb      	strb	r3, [r7, #7]

	if (ret != M2M_SUCCESS) {
  402986:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40298a:	2b00      	cmp	r3, #0
  40298c:	d00e      	beq.n	4029ac <chip_deinit+0x7c>
		M2M_ERR("Error while writing reg\n");
  40298e:	f240 2237 	movw	r2, #567	; 0x237
  402992:	4924      	ldr	r1, [pc, #144]	; (402a24 <chip_deinit+0xf4>)
  402994:	4824      	ldr	r0, [pc, #144]	; (402a28 <chip_deinit+0xf8>)
  402996:	4b25      	ldr	r3, [pc, #148]	; (402a2c <chip_deinit+0xfc>)
  402998:	4798      	blx	r3
  40299a:	4828      	ldr	r0, [pc, #160]	; (402a3c <chip_deinit+0x10c>)
  40299c:	4b23      	ldr	r3, [pc, #140]	; (402a2c <chip_deinit+0xfc>)
  40299e:	4798      	blx	r3
  4029a0:	4824      	ldr	r0, [pc, #144]	; (402a34 <chip_deinit+0x104>)
  4029a2:	4b22      	ldr	r3, [pc, #136]	; (402a2c <chip_deinit+0xfc>)
  4029a4:	4798      	blx	r3
		return ret;
  4029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4029aa:	e035      	b.n	402a18 <chip_deinit+0xe8>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4029ac:	463b      	mov	r3, r7
  4029ae:	4619      	mov	r1, r3
  4029b0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4029b4:	4b1a      	ldr	r3, [pc, #104]	; (402a20 <chip_deinit+0xf0>)
  4029b6:	4798      	blx	r3
  4029b8:	4603      	mov	r3, r0
  4029ba:	71fb      	strb	r3, [r7, #7]
		if (ret != M2M_SUCCESS) {
  4029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4029c0:	2b00      	cmp	r3, #0
  4029c2:	d00e      	beq.n	4029e2 <chip_deinit+0xb2>
			M2M_ERR("Error while reading reg\n");
  4029c4:	f240 223e 	movw	r2, #574	; 0x23e
  4029c8:	4916      	ldr	r1, [pc, #88]	; (402a24 <chip_deinit+0xf4>)
  4029ca:	4817      	ldr	r0, [pc, #92]	; (402a28 <chip_deinit+0xf8>)
  4029cc:	4b17      	ldr	r3, [pc, #92]	; (402a2c <chip_deinit+0xfc>)
  4029ce:	4798      	blx	r3
  4029d0:	481b      	ldr	r0, [pc, #108]	; (402a40 <chip_deinit+0x110>)
  4029d2:	4b16      	ldr	r3, [pc, #88]	; (402a2c <chip_deinit+0xfc>)
  4029d4:	4798      	blx	r3
  4029d6:	4817      	ldr	r0, [pc, #92]	; (402a34 <chip_deinit+0x104>)
  4029d8:	4b14      	ldr	r3, [pc, #80]	; (402a2c <chip_deinit+0xfc>)
  4029da:	4798      	blx	r3
			return ret;
  4029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4029e0:	e01a      	b.n	402a18 <chip_deinit+0xe8>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  4029e2:	683b      	ldr	r3, [r7, #0]
  4029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  4029e8:	2b00      	cmp	r3, #0
  4029ea:	d012      	beq.n	402a12 <chip_deinit+0xe2>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  4029ec:	683b      	ldr	r3, [r7, #0]
  4029ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4029f2:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4029f4:	683b      	ldr	r3, [r7, #0]
  4029f6:	4619      	mov	r1, r3
  4029f8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4029fc:	4b0e      	ldr	r3, [pc, #56]	; (402a38 <chip_deinit+0x108>)
  4029fe:	4798      	blx	r3
  402a00:	4603      	mov	r3, r0
  402a02:	71fb      	strb	r3, [r7, #7]
			timeout--;
  402a04:	79bb      	ldrb	r3, [r7, #6]
  402a06:	3b01      	subs	r3, #1
  402a08:	71bb      	strb	r3, [r7, #6]
		} else {
			break;
		}

	} while (timeout);
  402a0a:	79bb      	ldrb	r3, [r7, #6]
  402a0c:	2b00      	cmp	r3, #0
  402a0e:	d1cd      	bne.n	4029ac <chip_deinit+0x7c>
  402a10:	e000      	b.n	402a14 <chip_deinit+0xe4>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
			timeout--;
		} else {
			break;
  402a12:	bf00      	nop
		}

	} while (timeout);

	return ret;
  402a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  402a18:	4618      	mov	r0, r3
  402a1a:	3708      	adds	r7, #8
  402a1c:	46bd      	mov	sp, r7
  402a1e:	bd80      	pop	{r7, pc}
  402a20:	00402c25 	.word	0x00402c25
  402a24:	0040e484 	.word	0x0040e484
  402a28:	0040e32c 	.word	0x0040e32c
  402a2c:	004078bd 	.word	0x004078bd
  402a30:	0040e3e0 	.word	0x0040e3e0
  402a34:	0040e360 	.word	0x0040e360
  402a38:	00402c45 	.word	0x00402c45
  402a3c:	0040e3fc 	.word	0x0040e3fc
  402a40:	0040e418 	.word	0x0040e418

00402a44 <nmi_get_otp_mac_address>:
_EXIT:
	return s8Ret;
}

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
  402a44:	b580      	push	{r7, lr}
  402a46:	b088      	sub	sp, #32
  402a48:	af00      	add	r7, sp, #0
  402a4a:	6078      	str	r0, [r7, #4]
  402a4c:	6039      	str	r1, [r7, #0]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
  402a4e:	f107 0308 	add.w	r3, r7, #8
  402a52:	2200      	movs	r2, #0
  402a54:	601a      	str	r2, [r3, #0]
  402a56:	605a      	str	r2, [r3, #4]

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
  402a58:	f107 0318 	add.w	r3, r7, #24
  402a5c:	4619      	mov	r1, r3
  402a5e:	4829      	ldr	r0, [pc, #164]	; (402b04 <nmi_get_otp_mac_address+0xc0>)
  402a60:	4b29      	ldr	r3, [pc, #164]	; (402b08 <nmi_get_otp_mac_address+0xc4>)
  402a62:	4798      	blx	r3
  402a64:	4603      	mov	r3, r0
  402a66:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  402a68:	f997 301f 	ldrsb.w	r3, [r7, #31]
  402a6c:	2b00      	cmp	r3, #0
  402a6e:	d139      	bne.n	402ae4 <nmi_get_otp_mac_address+0xa0>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
  402a70:	69bb      	ldr	r3, [r7, #24]
  402a72:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
  402a76:	f107 0108 	add.w	r1, r7, #8
  402a7a:	2208      	movs	r2, #8
  402a7c:	4618      	mov	r0, r3
  402a7e:	4b23      	ldr	r3, [pc, #140]	; (402b0c <nmi_get_otp_mac_address+0xc8>)
  402a80:	4798      	blx	r3
  402a82:	4603      	mov	r3, r0
  402a84:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  402a86:	f997 301f 	ldrsb.w	r3, [r7, #31]
  402a8a:	2b00      	cmp	r3, #0
  402a8c:	d12c      	bne.n	402ae8 <nmi_get_otp_mac_address+0xa4>
	u32RegValue = strgp.u32Mac_efuse_mib;
  402a8e:	68bb      	ldr	r3, [r7, #8]
  402a90:	61bb      	str	r3, [r7, #24]

	if(!EFUSED_MAC(u32RegValue)) {
  402a92:	69ba      	ldr	r2, [r7, #24]
  402a94:	4b1e      	ldr	r3, [pc, #120]	; (402b10 <nmi_get_otp_mac_address+0xcc>)
  402a96:	4013      	ands	r3, r2
  402a98:	2b00      	cmp	r3, #0
  402a9a:	d105      	bne.n	402aa8 <nmi_get_otp_mac_address+0x64>
		M2M_DBG("Default MAC\n");
		m2m_memset(pu8MacAddr, 0, 6);
  402a9c:	2206      	movs	r2, #6
  402a9e:	2100      	movs	r1, #0
  402aa0:	6878      	ldr	r0, [r7, #4]
  402aa2:	4b1c      	ldr	r3, [pc, #112]	; (402b14 <nmi_get_otp_mac_address+0xd0>)
  402aa4:	4798      	blx	r3
		goto _EXIT_ERR;
  402aa6:	e020      	b.n	402aea <nmi_get_otp_mac_address+0xa6>
	}

	M2M_DBG("OTP MAC\n");
	u32RegValue >>=16;
  402aa8:	69bb      	ldr	r3, [r7, #24]
  402aaa:	0c1b      	lsrs	r3, r3, #16
  402aac:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
  402aae:	69bb      	ldr	r3, [r7, #24]
  402ab0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
  402ab4:	f107 0110 	add.w	r1, r7, #16
  402ab8:	2206      	movs	r2, #6
  402aba:	4618      	mov	r0, r3
  402abc:	4b13      	ldr	r3, [pc, #76]	; (402b0c <nmi_get_otp_mac_address+0xc8>)
  402abe:	4798      	blx	r3
  402ac0:	4603      	mov	r3, r0
  402ac2:	77fb      	strb	r3, [r7, #31]
	m2m_memcpy(pu8MacAddr,mac,6);
  402ac4:	f107 0310 	add.w	r3, r7, #16
  402ac8:	2206      	movs	r2, #6
  402aca:	4619      	mov	r1, r3
  402acc:	6878      	ldr	r0, [r7, #4]
  402ace:	4b12      	ldr	r3, [pc, #72]	; (402b18 <nmi_get_otp_mac_address+0xd4>)
  402ad0:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
  402ad2:	683b      	ldr	r3, [r7, #0]
  402ad4:	2b00      	cmp	r3, #0
  402ad6:	d002      	beq.n	402ade <nmi_get_otp_mac_address+0x9a>
  402ad8:	683b      	ldr	r3, [r7, #0]
  402ada:	2201      	movs	r2, #1
  402adc:	701a      	strb	r2, [r3, #0]
	return ret;
  402ade:	f997 301f 	ldrsb.w	r3, [r7, #31]
  402ae2:	e00a      	b.n	402afa <nmi_get_otp_mac_address+0xb6>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  402ae4:	bf00      	nop
  402ae6:	e000      	b.n	402aea <nmi_get_otp_mac_address+0xa6>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  402ae8:	bf00      	nop
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
  402aea:	683b      	ldr	r3, [r7, #0]
  402aec:	2b00      	cmp	r3, #0
  402aee:	d002      	beq.n	402af6 <nmi_get_otp_mac_address+0xb2>
  402af0:	683b      	ldr	r3, [r7, #0]
  402af2:	2200      	movs	r2, #0
  402af4:	701a      	strb	r2, [r3, #0]
	return ret;
  402af6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  402afa:	4618      	mov	r0, r3
  402afc:	3720      	adds	r7, #32
  402afe:	46bd      	mov	sp, r7
  402b00:	bd80      	pop	{r7, pc}
  402b02:	bf00      	nop
  402b04:	000c0008 	.word	0x000c0008
  402b08:	00402c25 	.word	0x00402c25
  402b0c:	00402c8d 	.word	0x00402c8d
  402b10:	ffff0000 	.word	0xffff0000
  402b14:	00400be9 	.word	0x00400be9
  402b18:	00400ba9 	.word	0x00400ba9

00402b1c <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
  402b1c:	b580      	push	{r7, lr}
  402b1e:	b088      	sub	sp, #32
  402b20:	af00      	add	r7, sp, #0
  402b22:	6078      	str	r0, [r7, #4]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
  402b24:	f107 0308 	add.w	r3, r7, #8
  402b28:	2200      	movs	r2, #0
  402b2a:	601a      	str	r2, [r3, #0]
  402b2c:	605a      	str	r2, [r3, #4]

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
  402b2e:	f107 0318 	add.w	r3, r7, #24
  402b32:	4619      	mov	r1, r3
  402b34:	481d      	ldr	r0, [pc, #116]	; (402bac <nmi_get_mac_address+0x90>)
  402b36:	4b1e      	ldr	r3, [pc, #120]	; (402bb0 <nmi_get_mac_address+0x94>)
  402b38:	4798      	blx	r3
  402b3a:	4603      	mov	r3, r0
  402b3c:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  402b3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
  402b42:	2b00      	cmp	r3, #0
  402b44:	d128      	bne.n	402b98 <nmi_get_mac_address+0x7c>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
  402b46:	69bb      	ldr	r3, [r7, #24]
  402b48:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
  402b4c:	f107 0108 	add.w	r1, r7, #8
  402b50:	2208      	movs	r2, #8
  402b52:	4618      	mov	r0, r3
  402b54:	4b17      	ldr	r3, [pc, #92]	; (402bb4 <nmi_get_mac_address+0x98>)
  402b56:	4798      	blx	r3
  402b58:	4603      	mov	r3, r0
  402b5a:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  402b5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
  402b60:	2b00      	cmp	r3, #0
  402b62:	d11b      	bne.n	402b9c <nmi_get_mac_address+0x80>
	u32RegValue = strgp.u32Mac_efuse_mib;
  402b64:	68bb      	ldr	r3, [r7, #8]
  402b66:	61bb      	str	r3, [r7, #24]

	u32RegValue &=0x0000ffff;
  402b68:	69bb      	ldr	r3, [r7, #24]
  402b6a:	b29b      	uxth	r3, r3
  402b6c:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
  402b6e:	69bb      	ldr	r3, [r7, #24]
  402b70:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
  402b74:	f107 0110 	add.w	r1, r7, #16
  402b78:	2206      	movs	r2, #6
  402b7a:	4618      	mov	r0, r3
  402b7c:	4b0d      	ldr	r3, [pc, #52]	; (402bb4 <nmi_get_mac_address+0x98>)
  402b7e:	4798      	blx	r3
  402b80:	4603      	mov	r3, r0
  402b82:	77fb      	strb	r3, [r7, #31]
	m2m_memcpy(pu8MacAddr, mac, 6);
  402b84:	f107 0310 	add.w	r3, r7, #16
  402b88:	2206      	movs	r2, #6
  402b8a:	4619      	mov	r1, r3
  402b8c:	6878      	ldr	r0, [r7, #4]
  402b8e:	4b0a      	ldr	r3, [pc, #40]	; (402bb8 <nmi_get_mac_address+0x9c>)
  402b90:	4798      	blx	r3

	return ret;
  402b92:	f997 301f 	ldrsb.w	r3, [r7, #31]
  402b96:	e004      	b.n	402ba2 <nmi_get_mac_address+0x86>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  402b98:	bf00      	nop
  402b9a:	e000      	b.n	402b9e <nmi_get_mac_address+0x82>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  402b9c:	bf00      	nop
	m2m_memcpy(pu8MacAddr, mac, 6);

	return ret;

_EXIT_ERR:
	return ret;
  402b9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
  402ba2:	4618      	mov	r0, r3
  402ba4:	3720      	adds	r7, #32
  402ba6:	46bd      	mov	sp, r7
  402ba8:	bd80      	pop	{r7, pc}
  402baa:	bf00      	nop
  402bac:	000c0008 	.word	0x000c0008
  402bb0:	00402c25 	.word	0x00402c25
  402bb4:	00402c8d 	.word	0x00402c8d
  402bb8:	00400ba9 	.word	0x00400ba9

00402bbc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  402bbc:	b580      	push	{r7, lr}
  402bbe:	b084      	sub	sp, #16
  402bc0:	af00      	add	r7, sp, #0
  402bc2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
  402bc4:	2300      	movs	r3, #0
  402bc6:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
  402bc8:	6878      	ldr	r0, [r7, #4]
  402bca:	4b05      	ldr	r3, [pc, #20]	; (402be0 <nm_bus_iface_init+0x24>)
  402bcc:	4798      	blx	r3
  402bce:	4603      	mov	r3, r0
  402bd0:	73fb      	strb	r3, [r7, #15]

	return ret;
  402bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  402bd6:	4618      	mov	r0, r3
  402bd8:	3710      	adds	r7, #16
  402bda:	46bd      	mov	sp, r7
  402bdc:	bd80      	pop	{r7, pc}
  402bde:	bf00      	nop
  402be0:	004009c9 	.word	0x004009c9

00402be4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  402be4:	b580      	push	{r7, lr}
  402be6:	b082      	sub	sp, #8
  402be8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  402bea:	2300      	movs	r3, #0
  402bec:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
  402bee:	4b05      	ldr	r3, [pc, #20]	; (402c04 <nm_bus_iface_deinit+0x20>)
  402bf0:	4798      	blx	r3
  402bf2:	4603      	mov	r3, r0
  402bf4:	71fb      	strb	r3, [r7, #7]

	return ret;
  402bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  402bfa:	4618      	mov	r0, r3
  402bfc:	3708      	adds	r7, #8
  402bfe:	46bd      	mov	sp, r7
  402c00:	bd80      	pop	{r7, pc}
  402c02:	bf00      	nop
  402c04:	00400b6d 	.word	0x00400b6d

00402c08 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  402c08:	b580      	push	{r7, lr}
  402c0a:	b082      	sub	sp, #8
  402c0c:	af00      	add	r7, sp, #0
  402c0e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  402c10:	6878      	ldr	r0, [r7, #4]
  402c12:	4b03      	ldr	r3, [pc, #12]	; (402c20 <nm_read_reg+0x18>)
  402c14:	4798      	blx	r3
  402c16:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  402c18:	4618      	mov	r0, r3
  402c1a:	3708      	adds	r7, #8
  402c1c:	46bd      	mov	sp, r7
  402c1e:	bd80      	pop	{r7, pc}
  402c20:	00403d95 	.word	0x00403d95

00402c24 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402c24:	b580      	push	{r7, lr}
  402c26:	b082      	sub	sp, #8
  402c28:	af00      	add	r7, sp, #0
  402c2a:	6078      	str	r0, [r7, #4]
  402c2c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  402c2e:	6839      	ldr	r1, [r7, #0]
  402c30:	6878      	ldr	r0, [r7, #4]
  402c32:	4b03      	ldr	r3, [pc, #12]	; (402c40 <nm_read_reg_with_ret+0x1c>)
  402c34:	4798      	blx	r3
  402c36:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  402c38:	4618      	mov	r0, r3
  402c3a:	3708      	adds	r7, #8
  402c3c:	46bd      	mov	sp, r7
  402c3e:	bd80      	pop	{r7, pc}
  402c40:	00403db9 	.word	0x00403db9

00402c44 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  402c44:	b580      	push	{r7, lr}
  402c46:	b082      	sub	sp, #8
  402c48:	af00      	add	r7, sp, #0
  402c4a:	6078      	str	r0, [r7, #4]
  402c4c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  402c4e:	6839      	ldr	r1, [r7, #0]
  402c50:	6878      	ldr	r0, [r7, #4]
  402c52:	4b03      	ldr	r3, [pc, #12]	; (402c60 <nm_write_reg+0x1c>)
  402c54:	4798      	blx	r3
  402c56:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  402c58:	4618      	mov	r0, r3
  402c5a:	3708      	adds	r7, #8
  402c5c:	46bd      	mov	sp, r7
  402c5e:	bd80      	pop	{r7, pc}
  402c60:	00403df1 	.word	0x00403df1

00402c64 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402c64:	b580      	push	{r7, lr}
  402c66:	b084      	sub	sp, #16
  402c68:	af00      	add	r7, sp, #0
  402c6a:	60f8      	str	r0, [r7, #12]
  402c6c:	60b9      	str	r1, [r7, #8]
  402c6e:	4613      	mov	r3, r2
  402c70:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  402c72:	88fb      	ldrh	r3, [r7, #6]
  402c74:	461a      	mov	r2, r3
  402c76:	68b9      	ldr	r1, [r7, #8]
  402c78:	68f8      	ldr	r0, [r7, #12]
  402c7a:	4b03      	ldr	r3, [pc, #12]	; (402c88 <p_nm_read_block+0x24>)
  402c7c:	4798      	blx	r3
  402c7e:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
  402c80:	4618      	mov	r0, r3
  402c82:	3710      	adds	r7, #16
  402c84:	46bd      	mov	sp, r7
  402c86:	bd80      	pop	{r7, pc}
  402c88:	00403e29 	.word	0x00403e29

00402c8c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  402c8c:	b580      	push	{r7, lr}
  402c8e:	b086      	sub	sp, #24
  402c90:	af00      	add	r7, sp, #0
  402c92:	60f8      	str	r0, [r7, #12]
  402c94:	60b9      	str	r1, [r7, #8]
  402c96:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  402c98:	4b20      	ldr	r3, [pc, #128]	; (402d1c <nm_read_block+0x90>)
  402c9a:	881b      	ldrh	r3, [r3, #0]
  402c9c:	3b08      	subs	r3, #8
  402c9e:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
  402ca0:	2300      	movs	r3, #0
  402ca2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
  402ca4:	2300      	movs	r3, #0
  402ca6:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402ca8:	8a3a      	ldrh	r2, [r7, #16]
  402caa:	687b      	ldr	r3, [r7, #4]
  402cac:	429a      	cmp	r2, r3
  402cae:	d30f      	bcc.n	402cd0 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
  402cb0:	68ba      	ldr	r2, [r7, #8]
  402cb2:	697b      	ldr	r3, [r7, #20]
  402cb4:	4413      	add	r3, r2
  402cb6:	687a      	ldr	r2, [r7, #4]
  402cb8:	b292      	uxth	r2, r2
  402cba:	4619      	mov	r1, r3
  402cbc:	68f8      	ldr	r0, [r7, #12]
  402cbe:	4b18      	ldr	r3, [pc, #96]	; (402d20 <nm_read_block+0x94>)
  402cc0:	4798      	blx	r3
  402cc2:	4603      	mov	r3, r0
  402cc4:	b2da      	uxtb	r2, r3
  402cc6:	7cfb      	ldrb	r3, [r7, #19]
  402cc8:	4413      	add	r3, r2
  402cca:	b2db      	uxtb	r3, r3
  402ccc:	74fb      	strb	r3, [r7, #19]
			break;
  402cce:	e01f      	b.n	402d10 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
  402cd0:	68ba      	ldr	r2, [r7, #8]
  402cd2:	697b      	ldr	r3, [r7, #20]
  402cd4:	4413      	add	r3, r2
  402cd6:	8a3a      	ldrh	r2, [r7, #16]
  402cd8:	4619      	mov	r1, r3
  402cda:	68f8      	ldr	r0, [r7, #12]
  402cdc:	4b10      	ldr	r3, [pc, #64]	; (402d20 <nm_read_block+0x94>)
  402cde:	4798      	blx	r3
  402ce0:	4603      	mov	r3, r0
  402ce2:	b2da      	uxtb	r2, r3
  402ce4:	7cfb      	ldrb	r3, [r7, #19]
  402ce6:	4413      	add	r3, r2
  402ce8:	b2db      	uxtb	r3, r3
  402cea:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
  402cec:	f997 3013 	ldrsb.w	r3, [r7, #19]
  402cf0:	2b00      	cmp	r3, #0
  402cf2:	d10c      	bne.n	402d0e <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
  402cf4:	8a3b      	ldrh	r3, [r7, #16]
  402cf6:	687a      	ldr	r2, [r7, #4]
  402cf8:	1ad3      	subs	r3, r2, r3
  402cfa:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
  402cfc:	8a3b      	ldrh	r3, [r7, #16]
  402cfe:	697a      	ldr	r2, [r7, #20]
  402d00:	4413      	add	r3, r2
  402d02:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
  402d04:	8a3b      	ldrh	r3, [r7, #16]
  402d06:	68fa      	ldr	r2, [r7, #12]
  402d08:	4413      	add	r3, r2
  402d0a:	60fb      	str	r3, [r7, #12]
		}
	}
  402d0c:	e7cc      	b.n	402ca8 <nm_read_block+0x1c>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  402d0e:	bf00      	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
  402d10:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
  402d14:	4618      	mov	r0, r3
  402d16:	3718      	adds	r7, #24
  402d18:	46bd      	mov	sp, r7
  402d1a:	bd80      	pop	{r7, pc}
  402d1c:	2040000c 	.word	0x2040000c
  402d20:	00402c65 	.word	0x00402c65

00402d24 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402d24:	b580      	push	{r7, lr}
  402d26:	b084      	sub	sp, #16
  402d28:	af00      	add	r7, sp, #0
  402d2a:	60f8      	str	r0, [r7, #12]
  402d2c:	60b9      	str	r1, [r7, #8]
  402d2e:	4613      	mov	r3, r2
  402d30:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  402d32:	88fb      	ldrh	r3, [r7, #6]
  402d34:	461a      	mov	r2, r3
  402d36:	68b9      	ldr	r1, [r7, #8]
  402d38:	68f8      	ldr	r0, [r7, #12]
  402d3a:	4b03      	ldr	r3, [pc, #12]	; (402d48 <p_nm_write_block+0x24>)
  402d3c:	4798      	blx	r3
  402d3e:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
  402d40:	4618      	mov	r0, r3
  402d42:	3710      	adds	r7, #16
  402d44:	46bd      	mov	sp, r7
  402d46:	bd80      	pop	{r7, pc}
  402d48:	00403e69 	.word	0x00403e69

00402d4c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  402d4c:	b580      	push	{r7, lr}
  402d4e:	b086      	sub	sp, #24
  402d50:	af00      	add	r7, sp, #0
  402d52:	60f8      	str	r0, [r7, #12]
  402d54:	60b9      	str	r1, [r7, #8]
  402d56:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  402d58:	4b20      	ldr	r3, [pc, #128]	; (402ddc <nm_write_block+0x90>)
  402d5a:	881b      	ldrh	r3, [r3, #0]
  402d5c:	3b08      	subs	r3, #8
  402d5e:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
  402d60:	2300      	movs	r3, #0
  402d62:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
  402d64:	2300      	movs	r3, #0
  402d66:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402d68:	8a3a      	ldrh	r2, [r7, #16]
  402d6a:	687b      	ldr	r3, [r7, #4]
  402d6c:	429a      	cmp	r2, r3
  402d6e:	d30f      	bcc.n	402d90 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
  402d70:	68ba      	ldr	r2, [r7, #8]
  402d72:	697b      	ldr	r3, [r7, #20]
  402d74:	4413      	add	r3, r2
  402d76:	687a      	ldr	r2, [r7, #4]
  402d78:	b292      	uxth	r2, r2
  402d7a:	4619      	mov	r1, r3
  402d7c:	68f8      	ldr	r0, [r7, #12]
  402d7e:	4b18      	ldr	r3, [pc, #96]	; (402de0 <nm_write_block+0x94>)
  402d80:	4798      	blx	r3
  402d82:	4603      	mov	r3, r0
  402d84:	b2da      	uxtb	r2, r3
  402d86:	7cfb      	ldrb	r3, [r7, #19]
  402d88:	4413      	add	r3, r2
  402d8a:	b2db      	uxtb	r3, r3
  402d8c:	74fb      	strb	r3, [r7, #19]
			break;
  402d8e:	e01f      	b.n	402dd0 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
  402d90:	68ba      	ldr	r2, [r7, #8]
  402d92:	697b      	ldr	r3, [r7, #20]
  402d94:	4413      	add	r3, r2
  402d96:	8a3a      	ldrh	r2, [r7, #16]
  402d98:	4619      	mov	r1, r3
  402d9a:	68f8      	ldr	r0, [r7, #12]
  402d9c:	4b10      	ldr	r3, [pc, #64]	; (402de0 <nm_write_block+0x94>)
  402d9e:	4798      	blx	r3
  402da0:	4603      	mov	r3, r0
  402da2:	b2da      	uxtb	r2, r3
  402da4:	7cfb      	ldrb	r3, [r7, #19]
  402da6:	4413      	add	r3, r2
  402da8:	b2db      	uxtb	r3, r3
  402daa:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
  402dac:	f997 3013 	ldrsb.w	r3, [r7, #19]
  402db0:	2b00      	cmp	r3, #0
  402db2:	d10c      	bne.n	402dce <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
  402db4:	8a3b      	ldrh	r3, [r7, #16]
  402db6:	687a      	ldr	r2, [r7, #4]
  402db8:	1ad3      	subs	r3, r2, r3
  402dba:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
  402dbc:	8a3b      	ldrh	r3, [r7, #16]
  402dbe:	697a      	ldr	r2, [r7, #20]
  402dc0:	4413      	add	r3, r2
  402dc2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
  402dc4:	8a3b      	ldrh	r3, [r7, #16]
  402dc6:	68fa      	ldr	r2, [r7, #12]
  402dc8:	4413      	add	r3, r2
  402dca:	60fb      	str	r3, [r7, #12]
		}
	}
  402dcc:	e7cc      	b.n	402d68 <nm_write_block+0x1c>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  402dce:	bf00      	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
  402dd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
  402dd4:	4618      	mov	r0, r3
  402dd6:	3718      	adds	r7, #24
  402dd8:	46bd      	mov	sp, r7
  402dda:	bd80      	pop	{r7, pc}
  402ddc:	2040000c 	.word	0x2040000c
  402de0:	00402d25 	.word	0x00402d25

00402de4 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  402de4:	b580      	push	{r7, lr}
  402de6:	b086      	sub	sp, #24
  402de8:	af00      	add	r7, sp, #0
  402dea:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  402dec:	2300      	movs	r3, #0
  402dee:	60fb      	str	r3, [r7, #12]
	sint8	ret = M2M_SUCCESS;
  402df0:	2300      	movs	r3, #0
  402df2:	75fb      	strb	r3, [r7, #23]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  402df4:	f107 030c 	add.w	r3, r7, #12
  402df8:	4619      	mov	r1, r3
  402dfa:	4840      	ldr	r0, [pc, #256]	; (402efc <nm_get_firmware_info+0x118>)
  402dfc:	4b40      	ldr	r3, [pc, #256]	; (402f00 <nm_get_firmware_info+0x11c>)
  402dfe:	4798      	blx	r3
  402e00:	4603      	mov	r3, r0
  402e02:	75fb      	strb	r3, [r7, #23]
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  402e04:	68fb      	ldr	r3, [r7, #12]
  402e06:	4a3f      	ldr	r2, [pc, #252]	; (402f04 <nm_get_firmware_info+0x120>)
  402e08:	4293      	cmp	r3, r2
  402e0a:	d108      	bne.n	402e1e <nm_get_firmware_info+0x3a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  402e0c:	f107 030c 	add.w	r3, r7, #12
  402e10:	4619      	mov	r1, r3
  402e12:	f241 0048 	movw	r0, #4168	; 0x1048
  402e16:	4b3a      	ldr	r3, [pc, #232]	; (402f00 <nm_get_firmware_info+0x11c>)
  402e18:	4798      	blx	r3
  402e1a:	4603      	mov	r3, r0
  402e1c:	75fb      	strb	r3, [r7, #23]
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  402e1e:	68fb      	ldr	r3, [r7, #12]
  402e20:	0c1b      	lsrs	r3, r3, #16
  402e22:	121b      	asrs	r3, r3, #8
  402e24:	b2da      	uxtb	r2, r3
  402e26:	687b      	ldr	r3, [r7, #4]
  402e28:	71da      	strb	r2, [r3, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  402e2a:	68fb      	ldr	r3, [r7, #12]
  402e2c:	0c1b      	lsrs	r3, r3, #16
  402e2e:	111b      	asrs	r3, r3, #4
  402e30:	b2db      	uxtb	r3, r3
  402e32:	f003 030f 	and.w	r3, r3, #15
  402e36:	b2da      	uxtb	r2, r3
  402e38:	687b      	ldr	r3, [r7, #4]
  402e3a:	721a      	strb	r2, [r3, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  402e3c:	68fb      	ldr	r3, [r7, #12]
  402e3e:	0c1b      	lsrs	r3, r3, #16
  402e40:	b2db      	uxtb	r3, r3
  402e42:	f003 030f 	and.w	r3, r3, #15
  402e46:	b2da      	uxtb	r2, r3
  402e48:	687b      	ldr	r3, [r7, #4]
  402e4a:	725a      	strb	r2, [r3, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  402e4c:	68fb      	ldr	r3, [r7, #12]
  402e4e:	121b      	asrs	r3, r3, #8
  402e50:	b2da      	uxtb	r2, r3
  402e52:	687b      	ldr	r3, [r7, #4]
  402e54:	711a      	strb	r2, [r3, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  402e56:	68fb      	ldr	r3, [r7, #12]
  402e58:	111b      	asrs	r3, r3, #4
  402e5a:	b2db      	uxtb	r3, r3
  402e5c:	f003 030f 	and.w	r3, r3, #15
  402e60:	b2da      	uxtb	r2, r3
  402e62:	687b      	ldr	r3, [r7, #4]
  402e64:	715a      	strb	r2, [r3, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  402e66:	68fb      	ldr	r3, [r7, #12]
  402e68:	b2db      	uxtb	r3, r3
  402e6a:	f003 030f 	and.w	r3, r3, #15
  402e6e:	b2da      	uxtb	r2, r3
  402e70:	687b      	ldr	r3, [r7, #4]
  402e72:	719a      	strb	r2, [r3, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  402e74:	4b24      	ldr	r3, [pc, #144]	; (402f08 <nm_get_firmware_info+0x124>)
  402e76:	4798      	blx	r3
  402e78:	4602      	mov	r2, r0
  402e7a:	687b      	ldr	r3, [r7, #4]
  402e7c:	601a      	str	r2, [r3, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  402e7e:	687b      	ldr	r3, [r7, #4]
  402e80:	791b      	ldrb	r3, [r3, #4]
  402e82:	021b      	lsls	r3, r3, #8
  402e84:	b21a      	sxth	r2, r3
  402e86:	687b      	ldr	r3, [r7, #4]
  402e88:	795b      	ldrb	r3, [r3, #5]
  402e8a:	011b      	lsls	r3, r3, #4
  402e8c:	b21b      	sxth	r3, r3
  402e8e:	b2db      	uxtb	r3, r3
  402e90:	b21b      	sxth	r3, r3
  402e92:	4313      	orrs	r3, r2
  402e94:	b21a      	sxth	r2, r3
  402e96:	687b      	ldr	r3, [r7, #4]
  402e98:	799b      	ldrb	r3, [r3, #6]
  402e9a:	b21b      	sxth	r3, r3
  402e9c:	f003 030f 	and.w	r3, r3, #15
  402ea0:	b21b      	sxth	r3, r3
  402ea2:	4313      	orrs	r3, r2
  402ea4:	b21b      	sxth	r3, r3
  402ea6:	82bb      	strh	r3, [r7, #20]
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  402ea8:	f241 3330 	movw	r3, #4912	; 0x1330
  402eac:	827b      	strh	r3, [r7, #18]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  402eae:	687b      	ldr	r3, [r7, #4]
  402eb0:	79db      	ldrb	r3, [r3, #7]
  402eb2:	021b      	lsls	r3, r3, #8
  402eb4:	b21a      	sxth	r2, r3
  402eb6:	687b      	ldr	r3, [r7, #4]
  402eb8:	7a1b      	ldrb	r3, [r3, #8]
  402eba:	011b      	lsls	r3, r3, #4
  402ebc:	b21b      	sxth	r3, r3
  402ebe:	b2db      	uxtb	r3, r3
  402ec0:	b21b      	sxth	r3, r3
  402ec2:	4313      	orrs	r3, r2
  402ec4:	b21a      	sxth	r2, r3
  402ec6:	687b      	ldr	r3, [r7, #4]
  402ec8:	7a5b      	ldrb	r3, [r3, #9]
  402eca:	b21b      	sxth	r3, r3
  402ecc:	f003 030f 	and.w	r3, r3, #15
  402ed0:	b21b      	sxth	r3, r3
  402ed2:	4313      	orrs	r3, r2
  402ed4:	b21b      	sxth	r3, r3
  402ed6:	823b      	strh	r3, [r7, #16]
	if(curr_drv_ver <  min_req_drv_ver) {
  402ed8:	8a7a      	ldrh	r2, [r7, #18]
  402eda:	8a3b      	ldrh	r3, [r7, #16]
  402edc:	429a      	cmp	r2, r3
  402ede:	d201      	bcs.n	402ee4 <nm_get_firmware_info+0x100>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  402ee0:	23f3      	movs	r3, #243	; 0xf3
  402ee2:	75fb      	strb	r3, [r7, #23]
	}
	if(curr_drv_ver >  curr_firm_ver) {
  402ee4:	8a7a      	ldrh	r2, [r7, #18]
  402ee6:	8abb      	ldrh	r3, [r7, #20]
  402ee8:	429a      	cmp	r2, r3
  402eea:	d901      	bls.n	402ef0 <nm_get_firmware_info+0x10c>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  402eec:	23f3      	movs	r3, #243	; 0xf3
  402eee:	75fb      	strb	r3, [r7, #23]
	}
	return ret;
  402ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  402ef4:	4618      	mov	r0, r3
  402ef6:	3718      	adds	r7, #24
  402ef8:	46bd      	mov	sp, r7
  402efa:	bd80      	pop	{r7, pc}
  402efc:	000207ac 	.word	0x000207ac
  402f00:	00402c25 	.word	0x00402c25
  402f04:	d75dc1c3 	.word	0xd75dc1c3
  402f08:	0040267d 	.word	0x0040267d

00402f0c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  402f0c:	b580      	push	{r7, lr}
  402f0e:	b084      	sub	sp, #16
  402f10:	af00      	add	r7, sp, #0
  402f12:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
  402f14:	2300      	movs	r3, #0
  402f16:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode;
	
	if(NULL != arg) {
  402f18:	687b      	ldr	r3, [r7, #4]
  402f1a:	2b00      	cmp	r3, #0
  402f1c:	d00b      	beq.n	402f36 <nm_drv_init+0x2a>
		u8Mode = *((uint8 *)arg);
  402f1e:	687b      	ldr	r3, [r7, #4]
  402f20:	781b      	ldrb	r3, [r3, #0]
  402f22:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  402f24:	7bbb      	ldrb	r3, [r7, #14]
  402f26:	2b00      	cmp	r3, #0
  402f28:	d002      	beq.n	402f30 <nm_drv_init+0x24>
  402f2a:	7bbb      	ldrb	r3, [r7, #14]
  402f2c:	2b04      	cmp	r3, #4
  402f2e:	d904      	bls.n	402f3a <nm_drv_init+0x2e>
			u8Mode = M2M_WIFI_MODE_NORMAL;
  402f30:	2301      	movs	r3, #1
  402f32:	73bb      	strb	r3, [r7, #14]
  402f34:	e001      	b.n	402f3a <nm_drv_init+0x2e>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  402f36:	2301      	movs	r3, #1
  402f38:	73bb      	strb	r3, [r7, #14]
	}
	
	ret = nm_bus_iface_init(NULL);
  402f3a:	2000      	movs	r0, #0
  402f3c:	4b30      	ldr	r3, [pc, #192]	; (403000 <nm_drv_init+0xf4>)
  402f3e:	4798      	blx	r3
  402f40:	4603      	mov	r3, r0
  402f42:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402f48:	2b00      	cmp	r3, #0
  402f4a:	d00c      	beq.n	402f66 <nm_drv_init+0x5a>
		M2M_ERR("[nmi start]: fail init bus\n");
  402f4c:	f44f 7292 	mov.w	r2, #292	; 0x124
  402f50:	492c      	ldr	r1, [pc, #176]	; (403004 <nm_drv_init+0xf8>)
  402f52:	482d      	ldr	r0, [pc, #180]	; (403008 <nm_drv_init+0xfc>)
  402f54:	4b2d      	ldr	r3, [pc, #180]	; (40300c <nm_drv_init+0x100>)
  402f56:	4798      	blx	r3
  402f58:	482d      	ldr	r0, [pc, #180]	; (403010 <nm_drv_init+0x104>)
  402f5a:	4b2c      	ldr	r3, [pc, #176]	; (40300c <nm_drv_init+0x100>)
  402f5c:	4798      	blx	r3
  402f5e:	482d      	ldr	r0, [pc, #180]	; (403014 <nm_drv_init+0x108>)
  402f60:	4b2a      	ldr	r3, [pc, #168]	; (40300c <nm_drv_init+0x100>)
  402f62:	4798      	blx	r3
		goto ERR1;
  402f64:	e045      	b.n	402ff2 <nm_drv_init+0xe6>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  402f66:	482c      	ldr	r0, [pc, #176]	; (403018 <nm_drv_init+0x10c>)
  402f68:	4b28      	ldr	r3, [pc, #160]	; (40300c <nm_drv_init+0x100>)
  402f6a:	4798      	blx	r3
  402f6c:	4b2b      	ldr	r3, [pc, #172]	; (40301c <nm_drv_init+0x110>)
  402f6e:	4798      	blx	r3
  402f70:	4603      	mov	r3, r0
  402f72:	4619      	mov	r1, r3
  402f74:	482a      	ldr	r0, [pc, #168]	; (403020 <nm_drv_init+0x114>)
  402f76:	4b25      	ldr	r3, [pc, #148]	; (40300c <nm_drv_init+0x100>)
  402f78:	4798      	blx	r3
  402f7a:	4826      	ldr	r0, [pc, #152]	; (403014 <nm_drv_init+0x108>)
  402f7c:	4b23      	ldr	r3, [pc, #140]	; (40300c <nm_drv_init+0x100>)
  402f7e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  402f80:	4b28      	ldr	r3, [pc, #160]	; (403024 <nm_drv_init+0x118>)
  402f82:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  402f84:	7bbb      	ldrb	r3, [r7, #14]
  402f86:	4618      	mov	r0, r3
  402f88:	4b27      	ldr	r3, [pc, #156]	; (403028 <nm_drv_init+0x11c>)
  402f8a:	4798      	blx	r3
  402f8c:	4603      	mov	r3, r0
  402f8e:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402f94:	2b00      	cmp	r3, #0
  402f96:	d127      	bne.n	402fe8 <nm_drv_init+0xdc>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  402f98:	7bbb      	ldrb	r3, [r7, #14]
  402f9a:	4618      	mov	r0, r3
  402f9c:	4b23      	ldr	r3, [pc, #140]	; (40302c <nm_drv_init+0x120>)
  402f9e:	4798      	blx	r3
  402fa0:	4603      	mov	r3, r0
  402fa2:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402fa8:	2b00      	cmp	r3, #0
  402faa:	d11f      	bne.n	402fec <nm_drv_init+0xe0>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  402fac:	7bbb      	ldrb	r3, [r7, #14]
  402fae:	2b02      	cmp	r3, #2
  402fb0:	d01f      	beq.n	402ff2 <nm_drv_init+0xe6>
  402fb2:	7bbb      	ldrb	r3, [r7, #14]
  402fb4:	2b03      	cmp	r3, #3
  402fb6:	d01c      	beq.n	402ff2 <nm_drv_init+0xe6>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  402fb8:	4b1d      	ldr	r3, [pc, #116]	; (403030 <nm_drv_init+0x124>)
  402fba:	4798      	blx	r3
  402fbc:	4603      	mov	r3, r0
  402fbe:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402fc4:	2b00      	cmp	r3, #0
  402fc6:	d00c      	beq.n	402fe2 <nm_drv_init+0xd6>
		M2M_ERR("failed to enable interrupts..\n");
  402fc8:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  402fcc:	490d      	ldr	r1, [pc, #52]	; (403004 <nm_drv_init+0xf8>)
  402fce:	480e      	ldr	r0, [pc, #56]	; (403008 <nm_drv_init+0xfc>)
  402fd0:	4b0e      	ldr	r3, [pc, #56]	; (40300c <nm_drv_init+0x100>)
  402fd2:	4798      	blx	r3
  402fd4:	4817      	ldr	r0, [pc, #92]	; (403034 <nm_drv_init+0x128>)
  402fd6:	4b0d      	ldr	r3, [pc, #52]	; (40300c <nm_drv_init+0x100>)
  402fd8:	4798      	blx	r3
  402fda:	480e      	ldr	r0, [pc, #56]	; (403014 <nm_drv_init+0x108>)
  402fdc:	4b0b      	ldr	r3, [pc, #44]	; (40300c <nm_drv_init+0x100>)
  402fde:	4798      	blx	r3
		goto ERR2;
  402fe0:	e005      	b.n	402fee <nm_drv_init+0xe2>
	}
	
	return ret;
  402fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402fe6:	e006      	b.n	402ff6 <nm_drv_init+0xea>
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
  402fe8:	bf00      	nop
  402fea:	e000      	b.n	402fee <nm_drv_init+0xe2>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
  402fec:	bf00      	nop
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  402fee:	4b12      	ldr	r3, [pc, #72]	; (403038 <nm_drv_init+0x12c>)
  402ff0:	4798      	blx	r3
ERR1:
	return ret;
  402ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  402ff6:	4618      	mov	r0, r3
  402ff8:	3710      	adds	r7, #16
  402ffa:	46bd      	mov	sp, r7
  402ffc:	bd80      	pop	{r7, pc}
  402ffe:	bf00      	nop
  403000:	00402bbd 	.word	0x00402bbd
  403004:	0040e560 	.word	0x0040e560
  403008:	0040e490 	.word	0x0040e490
  40300c:	004078bd 	.word	0x004078bd
  403010:	0040e4a4 	.word	0x0040e4a4
  403014:	0040e4c0 	.word	0x0040e4c0
  403018:	0040e4c4 	.word	0x0040e4c4
  40301c:	0040267d 	.word	0x0040267d
  403020:	0040e4d0 	.word	0x0040e4d0
  403024:	00403c49 	.word	0x00403c49
  403028:	00402769 	.word	0x00402769
  40302c:	00402891 	.word	0x00402891
  403030:	004025dd 	.word	0x004025dd
  403034:	0040e4e0 	.word	0x0040e4e0
  403038:	00402be5 	.word	0x00402be5

0040303c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  40303c:	b580      	push	{r7, lr}
  40303e:	b084      	sub	sp, #16
  403040:	af00      	add	r7, sp, #0
  403042:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
  403044:	4b23      	ldr	r3, [pc, #140]	; (4030d4 <nm_drv_deinit+0x98>)
  403046:	4798      	blx	r3
  403048:	4603      	mov	r3, r0
  40304a:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  40304c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403050:	2b00      	cmp	r3, #0
  403052:	d00c      	beq.n	40306e <nm_drv_deinit+0x32>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  403054:	f44f 72ba 	mov.w	r2, #372	; 0x174
  403058:	491f      	ldr	r1, [pc, #124]	; (4030d8 <nm_drv_deinit+0x9c>)
  40305a:	4820      	ldr	r0, [pc, #128]	; (4030dc <nm_drv_deinit+0xa0>)
  40305c:	4b20      	ldr	r3, [pc, #128]	; (4030e0 <nm_drv_deinit+0xa4>)
  40305e:	4798      	blx	r3
  403060:	4820      	ldr	r0, [pc, #128]	; (4030e4 <nm_drv_deinit+0xa8>)
  403062:	4b1f      	ldr	r3, [pc, #124]	; (4030e0 <nm_drv_deinit+0xa4>)
  403064:	4798      	blx	r3
  403066:	4820      	ldr	r0, [pc, #128]	; (4030e8 <nm_drv_deinit+0xac>)
  403068:	4b1d      	ldr	r3, [pc, #116]	; (4030e0 <nm_drv_deinit+0xa4>)
  40306a:	4798      	blx	r3
		goto ERR1;
  40306c:	e02c      	b.n	4030c8 <nm_drv_deinit+0x8c>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  40306e:	2000      	movs	r0, #0
  403070:	4b1e      	ldr	r3, [pc, #120]	; (4030ec <nm_drv_deinit+0xb0>)
  403072:	4798      	blx	r3
  403074:	4603      	mov	r3, r0
  403076:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  403078:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40307c:	2b00      	cmp	r3, #0
  40307e:	d00c      	beq.n	40309a <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  403080:	f240 127b 	movw	r2, #379	; 0x17b
  403084:	4914      	ldr	r1, [pc, #80]	; (4030d8 <nm_drv_deinit+0x9c>)
  403086:	4815      	ldr	r0, [pc, #84]	; (4030dc <nm_drv_deinit+0xa0>)
  403088:	4b15      	ldr	r3, [pc, #84]	; (4030e0 <nm_drv_deinit+0xa4>)
  40308a:	4798      	blx	r3
  40308c:	4818      	ldr	r0, [pc, #96]	; (4030f0 <nm_drv_deinit+0xb4>)
  40308e:	4b14      	ldr	r3, [pc, #80]	; (4030e0 <nm_drv_deinit+0xa4>)
  403090:	4798      	blx	r3
  403092:	4815      	ldr	r0, [pc, #84]	; (4030e8 <nm_drv_deinit+0xac>)
  403094:	4b12      	ldr	r3, [pc, #72]	; (4030e0 <nm_drv_deinit+0xa4>)
  403096:	4798      	blx	r3
		goto ERR1;
  403098:	e016      	b.n	4030c8 <nm_drv_deinit+0x8c>
	}

	ret = nm_bus_iface_deinit();
  40309a:	4b16      	ldr	r3, [pc, #88]	; (4030f4 <nm_drv_deinit+0xb8>)
  40309c:	4798      	blx	r3
  40309e:	4603      	mov	r3, r0
  4030a0:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  4030a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4030a6:	2b00      	cmp	r3, #0
  4030a8:	d00c      	beq.n	4030c4 <nm_drv_deinit+0x88>
		M2M_ERR("[nmi stop]: fail init bus\n");
  4030aa:	f240 1281 	movw	r2, #385	; 0x181
  4030ae:	490a      	ldr	r1, [pc, #40]	; (4030d8 <nm_drv_deinit+0x9c>)
  4030b0:	480a      	ldr	r0, [pc, #40]	; (4030dc <nm_drv_deinit+0xa0>)
  4030b2:	4b0b      	ldr	r3, [pc, #44]	; (4030e0 <nm_drv_deinit+0xa4>)
  4030b4:	4798      	blx	r3
  4030b6:	4810      	ldr	r0, [pc, #64]	; (4030f8 <nm_drv_deinit+0xbc>)
  4030b8:	4b09      	ldr	r3, [pc, #36]	; (4030e0 <nm_drv_deinit+0xa4>)
  4030ba:	4798      	blx	r3
  4030bc:	480a      	ldr	r0, [pc, #40]	; (4030e8 <nm_drv_deinit+0xac>)
  4030be:	4b08      	ldr	r3, [pc, #32]	; (4030e0 <nm_drv_deinit+0xa4>)
  4030c0:	4798      	blx	r3
		goto ERR1;
  4030c2:	e001      	b.n	4030c8 <nm_drv_deinit+0x8c>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  4030c4:	4b0d      	ldr	r3, [pc, #52]	; (4030fc <nm_drv_deinit+0xc0>)
  4030c6:	4798      	blx	r3
#endif

ERR1:
	return ret;
  4030c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  4030cc:	4618      	mov	r0, r3
  4030ce:	3710      	adds	r7, #16
  4030d0:	46bd      	mov	sp, r7
  4030d2:	bd80      	pop	{r7, pc}
  4030d4:	00402931 	.word	0x00402931
  4030d8:	0040e56c 	.word	0x0040e56c
  4030dc:	0040e490 	.word	0x0040e490
  4030e0:	004078bd 	.word	0x004078bd
  4030e4:	0040e500 	.word	0x0040e500
  4030e8:	0040e4c0 	.word	0x0040e4c0
  4030ec:	00404a6d 	.word	0x00404a6d
  4030f0:	0040e520 	.word	0x0040e520
  4030f4:	00402be5 	.word	0x00402be5
  4030f8:	0040e544 	.word	0x0040e544
  4030fc:	00403d79 	.word	0x00403d79

00403100 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403100:	b580      	push	{r7, lr}
  403102:	b086      	sub	sp, #24
  403104:	af00      	add	r7, sp, #0
  403106:	6078      	str	r0, [r7, #4]
  403108:	460b      	mov	r3, r1
  40310a:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  40310c:	2300      	movs	r3, #0
  40310e:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
  403110:	687b      	ldr	r3, [r7, #4]
  403112:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
  403114:	887b      	ldrh	r3, [r7, #2]
  403116:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403118:	f107 030c 	add.w	r3, r7, #12
  40311c:	4619      	mov	r1, r3
  40311e:	2003      	movs	r0, #3
  403120:	4b03      	ldr	r3, [pc, #12]	; (403130 <nmi_spi_read+0x30>)
  403122:	4798      	blx	r3
  403124:	4603      	mov	r3, r0
}
  403126:	4618      	mov	r0, r3
  403128:	3718      	adds	r7, #24
  40312a:	46bd      	mov	sp, r7
  40312c:	bd80      	pop	{r7, pc}
  40312e:	bf00      	nop
  403130:	00400af9 	.word	0x00400af9

00403134 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  403134:	b580      	push	{r7, lr}
  403136:	b086      	sub	sp, #24
  403138:	af00      	add	r7, sp, #0
  40313a:	6078      	str	r0, [r7, #4]
  40313c:	460b      	mov	r3, r1
  40313e:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  403140:	687b      	ldr	r3, [r7, #4]
  403142:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
  403144:	2300      	movs	r3, #0
  403146:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
  403148:	887b      	ldrh	r3, [r7, #2]
  40314a:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  40314c:	f107 030c 	add.w	r3, r7, #12
  403150:	4619      	mov	r1, r3
  403152:	2003      	movs	r0, #3
  403154:	4b03      	ldr	r3, [pc, #12]	; (403164 <nmi_spi_write+0x30>)
  403156:	4798      	blx	r3
  403158:	4603      	mov	r3, r0
}
  40315a:	4618      	mov	r0, r3
  40315c:	3718      	adds	r7, #24
  40315e:	46bd      	mov	sp, r7
  403160:	bd80      	pop	{r7, pc}
  403162:	bf00      	nop
  403164:	00400af9 	.word	0x00400af9

00403168 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
  403168:	b480      	push	{r7}
  40316a:	b083      	sub	sp, #12
  40316c:	af00      	add	r7, sp, #0
  40316e:	4603      	mov	r3, r0
  403170:	460a      	mov	r2, r1
  403172:	71fb      	strb	r3, [r7, #7]
  403174:	4613      	mov	r3, r2
  403176:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
  403178:	79fb      	ldrb	r3, [r7, #7]
  40317a:	005a      	lsls	r2, r3, #1
  40317c:	79bb      	ldrb	r3, [r7, #6]
  40317e:	4053      	eors	r3, r2
  403180:	4a03      	ldr	r2, [pc, #12]	; (403190 <crc7_byte+0x28>)
  403182:	5cd3      	ldrb	r3, [r2, r3]
}
  403184:	4618      	mov	r0, r3
  403186:	370c      	adds	r7, #12
  403188:	46bd      	mov	sp, r7
  40318a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40318e:	4770      	bx	lr
  403190:	0040e57c 	.word	0x0040e57c

00403194 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
  403194:	b580      	push	{r7, lr}
  403196:	b084      	sub	sp, #16
  403198:	af00      	add	r7, sp, #0
  40319a:	4603      	mov	r3, r0
  40319c:	60b9      	str	r1, [r7, #8]
  40319e:	607a      	str	r2, [r7, #4]
  4031a0:	73fb      	strb	r3, [r7, #15]
	while (len--)
  4031a2:	e00a      	b.n	4031ba <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
  4031a4:	68bb      	ldr	r3, [r7, #8]
  4031a6:	1c5a      	adds	r2, r3, #1
  4031a8:	60ba      	str	r2, [r7, #8]
  4031aa:	781a      	ldrb	r2, [r3, #0]
  4031ac:	7bfb      	ldrb	r3, [r7, #15]
  4031ae:	4611      	mov	r1, r2
  4031b0:	4618      	mov	r0, r3
  4031b2:	4b07      	ldr	r3, [pc, #28]	; (4031d0 <crc7+0x3c>)
  4031b4:	4798      	blx	r3
  4031b6:	4603      	mov	r3, r0
  4031b8:	73fb      	strb	r3, [r7, #15]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  4031ba:	687b      	ldr	r3, [r7, #4]
  4031bc:	1e5a      	subs	r2, r3, #1
  4031be:	607a      	str	r2, [r7, #4]
  4031c0:	2b00      	cmp	r3, #0
  4031c2:	d1ef      	bne.n	4031a4 <crc7+0x10>
		crc = crc7_byte(crc, *buffer++);
	return crc;
  4031c4:	7bfb      	ldrb	r3, [r7, #15]
}
  4031c6:	4618      	mov	r0, r3
  4031c8:	3710      	adds	r7, #16
  4031ca:	46bd      	mov	sp, r7
  4031cc:	bd80      	pop	{r7, pc}
  4031ce:	bf00      	nop
  4031d0:	00403169 	.word	0x00403169

004031d4 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  4031d4:	b590      	push	{r4, r7, lr}
  4031d6:	b089      	sub	sp, #36	; 0x24
  4031d8:	af00      	add	r7, sp, #0
  4031da:	60b9      	str	r1, [r7, #8]
  4031dc:	607a      	str	r2, [r7, #4]
  4031de:	603b      	str	r3, [r7, #0]
  4031e0:	4603      	mov	r3, r0
  4031e2:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
  4031e4:	2305      	movs	r3, #5
  4031e6:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
  4031e8:	2301      	movs	r3, #1
  4031ea:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
  4031ec:	7bfb      	ldrb	r3, [r7, #15]
  4031ee:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
  4031f0:	7bfb      	ldrb	r3, [r7, #15]
  4031f2:	3bc1      	subs	r3, #193	; 0xc1
  4031f4:	2b0e      	cmp	r3, #14
  4031f6:	f200 80cc 	bhi.w	403392 <spi_cmd+0x1be>
  4031fa:	a201      	add	r2, pc, #4	; (adr r2, 403200 <spi_cmd+0x2c>)
  4031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403200:	004032b9 	.word	0x004032b9
  403204:	004032b9 	.word	0x004032b9
  403208:	00403315 	.word	0x00403315
  40320c:	00403259 	.word	0x00403259
  403210:	00403283 	.word	0x00403283
  403214:	00403295 	.word	0x00403295
  403218:	004032e3 	.word	0x004032e3
  40321c:	004032e3 	.word	0x004032e3
  403220:	00403359 	.word	0x00403359
  403224:	0040323d 	.word	0x0040323d
  403228:	00403393 	.word	0x00403393
  40322c:	00403393 	.word	0x00403393
  403230:	00403393 	.word	0x00403393
  403234:	00403393 	.word	0x00403393
  403238:	004032a7 	.word	0x004032a7
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  40323c:	68bb      	ldr	r3, [r7, #8]
  40323e:	0c1b      	lsrs	r3, r3, #16
  403240:	b2db      	uxtb	r3, r3
  403242:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
  403244:	68bb      	ldr	r3, [r7, #8]
  403246:	0a1b      	lsrs	r3, r3, #8
  403248:	b2db      	uxtb	r3, r3
  40324a:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
  40324c:	68bb      	ldr	r3, [r7, #8]
  40324e:	b2db      	uxtb	r3, r3
  403250:	75fb      	strb	r3, [r7, #23]
		len = 5;
  403252:	2305      	movs	r3, #5
  403254:	77fb      	strb	r3, [r7, #31]
		break;
  403256:	e09f      	b.n	403398 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  403258:	68bb      	ldr	r3, [r7, #8]
  40325a:	0a1b      	lsrs	r3, r3, #8
  40325c:	b2db      	uxtb	r3, r3
  40325e:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
  403260:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
  403264:	2b00      	cmp	r3, #0
  403266:	d004      	beq.n	403272 <spi_cmd+0x9e>
  403268:	7d7b      	ldrb	r3, [r7, #21]
  40326a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40326e:	b2db      	uxtb	r3, r3
  403270:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
  403272:	68bb      	ldr	r3, [r7, #8]
  403274:	b2db      	uxtb	r3, r3
  403276:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
  403278:	2300      	movs	r3, #0
  40327a:	75fb      	strb	r3, [r7, #23]
		len = 5;
  40327c:	2305      	movs	r3, #5
  40327e:	77fb      	strb	r3, [r7, #31]
		break;
  403280:	e08a      	b.n	403398 <spi_cmd+0x1c4>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  403282:	2300      	movs	r3, #0
  403284:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
  403286:	2300      	movs	r3, #0
  403288:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
  40328a:	2300      	movs	r3, #0
  40328c:	75fb      	strb	r3, [r7, #23]
		len = 5;
  40328e:	2305      	movs	r3, #5
  403290:	77fb      	strb	r3, [r7, #31]
		break;
  403292:	e081      	b.n	403398 <spi_cmd+0x1c4>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  403294:	2300      	movs	r3, #0
  403296:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
  403298:	2300      	movs	r3, #0
  40329a:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
  40329c:	2300      	movs	r3, #0
  40329e:	75fb      	strb	r3, [r7, #23]
		len = 5;
  4032a0:	2305      	movs	r3, #5
  4032a2:	77fb      	strb	r3, [r7, #31]
		break;
  4032a4:	e078      	b.n	403398 <spi_cmd+0x1c4>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  4032a6:	23ff      	movs	r3, #255	; 0xff
  4032a8:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
  4032aa:	23ff      	movs	r3, #255	; 0xff
  4032ac:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
  4032ae:	23ff      	movs	r3, #255	; 0xff
  4032b0:	75fb      	strb	r3, [r7, #23]
		len = 5;
  4032b2:	2305      	movs	r3, #5
  4032b4:	77fb      	strb	r3, [r7, #31]
		break;
  4032b6:	e06f      	b.n	403398 <spi_cmd+0x1c4>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  4032b8:	68bb      	ldr	r3, [r7, #8]
  4032ba:	0c1b      	lsrs	r3, r3, #16
  4032bc:	b2db      	uxtb	r3, r3
  4032be:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
  4032c0:	68bb      	ldr	r3, [r7, #8]
  4032c2:	0a1b      	lsrs	r3, r3, #8
  4032c4:	b2db      	uxtb	r3, r3
  4032c6:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
  4032c8:	68bb      	ldr	r3, [r7, #8]
  4032ca:	b2db      	uxtb	r3, r3
  4032cc:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
  4032ce:	683b      	ldr	r3, [r7, #0]
  4032d0:	0a1b      	lsrs	r3, r3, #8
  4032d2:	b2db      	uxtb	r3, r3
  4032d4:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
  4032d6:	683b      	ldr	r3, [r7, #0]
  4032d8:	b2db      	uxtb	r3, r3
  4032da:	767b      	strb	r3, [r7, #25]
		len = 7;
  4032dc:	2307      	movs	r3, #7
  4032de:	77fb      	strb	r3, [r7, #31]
		break;
  4032e0:	e05a      	b.n	403398 <spi_cmd+0x1c4>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  4032e2:	68bb      	ldr	r3, [r7, #8]
  4032e4:	0c1b      	lsrs	r3, r3, #16
  4032e6:	b2db      	uxtb	r3, r3
  4032e8:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
  4032ea:	68bb      	ldr	r3, [r7, #8]
  4032ec:	0a1b      	lsrs	r3, r3, #8
  4032ee:	b2db      	uxtb	r3, r3
  4032f0:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
  4032f2:	68bb      	ldr	r3, [r7, #8]
  4032f4:	b2db      	uxtb	r3, r3
  4032f6:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
  4032f8:	683b      	ldr	r3, [r7, #0]
  4032fa:	0c1b      	lsrs	r3, r3, #16
  4032fc:	b2db      	uxtb	r3, r3
  4032fe:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
  403300:	683b      	ldr	r3, [r7, #0]
  403302:	0a1b      	lsrs	r3, r3, #8
  403304:	b2db      	uxtb	r3, r3
  403306:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
  403308:	683b      	ldr	r3, [r7, #0]
  40330a:	b2db      	uxtb	r3, r3
  40330c:	76bb      	strb	r3, [r7, #26]
		len = 8;
  40330e:	2308      	movs	r3, #8
  403310:	77fb      	strb	r3, [r7, #31]
		break;
  403312:	e041      	b.n	403398 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  403314:	68bb      	ldr	r3, [r7, #8]
  403316:	0a1b      	lsrs	r3, r3, #8
  403318:	b2db      	uxtb	r3, r3
  40331a:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
  40331c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
  403320:	2b00      	cmp	r3, #0
  403322:	d004      	beq.n	40332e <spi_cmd+0x15a>
  403324:	7d7b      	ldrb	r3, [r7, #21]
  403326:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40332a:	b2db      	uxtb	r3, r3
  40332c:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
  40332e:	68bb      	ldr	r3, [r7, #8]
  403330:	b2db      	uxtb	r3, r3
  403332:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
  403334:	687b      	ldr	r3, [r7, #4]
  403336:	0e1b      	lsrs	r3, r3, #24
  403338:	b2db      	uxtb	r3, r3
  40333a:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
  40333c:	687b      	ldr	r3, [r7, #4]
  40333e:	0c1b      	lsrs	r3, r3, #16
  403340:	b2db      	uxtb	r3, r3
  403342:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
  403344:	687b      	ldr	r3, [r7, #4]
  403346:	0a1b      	lsrs	r3, r3, #8
  403348:	b2db      	uxtb	r3, r3
  40334a:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
  40334c:	687b      	ldr	r3, [r7, #4]
  40334e:	b2db      	uxtb	r3, r3
  403350:	76bb      	strb	r3, [r7, #26]
		len = 8;
  403352:	2308      	movs	r3, #8
  403354:	77fb      	strb	r3, [r7, #31]
		break;
  403356:	e01f      	b.n	403398 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  403358:	68bb      	ldr	r3, [r7, #8]
  40335a:	0c1b      	lsrs	r3, r3, #16
  40335c:	b2db      	uxtb	r3, r3
  40335e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
  403360:	68bb      	ldr	r3, [r7, #8]
  403362:	0a1b      	lsrs	r3, r3, #8
  403364:	b2db      	uxtb	r3, r3
  403366:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
  403368:	68bb      	ldr	r3, [r7, #8]
  40336a:	b2db      	uxtb	r3, r3
  40336c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
  40336e:	687b      	ldr	r3, [r7, #4]
  403370:	0e1b      	lsrs	r3, r3, #24
  403372:	b2db      	uxtb	r3, r3
  403374:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
  403376:	687b      	ldr	r3, [r7, #4]
  403378:	0c1b      	lsrs	r3, r3, #16
  40337a:	b2db      	uxtb	r3, r3
  40337c:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
  40337e:	687b      	ldr	r3, [r7, #4]
  403380:	0a1b      	lsrs	r3, r3, #8
  403382:	b2db      	uxtb	r3, r3
  403384:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
  403386:	687b      	ldr	r3, [r7, #4]
  403388:	b2db      	uxtb	r3, r3
  40338a:	76fb      	strb	r3, [r7, #27]
		len = 9;
  40338c:	2309      	movs	r3, #9
  40338e:	77fb      	strb	r3, [r7, #31]
		break;
  403390:	e002      	b.n	403398 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
  403392:	2300      	movs	r3, #0
  403394:	77bb      	strb	r3, [r7, #30]
		break;
  403396:	bf00      	nop
	}

	if (result) {
  403398:	f997 301e 	ldrsb.w	r3, [r7, #30]
  40339c:	2b00      	cmp	r3, #0
  40339e:	d033      	beq.n	403408 <spi_cmd+0x234>
		if (!gu8Crc_off)
  4033a0:	4b1c      	ldr	r3, [pc, #112]	; (403414 <spi_cmd+0x240>)
  4033a2:	781b      	ldrb	r3, [r3, #0]
  4033a4:	2b00      	cmp	r3, #0
  4033a6:	d113      	bne.n	4033d0 <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  4033a8:	7ffb      	ldrb	r3, [r7, #31]
  4033aa:	1e5c      	subs	r4, r3, #1
  4033ac:	7ffb      	ldrb	r3, [r7, #31]
  4033ae:	3b01      	subs	r3, #1
  4033b0:	461a      	mov	r2, r3
  4033b2:	f107 0314 	add.w	r3, r7, #20
  4033b6:	4619      	mov	r1, r3
  4033b8:	207f      	movs	r0, #127	; 0x7f
  4033ba:	4b17      	ldr	r3, [pc, #92]	; (403418 <spi_cmd+0x244>)
  4033bc:	4798      	blx	r3
  4033be:	4603      	mov	r3, r0
  4033c0:	005b      	lsls	r3, r3, #1
  4033c2:	b2da      	uxtb	r2, r3
  4033c4:	f107 0320 	add.w	r3, r7, #32
  4033c8:	4423      	add	r3, r4
  4033ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
  4033ce:	e002      	b.n	4033d6 <spi_cmd+0x202>
		else
			len-=1;
  4033d0:	7ffb      	ldrb	r3, [r7, #31]
  4033d2:	3b01      	subs	r3, #1
  4033d4:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  4033d6:	7ffb      	ldrb	r3, [r7, #31]
  4033d8:	b29a      	uxth	r2, r3
  4033da:	f107 0314 	add.w	r3, r7, #20
  4033de:	4611      	mov	r1, r2
  4033e0:	4618      	mov	r0, r3
  4033e2:	4b0e      	ldr	r3, [pc, #56]	; (40341c <spi_cmd+0x248>)
  4033e4:	4798      	blx	r3
  4033e6:	4603      	mov	r3, r0
  4033e8:	2b00      	cmp	r3, #0
  4033ea:	d00d      	beq.n	403408 <spi_cmd+0x234>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  4033ec:	f44f 7284 	mov.w	r2, #264	; 0x108
  4033f0:	490b      	ldr	r1, [pc, #44]	; (403420 <spi_cmd+0x24c>)
  4033f2:	480c      	ldr	r0, [pc, #48]	; (403424 <spi_cmd+0x250>)
  4033f4:	4b0c      	ldr	r3, [pc, #48]	; (403428 <spi_cmd+0x254>)
  4033f6:	4798      	blx	r3
  4033f8:	480c      	ldr	r0, [pc, #48]	; (40342c <spi_cmd+0x258>)
  4033fa:	4b0b      	ldr	r3, [pc, #44]	; (403428 <spi_cmd+0x254>)
  4033fc:	4798      	blx	r3
  4033fe:	480c      	ldr	r0, [pc, #48]	; (403430 <spi_cmd+0x25c>)
  403400:	4b09      	ldr	r3, [pc, #36]	; (403428 <spi_cmd+0x254>)
  403402:	4798      	blx	r3
			result = N_FAIL;
  403404:	2300      	movs	r3, #0
  403406:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
  403408:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
  40340c:	4618      	mov	r0, r3
  40340e:	3724      	adds	r7, #36	; 0x24
  403410:	46bd      	mov	sp, r7
  403412:	bd90      	pop	{r4, r7, pc}
  403414:	2040098c 	.word	0x2040098c
  403418:	00403195 	.word	0x00403195
  40341c:	00403135 	.word	0x00403135
  403420:	0040eb48 	.word	0x0040eb48
  403424:	0040e67c 	.word	0x0040e67c
  403428:	004078bd 	.word	0x004078bd
  40342c:	0040e690 	.word	0x0040e690
  403430:	0040e6bc 	.word	0x0040e6bc

00403434 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403434:	b580      	push	{r7, lr}
  403436:	b084      	sub	sp, #16
  403438:	af00      	add	r7, sp, #0
  40343a:	4603      	mov	r3, r0
  40343c:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
  40343e:	2301      	movs	r3, #1
  403440:	73fb      	strb	r3, [r7, #15]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
  403442:	79fb      	ldrb	r3, [r7, #7]
  403444:	2bcf      	cmp	r3, #207	; 0xcf
  403446:	d005      	beq.n	403454 <spi_cmd_rsp+0x20>
  403448:	79fb      	ldrb	r3, [r7, #7]
  40344a:	2bc5      	cmp	r3, #197	; 0xc5
  40344c:	d002      	beq.n	403454 <spi_cmd_rsp+0x20>
		 (cmd == CMD_TERMINATE) ||
  40344e:	79fb      	ldrb	r3, [r7, #7]
  403450:	2bc6      	cmp	r3, #198	; 0xc6
  403452:	d10b      	bne.n	40346c <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403454:	f107 030d 	add.w	r3, r7, #13
  403458:	2101      	movs	r1, #1
  40345a:	4618      	mov	r0, r3
  40345c:	4b2c      	ldr	r3, [pc, #176]	; (403510 <spi_cmd_rsp+0xdc>)
  40345e:	4798      	blx	r3
  403460:	4603      	mov	r3, r0
  403462:	2b00      	cmp	r3, #0
  403464:	d002      	beq.n	40346c <spi_cmd_rsp+0x38>
			result = N_FAIL;
  403466:	2300      	movs	r3, #0
  403468:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
  40346a:	e04a      	b.n	403502 <spi_cmd_rsp+0xce>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
  40346c:	230a      	movs	r3, #10
  40346e:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403470:	f107 030d 	add.w	r3, r7, #13
  403474:	2101      	movs	r1, #1
  403476:	4618      	mov	r0, r3
  403478:	4b25      	ldr	r3, [pc, #148]	; (403510 <spi_cmd_rsp+0xdc>)
  40347a:	4798      	blx	r3
  40347c:	4603      	mov	r3, r0
  40347e:	2b00      	cmp	r3, #0
  403480:	d00e      	beq.n	4034a0 <spi_cmd_rsp+0x6c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403482:	f240 1227 	movw	r2, #295	; 0x127
  403486:	4923      	ldr	r1, [pc, #140]	; (403514 <spi_cmd_rsp+0xe0>)
  403488:	4823      	ldr	r0, [pc, #140]	; (403518 <spi_cmd_rsp+0xe4>)
  40348a:	4b24      	ldr	r3, [pc, #144]	; (40351c <spi_cmd_rsp+0xe8>)
  40348c:	4798      	blx	r3
  40348e:	4824      	ldr	r0, [pc, #144]	; (403520 <spi_cmd_rsp+0xec>)
  403490:	4b22      	ldr	r3, [pc, #136]	; (40351c <spi_cmd_rsp+0xe8>)
  403492:	4798      	blx	r3
  403494:	4823      	ldr	r0, [pc, #140]	; (403524 <spi_cmd_rsp+0xf0>)
  403496:	4b21      	ldr	r3, [pc, #132]	; (40351c <spi_cmd_rsp+0xe8>)
  403498:	4798      	blx	r3
			result = N_FAIL;
  40349a:	2300      	movs	r3, #0
  40349c:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
  40349e:	e030      	b.n	403502 <spi_cmd_rsp+0xce>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  4034a0:	7b7b      	ldrb	r3, [r7, #13]
  4034a2:	79fa      	ldrb	r2, [r7, #7]
  4034a4:	429a      	cmp	r2, r3
  4034a6:	d007      	beq.n	4034b8 <spi_cmd_rsp+0x84>
  4034a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
  4034ac:	b2da      	uxtb	r2, r3
  4034ae:	3a01      	subs	r2, #1
  4034b0:	b2d2      	uxtb	r2, r2
  4034b2:	73ba      	strb	r2, [r7, #14]
  4034b4:	2b00      	cmp	r3, #0
  4034b6:	dcdb      	bgt.n	403470 <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
  4034b8:	230a      	movs	r3, #10
  4034ba:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4034bc:	f107 030d 	add.w	r3, r7, #13
  4034c0:	2101      	movs	r1, #1
  4034c2:	4618      	mov	r0, r3
  4034c4:	4b12      	ldr	r3, [pc, #72]	; (403510 <spi_cmd_rsp+0xdc>)
  4034c6:	4798      	blx	r3
  4034c8:	4603      	mov	r3, r0
  4034ca:	2b00      	cmp	r3, #0
  4034cc:	d00e      	beq.n	4034ec <spi_cmd_rsp+0xb8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  4034ce:	f240 1235 	movw	r2, #309	; 0x135
  4034d2:	4910      	ldr	r1, [pc, #64]	; (403514 <spi_cmd_rsp+0xe0>)
  4034d4:	4810      	ldr	r0, [pc, #64]	; (403518 <spi_cmd_rsp+0xe4>)
  4034d6:	4b11      	ldr	r3, [pc, #68]	; (40351c <spi_cmd_rsp+0xe8>)
  4034d8:	4798      	blx	r3
  4034da:	4811      	ldr	r0, [pc, #68]	; (403520 <spi_cmd_rsp+0xec>)
  4034dc:	4b0f      	ldr	r3, [pc, #60]	; (40351c <spi_cmd_rsp+0xe8>)
  4034de:	4798      	blx	r3
  4034e0:	4810      	ldr	r0, [pc, #64]	; (403524 <spi_cmd_rsp+0xf0>)
  4034e2:	4b0e      	ldr	r3, [pc, #56]	; (40351c <spi_cmd_rsp+0xe8>)
  4034e4:	4798      	blx	r3
			result = N_FAIL;
  4034e6:	2300      	movs	r3, #0
  4034e8:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
  4034ea:	e00a      	b.n	403502 <spi_cmd_rsp+0xce>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  4034ec:	7b7b      	ldrb	r3, [r7, #13]
  4034ee:	2b00      	cmp	r3, #0
  4034f0:	d007      	beq.n	403502 <spi_cmd_rsp+0xce>
  4034f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
  4034f6:	b2da      	uxtb	r2, r3
  4034f8:	3a01      	subs	r2, #1
  4034fa:	b2d2      	uxtb	r2, r2
  4034fc:	73ba      	strb	r2, [r7, #14]
  4034fe:	2b00      	cmp	r3, #0
  403500:	dcdc      	bgt.n	4034bc <spi_cmd_rsp+0x88>

_fail_:

	return result;
  403502:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  403506:	4618      	mov	r0, r3
  403508:	3710      	adds	r7, #16
  40350a:	46bd      	mov	sp, r7
  40350c:	bd80      	pop	{r7, pc}
  40350e:	bf00      	nop
  403510:	00403101 	.word	0x00403101
  403514:	0040eb50 	.word	0x0040eb50
  403518:	0040e67c 	.word	0x0040e67c
  40351c:	004078bd 	.word	0x004078bd
  403520:	0040e6c0 	.word	0x0040e6c0
  403524:	0040e6bc 	.word	0x0040e6bc

00403528 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403528:	b580      	push	{r7, lr}
  40352a:	b086      	sub	sp, #24
  40352c:	af00      	add	r7, sp, #0
  40352e:	6078      	str	r0, [r7, #4]
  403530:	460b      	mov	r3, r1
  403532:	807b      	strh	r3, [r7, #2]
  403534:	4613      	mov	r3, r2
  403536:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
  403538:	2301      	movs	r3, #1
  40353a:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  40353c:	2300      	movs	r3, #0
  40353e:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
  403540:	887b      	ldrh	r3, [r7, #2]
  403542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  403546:	d802      	bhi.n	40354e <spi_data_read+0x26>
			nbytes = sz;
  403548:	887b      	ldrh	r3, [r7, #2]
  40354a:	827b      	strh	r3, [r7, #18]
  40354c:	e002      	b.n	403554 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
  40354e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403552:	827b      	strh	r3, [r7, #18]

		/**
			Data Respnose header
		**/
		retry = 10;
  403554:	230a      	movs	r3, #10
  403556:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403558:	f107 030b 	add.w	r3, r7, #11
  40355c:	2101      	movs	r1, #1
  40355e:	4618      	mov	r0, r3
  403560:	4b46      	ldr	r3, [pc, #280]	; (40367c <spi_data_read+0x154>)
  403562:	4798      	blx	r3
  403564:	4603      	mov	r3, r0
  403566:	2b00      	cmp	r3, #0
  403568:	d00e      	beq.n	403588 <spi_data_read+0x60>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  40356a:	f240 1257 	movw	r2, #343	; 0x157
  40356e:	4944      	ldr	r1, [pc, #272]	; (403680 <spi_data_read+0x158>)
  403570:	4844      	ldr	r0, [pc, #272]	; (403684 <spi_data_read+0x15c>)
  403572:	4b45      	ldr	r3, [pc, #276]	; (403688 <spi_data_read+0x160>)
  403574:	4798      	blx	r3
  403576:	4845      	ldr	r0, [pc, #276]	; (40368c <spi_data_read+0x164>)
  403578:	4b43      	ldr	r3, [pc, #268]	; (403688 <spi_data_read+0x160>)
  40357a:	4798      	blx	r3
  40357c:	4844      	ldr	r0, [pc, #272]	; (403690 <spi_data_read+0x168>)
  40357e:	4b42      	ldr	r3, [pc, #264]	; (403688 <spi_data_read+0x160>)
  403580:	4798      	blx	r3
				result = N_FAIL;
  403582:	2300      	movs	r3, #0
  403584:	747b      	strb	r3, [r7, #17]
				break;
  403586:	e010      	b.n	4035aa <spi_data_read+0x82>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  403588:	7afb      	ldrb	r3, [r7, #11]
  40358a:	091b      	lsrs	r3, r3, #4
  40358c:	b2db      	uxtb	r3, r3
  40358e:	f003 030f 	and.w	r3, r3, #15
  403592:	2b0f      	cmp	r3, #15
  403594:	d008      	beq.n	4035a8 <spi_data_read+0x80>
				break;
		} while (retry--);
  403596:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  40359a:	b29a      	uxth	r2, r3
  40359c:	3a01      	subs	r2, #1
  40359e:	b292      	uxth	r2, r2
  4035a0:	82fa      	strh	r2, [r7, #22]
  4035a2:	2b00      	cmp	r3, #0
  4035a4:	d1d8      	bne.n	403558 <spi_data_read+0x30>
  4035a6:	e000      	b.n	4035aa <spi_data_read+0x82>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
  4035a8:	bf00      	nop
		} while (retry--);

		if (result == N_FAIL)
  4035aa:	f997 3011 	ldrsb.w	r3, [r7, #17]
  4035ae:	2b00      	cmp	r3, #0
  4035b0:	d05c      	beq.n	40366c <spi_data_read+0x144>
			break;

		if (retry <= 0) {
  4035b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  4035b6:	2b00      	cmp	r3, #0
  4035b8:	dc10      	bgt.n	4035dc <spi_data_read+0xb4>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  4035ba:	f240 1263 	movw	r2, #355	; 0x163
  4035be:	4930      	ldr	r1, [pc, #192]	; (403680 <spi_data_read+0x158>)
  4035c0:	4830      	ldr	r0, [pc, #192]	; (403684 <spi_data_read+0x15c>)
  4035c2:	4b31      	ldr	r3, [pc, #196]	; (403688 <spi_data_read+0x160>)
  4035c4:	4798      	blx	r3
  4035c6:	7afb      	ldrb	r3, [r7, #11]
  4035c8:	4619      	mov	r1, r3
  4035ca:	4832      	ldr	r0, [pc, #200]	; (403694 <spi_data_read+0x16c>)
  4035cc:	4b2e      	ldr	r3, [pc, #184]	; (403688 <spi_data_read+0x160>)
  4035ce:	4798      	blx	r3
  4035d0:	482f      	ldr	r0, [pc, #188]	; (403690 <spi_data_read+0x168>)
  4035d2:	4b2d      	ldr	r3, [pc, #180]	; (403688 <spi_data_read+0x160>)
  4035d4:	4798      	blx	r3
			result = N_FAIL;
  4035d6:	2300      	movs	r3, #0
  4035d8:	747b      	strb	r3, [r7, #17]
			break;
  4035da:	e048      	b.n	40366e <spi_data_read+0x146>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  4035dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  4035e0:	687a      	ldr	r2, [r7, #4]
  4035e2:	4413      	add	r3, r2
  4035e4:	8a7a      	ldrh	r2, [r7, #18]
  4035e6:	4611      	mov	r1, r2
  4035e8:	4618      	mov	r0, r3
  4035ea:	4b24      	ldr	r3, [pc, #144]	; (40367c <spi_data_read+0x154>)
  4035ec:	4798      	blx	r3
  4035ee:	4603      	mov	r3, r0
  4035f0:	2b00      	cmp	r3, #0
  4035f2:	d00e      	beq.n	403612 <spi_data_read+0xea>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  4035f4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  4035f8:	4921      	ldr	r1, [pc, #132]	; (403680 <spi_data_read+0x158>)
  4035fa:	4822      	ldr	r0, [pc, #136]	; (403684 <spi_data_read+0x15c>)
  4035fc:	4b22      	ldr	r3, [pc, #136]	; (403688 <spi_data_read+0x160>)
  4035fe:	4798      	blx	r3
  403600:	4825      	ldr	r0, [pc, #148]	; (403698 <spi_data_read+0x170>)
  403602:	4b21      	ldr	r3, [pc, #132]	; (403688 <spi_data_read+0x160>)
  403604:	4798      	blx	r3
  403606:	4822      	ldr	r0, [pc, #136]	; (403690 <spi_data_read+0x168>)
  403608:	4b1f      	ldr	r3, [pc, #124]	; (403688 <spi_data_read+0x160>)
  40360a:	4798      	blx	r3
			result = N_FAIL;
  40360c:	2300      	movs	r3, #0
  40360e:	747b      	strb	r3, [r7, #17]
			break;
  403610:	e02d      	b.n	40366e <spi_data_read+0x146>
		}
		if(!clockless)
  403612:	787b      	ldrb	r3, [r7, #1]
  403614:	2b00      	cmp	r3, #0
  403616:	d11b      	bne.n	403650 <spi_data_read+0x128>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  403618:	4b20      	ldr	r3, [pc, #128]	; (40369c <spi_data_read+0x174>)
  40361a:	781b      	ldrb	r3, [r3, #0]
  40361c:	2b00      	cmp	r3, #0
  40361e:	d117      	bne.n	403650 <spi_data_read+0x128>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  403620:	f107 030c 	add.w	r3, r7, #12
  403624:	2102      	movs	r1, #2
  403626:	4618      	mov	r0, r3
  403628:	4b14      	ldr	r3, [pc, #80]	; (40367c <spi_data_read+0x154>)
  40362a:	4798      	blx	r3
  40362c:	4603      	mov	r3, r0
  40362e:	2b00      	cmp	r3, #0
  403630:	d00e      	beq.n	403650 <spi_data_read+0x128>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403632:	f240 1277 	movw	r2, #375	; 0x177
  403636:	4912      	ldr	r1, [pc, #72]	; (403680 <spi_data_read+0x158>)
  403638:	4812      	ldr	r0, [pc, #72]	; (403684 <spi_data_read+0x15c>)
  40363a:	4b13      	ldr	r3, [pc, #76]	; (403688 <spi_data_read+0x160>)
  40363c:	4798      	blx	r3
  40363e:	4818      	ldr	r0, [pc, #96]	; (4036a0 <spi_data_read+0x178>)
  403640:	4b11      	ldr	r3, [pc, #68]	; (403688 <spi_data_read+0x160>)
  403642:	4798      	blx	r3
  403644:	4812      	ldr	r0, [pc, #72]	; (403690 <spi_data_read+0x168>)
  403646:	4b10      	ldr	r3, [pc, #64]	; (403688 <spi_data_read+0x160>)
  403648:	4798      	blx	r3
					result = N_FAIL;
  40364a:	2300      	movs	r3, #0
  40364c:	747b      	strb	r3, [r7, #17]
					break;
  40364e:	e00e      	b.n	40366e <spi_data_read+0x146>
				}
			}
		}
		ix += nbytes;
  403650:	8aba      	ldrh	r2, [r7, #20]
  403652:	8a7b      	ldrh	r3, [r7, #18]
  403654:	4413      	add	r3, r2
  403656:	b29b      	uxth	r3, r3
  403658:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
  40365a:	8a7b      	ldrh	r3, [r7, #18]
  40365c:	887a      	ldrh	r2, [r7, #2]
  40365e:	1ad3      	subs	r3, r2, r3
  403660:	807b      	strh	r3, [r7, #2]

	} while (sz);
  403662:	887b      	ldrh	r3, [r7, #2]
  403664:	2b00      	cmp	r3, #0
  403666:	f47f af6b 	bne.w	403540 <spi_data_read+0x18>
  40366a:	e000      	b.n	40366e <spi_data_read+0x146>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
  40366c:	bf00      	nop
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
  40366e:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
  403672:	4618      	mov	r0, r3
  403674:	3718      	adds	r7, #24
  403676:	46bd      	mov	sp, r7
  403678:	bd80      	pop	{r7, pc}
  40367a:	bf00      	nop
  40367c:	00403101 	.word	0x00403101
  403680:	0040eb5c 	.word	0x0040eb5c
  403684:	0040e67c 	.word	0x0040e67c
  403688:	004078bd 	.word	0x004078bd
  40368c:	0040e6f4 	.word	0x0040e6f4
  403690:	0040e6bc 	.word	0x0040e6bc
  403694:	0040e728 	.word	0x0040e728
  403698:	0040e758 	.word	0x0040e758
  40369c:	2040098c 	.word	0x2040098c
  4036a0:	0040e78c 	.word	0x0040e78c

004036a4 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
  4036a4:	b580      	push	{r7, lr}
  4036a6:	b086      	sub	sp, #24
  4036a8:	af00      	add	r7, sp, #0
  4036aa:	6078      	str	r0, [r7, #4]
  4036ac:	460b      	mov	r3, r1
  4036ae:	807b      	strh	r3, [r7, #2]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
  4036b0:	2301      	movs	r3, #1
  4036b2:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
  4036b4:	2300      	movs	r3, #0
  4036b6:	81bb      	strh	r3, [r7, #12]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  4036b8:	2300      	movs	r3, #0
  4036ba:	82fb      	strh	r3, [r7, #22]
	do {
		if (sz <= DATA_PKT_SZ)
  4036bc:	887b      	ldrh	r3, [r7, #2]
  4036be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  4036c2:	d802      	bhi.n	4036ca <spi_data_write+0x26>
			nbytes = sz;
  4036c4:	887b      	ldrh	r3, [r7, #2]
  4036c6:	82bb      	strh	r3, [r7, #20]
  4036c8:	e002      	b.n	4036d0 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
  4036ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4036ce:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
  4036d0:	23f0      	movs	r3, #240	; 0xf0
  4036d2:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
  4036d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  4036d8:	2b00      	cmp	r3, #0
  4036da:	d109      	bne.n	4036f0 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
  4036dc:	887b      	ldrh	r3, [r7, #2]
  4036de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  4036e2:	d802      	bhi.n	4036ea <spi_data_write+0x46>
				order = 0x3;
  4036e4:	2303      	movs	r3, #3
  4036e6:	74bb      	strb	r3, [r7, #18]
  4036e8:	e00b      	b.n	403702 <spi_data_write+0x5e>
			else
				order = 0x1;
  4036ea:	2301      	movs	r3, #1
  4036ec:	74bb      	strb	r3, [r7, #18]
  4036ee:	e008      	b.n	403702 <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
  4036f0:	887b      	ldrh	r3, [r7, #2]
  4036f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  4036f6:	d802      	bhi.n	4036fe <spi_data_write+0x5a>
				order = 0x3;
  4036f8:	2303      	movs	r3, #3
  4036fa:	74bb      	strb	r3, [r7, #18]
  4036fc:	e001      	b.n	403702 <spi_data_write+0x5e>
			else
				order = 0x2;
  4036fe:	2302      	movs	r3, #2
  403700:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
  403702:	7c7a      	ldrb	r2, [r7, #17]
  403704:	7cbb      	ldrb	r3, [r7, #18]
  403706:	4313      	orrs	r3, r2
  403708:	b2db      	uxtb	r3, r3
  40370a:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  40370c:	f107 0311 	add.w	r3, r7, #17
  403710:	2101      	movs	r1, #1
  403712:	4618      	mov	r0, r3
  403714:	4b2e      	ldr	r3, [pc, #184]	; (4037d0 <spi_data_write+0x12c>)
  403716:	4798      	blx	r3
  403718:	4603      	mov	r3, r0
  40371a:	2b00      	cmp	r3, #0
  40371c:	d00e      	beq.n	40373c <spi_data_write+0x98>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  40371e:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  403722:	492c      	ldr	r1, [pc, #176]	; (4037d4 <spi_data_write+0x130>)
  403724:	482c      	ldr	r0, [pc, #176]	; (4037d8 <spi_data_write+0x134>)
  403726:	4b2d      	ldr	r3, [pc, #180]	; (4037dc <spi_data_write+0x138>)
  403728:	4798      	blx	r3
  40372a:	482d      	ldr	r0, [pc, #180]	; (4037e0 <spi_data_write+0x13c>)
  40372c:	4b2b      	ldr	r3, [pc, #172]	; (4037dc <spi_data_write+0x138>)
  40372e:	4798      	blx	r3
  403730:	482c      	ldr	r0, [pc, #176]	; (4037e4 <spi_data_write+0x140>)
  403732:	4b2a      	ldr	r3, [pc, #168]	; (4037dc <spi_data_write+0x138>)
  403734:	4798      	blx	r3
			result = N_FAIL;
  403736:	2300      	movs	r3, #0
  403738:	74fb      	strb	r3, [r7, #19]
			break;
  40373a:	e043      	b.n	4037c4 <spi_data_write+0x120>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  40373c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  403740:	687a      	ldr	r2, [r7, #4]
  403742:	4413      	add	r3, r2
  403744:	8aba      	ldrh	r2, [r7, #20]
  403746:	4611      	mov	r1, r2
  403748:	4618      	mov	r0, r3
  40374a:	4b21      	ldr	r3, [pc, #132]	; (4037d0 <spi_data_write+0x12c>)
  40374c:	4798      	blx	r3
  40374e:	4603      	mov	r3, r0
  403750:	2b00      	cmp	r3, #0
  403752:	d00e      	beq.n	403772 <spi_data_write+0xce>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  403754:	f240 12b1 	movw	r2, #433	; 0x1b1
  403758:	491e      	ldr	r1, [pc, #120]	; (4037d4 <spi_data_write+0x130>)
  40375a:	481f      	ldr	r0, [pc, #124]	; (4037d8 <spi_data_write+0x134>)
  40375c:	4b1f      	ldr	r3, [pc, #124]	; (4037dc <spi_data_write+0x138>)
  40375e:	4798      	blx	r3
  403760:	4821      	ldr	r0, [pc, #132]	; (4037e8 <spi_data_write+0x144>)
  403762:	4b1e      	ldr	r3, [pc, #120]	; (4037dc <spi_data_write+0x138>)
  403764:	4798      	blx	r3
  403766:	481f      	ldr	r0, [pc, #124]	; (4037e4 <spi_data_write+0x140>)
  403768:	4b1c      	ldr	r3, [pc, #112]	; (4037dc <spi_data_write+0x138>)
  40376a:	4798      	blx	r3
			result = N_FAIL;
  40376c:	2300      	movs	r3, #0
  40376e:	74fb      	strb	r3, [r7, #19]
			break;
  403770:	e028      	b.n	4037c4 <spi_data_write+0x120>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  403772:	4b1e      	ldr	r3, [pc, #120]	; (4037ec <spi_data_write+0x148>)
  403774:	781b      	ldrb	r3, [r3, #0]
  403776:	2b00      	cmp	r3, #0
  403778:	d117      	bne.n	4037aa <spi_data_write+0x106>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  40377a:	f107 030c 	add.w	r3, r7, #12
  40377e:	2102      	movs	r1, #2
  403780:	4618      	mov	r0, r3
  403782:	4b13      	ldr	r3, [pc, #76]	; (4037d0 <spi_data_write+0x12c>)
  403784:	4798      	blx	r3
  403786:	4603      	mov	r3, r0
  403788:	2b00      	cmp	r3, #0
  40378a:	d00e      	beq.n	4037aa <spi_data_write+0x106>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  40378c:	f240 12bb 	movw	r2, #443	; 0x1bb
  403790:	4910      	ldr	r1, [pc, #64]	; (4037d4 <spi_data_write+0x130>)
  403792:	4811      	ldr	r0, [pc, #68]	; (4037d8 <spi_data_write+0x134>)
  403794:	4b11      	ldr	r3, [pc, #68]	; (4037dc <spi_data_write+0x138>)
  403796:	4798      	blx	r3
  403798:	4815      	ldr	r0, [pc, #84]	; (4037f0 <spi_data_write+0x14c>)
  40379a:	4b10      	ldr	r3, [pc, #64]	; (4037dc <spi_data_write+0x138>)
  40379c:	4798      	blx	r3
  40379e:	4811      	ldr	r0, [pc, #68]	; (4037e4 <spi_data_write+0x140>)
  4037a0:	4b0e      	ldr	r3, [pc, #56]	; (4037dc <spi_data_write+0x138>)
  4037a2:	4798      	blx	r3
				result = N_FAIL;
  4037a4:	2300      	movs	r3, #0
  4037a6:	74fb      	strb	r3, [r7, #19]
				break;
  4037a8:	e00c      	b.n	4037c4 <spi_data_write+0x120>
			}
		}

		ix += nbytes;
  4037aa:	8afa      	ldrh	r2, [r7, #22]
  4037ac:	8abb      	ldrh	r3, [r7, #20]
  4037ae:	4413      	add	r3, r2
  4037b0:	b29b      	uxth	r3, r3
  4037b2:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
  4037b4:	887a      	ldrh	r2, [r7, #2]
  4037b6:	8abb      	ldrh	r3, [r7, #20]
  4037b8:	1ad3      	subs	r3, r2, r3
  4037ba:	807b      	strh	r3, [r7, #2]
	} while (sz);
  4037bc:	887b      	ldrh	r3, [r7, #2]
  4037be:	2b00      	cmp	r3, #0
  4037c0:	f47f af7c 	bne.w	4036bc <spi_data_write+0x18>


	return result;
  4037c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
  4037c8:	4618      	mov	r0, r3
  4037ca:	3718      	adds	r7, #24
  4037cc:	46bd      	mov	sp, r7
  4037ce:	bd80      	pop	{r7, pc}
  4037d0:	00403135 	.word	0x00403135
  4037d4:	0040eb6c 	.word	0x0040eb6c
  4037d8:	0040e67c 	.word	0x0040e67c
  4037dc:	004078bd 	.word	0x004078bd
  4037e0:	0040e7c4 	.word	0x0040e7c4
  4037e4:	0040e6bc 	.word	0x0040e6bc
  4037e8:	0040e7fc 	.word	0x0040e7fc
  4037ec:	2040098c 	.word	0x2040098c
  4037f0:	0040e830 	.word	0x0040e830

004037f4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  4037f4:	b590      	push	{r4, r7, lr}
  4037f6:	b087      	sub	sp, #28
  4037f8:	af02      	add	r7, sp, #8
  4037fa:	6078      	str	r0, [r7, #4]
  4037fc:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
  4037fe:	2301      	movs	r3, #1
  403800:	737b      	strb	r3, [r7, #13]
	uint8 cmd = CMD_SINGLE_WRITE;
  403802:	23c9      	movs	r3, #201	; 0xc9
  403804:	73fb      	strb	r3, [r7, #15]
	uint8 clockless = 0;
  403806:	2300      	movs	r3, #0
  403808:	73bb      	strb	r3, [r7, #14]
	if (addr <= 0x30)
  40380a:	687b      	ldr	r3, [r7, #4]
  40380c:	2b30      	cmp	r3, #48	; 0x30
  40380e:	d804      	bhi.n	40381a <spi_write_reg+0x26>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
  403810:	23c3      	movs	r3, #195	; 0xc3
  403812:	73fb      	strb	r3, [r7, #15]
		clockless = 1;
  403814:	2301      	movs	r3, #1
  403816:	73bb      	strb	r3, [r7, #14]
  403818:	e003      	b.n	403822 <spi_write_reg+0x2e>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
  40381a:	23c9      	movs	r3, #201	; 0xc9
  40381c:	73fb      	strb	r3, [r7, #15]
		clockless = 0;
  40381e:	2300      	movs	r3, #0
  403820:	73bb      	strb	r3, [r7, #14]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  403822:	7bf8      	ldrb	r0, [r7, #15]
  403824:	7bbb      	ldrb	r3, [r7, #14]
  403826:	9300      	str	r3, [sp, #0]
  403828:	2304      	movs	r3, #4
  40382a:	683a      	ldr	r2, [r7, #0]
  40382c:	6879      	ldr	r1, [r7, #4]
  40382e:	4c1e      	ldr	r4, [pc, #120]	; (4038a8 <spi_write_reg+0xb4>)
  403830:	47a0      	blx	r4
  403832:	4603      	mov	r3, r0
  403834:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  403836:	f997 300d 	ldrsb.w	r3, [r7, #13]
  40383a:	2b01      	cmp	r3, #1
  40383c:	d00e      	beq.n	40385c <spi_write_reg+0x68>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  40383e:	f240 12eb 	movw	r2, #491	; 0x1eb
  403842:	491a      	ldr	r1, [pc, #104]	; (4038ac <spi_write_reg+0xb8>)
  403844:	481a      	ldr	r0, [pc, #104]	; (4038b0 <spi_write_reg+0xbc>)
  403846:	4b1b      	ldr	r3, [pc, #108]	; (4038b4 <spi_write_reg+0xc0>)
  403848:	4798      	blx	r3
  40384a:	6879      	ldr	r1, [r7, #4]
  40384c:	481a      	ldr	r0, [pc, #104]	; (4038b8 <spi_write_reg+0xc4>)
  40384e:	4b19      	ldr	r3, [pc, #100]	; (4038b4 <spi_write_reg+0xc0>)
  403850:	4798      	blx	r3
  403852:	481a      	ldr	r0, [pc, #104]	; (4038bc <spi_write_reg+0xc8>)
  403854:	4b17      	ldr	r3, [pc, #92]	; (4038b4 <spi_write_reg+0xc0>)
  403856:	4798      	blx	r3
		return N_FAIL;
  403858:	2300      	movs	r3, #0
  40385a:	e021      	b.n	4038a0 <spi_write_reg+0xac>
	}

	result = spi_cmd_rsp(cmd);
  40385c:	7bfb      	ldrb	r3, [r7, #15]
  40385e:	4618      	mov	r0, r3
  403860:	4b17      	ldr	r3, [pc, #92]	; (4038c0 <spi_write_reg+0xcc>)
  403862:	4798      	blx	r3
  403864:	4603      	mov	r3, r0
  403866:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  403868:	f997 300d 	ldrsb.w	r3, [r7, #13]
  40386c:	2b01      	cmp	r3, #1
  40386e:	d016      	beq.n	40389e <spi_write_reg+0xaa>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  403870:	f240 12f1 	movw	r2, #497	; 0x1f1
  403874:	490d      	ldr	r1, [pc, #52]	; (4038ac <spi_write_reg+0xb8>)
  403876:	480e      	ldr	r0, [pc, #56]	; (4038b0 <spi_write_reg+0xbc>)
  403878:	4b0e      	ldr	r3, [pc, #56]	; (4038b4 <spi_write_reg+0xc0>)
  40387a:	4798      	blx	r3
  40387c:	6879      	ldr	r1, [r7, #4]
  40387e:	4811      	ldr	r0, [pc, #68]	; (4038c4 <spi_write_reg+0xd0>)
  403880:	4b0c      	ldr	r3, [pc, #48]	; (4038b4 <spi_write_reg+0xc0>)
  403882:	4798      	blx	r3
  403884:	480d      	ldr	r0, [pc, #52]	; (4038bc <spi_write_reg+0xc8>)
  403886:	4b0b      	ldr	r3, [pc, #44]	; (4038b4 <spi_write_reg+0xc0>)
  403888:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40388a:	2300      	movs	r3, #0
  40388c:	9300      	str	r3, [sp, #0]
  40388e:	2300      	movs	r3, #0
  403890:	2200      	movs	r2, #0
  403892:	2100      	movs	r1, #0
  403894:	20cf      	movs	r0, #207	; 0xcf
  403896:	4c04      	ldr	r4, [pc, #16]	; (4038a8 <spi_write_reg+0xb4>)
  403898:	47a0      	blx	r4
		return N_FAIL;
  40389a:	2300      	movs	r3, #0
  40389c:	e000      	b.n	4038a0 <spi_write_reg+0xac>
	}

	return N_OK;
  40389e:	2301      	movs	r3, #1
	}

	return result;

#endif
}
  4038a0:	4618      	mov	r0, r3
  4038a2:	3714      	adds	r7, #20
  4038a4:	46bd      	mov	sp, r7
  4038a6:	bd90      	pop	{r4, r7, pc}
  4038a8:	004031d5 	.word	0x004031d5
  4038ac:	0040eb7c 	.word	0x0040eb7c
  4038b0:	0040e67c 	.word	0x0040e67c
  4038b4:	004078bd 	.word	0x004078bd
  4038b8:	0040e868 	.word	0x0040e868
  4038bc:	0040e6bc 	.word	0x0040e6bc
  4038c0:	00403435 	.word	0x00403435
  4038c4:	0040e894 	.word	0x0040e894

004038c8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
  4038c8:	b590      	push	{r4, r7, lr}
  4038ca:	b089      	sub	sp, #36	; 0x24
  4038cc:	af02      	add	r7, sp, #8
  4038ce:	60f8      	str	r0, [r7, #12]
  4038d0:	60b9      	str	r1, [r7, #8]
  4038d2:	4613      	mov	r3, r2
  4038d4:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
  4038d6:	23c7      	movs	r3, #199	; 0xc7
  4038d8:	75fb      	strb	r3, [r7, #23]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4038da:	88fa      	ldrh	r2, [r7, #6]
  4038dc:	7df8      	ldrb	r0, [r7, #23]
  4038de:	2300      	movs	r3, #0
  4038e0:	9300      	str	r3, [sp, #0]
  4038e2:	4613      	mov	r3, r2
  4038e4:	2200      	movs	r2, #0
  4038e6:	68f9      	ldr	r1, [r7, #12]
  4038e8:	4c2d      	ldr	r4, [pc, #180]	; (4039a0 <nm_spi_write+0xd8>)
  4038ea:	47a0      	blx	r4
  4038ec:	4603      	mov	r3, r0
  4038ee:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  4038f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4038f4:	2b01      	cmp	r3, #1
  4038f6:	d00e      	beq.n	403916 <nm_spi_write+0x4e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  4038f8:	f240 220f 	movw	r2, #527	; 0x20f
  4038fc:	4929      	ldr	r1, [pc, #164]	; (4039a4 <nm_spi_write+0xdc>)
  4038fe:	482a      	ldr	r0, [pc, #168]	; (4039a8 <nm_spi_write+0xe0>)
  403900:	4b2a      	ldr	r3, [pc, #168]	; (4039ac <nm_spi_write+0xe4>)
  403902:	4798      	blx	r3
  403904:	68f9      	ldr	r1, [r7, #12]
  403906:	482a      	ldr	r0, [pc, #168]	; (4039b0 <nm_spi_write+0xe8>)
  403908:	4b28      	ldr	r3, [pc, #160]	; (4039ac <nm_spi_write+0xe4>)
  40390a:	4798      	blx	r3
  40390c:	4829      	ldr	r0, [pc, #164]	; (4039b4 <nm_spi_write+0xec>)
  40390e:	4b27      	ldr	r3, [pc, #156]	; (4039ac <nm_spi_write+0xe4>)
  403910:	4798      	blx	r3
		return N_FAIL;
  403912:	2300      	movs	r3, #0
  403914:	e040      	b.n	403998 <nm_spi_write+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  403916:	7dfb      	ldrb	r3, [r7, #23]
  403918:	4618      	mov	r0, r3
  40391a:	4b27      	ldr	r3, [pc, #156]	; (4039b8 <nm_spi_write+0xf0>)
  40391c:	4798      	blx	r3
  40391e:	4603      	mov	r3, r0
  403920:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  403922:	f997 3016 	ldrsb.w	r3, [r7, #22]
  403926:	2b01      	cmp	r3, #1
  403928:	d016      	beq.n	403958 <nm_spi_write+0x90>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  40392a:	f240 2215 	movw	r2, #533	; 0x215
  40392e:	491d      	ldr	r1, [pc, #116]	; (4039a4 <nm_spi_write+0xdc>)
  403930:	481d      	ldr	r0, [pc, #116]	; (4039a8 <nm_spi_write+0xe0>)
  403932:	4b1e      	ldr	r3, [pc, #120]	; (4039ac <nm_spi_write+0xe4>)
  403934:	4798      	blx	r3
  403936:	68f9      	ldr	r1, [r7, #12]
  403938:	4820      	ldr	r0, [pc, #128]	; (4039bc <nm_spi_write+0xf4>)
  40393a:	4b1c      	ldr	r3, [pc, #112]	; (4039ac <nm_spi_write+0xe4>)
  40393c:	4798      	blx	r3
  40393e:	481d      	ldr	r0, [pc, #116]	; (4039b4 <nm_spi_write+0xec>)
  403940:	4b1a      	ldr	r3, [pc, #104]	; (4039ac <nm_spi_write+0xe4>)
  403942:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403944:	2300      	movs	r3, #0
  403946:	9300      	str	r3, [sp, #0]
  403948:	2300      	movs	r3, #0
  40394a:	2200      	movs	r2, #0
  40394c:	2100      	movs	r1, #0
  40394e:	20cf      	movs	r0, #207	; 0xcf
  403950:	4c13      	ldr	r4, [pc, #76]	; (4039a0 <nm_spi_write+0xd8>)
  403952:	47a0      	blx	r4
		return N_FAIL;
  403954:	2300      	movs	r3, #0
  403956:	e01f      	b.n	403998 <nm_spi_write+0xd0>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
  403958:	88fb      	ldrh	r3, [r7, #6]
  40395a:	4619      	mov	r1, r3
  40395c:	68b8      	ldr	r0, [r7, #8]
  40395e:	4b18      	ldr	r3, [pc, #96]	; (4039c0 <nm_spi_write+0xf8>)
  403960:	4798      	blx	r3
  403962:	4603      	mov	r3, r0
  403964:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  403966:	f997 3016 	ldrsb.w	r3, [r7, #22]
  40396a:	2b01      	cmp	r3, #1
  40396c:	d013      	beq.n	403996 <nm_spi_write+0xce>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  40396e:	f240 2226 	movw	r2, #550	; 0x226
  403972:	490c      	ldr	r1, [pc, #48]	; (4039a4 <nm_spi_write+0xdc>)
  403974:	480c      	ldr	r0, [pc, #48]	; (4039a8 <nm_spi_write+0xe0>)
  403976:	4b0d      	ldr	r3, [pc, #52]	; (4039ac <nm_spi_write+0xe4>)
  403978:	4798      	blx	r3
  40397a:	4812      	ldr	r0, [pc, #72]	; (4039c4 <nm_spi_write+0xfc>)
  40397c:	4b0b      	ldr	r3, [pc, #44]	; (4039ac <nm_spi_write+0xe4>)
  40397e:	4798      	blx	r3
  403980:	480c      	ldr	r0, [pc, #48]	; (4039b4 <nm_spi_write+0xec>)
  403982:	4b0a      	ldr	r3, [pc, #40]	; (4039ac <nm_spi_write+0xe4>)
  403984:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403986:	2300      	movs	r3, #0
  403988:	9300      	str	r3, [sp, #0]
  40398a:	2300      	movs	r3, #0
  40398c:	2200      	movs	r2, #0
  40398e:	2100      	movs	r1, #0
  403990:	20cf      	movs	r0, #207	; 0xcf
  403992:	4c03      	ldr	r4, [pc, #12]	; (4039a0 <nm_spi_write+0xd8>)
  403994:	47a0      	blx	r4
	}

	return N_OK;
  403996:	2301      	movs	r3, #1
}
  403998:	4618      	mov	r0, r3
  40399a:	371c      	adds	r7, #28
  40399c:	46bd      	mov	sp, r7
  40399e:	bd90      	pop	{r4, r7, pc}
  4039a0:	004031d5 	.word	0x004031d5
  4039a4:	0040eb8c 	.word	0x0040eb8c
  4039a8:	0040e67c 	.word	0x0040e67c
  4039ac:	004078bd 	.word	0x004078bd
  4039b0:	0040e8cc 	.word	0x0040e8cc
  4039b4:	0040e6bc 	.word	0x0040e6bc
  4039b8:	00403435 	.word	0x00403435
  4039bc:	0040e8fc 	.word	0x0040e8fc
  4039c0:	004036a5 	.word	0x004036a5
  4039c4:	0040e934 	.word	0x0040e934

004039c8 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  4039c8:	b590      	push	{r4, r7, lr}
  4039ca:	b087      	sub	sp, #28
  4039cc:	af02      	add	r7, sp, #8
  4039ce:	6078      	str	r0, [r7, #4]
  4039d0:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
  4039d2:	2301      	movs	r3, #1
  4039d4:	737b      	strb	r3, [r7, #13]
	uint8 cmd = CMD_SINGLE_READ;
  4039d6:	23ca      	movs	r3, #202	; 0xca
  4039d8:	73fb      	strb	r3, [r7, #15]
	uint8 tmp[4];
	uint8 clockless = 0;
  4039da:	2300      	movs	r3, #0
  4039dc:	73bb      	strb	r3, [r7, #14]

	if (addr <= 0xff)
  4039de:	687b      	ldr	r3, [r7, #4]
  4039e0:	2bff      	cmp	r3, #255	; 0xff
  4039e2:	d804      	bhi.n	4039ee <spi_read_reg+0x26>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
  4039e4:	23c4      	movs	r3, #196	; 0xc4
  4039e6:	73fb      	strb	r3, [r7, #15]
		clockless = 1;
  4039e8:	2301      	movs	r3, #1
  4039ea:	73bb      	strb	r3, [r7, #14]
  4039ec:	e003      	b.n	4039f6 <spi_read_reg+0x2e>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
  4039ee:	23ca      	movs	r3, #202	; 0xca
  4039f0:	73fb      	strb	r3, [r7, #15]
		clockless = 0;
  4039f2:	2300      	movs	r3, #0
  4039f4:	73bb      	strb	r3, [r7, #14]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  4039f6:	7bf8      	ldrb	r0, [r7, #15]
  4039f8:	7bbb      	ldrb	r3, [r7, #14]
  4039fa:	9300      	str	r3, [sp, #0]
  4039fc:	2304      	movs	r3, #4
  4039fe:	2200      	movs	r2, #0
  403a00:	6879      	ldr	r1, [r7, #4]
  403a02:	4c36      	ldr	r4, [pc, #216]	; (403adc <spi_read_reg+0x114>)
  403a04:	47a0      	blx	r4
  403a06:	4603      	mov	r3, r0
  403a08:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  403a0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
  403a0e:	2b01      	cmp	r3, #1
  403a10:	d00e      	beq.n	403a30 <spi_read_reg+0x68>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  403a12:	f240 2245 	movw	r2, #581	; 0x245
  403a16:	4932      	ldr	r1, [pc, #200]	; (403ae0 <spi_read_reg+0x118>)
  403a18:	4832      	ldr	r0, [pc, #200]	; (403ae4 <spi_read_reg+0x11c>)
  403a1a:	4b33      	ldr	r3, [pc, #204]	; (403ae8 <spi_read_reg+0x120>)
  403a1c:	4798      	blx	r3
  403a1e:	6879      	ldr	r1, [r7, #4]
  403a20:	4832      	ldr	r0, [pc, #200]	; (403aec <spi_read_reg+0x124>)
  403a22:	4b31      	ldr	r3, [pc, #196]	; (403ae8 <spi_read_reg+0x120>)
  403a24:	4798      	blx	r3
  403a26:	4832      	ldr	r0, [pc, #200]	; (403af0 <spi_read_reg+0x128>)
  403a28:	4b2f      	ldr	r3, [pc, #188]	; (403ae8 <spi_read_reg+0x120>)
  403a2a:	4798      	blx	r3
		return N_FAIL;
  403a2c:	2300      	movs	r3, #0
  403a2e:	e051      	b.n	403ad4 <spi_read_reg+0x10c>
	}

	result = spi_cmd_rsp(cmd);
  403a30:	7bfb      	ldrb	r3, [r7, #15]
  403a32:	4618      	mov	r0, r3
  403a34:	4b2f      	ldr	r3, [pc, #188]	; (403af4 <spi_read_reg+0x12c>)
  403a36:	4798      	blx	r3
  403a38:	4603      	mov	r3, r0
  403a3a:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  403a3c:	f997 300d 	ldrsb.w	r3, [r7, #13]
  403a40:	2b01      	cmp	r3, #1
  403a42:	d016      	beq.n	403a72 <spi_read_reg+0xaa>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  403a44:	f240 224b 	movw	r2, #587	; 0x24b
  403a48:	4925      	ldr	r1, [pc, #148]	; (403ae0 <spi_read_reg+0x118>)
  403a4a:	4826      	ldr	r0, [pc, #152]	; (403ae4 <spi_read_reg+0x11c>)
  403a4c:	4b26      	ldr	r3, [pc, #152]	; (403ae8 <spi_read_reg+0x120>)
  403a4e:	4798      	blx	r3
  403a50:	6879      	ldr	r1, [r7, #4]
  403a52:	4829      	ldr	r0, [pc, #164]	; (403af8 <spi_read_reg+0x130>)
  403a54:	4b24      	ldr	r3, [pc, #144]	; (403ae8 <spi_read_reg+0x120>)
  403a56:	4798      	blx	r3
  403a58:	4825      	ldr	r0, [pc, #148]	; (403af0 <spi_read_reg+0x128>)
  403a5a:	4b23      	ldr	r3, [pc, #140]	; (403ae8 <spi_read_reg+0x120>)
  403a5c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403a5e:	2300      	movs	r3, #0
  403a60:	9300      	str	r3, [sp, #0]
  403a62:	2300      	movs	r3, #0
  403a64:	2200      	movs	r2, #0
  403a66:	2100      	movs	r1, #0
  403a68:	20cf      	movs	r0, #207	; 0xcf
  403a6a:	4c1c      	ldr	r4, [pc, #112]	; (403adc <spi_read_reg+0x114>)
  403a6c:	47a0      	blx	r4
		return N_FAIL;
  403a6e:	2300      	movs	r3, #0
  403a70:	e030      	b.n	403ad4 <spi_read_reg+0x10c>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  403a72:	7bba      	ldrb	r2, [r7, #14]
  403a74:	f107 0308 	add.w	r3, r7, #8
  403a78:	2104      	movs	r1, #4
  403a7a:	4618      	mov	r0, r3
  403a7c:	4b1f      	ldr	r3, [pc, #124]	; (403afc <spi_read_reg+0x134>)
  403a7e:	4798      	blx	r3
  403a80:	4603      	mov	r3, r0
  403a82:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  403a84:	f997 300d 	ldrsb.w	r3, [r7, #13]
  403a88:	2b01      	cmp	r3, #1
  403a8a:	d015      	beq.n	403ab8 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  403a8c:	f240 2253 	movw	r2, #595	; 0x253
  403a90:	4913      	ldr	r1, [pc, #76]	; (403ae0 <spi_read_reg+0x118>)
  403a92:	4814      	ldr	r0, [pc, #80]	; (403ae4 <spi_read_reg+0x11c>)
  403a94:	4b14      	ldr	r3, [pc, #80]	; (403ae8 <spi_read_reg+0x120>)
  403a96:	4798      	blx	r3
  403a98:	4819      	ldr	r0, [pc, #100]	; (403b00 <spi_read_reg+0x138>)
  403a9a:	4b13      	ldr	r3, [pc, #76]	; (403ae8 <spi_read_reg+0x120>)
  403a9c:	4798      	blx	r3
  403a9e:	4814      	ldr	r0, [pc, #80]	; (403af0 <spi_read_reg+0x128>)
  403aa0:	4b11      	ldr	r3, [pc, #68]	; (403ae8 <spi_read_reg+0x120>)
  403aa2:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403aa4:	2300      	movs	r3, #0
  403aa6:	9300      	str	r3, [sp, #0]
  403aa8:	2300      	movs	r3, #0
  403aaa:	2200      	movs	r2, #0
  403aac:	2100      	movs	r1, #0
  403aae:	20cf      	movs	r0, #207	; 0xcf
  403ab0:	4c0a      	ldr	r4, [pc, #40]	; (403adc <spi_read_reg+0x114>)
  403ab2:	47a0      	blx	r4
		return N_FAIL;
  403ab4:	2300      	movs	r3, #0
  403ab6:	e00d      	b.n	403ad4 <spi_read_reg+0x10c>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  403ab8:	7a3b      	ldrb	r3, [r7, #8]
  403aba:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
  403abc:	7a7b      	ldrb	r3, [r7, #9]
  403abe:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  403ac0:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
  403ac2:	7abb      	ldrb	r3, [r7, #10]
  403ac4:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
  403ac6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
  403ac8:	7afb      	ldrb	r3, [r7, #11]
  403aca:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
  403acc:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  403ace:	683b      	ldr	r3, [r7, #0]
  403ad0:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  403ad2:	2301      	movs	r3, #1
}
  403ad4:	4618      	mov	r0, r3
  403ad6:	3714      	adds	r7, #20
  403ad8:	46bd      	mov	sp, r7
  403ada:	bd90      	pop	{r4, r7, pc}
  403adc:	004031d5 	.word	0x004031d5
  403ae0:	0040eb9c 	.word	0x0040eb9c
  403ae4:	0040e67c 	.word	0x0040e67c
  403ae8:	004078bd 	.word	0x004078bd
  403aec:	0040e95c 	.word	0x0040e95c
  403af0:	0040e6bc 	.word	0x0040e6bc
  403af4:	00403435 	.word	0x00403435
  403af8:	0040e988 	.word	0x0040e988
  403afc:	00403529 	.word	0x00403529
  403b00:	0040e9bc 	.word	0x0040e9bc

00403b04 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
  403b04:	b590      	push	{r4, r7, lr}
  403b06:	b089      	sub	sp, #36	; 0x24
  403b08:	af02      	add	r7, sp, #8
  403b0a:	60f8      	str	r0, [r7, #12]
  403b0c:	60b9      	str	r1, [r7, #8]
  403b0e:	4613      	mov	r3, r2
  403b10:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
  403b12:	23c8      	movs	r3, #200	; 0xc8
  403b14:	75fb      	strb	r3, [r7, #23]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  403b16:	88fa      	ldrh	r2, [r7, #6]
  403b18:	7df8      	ldrb	r0, [r7, #23]
  403b1a:	2300      	movs	r3, #0
  403b1c:	9300      	str	r3, [sp, #0]
  403b1e:	4613      	mov	r3, r2
  403b20:	2200      	movs	r2, #0
  403b22:	68f9      	ldr	r1, [r7, #12]
  403b24:	4c2f      	ldr	r4, [pc, #188]	; (403be4 <nm_spi_read+0xe0>)
  403b26:	47a0      	blx	r4
  403b28:	4603      	mov	r3, r0
  403b2a:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  403b2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
  403b30:	2b01      	cmp	r3, #1
  403b32:	d00e      	beq.n	403b52 <nm_spi_read+0x4e>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  403b34:	f44f 721d 	mov.w	r2, #628	; 0x274
  403b38:	492b      	ldr	r1, [pc, #172]	; (403be8 <nm_spi_read+0xe4>)
  403b3a:	482c      	ldr	r0, [pc, #176]	; (403bec <nm_spi_read+0xe8>)
  403b3c:	4b2c      	ldr	r3, [pc, #176]	; (403bf0 <nm_spi_read+0xec>)
  403b3e:	4798      	blx	r3
  403b40:	68f9      	ldr	r1, [r7, #12]
  403b42:	482c      	ldr	r0, [pc, #176]	; (403bf4 <nm_spi_read+0xf0>)
  403b44:	4b2a      	ldr	r3, [pc, #168]	; (403bf0 <nm_spi_read+0xec>)
  403b46:	4798      	blx	r3
  403b48:	482b      	ldr	r0, [pc, #172]	; (403bf8 <nm_spi_read+0xf4>)
  403b4a:	4b29      	ldr	r3, [pc, #164]	; (403bf0 <nm_spi_read+0xec>)
  403b4c:	4798      	blx	r3
		return N_FAIL;
  403b4e:	2300      	movs	r3, #0
  403b50:	e043      	b.n	403bda <nm_spi_read+0xd6>
	}

	result = spi_cmd_rsp(cmd);
  403b52:	7dfb      	ldrb	r3, [r7, #23]
  403b54:	4618      	mov	r0, r3
  403b56:	4b29      	ldr	r3, [pc, #164]	; (403bfc <nm_spi_read+0xf8>)
  403b58:	4798      	blx	r3
  403b5a:	4603      	mov	r3, r0
  403b5c:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  403b5e:	f997 3016 	ldrsb.w	r3, [r7, #22]
  403b62:	2b01      	cmp	r3, #1
  403b64:	d016      	beq.n	403b94 <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  403b66:	f240 227a 	movw	r2, #634	; 0x27a
  403b6a:	491f      	ldr	r1, [pc, #124]	; (403be8 <nm_spi_read+0xe4>)
  403b6c:	481f      	ldr	r0, [pc, #124]	; (403bec <nm_spi_read+0xe8>)
  403b6e:	4b20      	ldr	r3, [pc, #128]	; (403bf0 <nm_spi_read+0xec>)
  403b70:	4798      	blx	r3
  403b72:	68f9      	ldr	r1, [r7, #12]
  403b74:	4822      	ldr	r0, [pc, #136]	; (403c00 <nm_spi_read+0xfc>)
  403b76:	4b1e      	ldr	r3, [pc, #120]	; (403bf0 <nm_spi_read+0xec>)
  403b78:	4798      	blx	r3
  403b7a:	481f      	ldr	r0, [pc, #124]	; (403bf8 <nm_spi_read+0xf4>)
  403b7c:	4b1c      	ldr	r3, [pc, #112]	; (403bf0 <nm_spi_read+0xec>)
  403b7e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403b80:	2300      	movs	r3, #0
  403b82:	9300      	str	r3, [sp, #0]
  403b84:	2300      	movs	r3, #0
  403b86:	2200      	movs	r2, #0
  403b88:	2100      	movs	r1, #0
  403b8a:	20cf      	movs	r0, #207	; 0xcf
  403b8c:	4c15      	ldr	r4, [pc, #84]	; (403be4 <nm_spi_read+0xe0>)
  403b8e:	47a0      	blx	r4
		return N_FAIL;
  403b90:	2300      	movs	r3, #0
  403b92:	e022      	b.n	403bda <nm_spi_read+0xd6>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  403b94:	88fb      	ldrh	r3, [r7, #6]
  403b96:	2200      	movs	r2, #0
  403b98:	4619      	mov	r1, r3
  403b9a:	68b8      	ldr	r0, [r7, #8]
  403b9c:	4b19      	ldr	r3, [pc, #100]	; (403c04 <nm_spi_read+0x100>)
  403b9e:	4798      	blx	r3
  403ba0:	4603      	mov	r3, r0
  403ba2:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  403ba4:	f997 3016 	ldrsb.w	r3, [r7, #22]
  403ba8:	2b01      	cmp	r3, #1
  403baa:	d015      	beq.n	403bd8 <nm_spi_read+0xd4>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  403bac:	f44f 7221 	mov.w	r2, #644	; 0x284
  403bb0:	490d      	ldr	r1, [pc, #52]	; (403be8 <nm_spi_read+0xe4>)
  403bb2:	480e      	ldr	r0, [pc, #56]	; (403bec <nm_spi_read+0xe8>)
  403bb4:	4b0e      	ldr	r3, [pc, #56]	; (403bf0 <nm_spi_read+0xec>)
  403bb6:	4798      	blx	r3
  403bb8:	4813      	ldr	r0, [pc, #76]	; (403c08 <nm_spi_read+0x104>)
  403bba:	4b0d      	ldr	r3, [pc, #52]	; (403bf0 <nm_spi_read+0xec>)
  403bbc:	4798      	blx	r3
  403bbe:	480e      	ldr	r0, [pc, #56]	; (403bf8 <nm_spi_read+0xf4>)
  403bc0:	4b0b      	ldr	r3, [pc, #44]	; (403bf0 <nm_spi_read+0xec>)
  403bc2:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403bc4:	2300      	movs	r3, #0
  403bc6:	9300      	str	r3, [sp, #0]
  403bc8:	2300      	movs	r3, #0
  403bca:	2200      	movs	r2, #0
  403bcc:	2100      	movs	r1, #0
  403bce:	20cf      	movs	r0, #207	; 0xcf
  403bd0:	4c04      	ldr	r4, [pc, #16]	; (403be4 <nm_spi_read+0xe0>)
  403bd2:	47a0      	blx	r4
		return N_FAIL;
  403bd4:	2300      	movs	r3, #0
  403bd6:	e000      	b.n	403bda <nm_spi_read+0xd6>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
  403bd8:	2301      	movs	r3, #1
}
  403bda:	4618      	mov	r0, r3
  403bdc:	371c      	adds	r7, #28
  403bde:	46bd      	mov	sp, r7
  403be0:	bd90      	pop	{r4, r7, pc}
  403be2:	bf00      	nop
  403be4:	004031d5 	.word	0x004031d5
  403be8:	0040ebac 	.word	0x0040ebac
  403bec:	0040e67c 	.word	0x0040e67c
  403bf0:	004078bd 	.word	0x004078bd
  403bf4:	0040e9dc 	.word	0x0040e9dc
  403bf8:	0040e6bc 	.word	0x0040e6bc
  403bfc:	00403435 	.word	0x00403435
  403c00:	0040ea0c 	.word	0x0040ea0c
  403c04:	00403529 	.word	0x00403529
  403c08:	0040ea44 	.word	0x0040ea44

00403c0c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
  403c0c:	b580      	push	{r7, lr}
  403c0e:	b082      	sub	sp, #8
  403c10:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  403c12:	f64e 0024 	movw	r0, #59428	; 0xe824
  403c16:	4b0a      	ldr	r3, [pc, #40]	; (403c40 <spi_init_pkt_sz+0x34>)
  403c18:	4798      	blx	r3
  403c1a:	6078      	str	r0, [r7, #4]
	val32 &= ~(0x7 << 4);
  403c1c:	687b      	ldr	r3, [r7, #4]
  403c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403c22:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
  403c24:	687b      	ldr	r3, [r7, #4]
  403c26:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  403c2a:	607b      	str	r3, [r7, #4]
  403c2c:	bf00      	nop

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  403c2e:	6879      	ldr	r1, [r7, #4]
  403c30:	f64e 0024 	movw	r0, #59428	; 0xe824
  403c34:	4b03      	ldr	r3, [pc, #12]	; (403c44 <spi_init_pkt_sz+0x38>)
  403c36:	4798      	blx	r3
}
  403c38:	bf00      	nop
  403c3a:	3708      	adds	r7, #8
  403c3c:	46bd      	mov	sp, r7
  403c3e:	bd80      	pop	{r7, pc}
  403c40:	00403d95 	.word	0x00403d95
  403c44:	00403df1 	.word	0x00403df1

00403c48 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  403c48:	b580      	push	{r7, lr}
  403c4a:	b082      	sub	sp, #8
  403c4c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
  403c4e:	2300      	movs	r3, #0
  403c50:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  403c52:	4b3d      	ldr	r3, [pc, #244]	; (403d48 <nm_spi_init+0x100>)
  403c54:	2200      	movs	r2, #0
  403c56:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  403c58:	463b      	mov	r3, r7
  403c5a:	4619      	mov	r1, r3
  403c5c:	f64e 0024 	movw	r0, #59428	; 0xe824
  403c60:	4b3a      	ldr	r3, [pc, #232]	; (403d4c <nm_spi_init+0x104>)
  403c62:	4798      	blx	r3
  403c64:	4603      	mov	r3, r0
  403c66:	2b00      	cmp	r3, #0
  403c68:	d125      	bne.n	403cb6 <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  403c6a:	4b37      	ldr	r3, [pc, #220]	; (403d48 <nm_spi_init+0x100>)
  403c6c:	2201      	movs	r2, #1
  403c6e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  403c70:	f240 22c5 	movw	r2, #709	; 0x2c5
  403c74:	4936      	ldr	r1, [pc, #216]	; (403d50 <nm_spi_init+0x108>)
  403c76:	4837      	ldr	r0, [pc, #220]	; (403d54 <nm_spi_init+0x10c>)
  403c78:	4b37      	ldr	r3, [pc, #220]	; (403d58 <nm_spi_init+0x110>)
  403c7a:	4798      	blx	r3
  403c7c:	4837      	ldr	r0, [pc, #220]	; (403d5c <nm_spi_init+0x114>)
  403c7e:	4b36      	ldr	r3, [pc, #216]	; (403d58 <nm_spi_init+0x110>)
  403c80:	4798      	blx	r3
  403c82:	4837      	ldr	r0, [pc, #220]	; (403d60 <nm_spi_init+0x118>)
  403c84:	4b34      	ldr	r3, [pc, #208]	; (403d58 <nm_spi_init+0x110>)
  403c86:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  403c88:	463b      	mov	r3, r7
  403c8a:	4619      	mov	r1, r3
  403c8c:	f64e 0024 	movw	r0, #59428	; 0xe824
  403c90:	4b2e      	ldr	r3, [pc, #184]	; (403d4c <nm_spi_init+0x104>)
  403c92:	4798      	blx	r3
  403c94:	4603      	mov	r3, r0
  403c96:	2b00      	cmp	r3, #0
  403c98:	d10d      	bne.n	403cb6 <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  403c9a:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  403c9e:	492c      	ldr	r1, [pc, #176]	; (403d50 <nm_spi_init+0x108>)
  403ca0:	482c      	ldr	r0, [pc, #176]	; (403d54 <nm_spi_init+0x10c>)
  403ca2:	4b2d      	ldr	r3, [pc, #180]	; (403d58 <nm_spi_init+0x110>)
  403ca4:	4798      	blx	r3
  403ca6:	482f      	ldr	r0, [pc, #188]	; (403d64 <nm_spi_init+0x11c>)
  403ca8:	4b2b      	ldr	r3, [pc, #172]	; (403d58 <nm_spi_init+0x110>)
  403caa:	4798      	blx	r3
  403cac:	482c      	ldr	r0, [pc, #176]	; (403d60 <nm_spi_init+0x118>)
  403cae:	4b2a      	ldr	r3, [pc, #168]	; (403d58 <nm_spi_init+0x110>)
  403cb0:	4798      	blx	r3
			return 0;
  403cb2:	2300      	movs	r3, #0
  403cb4:	e044      	b.n	403d40 <nm_spi_init+0xf8>
		}
	}
	if(gu8Crc_off == 0)
  403cb6:	4b24      	ldr	r3, [pc, #144]	; (403d48 <nm_spi_init+0x100>)
  403cb8:	781b      	ldrb	r3, [r3, #0]
  403cba:	2b00      	cmp	r3, #0
  403cbc:	d125      	bne.n	403d0a <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
  403cbe:	683b      	ldr	r3, [r7, #0]
  403cc0:	f023 030c 	bic.w	r3, r3, #12
  403cc4:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
  403cc6:	683b      	ldr	r3, [r7, #0]
  403cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403ccc:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
  403cce:	683b      	ldr	r3, [r7, #0]
  403cd0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  403cd4:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  403cd6:	683b      	ldr	r3, [r7, #0]
  403cd8:	4619      	mov	r1, r3
  403cda:	f64e 0024 	movw	r0, #59428	; 0xe824
  403cde:	4b22      	ldr	r3, [pc, #136]	; (403d68 <nm_spi_init+0x120>)
  403ce0:	4798      	blx	r3
  403ce2:	4603      	mov	r3, r0
  403ce4:	2b00      	cmp	r3, #0
  403ce6:	d10d      	bne.n	403d04 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  403ce8:	f240 22d2 	movw	r2, #722	; 0x2d2
  403cec:	4918      	ldr	r1, [pc, #96]	; (403d50 <nm_spi_init+0x108>)
  403cee:	4819      	ldr	r0, [pc, #100]	; (403d54 <nm_spi_init+0x10c>)
  403cf0:	4b19      	ldr	r3, [pc, #100]	; (403d58 <nm_spi_init+0x110>)
  403cf2:	4798      	blx	r3
  403cf4:	481d      	ldr	r0, [pc, #116]	; (403d6c <nm_spi_init+0x124>)
  403cf6:	4b18      	ldr	r3, [pc, #96]	; (403d58 <nm_spi_init+0x110>)
  403cf8:	4798      	blx	r3
  403cfa:	4819      	ldr	r0, [pc, #100]	; (403d60 <nm_spi_init+0x118>)
  403cfc:	4b16      	ldr	r3, [pc, #88]	; (403d58 <nm_spi_init+0x110>)
  403cfe:	4798      	blx	r3
			return 0;
  403d00:	2300      	movs	r3, #0
  403d02:	e01d      	b.n	403d40 <nm_spi_init+0xf8>
		}
		gu8Crc_off = 1;
  403d04:	4b10      	ldr	r3, [pc, #64]	; (403d48 <nm_spi_init+0x100>)
  403d06:	2201      	movs	r2, #1
  403d08:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  403d0a:	1d3b      	adds	r3, r7, #4
  403d0c:	4619      	mov	r1, r3
  403d0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403d12:	4b0e      	ldr	r3, [pc, #56]	; (403d4c <nm_spi_init+0x104>)
  403d14:	4798      	blx	r3
  403d16:	4603      	mov	r3, r0
  403d18:	2b00      	cmp	r3, #0
  403d1a:	d10e      	bne.n	403d3a <nm_spi_init+0xf2>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  403d1c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  403d20:	490b      	ldr	r1, [pc, #44]	; (403d50 <nm_spi_init+0x108>)
  403d22:	480c      	ldr	r0, [pc, #48]	; (403d54 <nm_spi_init+0x10c>)
  403d24:	4b0c      	ldr	r3, [pc, #48]	; (403d58 <nm_spi_init+0x110>)
  403d26:	4798      	blx	r3
  403d28:	4811      	ldr	r0, [pc, #68]	; (403d70 <nm_spi_init+0x128>)
  403d2a:	4b0b      	ldr	r3, [pc, #44]	; (403d58 <nm_spi_init+0x110>)
  403d2c:	4798      	blx	r3
  403d2e:	480c      	ldr	r0, [pc, #48]	; (403d60 <nm_spi_init+0x118>)
  403d30:	4b09      	ldr	r3, [pc, #36]	; (403d58 <nm_spi_init+0x110>)
  403d32:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
  403d34:	f06f 0305 	mvn.w	r3, #5
  403d38:	e002      	b.n	403d40 <nm_spi_init+0xf8>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
  403d3a:	4b0e      	ldr	r3, [pc, #56]	; (403d74 <nm_spi_init+0x12c>)
  403d3c:	4798      	blx	r3


	return M2M_SUCCESS;
  403d3e:	2300      	movs	r3, #0
}
  403d40:	4618      	mov	r0, r3
  403d42:	3708      	adds	r7, #8
  403d44:	46bd      	mov	sp, r7
  403d46:	bd80      	pop	{r7, pc}
  403d48:	2040098c 	.word	0x2040098c
  403d4c:	004039c9 	.word	0x004039c9
  403d50:	0040ebb8 	.word	0x0040ebb8
  403d54:	0040e67c 	.word	0x0040e67c
  403d58:	004078bd 	.word	0x004078bd
  403d5c:	0040ea6c 	.word	0x0040ea6c
  403d60:	0040e6bc 	.word	0x0040e6bc
  403d64:	0040eabc 	.word	0x0040eabc
  403d68:	004037f5 	.word	0x004037f5
  403d6c:	0040eaec 	.word	0x0040eaec
  403d70:	0040eb20 	.word	0x0040eb20
  403d74:	00403c0d 	.word	0x00403c0d

00403d78 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
  403d78:	b480      	push	{r7}
  403d7a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
  403d7c:	4b04      	ldr	r3, [pc, #16]	; (403d90 <nm_spi_deinit+0x18>)
  403d7e:	2200      	movs	r2, #0
  403d80:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
  403d82:	2300      	movs	r3, #0
}
  403d84:	4618      	mov	r0, r3
  403d86:	46bd      	mov	sp, r7
  403d88:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d8c:	4770      	bx	lr
  403d8e:	bf00      	nop
  403d90:	2040098c 	.word	0x2040098c

00403d94 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  403d94:	b580      	push	{r7, lr}
  403d96:	b084      	sub	sp, #16
  403d98:	af00      	add	r7, sp, #0
  403d9a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  403d9c:	f107 030c 	add.w	r3, r7, #12
  403da0:	4619      	mov	r1, r3
  403da2:	6878      	ldr	r0, [r7, #4]
  403da4:	4b03      	ldr	r3, [pc, #12]	; (403db4 <nm_spi_read_reg+0x20>)
  403da6:	4798      	blx	r3

	return u32Val;
  403da8:	68fb      	ldr	r3, [r7, #12]
}
  403daa:	4618      	mov	r0, r3
  403dac:	3710      	adds	r7, #16
  403dae:	46bd      	mov	sp, r7
  403db0:	bd80      	pop	{r7, pc}
  403db2:	bf00      	nop
  403db4:	004039c9 	.word	0x004039c9

00403db8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403db8:	b580      	push	{r7, lr}
  403dba:	b084      	sub	sp, #16
  403dbc:	af00      	add	r7, sp, #0
  403dbe:	6078      	str	r0, [r7, #4]
  403dc0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  403dc2:	6839      	ldr	r1, [r7, #0]
  403dc4:	6878      	ldr	r0, [r7, #4]
  403dc6:	4b09      	ldr	r3, [pc, #36]	; (403dec <nm_spi_read_reg_with_ret+0x34>)
  403dc8:	4798      	blx	r3
  403dca:	4603      	mov	r3, r0
  403dcc:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403dd2:	2b01      	cmp	r3, #1
  403dd4:	d102      	bne.n	403ddc <nm_spi_read_reg_with_ret+0x24>
  403dd6:	2300      	movs	r3, #0
  403dd8:	73fb      	strb	r3, [r7, #15]
  403dda:	e001      	b.n	403de0 <nm_spi_read_reg_with_ret+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
  403ddc:	23fa      	movs	r3, #250	; 0xfa
  403dde:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
  403de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  403de4:	4618      	mov	r0, r3
  403de6:	3710      	adds	r7, #16
  403de8:	46bd      	mov	sp, r7
  403dea:	bd80      	pop	{r7, pc}
  403dec:	004039c9 	.word	0x004039c9

00403df0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403df0:	b580      	push	{r7, lr}
  403df2:	b084      	sub	sp, #16
  403df4:	af00      	add	r7, sp, #0
  403df6:	6078      	str	r0, [r7, #4]
  403df8:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  403dfa:	6839      	ldr	r1, [r7, #0]
  403dfc:	6878      	ldr	r0, [r7, #4]
  403dfe:	4b09      	ldr	r3, [pc, #36]	; (403e24 <nm_spi_write_reg+0x34>)
  403e00:	4798      	blx	r3
  403e02:	4603      	mov	r3, r0
  403e04:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403e0a:	2b01      	cmp	r3, #1
  403e0c:	d102      	bne.n	403e14 <nm_spi_write_reg+0x24>
  403e0e:	2300      	movs	r3, #0
  403e10:	73fb      	strb	r3, [r7, #15]
  403e12:	e001      	b.n	403e18 <nm_spi_write_reg+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
  403e14:	23fa      	movs	r3, #250	; 0xfa
  403e16:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
  403e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  403e1c:	4618      	mov	r0, r3
  403e1e:	3710      	adds	r7, #16
  403e20:	46bd      	mov	sp, r7
  403e22:	bd80      	pop	{r7, pc}
  403e24:	004037f5 	.word	0x004037f5

00403e28 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403e28:	b580      	push	{r7, lr}
  403e2a:	b086      	sub	sp, #24
  403e2c:	af00      	add	r7, sp, #0
  403e2e:	60f8      	str	r0, [r7, #12]
  403e30:	60b9      	str	r1, [r7, #8]
  403e32:	4613      	mov	r3, r2
  403e34:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
  403e36:	88fb      	ldrh	r3, [r7, #6]
  403e38:	461a      	mov	r2, r3
  403e3a:	68b9      	ldr	r1, [r7, #8]
  403e3c:	68f8      	ldr	r0, [r7, #12]
  403e3e:	4b09      	ldr	r3, [pc, #36]	; (403e64 <nm_spi_read_block+0x3c>)
  403e40:	4798      	blx	r3
  403e42:	4603      	mov	r3, r0
  403e44:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
  403e4a:	2b01      	cmp	r3, #1
  403e4c:	d102      	bne.n	403e54 <nm_spi_read_block+0x2c>
  403e4e:	2300      	movs	r3, #0
  403e50:	75fb      	strb	r3, [r7, #23]
  403e52:	e001      	b.n	403e58 <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
  403e54:	23fa      	movs	r3, #250	; 0xfa
  403e56:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
  403e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  403e5c:	4618      	mov	r0, r3
  403e5e:	3718      	adds	r7, #24
  403e60:	46bd      	mov	sp, r7
  403e62:	bd80      	pop	{r7, pc}
  403e64:	00403b05 	.word	0x00403b05

00403e68 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403e68:	b580      	push	{r7, lr}
  403e6a:	b086      	sub	sp, #24
  403e6c:	af00      	add	r7, sp, #0
  403e6e:	60f8      	str	r0, [r7, #12]
  403e70:	60b9      	str	r1, [r7, #8]
  403e72:	4613      	mov	r3, r2
  403e74:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
  403e76:	88fb      	ldrh	r3, [r7, #6]
  403e78:	461a      	mov	r2, r3
  403e7a:	68b9      	ldr	r1, [r7, #8]
  403e7c:	68f8      	ldr	r0, [r7, #12]
  403e7e:	4b09      	ldr	r3, [pc, #36]	; (403ea4 <nm_spi_write_block+0x3c>)
  403e80:	4798      	blx	r3
  403e82:	4603      	mov	r3, r0
  403e84:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
  403e8a:	2b01      	cmp	r3, #1
  403e8c:	d102      	bne.n	403e94 <nm_spi_write_block+0x2c>
  403e8e:	2300      	movs	r3, #0
  403e90:	75fb      	strb	r3, [r7, #23]
  403e92:	e001      	b.n	403e98 <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
  403e94:	23fa      	movs	r3, #250	; 0xfa
  403e96:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
  403e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  403e9c:	4618      	mov	r0, r3
  403e9e:	3718      	adds	r7, #24
  403ea0:	46bd      	mov	sp, r7
  403ea2:	bd80      	pop	{r7, pc}
  403ea4:	004038c9 	.word	0x004038c9

00403ea8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  403ea8:	b590      	push	{r4, r7, lr}
  403eaa:	b089      	sub	sp, #36	; 0x24
  403eac:	af00      	add	r7, sp, #0
  403eae:	60b9      	str	r1, [r7, #8]
  403eb0:	607b      	str	r3, [r7, #4]
  403eb2:	4603      	mov	r3, r0
  403eb4:	73fb      	strb	r3, [r7, #15]
  403eb6:	4613      	mov	r3, r2
  403eb8:	73bb      	strb	r3, [r7, #14]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  403eba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403ebc:	2b00      	cmp	r3, #0
  403ebe:	f000 8084 	beq.w	403fca <Socket_ReadSocketData+0x122>
  403ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403ec6:	4a43      	ldr	r2, [pc, #268]	; (403fd4 <Socket_ReadSocketData+0x12c>)
  403ec8:	011b      	lsls	r3, r3, #4
  403eca:	4413      	add	r3, r2
  403ecc:	681b      	ldr	r3, [r3, #0]
  403ece:	2b00      	cmp	r3, #0
  403ed0:	d07b      	beq.n	403fca <Socket_ReadSocketData+0x122>
  403ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403ed6:	4a3f      	ldr	r2, [pc, #252]	; (403fd4 <Socket_ReadSocketData+0x12c>)
  403ed8:	011b      	lsls	r3, r3, #4
  403eda:	4413      	add	r3, r2
  403edc:	3304      	adds	r3, #4
  403ede:	881b      	ldrh	r3, [r3, #0]
  403ee0:	b29b      	uxth	r3, r3
  403ee2:	2b00      	cmp	r3, #0
  403ee4:	d071      	beq.n	403fca <Socket_ReadSocketData+0x122>
  403ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403eea:	4a3a      	ldr	r2, [pc, #232]	; (403fd4 <Socket_ReadSocketData+0x12c>)
  403eec:	011b      	lsls	r3, r3, #4
  403eee:	4413      	add	r3, r2
  403ef0:	330a      	adds	r3, #10
  403ef2:	781b      	ldrb	r3, [r3, #0]
  403ef4:	b2db      	uxtb	r3, r3
  403ef6:	2b01      	cmp	r3, #1
  403ef8:	d167      	bne.n	403fca <Socket_ReadSocketData+0x122>
	{
		uint32	u32Address = u32StartAddress;
  403efa:	687b      	ldr	r3, [r7, #4]
  403efc:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  403efe:	68bb      	ldr	r3, [r7, #8]
  403f00:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
  403f02:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
  403f04:	2301      	movs	r3, #1
  403f06:	767b      	strb	r3, [r7, #25]
			u16Read = u16ReadCount;
  403f08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403f0a:	837b      	strh	r3, [r7, #26]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  403f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403f10:	4a30      	ldr	r2, [pc, #192]	; (403fd4 <Socket_ReadSocketData+0x12c>)
  403f12:	011b      	lsls	r3, r3, #4
  403f14:	4413      	add	r3, r2
  403f16:	3304      	adds	r3, #4
  403f18:	881b      	ldrh	r3, [r3, #0]
  403f1a:	b29b      	uxth	r3, r3
  403f1c:	8b7a      	ldrh	r2, [r7, #26]
  403f1e:	1ad3      	subs	r3, r2, r3
  403f20:	b29b      	uxth	r3, r3
  403f22:	82fb      	strh	r3, [r7, #22]
			if(s16Diff > 0)
  403f24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  403f28:	2b00      	cmp	r3, #0
  403f2a:	dd09      	ble.n	403f40 <Socket_ReadSocketData+0x98>
			{
				u8SetRxDone = 0;
  403f2c:	2300      	movs	r3, #0
  403f2e:	767b      	strb	r3, [r7, #25]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  403f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403f34:	4a27      	ldr	r2, [pc, #156]	; (403fd4 <Socket_ReadSocketData+0x12c>)
  403f36:	011b      	lsls	r3, r3, #4
  403f38:	4413      	add	r3, r2
  403f3a:	3304      	adds	r3, #4
  403f3c:	881b      	ldrh	r3, [r3, #0]
  403f3e:	837b      	strh	r3, [r7, #26]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  403f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403f44:	4a23      	ldr	r2, [pc, #140]	; (403fd4 <Socket_ReadSocketData+0x12c>)
  403f46:	011b      	lsls	r3, r3, #4
  403f48:	4413      	add	r3, r2
  403f4a:	6819      	ldr	r1, [r3, #0]
  403f4c:	7e7b      	ldrb	r3, [r7, #25]
  403f4e:	8b7a      	ldrh	r2, [r7, #26]
  403f50:	69f8      	ldr	r0, [r7, #28]
  403f52:	4c21      	ldr	r4, [pc, #132]	; (403fd8 <Socket_ReadSocketData+0x130>)
  403f54:	47a0      	blx	r4
  403f56:	4603      	mov	r3, r0
  403f58:	2b00      	cmp	r3, #0
  403f5a:	d126      	bne.n	403faa <Socket_ReadSocketData+0x102>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  403f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403f60:	4a1c      	ldr	r2, [pc, #112]	; (403fd4 <Socket_ReadSocketData+0x12c>)
  403f62:	011b      	lsls	r3, r3, #4
  403f64:	4413      	add	r3, r2
  403f66:	681a      	ldr	r2, [r3, #0]
  403f68:	68bb      	ldr	r3, [r7, #8]
  403f6a:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
  403f6c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
  403f70:	68bb      	ldr	r3, [r7, #8]
  403f72:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  403f74:	68bb      	ldr	r3, [r7, #8]
  403f76:	88da      	ldrh	r2, [r3, #6]
  403f78:	8b7b      	ldrh	r3, [r7, #26]
  403f7a:	1ad3      	subs	r3, r2, r3
  403f7c:	b29a      	uxth	r2, r3
  403f7e:	68bb      	ldr	r3, [r7, #8]
  403f80:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
  403f82:	4b16      	ldr	r3, [pc, #88]	; (403fdc <Socket_ReadSocketData+0x134>)
  403f84:	681b      	ldr	r3, [r3, #0]
  403f86:	2b00      	cmp	r3, #0
  403f88:	d006      	beq.n	403f98 <Socket_ReadSocketData+0xf0>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  403f8a:	4b14      	ldr	r3, [pc, #80]	; (403fdc <Socket_ReadSocketData+0x134>)
  403f8c:	681b      	ldr	r3, [r3, #0]
  403f8e:	7bb9      	ldrb	r1, [r7, #14]
  403f90:	f997 000f 	ldrsb.w	r0, [r7, #15]
  403f94:	68ba      	ldr	r2, [r7, #8]
  403f96:	4798      	blx	r3

				u16ReadCount -= u16Read;
  403f98:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
  403f9a:	8b7b      	ldrh	r3, [r7, #26]
  403f9c:	1ad3      	subs	r3, r2, r3
  403f9e:	863b      	strh	r3, [r7, #48]	; 0x30
				u32Address += u16Read;
  403fa0:	8b7b      	ldrh	r3, [r7, #26]
  403fa2:	69fa      	ldr	r2, [r7, #28]
  403fa4:	4413      	add	r3, r2
  403fa6:	61fb      	str	r3, [r7, #28]
  403fa8:	e00c      	b.n	403fc4 <Socket_ReadSocketData+0x11c>
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  403faa:	480d      	ldr	r0, [pc, #52]	; (403fe0 <Socket_ReadSocketData+0x138>)
  403fac:	4b0d      	ldr	r3, [pc, #52]	; (403fe4 <Socket_ReadSocketData+0x13c>)
  403fae:	4798      	blx	r3
  403fb0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403fb2:	4619      	mov	r1, r3
  403fb4:	480c      	ldr	r0, [pc, #48]	; (403fe8 <Socket_ReadSocketData+0x140>)
  403fb6:	4b0b      	ldr	r3, [pc, #44]	; (403fe4 <Socket_ReadSocketData+0x13c>)
  403fb8:	4798      	blx	r3
  403fba:	480c      	ldr	r0, [pc, #48]	; (403fec <Socket_ReadSocketData+0x144>)
  403fbc:	4b09      	ldr	r3, [pc, #36]	; (403fe4 <Socket_ReadSocketData+0x13c>)
  403fbe:	4798      	blx	r3
				break;
  403fc0:	bf00      	nop
			}
		}while(u16ReadCount != 0);
	}
}
  403fc2:	e002      	b.n	403fca <Socket_ReadSocketData+0x122>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  403fc4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403fc6:	2b00      	cmp	r3, #0
  403fc8:	d19c      	bne.n	403f04 <Socket_ReadSocketData+0x5c>
	}
}
  403fca:	bf00      	nop
  403fcc:	3724      	adds	r7, #36	; 0x24
  403fce:	46bd      	mov	sp, r7
  403fd0:	bd90      	pop	{r4, r7, pc}
  403fd2:	bf00      	nop
  403fd4:	20400fcc 	.word	0x20400fcc
  403fd8:	004014d9 	.word	0x004014d9
  403fdc:	2040107c 	.word	0x2040107c
  403fe0:	0040ebc4 	.word	0x0040ebc4
  403fe4:	004078bd 	.word	0x004078bd
  403fe8:	0040ebd0 	.word	0x0040ebd0
  403fec:	0040ebe4 	.word	0x0040ebe4

00403ff0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  403ff0:	b590      	push	{r4, r7, lr}
  403ff2:	b0bb      	sub	sp, #236	; 0xec
  403ff4:	af02      	add	r7, sp, #8
  403ff6:	4603      	mov	r3, r0
  403ff8:	603a      	str	r2, [r7, #0]
  403ffa:	71fb      	strb	r3, [r7, #7]
  403ffc:	460b      	mov	r3, r1
  403ffe:	80bb      	strh	r3, [r7, #4]
	if(u8OpCode == SOCKET_CMD_BIND)
  404000:	79fb      	ldrb	r3, [r7, #7]
  404002:	2b41      	cmp	r3, #65	; 0x41
  404004:	d11c      	bne.n	404040 <m2m_ip_cb+0x50>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  404006:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
  40400a:	2300      	movs	r3, #0
  40400c:	2204      	movs	r2, #4
  40400e:	6838      	ldr	r0, [r7, #0]
  404010:	4cbd      	ldr	r4, [pc, #756]	; (404308 <m2m_ip_cb+0x318>)
  404012:	47a0      	blx	r4
  404014:	4603      	mov	r3, r0
  404016:	2b00      	cmp	r3, #0
  404018:	f040 81e9 	bne.w	4043ee <m2m_ip_cb+0x3fe>
		{
			strBind.status = strBindReply.s8Status;
  40401c:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
  404020:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			if(gpfAppSocketCb)
  404024:	4bb9      	ldr	r3, [pc, #740]	; (40430c <m2m_ip_cb+0x31c>)
  404026:	681b      	ldr	r3, [r3, #0]
  404028:	2b00      	cmp	r3, #0
  40402a:	f000 81e0 	beq.w	4043ee <m2m_ip_cb+0x3fe>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  40402e:	4bb7      	ldr	r3, [pc, #732]	; (40430c <m2m_ip_cb+0x31c>)
  404030:	681b      	ldr	r3, [r3, #0]
  404032:	f997 00cc 	ldrsb.w	r0, [r7, #204]	; 0xcc
  404036:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
  40403a:	2101      	movs	r1, #1
  40403c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  40403e:	e1d6      	b.n	4043ee <m2m_ip_cb+0x3fe>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404040:	79fb      	ldrb	r3, [r7, #7]
  404042:	2b42      	cmp	r3, #66	; 0x42
  404044:	d11c      	bne.n	404080 <m2m_ip_cb+0x90>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  404046:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
  40404a:	2300      	movs	r3, #0
  40404c:	2204      	movs	r2, #4
  40404e:	6838      	ldr	r0, [r7, #0]
  404050:	4cad      	ldr	r4, [pc, #692]	; (404308 <m2m_ip_cb+0x318>)
  404052:	47a0      	blx	r4
  404054:	4603      	mov	r3, r0
  404056:	2b00      	cmp	r3, #0
  404058:	f040 81c9 	bne.w	4043ee <m2m_ip_cb+0x3fe>
		{
			strListen.status = strListenReply.s8Status;
  40405c:	f997 30c5 	ldrsb.w	r3, [r7, #197]	; 0xc5
  404060:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			if(gpfAppSocketCb)
  404064:	4ba9      	ldr	r3, [pc, #676]	; (40430c <m2m_ip_cb+0x31c>)
  404066:	681b      	ldr	r3, [r3, #0]
  404068:	2b00      	cmp	r3, #0
  40406a:	f000 81c0 	beq.w	4043ee <m2m_ip_cb+0x3fe>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  40406e:	4ba7      	ldr	r3, [pc, #668]	; (40430c <m2m_ip_cb+0x31c>)
  404070:	681b      	ldr	r3, [r3, #0]
  404072:	f997 00c4 	ldrsb.w	r0, [r7, #196]	; 0xc4
  404076:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
  40407a:	2102      	movs	r1, #2
  40407c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  40407e:	e1b6      	b.n	4043ee <m2m_ip_cb+0x3fe>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404080:	79fb      	ldrb	r3, [r7, #7]
  404082:	2b43      	cmp	r3, #67	; 0x43
  404084:	d15a      	bne.n	40413c <m2m_ip_cb+0x14c>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  404086:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
  40408a:	2300      	movs	r3, #0
  40408c:	220c      	movs	r2, #12
  40408e:	6838      	ldr	r0, [r7, #0]
  404090:	4c9d      	ldr	r4, [pc, #628]	; (404308 <m2m_ip_cb+0x318>)
  404092:	47a0      	blx	r4
  404094:	4603      	mov	r3, r0
  404096:	2b00      	cmp	r3, #0
  404098:	f040 81a9 	bne.w	4043ee <m2m_ip_cb+0x3fe>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  40409c:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  4040a0:	2b00      	cmp	r3, #0
  4040a2:	db2e      	blt.n	404102 <m2m_ip_cb+0x112>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  4040a4:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  4040a8:	4a99      	ldr	r2, [pc, #612]	; (404310 <m2m_ip_cb+0x320>)
  4040aa:	011b      	lsls	r3, r3, #4
  4040ac:	4413      	add	r3, r2
  4040ae:	330b      	adds	r3, #11
  4040b0:	2200      	movs	r2, #0
  4040b2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  4040b4:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  4040b8:	4a95      	ldr	r2, [pc, #596]	; (404310 <m2m_ip_cb+0x320>)
  4040ba:	011b      	lsls	r3, r3, #4
  4040bc:	4413      	add	r3, r2
  4040be:	330a      	adds	r3, #10
  4040c0:	2201      	movs	r2, #1
  4040c2:	701a      	strb	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4040c4:	4b93      	ldr	r3, [pc, #588]	; (404314 <m2m_ip_cb+0x324>)
  4040c6:	881b      	ldrh	r3, [r3, #0]
  4040c8:	b29b      	uxth	r3, r3
  4040ca:	3301      	adds	r3, #1
  4040cc:	b29a      	uxth	r2, r3
  4040ce:	4b91      	ldr	r3, [pc, #580]	; (404314 <m2m_ip_cb+0x324>)
  4040d0:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
  4040d2:	4b90      	ldr	r3, [pc, #576]	; (404314 <m2m_ip_cb+0x324>)
  4040d4:	881b      	ldrh	r3, [r3, #0]
  4040d6:	b29b      	uxth	r3, r3
  4040d8:	2b00      	cmp	r3, #0
  4040da:	d106      	bne.n	4040ea <m2m_ip_cb+0xfa>
					++gu16SessionID;
  4040dc:	4b8d      	ldr	r3, [pc, #564]	; (404314 <m2m_ip_cb+0x324>)
  4040de:	881b      	ldrh	r3, [r3, #0]
  4040e0:	b29b      	uxth	r3, r3
  4040e2:	3301      	adds	r3, #1
  4040e4:	b29a      	uxth	r2, r3
  4040e6:	4b8b      	ldr	r3, [pc, #556]	; (404314 <m2m_ip_cb+0x324>)
  4040e8:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  4040ea:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  4040ee:	4618      	mov	r0, r3
  4040f0:	4b88      	ldr	r3, [pc, #544]	; (404314 <m2m_ip_cb+0x324>)
  4040f2:	881b      	ldrh	r3, [r3, #0]
  4040f4:	b299      	uxth	r1, r3
  4040f6:	4a86      	ldr	r2, [pc, #536]	; (404310 <m2m_ip_cb+0x320>)
  4040f8:	0103      	lsls	r3, r0, #4
  4040fa:	4413      	add	r3, r2
  4040fc:	3306      	adds	r3, #6
  4040fe:	460a      	mov	r2, r1
  404100:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  404102:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  404106:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
			strAccept.strAddr.sin_family		= AF_INET;
  40410a:	2302      	movs	r3, #2
  40410c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  404110:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
  404114:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  404118:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
  40411c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			if(gpfAppSocketCb)
  404120:	4b7a      	ldr	r3, [pc, #488]	; (40430c <m2m_ip_cb+0x31c>)
  404122:	681b      	ldr	r3, [r3, #0]
  404124:	2b00      	cmp	r3, #0
  404126:	f000 8162 	beq.w	4043ee <m2m_ip_cb+0x3fe>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  40412a:	4b78      	ldr	r3, [pc, #480]	; (40430c <m2m_ip_cb+0x31c>)
  40412c:	681b      	ldr	r3, [r3, #0]
  40412e:	f997 00bc 	ldrsb.w	r0, [r7, #188]	; 0xbc
  404132:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
  404136:	2104      	movs	r1, #4
  404138:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  40413a:	e158      	b.n	4043ee <m2m_ip_cb+0x3fe>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  40413c:	79fb      	ldrb	r3, [r7, #7]
  40413e:	2b44      	cmp	r3, #68	; 0x44
  404140:	d002      	beq.n	404148 <m2m_ip_cb+0x158>
  404142:	79fb      	ldrb	r3, [r7, #7]
  404144:	2b4b      	cmp	r3, #75	; 0x4b
  404146:	d131      	bne.n	4041ac <m2m_ip_cb+0x1bc>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  404148:	f107 019c 	add.w	r1, r7, #156	; 0x9c
  40414c:	2300      	movs	r3, #0
  40414e:	2204      	movs	r2, #4
  404150:	6838      	ldr	r0, [r7, #0]
  404152:	4c6d      	ldr	r4, [pc, #436]	; (404308 <m2m_ip_cb+0x318>)
  404154:	47a0      	blx	r4
  404156:	4603      	mov	r3, r0
  404158:	2b00      	cmp	r3, #0
  40415a:	f040 8143 	bne.w	4043e4 <m2m_ip_cb+0x3f4>
		{
			strConnMsg.sock		= strConnectReply.sock;
  40415e:	f997 309c 	ldrsb.w	r3, [r7, #156]	; 0x9c
  404162:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			strConnMsg.s8Error	= strConnectReply.s8Error;
  404166:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
  40416a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  40416e:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
  404172:	2b00      	cmp	r3, #0
  404174:	d10c      	bne.n	404190 <m2m_ip_cb+0x1a0>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  404176:	f997 309c 	ldrsb.w	r3, [r7, #156]	; 0x9c
  40417a:	4618      	mov	r0, r3
  40417c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
  404180:	3b08      	subs	r3, #8
  404182:	b299      	uxth	r1, r3
  404184:	4a62      	ldr	r2, [pc, #392]	; (404310 <m2m_ip_cb+0x320>)
  404186:	0103      	lsls	r3, r0, #4
  404188:	4413      	add	r3, r2
  40418a:	3308      	adds	r3, #8
  40418c:	460a      	mov	r2, r1
  40418e:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
  404190:	4b5e      	ldr	r3, [pc, #376]	; (40430c <m2m_ip_cb+0x31c>)
  404192:	681b      	ldr	r3, [r3, #0]
  404194:	2b00      	cmp	r3, #0
  404196:	f000 8125 	beq.w	4043e4 <m2m_ip_cb+0x3f4>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  40419a:	4b5c      	ldr	r3, [pc, #368]	; (40430c <m2m_ip_cb+0x31c>)
  40419c:	681b      	ldr	r3, [r3, #0]
  40419e:	f997 009c 	ldrsb.w	r0, [r7, #156]	; 0x9c
  4041a2:	f107 0298 	add.w	r2, r7, #152	; 0x98
  4041a6:	2105      	movs	r1, #5
  4041a8:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
  4041aa:	e11b      	b.n	4043e4 <m2m_ip_cb+0x3f4>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  4041ac:	79fb      	ldrb	r3, [r7, #7]
  4041ae:	2b4a      	cmp	r3, #74	; 0x4a
  4041b0:	d119      	bne.n	4041e6 <m2m_ip_cb+0x1f6>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4041b2:	f107 010c 	add.w	r1, r7, #12
  4041b6:	2300      	movs	r3, #0
  4041b8:	2244      	movs	r2, #68	; 0x44
  4041ba:	6838      	ldr	r0, [r7, #0]
  4041bc:	4c52      	ldr	r4, [pc, #328]	; (404308 <m2m_ip_cb+0x318>)
  4041be:	47a0      	blx	r4
  4041c0:	4603      	mov	r3, r0
  4041c2:	2b00      	cmp	r3, #0
  4041c4:	f040 8113 	bne.w	4043ee <m2m_ip_cb+0x3fe>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
  4041c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
			if(gpfAppResolveCb)
  4041cc:	4b52      	ldr	r3, [pc, #328]	; (404318 <m2m_ip_cb+0x328>)
  4041ce:	681b      	ldr	r3, [r3, #0]
  4041d0:	2b00      	cmp	r3, #0
  4041d2:	f000 810c 	beq.w	4043ee <m2m_ip_cb+0x3fe>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  4041d6:	4b50      	ldr	r3, [pc, #320]	; (404318 <m2m_ip_cb+0x328>)
  4041d8:	681b      	ldr	r3, [r3, #0]
  4041da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  4041dc:	f107 020c 	add.w	r2, r7, #12
  4041e0:	4610      	mov	r0, r2
  4041e2:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4041e4:	e103      	b.n	4043ee <m2m_ip_cb+0x3fe>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  4041e6:	79fb      	ldrb	r3, [r7, #7]
  4041e8:	2b46      	cmp	r3, #70	; 0x46
  4041ea:	d006      	beq.n	4041fa <m2m_ip_cb+0x20a>
  4041ec:	79fb      	ldrb	r3, [r7, #7]
  4041ee:	2b48      	cmp	r3, #72	; 0x48
  4041f0:	d003      	beq.n	4041fa <m2m_ip_cb+0x20a>
  4041f2:	79fb      	ldrb	r3, [r7, #7]
  4041f4:	2b4d      	cmp	r3, #77	; 0x4d
  4041f6:	f040 8093 	bne.w	404320 <m2m_ip_cb+0x330>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
  4041fa:	2306      	movs	r3, #6
  4041fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
  404200:	79fb      	ldrb	r3, [r7, #7]
  404202:	2b48      	cmp	r3, #72	; 0x48
  404204:	d102      	bne.n	40420c <m2m_ip_cb+0x21c>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  404206:	2309      	movs	r3, #9
  404208:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
  40420c:	2310      	movs	r3, #16
  40420e:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  404212:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
  404216:	f107 0188 	add.w	r1, r7, #136	; 0x88
  40421a:	2300      	movs	r3, #0
  40421c:	6838      	ldr	r0, [r7, #0]
  40421e:	4c3a      	ldr	r4, [pc, #232]	; (404308 <m2m_ip_cb+0x318>)
  404220:	47a0      	blx	r4
  404222:	4603      	mov	r3, r0
  404224:	2b00      	cmp	r3, #0
  404226:	f040 80df 	bne.w	4043e8 <m2m_ip_cb+0x3f8>
		{
			uint16 u16SessionID = 0;
  40422a:	2300      	movs	r3, #0
  40422c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6

			sock			= strRecvReply.sock;
  404230:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
  404234:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			u16SessionID = strRecvReply.u16SessionID;
  404238:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
  40423c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  404240:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
  404244:	4a32      	ldr	r2, [pc, #200]	; (404310 <m2m_ip_cb+0x320>)
  404246:	011b      	lsls	r3, r3, #4
  404248:	4413      	add	r3, r2
  40424a:	330c      	adds	r3, #12
  40424c:	2200      	movs	r2, #0
  40424e:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  404250:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
  404254:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  404258:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
  40425c:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  404260:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
  404264:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  404268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  40426c:	67fb      	str	r3, [r7, #124]	; 0x7c

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  40426e:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
  404272:	4a27      	ldr	r2, [pc, #156]	; (404310 <m2m_ip_cb+0x320>)
  404274:	011b      	lsls	r3, r3, #4
  404276:	4413      	add	r3, r2
  404278:	3306      	adds	r3, #6
  40427a:	881b      	ldrh	r3, [r3, #0]
  40427c:	b29b      	uxth	r3, r3
  40427e:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
  404282:	429a      	cmp	r2, r3
  404284:	d133      	bne.n	4042ee <m2m_ip_cb+0x2fe>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  404286:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
  40428a:	2b00      	cmp	r3, #0
  40428c:	dd1a      	ble.n	4042c4 <m2m_ip_cb+0x2d4>
  40428e:	f9b7 20d2 	ldrsh.w	r2, [r7, #210]	; 0xd2
  404292:	88bb      	ldrh	r3, [r7, #4]
  404294:	429a      	cmp	r2, r3
  404296:	da15      	bge.n	4042c4 <m2m_ip_cb+0x2d4>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
  404298:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
  40429c:	683a      	ldr	r2, [r7, #0]
  40429e:	4413      	add	r3, r2
  4042a0:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
  4042a2:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
  4042a6:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  4042aa:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
  4042ae:	f107 0170 	add.w	r1, r7, #112	; 0x70
  4042b2:	f997 00d5 	ldrsb.w	r0, [r7, #213]	; 0xd5
  4042b6:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
  4042ba:	9300      	str	r3, [sp, #0]
  4042bc:	683b      	ldr	r3, [r7, #0]
  4042be:	4c17      	ldr	r4, [pc, #92]	; (40431c <m2m_ip_cb+0x32c>)
  4042c0:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  4042c2:	e091      	b.n	4043e8 <m2m_ip_cb+0x3f8>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  4042c4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
  4042c8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
					strRecvMsg.pu8Buffer		= NULL;
  4042cc:	2300      	movs	r3, #0
  4042ce:	673b      	str	r3, [r7, #112]	; 0x70
					if(gpfAppSocketCb)
  4042d0:	4b0e      	ldr	r3, [pc, #56]	; (40430c <m2m_ip_cb+0x31c>)
  4042d2:	681b      	ldr	r3, [r3, #0]
  4042d4:	2b00      	cmp	r3, #0
  4042d6:	f000 8087 	beq.w	4043e8 <m2m_ip_cb+0x3f8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  4042da:	4b0c      	ldr	r3, [pc, #48]	; (40430c <m2m_ip_cb+0x31c>)
  4042dc:	681b      	ldr	r3, [r3, #0]
  4042de:	f107 0270 	add.w	r2, r7, #112	; 0x70
  4042e2:	f897 10df 	ldrb.w	r1, [r7, #223]	; 0xdf
  4042e6:	f997 00d5 	ldrsb.w	r0, [r7, #213]	; 0xd5
  4042ea:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  4042ec:	e07c      	b.n	4043e8 <m2m_ip_cb+0x3f8>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4042ee:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
  4042f2:	88bb      	ldrh	r3, [r7, #4]
  4042f4:	429a      	cmp	r2, r3
  4042f6:	d277      	bcs.n	4043e8 <m2m_ip_cb+0x3f8>
					hif_receive(0, NULL, 0, 1);
  4042f8:	2301      	movs	r3, #1
  4042fa:	2200      	movs	r2, #0
  4042fc:	2100      	movs	r1, #0
  4042fe:	2000      	movs	r0, #0
  404300:	4c01      	ldr	r4, [pc, #4]	; (404308 <m2m_ip_cb+0x318>)
  404302:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  404304:	e070      	b.n	4043e8 <m2m_ip_cb+0x3f8>
  404306:	bf00      	nop
  404308:	004014d9 	.word	0x004014d9
  40430c:	2040107c 	.word	0x2040107c
  404310:	20400fcc 	.word	0x20400fcc
  404314:	2040098e 	.word	0x2040098e
  404318:	20401084 	.word	0x20401084
  40431c:	00403ea9 	.word	0x00403ea9
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  404320:	79fb      	ldrb	r3, [r7, #7]
  404322:	2b45      	cmp	r3, #69	; 0x45
  404324:	d005      	beq.n	404332 <m2m_ip_cb+0x342>
  404326:	79fb      	ldrb	r3, [r7, #7]
  404328:	2b47      	cmp	r3, #71	; 0x47
  40432a:	d002      	beq.n	404332 <m2m_ip_cb+0x342>
  40432c:	79fb      	ldrb	r3, [r7, #7]
  40432e:	2b4c      	cmp	r3, #76	; 0x4c
  404330:	d13b      	bne.n	4043aa <m2m_ip_cb+0x3ba>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
  404332:	2307      	movs	r3, #7
  404334:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

		if(u8OpCode == SOCKET_CMD_SENDTO)
  404338:	79fb      	ldrb	r3, [r7, #7]
  40433a:	2b47      	cmp	r3, #71	; 0x47
  40433c:	d102      	bne.n	404344 <m2m_ip_cb+0x354>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  40433e:	2308      	movs	r3, #8
  404340:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  404344:	f107 0164 	add.w	r1, r7, #100	; 0x64
  404348:	2300      	movs	r3, #0
  40434a:	2208      	movs	r2, #8
  40434c:	6838      	ldr	r0, [r7, #0]
  40434e:	4c2a      	ldr	r4, [pc, #168]	; (4043f8 <m2m_ip_cb+0x408>)
  404350:	47a0      	blx	r4
  404352:	4603      	mov	r3, r0
  404354:	2b00      	cmp	r3, #0
  404356:	d149      	bne.n	4043ec <m2m_ip_cb+0x3fc>
		{
			uint16 u16SessionID = 0;
  404358:	2300      	movs	r3, #0
  40435a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			
			sock = strReply.sock;
  40435e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  404362:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
			u16SessionID = strReply.u16SessionID;
  404366:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
  40436a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  40436e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
  404372:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404376:	f997 30db 	ldrsb.w	r3, [r7, #219]	; 0xdb
  40437a:	4a20      	ldr	r2, [pc, #128]	; (4043fc <m2m_ip_cb+0x40c>)
  40437c:	011b      	lsls	r3, r3, #4
  40437e:	4413      	add	r3, r2
  404380:	3306      	adds	r3, #6
  404382:	881b      	ldrh	r3, [r3, #0]
  404384:	b29b      	uxth	r3, r3
  404386:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
  40438a:	429a      	cmp	r2, r3
  40438c:	d12e      	bne.n	4043ec <m2m_ip_cb+0x3fc>
			{
				if(gpfAppSocketCb)
  40438e:	4b1c      	ldr	r3, [pc, #112]	; (404400 <m2m_ip_cb+0x410>)
  404390:	681b      	ldr	r3, [r3, #0]
  404392:	2b00      	cmp	r3, #0
  404394:	d02a      	beq.n	4043ec <m2m_ip_cb+0x3fc>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  404396:	4b1a      	ldr	r3, [pc, #104]	; (404400 <m2m_ip_cb+0x410>)
  404398:	681b      	ldr	r3, [r3, #0]
  40439a:	f107 026e 	add.w	r2, r7, #110	; 0x6e
  40439e:	f897 10de 	ldrb.w	r1, [r7, #222]	; 0xde
  4043a2:	f997 00db 	ldrsb.w	r0, [r7, #219]	; 0xdb
  4043a6:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  4043a8:	e020      	b.n	4043ec <m2m_ip_cb+0x3fc>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  4043aa:	79fb      	ldrb	r3, [r7, #7]
  4043ac:	2b52      	cmp	r3, #82	; 0x52
  4043ae:	d11e      	bne.n	4043ee <m2m_ip_cb+0x3fe>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  4043b0:	f107 0150 	add.w	r1, r7, #80	; 0x50
  4043b4:	2301      	movs	r3, #1
  4043b6:	2214      	movs	r2, #20
  4043b8:	6838      	ldr	r0, [r7, #0]
  4043ba:	4c0f      	ldr	r4, [pc, #60]	; (4043f8 <m2m_ip_cb+0x408>)
  4043bc:	47a0      	blx	r4
  4043be:	4603      	mov	r3, r0
  4043c0:	2b00      	cmp	r3, #0
  4043c2:	d114      	bne.n	4043ee <m2m_ip_cb+0x3fe>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  4043c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4043c6:	461a      	mov	r2, r3
  4043c8:	4b0e      	ldr	r3, [pc, #56]	; (404404 <m2m_ip_cb+0x414>)
  4043ca:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  4043cc:	4b0d      	ldr	r3, [pc, #52]	; (404404 <m2m_ip_cb+0x414>)
  4043ce:	681b      	ldr	r3, [r3, #0]
  4043d0:	2b00      	cmp	r3, #0
  4043d2:	d00c      	beq.n	4043ee <m2m_ip_cb+0x3fe>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  4043d4:	4b0b      	ldr	r3, [pc, #44]	; (404404 <m2m_ip_cb+0x414>)
  4043d6:	681b      	ldr	r3, [r3, #0]
  4043d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
  4043da:	6db9      	ldr	r1, [r7, #88]	; 0x58
  4043dc:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
  4043e0:	4798      	blx	r3
			}
		}
	}
}
  4043e2:	e004      	b.n	4043ee <m2m_ip_cb+0x3fe>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
  4043e4:	bf00      	nop
  4043e6:	e002      	b.n	4043ee <m2m_ip_cb+0x3fe>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  4043e8:	bf00      	nop
  4043ea:	e000      	b.n	4043ee <m2m_ip_cb+0x3fe>
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  4043ec:	bf00      	nop
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4043ee:	bf00      	nop
  4043f0:	37e4      	adds	r7, #228	; 0xe4
  4043f2:	46bd      	mov	sp, r7
  4043f4:	bd90      	pop	{r4, r7, pc}
  4043f6:	bf00      	nop
  4043f8:	004014d9 	.word	0x004014d9
  4043fc:	20400fcc 	.word	0x20400fcc
  404400:	2040107c 	.word	0x2040107c
  404404:	20401080 	.word	0x20401080

00404408 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  404408:	b580      	push	{r7, lr}
  40440a:	af00      	add	r7, sp, #0
	if(gbSocketInit==0)
  40440c:	4b0a      	ldr	r3, [pc, #40]	; (404438 <socketInit+0x30>)
  40440e:	781b      	ldrb	r3, [r3, #0]
  404410:	b2db      	uxtb	r3, r3
  404412:	2b00      	cmp	r3, #0
  404414:	d10e      	bne.n	404434 <socketInit+0x2c>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  404416:	22b0      	movs	r2, #176	; 0xb0
  404418:	2100      	movs	r1, #0
  40441a:	4808      	ldr	r0, [pc, #32]	; (40443c <socketInit+0x34>)
  40441c:	4b08      	ldr	r3, [pc, #32]	; (404440 <socketInit+0x38>)
  40441e:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  404420:	4908      	ldr	r1, [pc, #32]	; (404444 <socketInit+0x3c>)
  404422:	2002      	movs	r0, #2
  404424:	4b08      	ldr	r3, [pc, #32]	; (404448 <socketInit+0x40>)
  404426:	4798      	blx	r3
		gbSocketInit=1;
  404428:	4b03      	ldr	r3, [pc, #12]	; (404438 <socketInit+0x30>)
  40442a:	2201      	movs	r2, #1
  40442c:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  40442e:	4b07      	ldr	r3, [pc, #28]	; (40444c <socketInit+0x44>)
  404430:	2200      	movs	r2, #0
  404432:	801a      	strh	r2, [r3, #0]
	}
}
  404434:	bf00      	nop
  404436:	bd80      	pop	{r7, pc}
  404438:	20400990 	.word	0x20400990
  40443c:	20400fcc 	.word	0x20400fcc
  404440:	00400be9 	.word	0x00400be9
  404444:	00403ff1 	.word	0x00403ff1
  404448:	0040165d 	.word	0x0040165d
  40444c:	2040098e 	.word	0x2040098e

00404450 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
  404450:	b480      	push	{r7}
  404452:	b083      	sub	sp, #12
  404454:	af00      	add	r7, sp, #0
  404456:	6078      	str	r0, [r7, #4]
  404458:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
  40445a:	4a06      	ldr	r2, [pc, #24]	; (404474 <registerSocketCallback+0x24>)
  40445c:	687b      	ldr	r3, [r7, #4]
  40445e:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb = pfAppResolveCb;
  404460:	4a05      	ldr	r2, [pc, #20]	; (404478 <registerSocketCallback+0x28>)
  404462:	683b      	ldr	r3, [r7, #0]
  404464:	6013      	str	r3, [r2, #0]
}
  404466:	bf00      	nop
  404468:	370c      	adds	r7, #12
  40446a:	46bd      	mov	sp, r7
  40446c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404470:	4770      	bx	lr
  404472:	bf00      	nop
  404474:	2040107c 	.word	0x2040107c
  404478:	20401084 	.word	0x20401084

0040447c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  40447c:	b590      	push	{r4, r7, lr}
  40447e:	b08b      	sub	sp, #44	; 0x2c
  404480:	af04      	add	r7, sp, #16
  404482:	4603      	mov	r3, r0
  404484:	80fb      	strh	r3, [r7, #6]
  404486:	460b      	mov	r3, r1
  404488:	717b      	strb	r3, [r7, #5]
  40448a:	4613      	mov	r3, r2
  40448c:	713b      	strb	r3, [r7, #4]
	SOCKET		sock = -1;
  40448e:	23ff      	movs	r3, #255	; 0xff
  404490:	75fb      	strb	r3, [r7, #23]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
  404492:	230b      	movs	r3, #11
  404494:	757b      	strb	r3, [r7, #21]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  404496:	88fb      	ldrh	r3, [r7, #6]
  404498:	2b02      	cmp	r3, #2
  40449a:	d15f      	bne.n	40455c <socket+0xe0>
	{
		if(u8Type == SOCK_STREAM)
  40449c:	797b      	ldrb	r3, [r7, #5]
  40449e:	2b01      	cmp	r3, #1
  4044a0:	d104      	bne.n	4044ac <socket+0x30>
		{
			u8SocketCount = TCP_SOCK_MAX;
  4044a2:	2307      	movs	r3, #7
  4044a4:	757b      	strb	r3, [r7, #21]
			u8Count = 0;
  4044a6:	2300      	movs	r3, #0
  4044a8:	75bb      	strb	r3, [r7, #22]
  4044aa:	e051      	b.n	404550 <socket+0xd4>
		}
		else if(u8Type == SOCK_DGRAM)
  4044ac:	797b      	ldrb	r3, [r7, #5]
  4044ae:	2b02      	cmp	r3, #2
  4044b0:	d104      	bne.n	4044bc <socket+0x40>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  4044b2:	230b      	movs	r3, #11
  4044b4:	757b      	strb	r3, [r7, #21]
			u8Count = TCP_SOCK_MAX;
  4044b6:	2307      	movs	r3, #7
  4044b8:	75bb      	strb	r3, [r7, #22]
  4044ba:	e049      	b.n	404550 <socket+0xd4>
		}
		else
			return sock;
  4044bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4044c0:	e04e      	b.n	404560 <socket+0xe4>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4044c2:	7dbb      	ldrb	r3, [r7, #22]
  4044c4:	011b      	lsls	r3, r3, #4
  4044c6:	4a28      	ldr	r2, [pc, #160]	; (404568 <socket+0xec>)
  4044c8:	4413      	add	r3, r2
  4044ca:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
  4044cc:	693b      	ldr	r3, [r7, #16]
  4044ce:	7a9b      	ldrb	r3, [r3, #10]
  4044d0:	b2db      	uxtb	r3, r3
  4044d2:	2b00      	cmp	r3, #0
  4044d4:	d139      	bne.n	40454a <socket+0xce>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  4044d6:	2210      	movs	r2, #16
  4044d8:	2100      	movs	r1, #0
  4044da:	6938      	ldr	r0, [r7, #16]
  4044dc:	4b23      	ldr	r3, [pc, #140]	; (40456c <socket+0xf0>)
  4044de:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  4044e0:	693b      	ldr	r3, [r7, #16]
  4044e2:	2201      	movs	r2, #1
  4044e4:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4044e6:	4b22      	ldr	r3, [pc, #136]	; (404570 <socket+0xf4>)
  4044e8:	881b      	ldrh	r3, [r3, #0]
  4044ea:	b29b      	uxth	r3, r3
  4044ec:	3301      	adds	r3, #1
  4044ee:	b29a      	uxth	r2, r3
  4044f0:	4b1f      	ldr	r3, [pc, #124]	; (404570 <socket+0xf4>)
  4044f2:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
  4044f4:	4b1e      	ldr	r3, [pc, #120]	; (404570 <socket+0xf4>)
  4044f6:	881b      	ldrh	r3, [r3, #0]
  4044f8:	b29b      	uxth	r3, r3
  4044fa:	2b00      	cmp	r3, #0
  4044fc:	d106      	bne.n	40450c <socket+0x90>
					++gu16SessionID;
  4044fe:	4b1c      	ldr	r3, [pc, #112]	; (404570 <socket+0xf4>)
  404500:	881b      	ldrh	r3, [r3, #0]
  404502:	b29b      	uxth	r3, r3
  404504:	3301      	adds	r3, #1
  404506:	b29a      	uxth	r2, r3
  404508:	4b19      	ldr	r3, [pc, #100]	; (404570 <socket+0xf4>)
  40450a:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  40450c:	4b18      	ldr	r3, [pc, #96]	; (404570 <socket+0xf4>)
  40450e:	881b      	ldrh	r3, [r3, #0]
  404510:	b29a      	uxth	r2, r3
  404512:	693b      	ldr	r3, [r7, #16]
  404514:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  404516:	7dbb      	ldrb	r3, [r7, #22]
  404518:	75fb      	strb	r3, [r7, #23]

				if(u8Flags & SOCKET_FLAGS_SSL)
  40451a:	793b      	ldrb	r3, [r7, #4]
  40451c:	f003 0301 	and.w	r3, r3, #1
  404520:	2b00      	cmp	r3, #0
  404522:	d01a      	beq.n	40455a <socket+0xde>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  404524:	7dfb      	ldrb	r3, [r7, #23]
  404526:	733b      	strb	r3, [r7, #12]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  404528:	693b      	ldr	r3, [r7, #16]
  40452a:	2221      	movs	r2, #33	; 0x21
  40452c:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  40452e:	f107 020c 	add.w	r2, r7, #12
  404532:	2300      	movs	r3, #0
  404534:	9302      	str	r3, [sp, #8]
  404536:	2300      	movs	r3, #0
  404538:	9301      	str	r3, [sp, #4]
  40453a:	2300      	movs	r3, #0
  40453c:	9300      	str	r3, [sp, #0]
  40453e:	2304      	movs	r3, #4
  404540:	2150      	movs	r1, #80	; 0x50
  404542:	2002      	movs	r0, #2
  404544:	4c0b      	ldr	r4, [pc, #44]	; (404574 <socket+0xf8>)
  404546:	47a0      	blx	r4
				}
				break;
  404548:	e007      	b.n	40455a <socket+0xde>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  40454a:	7dbb      	ldrb	r3, [r7, #22]
  40454c:	3301      	adds	r3, #1
  40454e:	75bb      	strb	r3, [r7, #22]
  404550:	7dba      	ldrb	r2, [r7, #22]
  404552:	7d7b      	ldrb	r3, [r7, #21]
  404554:	429a      	cmp	r2, r3
  404556:	d3b4      	bcc.n	4044c2 <socket+0x46>
  404558:	e000      	b.n	40455c <socket+0xe0>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
  40455a:	bf00      	nop
			}
		}
	}
	return sock;
  40455c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  404560:	4618      	mov	r0, r3
  404562:	371c      	adds	r7, #28
  404564:	46bd      	mov	sp, r7
  404566:	bd90      	pop	{r4, r7, pc}
  404568:	20400fcc 	.word	0x20400fcc
  40456c:	00400be9 	.word	0x00400be9
  404570:	2040098e 	.word	0x2040098e
  404574:	00400e95 	.word	0x00400e95

00404578 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404578:	b590      	push	{r4, r7, lr}
  40457a:	b08b      	sub	sp, #44	; 0x2c
  40457c:	af04      	add	r7, sp, #16
  40457e:	4603      	mov	r3, r0
  404580:	6039      	str	r1, [r7, #0]
  404582:	71fb      	strb	r3, [r7, #7]
  404584:	4613      	mov	r3, r2
  404586:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404588:	23fa      	movs	r3, #250	; 0xfa
  40458a:	75fb      	strb	r3, [r7, #23]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  40458c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404590:	2b00      	cmp	r3, #0
  404592:	db4f      	blt.n	404634 <connect+0xbc>
  404594:	683b      	ldr	r3, [r7, #0]
  404596:	2b00      	cmp	r3, #0
  404598:	d04c      	beq.n	404634 <connect+0xbc>
  40459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40459e:	4a28      	ldr	r2, [pc, #160]	; (404640 <connect+0xc8>)
  4045a0:	011b      	lsls	r3, r3, #4
  4045a2:	4413      	add	r3, r2
  4045a4:	330a      	adds	r3, #10
  4045a6:	781b      	ldrb	r3, [r3, #0]
  4045a8:	b2db      	uxtb	r3, r3
  4045aa:	2b01      	cmp	r3, #1
  4045ac:	d142      	bne.n	404634 <connect+0xbc>
  4045ae:	79bb      	ldrb	r3, [r7, #6]
  4045b0:	2b00      	cmp	r3, #0
  4045b2:	d03f      	beq.n	404634 <connect+0xbc>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  4045b4:	2344      	movs	r3, #68	; 0x44
  4045b6:	75bb      	strb	r3, [r7, #22]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  4045b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4045bc:	4a20      	ldr	r2, [pc, #128]	; (404640 <connect+0xc8>)
  4045be:	011b      	lsls	r3, r3, #4
  4045c0:	4413      	add	r3, r2
  4045c2:	330b      	adds	r3, #11
  4045c4:	781b      	ldrb	r3, [r3, #0]
  4045c6:	b2db      	uxtb	r3, r3
  4045c8:	f003 0301 	and.w	r3, r3, #1
  4045cc:	2b00      	cmp	r3, #0
  4045ce:	d00a      	beq.n	4045e6 <connect+0x6e>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  4045d0:	234b      	movs	r3, #75	; 0x4b
  4045d2:	75bb      	strb	r3, [r7, #22]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  4045d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4045d8:	4a19      	ldr	r2, [pc, #100]	; (404640 <connect+0xc8>)
  4045da:	011b      	lsls	r3, r3, #4
  4045dc:	4413      	add	r3, r2
  4045de:	330b      	adds	r3, #11
  4045e0:	781b      	ldrb	r3, [r3, #0]
  4045e2:	b2db      	uxtb	r3, r3
  4045e4:	747b      	strb	r3, [r7, #17]
		}
		strConnect.sock = sock;
  4045e6:	79fb      	ldrb	r3, [r7, #7]
  4045e8:	743b      	strb	r3, [r7, #16]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  4045ea:	f107 0308 	add.w	r3, r7, #8
  4045ee:	2208      	movs	r2, #8
  4045f0:	6839      	ldr	r1, [r7, #0]
  4045f2:	4618      	mov	r0, r3
  4045f4:	4b13      	ldr	r3, [pc, #76]	; (404644 <connect+0xcc>)
  4045f6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  4045f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4045fc:	4a10      	ldr	r2, [pc, #64]	; (404640 <connect+0xc8>)
  4045fe:	011b      	lsls	r3, r3, #4
  404600:	4413      	add	r3, r2
  404602:	3306      	adds	r3, #6
  404604:	881b      	ldrh	r3, [r3, #0]
  404606:	b29b      	uxth	r3, r3
  404608:	827b      	strh	r3, [r7, #18]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  40460a:	f107 0208 	add.w	r2, r7, #8
  40460e:	7db9      	ldrb	r1, [r7, #22]
  404610:	2300      	movs	r3, #0
  404612:	9302      	str	r3, [sp, #8]
  404614:	2300      	movs	r3, #0
  404616:	9301      	str	r3, [sp, #4]
  404618:	2300      	movs	r3, #0
  40461a:	9300      	str	r3, [sp, #0]
  40461c:	230c      	movs	r3, #12
  40461e:	2002      	movs	r0, #2
  404620:	4c09      	ldr	r4, [pc, #36]	; (404648 <connect+0xd0>)
  404622:	47a0      	blx	r4
  404624:	4603      	mov	r3, r0
  404626:	75fb      	strb	r3, [r7, #23]
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404628:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40462c:	2b00      	cmp	r3, #0
  40462e:	d001      	beq.n	404634 <connect+0xbc>
		{
			s8Ret = SOCK_ERR_INVALID;
  404630:	23f7      	movs	r3, #247	; 0xf7
  404632:	75fb      	strb	r3, [r7, #23]
		}
	}
	return s8Ret;
  404634:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  404638:	4618      	mov	r0, r3
  40463a:	371c      	adds	r7, #28
  40463c:	46bd      	mov	sp, r7
  40463e:	bd90      	pop	{r4, r7, pc}
  404640:	20400fcc 	.word	0x20400fcc
  404644:	00400ba9 	.word	0x00400ba9
  404648:	00400e95 	.word	0x00400e95

0040464c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  40464c:	b590      	push	{r4, r7, lr}
  40464e:	b08f      	sub	sp, #60	; 0x3c
  404650:	af04      	add	r7, sp, #16
  404652:	60b9      	str	r1, [r7, #8]
  404654:	4611      	mov	r1, r2
  404656:	461a      	mov	r2, r3
  404658:	4603      	mov	r3, r0
  40465a:	73fb      	strb	r3, [r7, #15]
  40465c:	460b      	mov	r3, r1
  40465e:	81bb      	strh	r3, [r7, #12]
  404660:	4613      	mov	r3, r2
  404662:	80fb      	strh	r3, [r7, #6]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404664:	f64f 73fa 	movw	r3, #65530	; 0xfffa
  404668:	84fb      	strh	r3, [r7, #38]	; 0x26
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  40466a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40466e:	2b00      	cmp	r3, #0
  404670:	db59      	blt.n	404726 <send+0xda>
  404672:	68bb      	ldr	r3, [r7, #8]
  404674:	2b00      	cmp	r3, #0
  404676:	d056      	beq.n	404726 <send+0xda>
  404678:	89bb      	ldrh	r3, [r7, #12]
  40467a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
  40467e:	d852      	bhi.n	404726 <send+0xda>
  404680:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404684:	4a2b      	ldr	r2, [pc, #172]	; (404734 <send+0xe8>)
  404686:	011b      	lsls	r3, r3, #4
  404688:	4413      	add	r3, r2
  40468a:	330a      	adds	r3, #10
  40468c:	781b      	ldrb	r3, [r3, #0]
  40468e:	b2db      	uxtb	r3, r3
  404690:	2b01      	cmp	r3, #1
  404692:	d148      	bne.n	404726 <send+0xda>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  404694:	2345      	movs	r3, #69	; 0x45
  404696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
  40469a:	2350      	movs	r3, #80	; 0x50
  40469c:	84bb      	strh	r3, [r7, #36]	; 0x24

		strSend.sock			= sock;
  40469e:	7bfb      	ldrb	r3, [r7, #15]
  4046a0:	743b      	strb	r3, [r7, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  4046a2:	89bb      	ldrh	r3, [r7, #12]
  4046a4:	827b      	strh	r3, [r7, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  4046a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4046aa:	4a22      	ldr	r2, [pc, #136]	; (404734 <send+0xe8>)
  4046ac:	011b      	lsls	r3, r3, #4
  4046ae:	4413      	add	r3, r2
  4046b0:	3306      	adds	r3, #6
  4046b2:	881b      	ldrh	r3, [r3, #0]
  4046b4:	b29b      	uxth	r3, r3
  4046b6:	83bb      	strh	r3, [r7, #28]

		if(sock >= TCP_SOCK_MAX)
  4046b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4046bc:	2b06      	cmp	r3, #6
  4046be:	dd01      	ble.n	4046c4 <send+0x78>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  4046c0:	2344      	movs	r3, #68	; 0x44
  4046c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4046c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4046c8:	4a1a      	ldr	r2, [pc, #104]	; (404734 <send+0xe8>)
  4046ca:	011b      	lsls	r3, r3, #4
  4046cc:	4413      	add	r3, r2
  4046ce:	330b      	adds	r3, #11
  4046d0:	781b      	ldrb	r3, [r3, #0]
  4046d2:	b2db      	uxtb	r3, r3
  4046d4:	f003 0301 	and.w	r3, r3, #1
  4046d8:	2b00      	cmp	r3, #0
  4046da:	d00a      	beq.n	4046f2 <send+0xa6>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  4046dc:	234c      	movs	r3, #76	; 0x4c
  4046de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  4046e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4046e6:	4a13      	ldr	r2, [pc, #76]	; (404734 <send+0xe8>)
  4046e8:	011b      	lsls	r3, r3, #4
  4046ea:	4413      	add	r3, r2
  4046ec:	3308      	adds	r3, #8
  4046ee:	881b      	ldrh	r3, [r3, #0]
  4046f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  4046f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4046f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4046fa:	b2d9      	uxtb	r1, r3
  4046fc:	f107 0210 	add.w	r2, r7, #16
  404700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404702:	9302      	str	r3, [sp, #8]
  404704:	89bb      	ldrh	r3, [r7, #12]
  404706:	9301      	str	r3, [sp, #4]
  404708:	68bb      	ldr	r3, [r7, #8]
  40470a:	9300      	str	r3, [sp, #0]
  40470c:	2310      	movs	r3, #16
  40470e:	2002      	movs	r0, #2
  404710:	4c09      	ldr	r4, [pc, #36]	; (404738 <send+0xec>)
  404712:	47a0      	blx	r4
  404714:	4603      	mov	r3, r0
  404716:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(s16Ret != SOCK_ERR_NO_ERROR)
  404718:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
  40471c:	2b00      	cmp	r3, #0
  40471e:	d002      	beq.n	404726 <send+0xda>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404720:	f64f 73f2 	movw	r3, #65522	; 0xfff2
  404724:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}
	return s16Ret;
  404726:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
  40472a:	4618      	mov	r0, r3
  40472c:	372c      	adds	r7, #44	; 0x2c
  40472e:	46bd      	mov	sp, r7
  404730:	bd90      	pop	{r4, r7, pc}
  404732:	bf00      	nop
  404734:	20400fcc 	.word	0x20400fcc
  404738:	00400e95 	.word	0x00400e95

0040473c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  40473c:	b590      	push	{r4, r7, lr}
  40473e:	b08d      	sub	sp, #52	; 0x34
  404740:	af04      	add	r7, sp, #16
  404742:	60b9      	str	r1, [r7, #8]
  404744:	607b      	str	r3, [r7, #4]
  404746:	4603      	mov	r3, r0
  404748:	73fb      	strb	r3, [r7, #15]
  40474a:	4613      	mov	r3, r2
  40474c:	81bb      	strh	r3, [r7, #12]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  40474e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
  404752:	83fb      	strh	r3, [r7, #30]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404754:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404758:	2b00      	cmp	r3, #0
  40475a:	db6c      	blt.n	404836 <recv+0xfa>
  40475c:	68bb      	ldr	r3, [r7, #8]
  40475e:	2b00      	cmp	r3, #0
  404760:	d069      	beq.n	404836 <recv+0xfa>
  404762:	89bb      	ldrh	r3, [r7, #12]
  404764:	2b00      	cmp	r3, #0
  404766:	d066      	beq.n	404836 <recv+0xfa>
  404768:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40476c:	4a35      	ldr	r2, [pc, #212]	; (404844 <recv+0x108>)
  40476e:	011b      	lsls	r3, r3, #4
  404770:	4413      	add	r3, r2
  404772:	330a      	adds	r3, #10
  404774:	781b      	ldrb	r3, [r3, #0]
  404776:	b2db      	uxtb	r3, r3
  404778:	2b01      	cmp	r3, #1
  40477a:	d15c      	bne.n	404836 <recv+0xfa>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  40477c:	2300      	movs	r3, #0
  40477e:	83fb      	strh	r3, [r7, #30]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404780:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404784:	4a2f      	ldr	r2, [pc, #188]	; (404844 <recv+0x108>)
  404786:	011b      	lsls	r3, r3, #4
  404788:	4413      	add	r3, r2
  40478a:	68ba      	ldr	r2, [r7, #8]
  40478c:	601a      	str	r2, [r3, #0]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  40478e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404792:	4a2c      	ldr	r2, [pc, #176]	; (404844 <recv+0x108>)
  404794:	011b      	lsls	r3, r3, #4
  404796:	4413      	add	r3, r2
  404798:	3304      	adds	r3, #4
  40479a:	89ba      	ldrh	r2, [r7, #12]
  40479c:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
  40479e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4047a2:	4a28      	ldr	r2, [pc, #160]	; (404844 <recv+0x108>)
  4047a4:	011b      	lsls	r3, r3, #4
  4047a6:	4413      	add	r3, r2
  4047a8:	330c      	adds	r3, #12
  4047aa:	781b      	ldrb	r3, [r3, #0]
  4047ac:	b2db      	uxtb	r3, r3
  4047ae:	2b00      	cmp	r3, #0
  4047b0:	d141      	bne.n	404836 <recv+0xfa>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
  4047b2:	2346      	movs	r3, #70	; 0x46
  4047b4:	777b      	strb	r3, [r7, #29]

			gastrSockets[sock].bIsRecvPending = 1;
  4047b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4047ba:	4a22      	ldr	r2, [pc, #136]	; (404844 <recv+0x108>)
  4047bc:	011b      	lsls	r3, r3, #4
  4047be:	4413      	add	r3, r2
  4047c0:	330c      	adds	r3, #12
  4047c2:	2201      	movs	r2, #1
  4047c4:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4047c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4047ca:	4a1e      	ldr	r2, [pc, #120]	; (404844 <recv+0x108>)
  4047cc:	011b      	lsls	r3, r3, #4
  4047ce:	4413      	add	r3, r2
  4047d0:	330b      	adds	r3, #11
  4047d2:	781b      	ldrb	r3, [r3, #0]
  4047d4:	b2db      	uxtb	r3, r3
  4047d6:	f003 0301 	and.w	r3, r3, #1
  4047da:	2b00      	cmp	r3, #0
  4047dc:	d001      	beq.n	4047e2 <recv+0xa6>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  4047de:	234d      	movs	r3, #77	; 0x4d
  4047e0:	777b      	strb	r3, [r7, #29]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  4047e2:	687b      	ldr	r3, [r7, #4]
  4047e4:	2b00      	cmp	r3, #0
  4047e6:	d103      	bne.n	4047f0 <recv+0xb4>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  4047e8:	f04f 33ff 	mov.w	r3, #4294967295
  4047ec:	617b      	str	r3, [r7, #20]
  4047ee:	e001      	b.n	4047f4 <recv+0xb8>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  4047f0:	687b      	ldr	r3, [r7, #4]
  4047f2:	617b      	str	r3, [r7, #20]
			strRecv.sock = sock;
  4047f4:	7bfb      	ldrb	r3, [r7, #15]
  4047f6:	763b      	strb	r3, [r7, #24]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  4047f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4047fc:	4a11      	ldr	r2, [pc, #68]	; (404844 <recv+0x108>)
  4047fe:	011b      	lsls	r3, r3, #4
  404800:	4413      	add	r3, r2
  404802:	3306      	adds	r3, #6
  404804:	881b      	ldrh	r3, [r3, #0]
  404806:	b29b      	uxth	r3, r3
  404808:	837b      	strh	r3, [r7, #26]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  40480a:	f107 0214 	add.w	r2, r7, #20
  40480e:	7f79      	ldrb	r1, [r7, #29]
  404810:	2300      	movs	r3, #0
  404812:	9302      	str	r3, [sp, #8]
  404814:	2300      	movs	r3, #0
  404816:	9301      	str	r3, [sp, #4]
  404818:	2300      	movs	r3, #0
  40481a:	9300      	str	r3, [sp, #0]
  40481c:	2308      	movs	r3, #8
  40481e:	2002      	movs	r0, #2
  404820:	4c09      	ldr	r4, [pc, #36]	; (404848 <recv+0x10c>)
  404822:	47a0      	blx	r4
  404824:	4603      	mov	r3, r0
  404826:	83fb      	strh	r3, [r7, #30]
			if(s16Ret != SOCK_ERR_NO_ERROR)
  404828:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  40482c:	2b00      	cmp	r3, #0
  40482e:	d002      	beq.n	404836 <recv+0xfa>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  404830:	f64f 73f2 	movw	r3, #65522	; 0xfff2
  404834:	83fb      	strh	r3, [r7, #30]
			}
		}
	}
	return s16Ret;
  404836:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
  40483a:	4618      	mov	r0, r3
  40483c:	3724      	adds	r7, #36	; 0x24
  40483e:	46bd      	mov	sp, r7
  404840:	bd90      	pop	{r4, r7, pc}
  404842:	bf00      	nop
  404844:	20400fcc 	.word	0x20400fcc
  404848:	00400e95 	.word	0x00400e95

0040484c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  40484c:	b590      	push	{r4, r7, lr}
  40484e:	b089      	sub	sp, #36	; 0x24
  404850:	af04      	add	r7, sp, #16
  404852:	4603      	mov	r3, r0
  404854:	71fb      	strb	r3, [r7, #7]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404856:	23fa      	movs	r3, #250	; 0xfa
  404858:	73fb      	strb	r3, [r7, #15]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  40485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40485e:	2b00      	cmp	r3, #0
  404860:	db53      	blt.n	40490a <close+0xbe>
  404862:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404866:	4a2c      	ldr	r2, [pc, #176]	; (404918 <close+0xcc>)
  404868:	011b      	lsls	r3, r3, #4
  40486a:	4413      	add	r3, r2
  40486c:	330a      	adds	r3, #10
  40486e:	781b      	ldrb	r3, [r3, #0]
  404870:	b2db      	uxtb	r3, r3
  404872:	2b01      	cmp	r3, #1
  404874:	d149      	bne.n	40490a <close+0xbe>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
  404876:	2349      	movs	r3, #73	; 0x49
  404878:	73bb      	strb	r3, [r7, #14]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  40487a:	79fb      	ldrb	r3, [r7, #7]
  40487c:	723b      	strb	r3, [r7, #8]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  40487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404882:	4a25      	ldr	r2, [pc, #148]	; (404918 <close+0xcc>)
  404884:	011b      	lsls	r3, r3, #4
  404886:	4413      	add	r3, r2
  404888:	3306      	adds	r3, #6
  40488a:	881b      	ldrh	r3, [r3, #0]
  40488c:	b29b      	uxth	r3, r3
  40488e:	817b      	strh	r3, [r7, #10]
		
		gastrSockets[sock].bIsUsed = 0;
  404890:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404894:	4a20      	ldr	r2, [pc, #128]	; (404918 <close+0xcc>)
  404896:	011b      	lsls	r3, r3, #4
  404898:	4413      	add	r3, r2
  40489a:	330a      	adds	r3, #10
  40489c:	2200      	movs	r2, #0
  40489e:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
  4048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048a4:	4a1c      	ldr	r2, [pc, #112]	; (404918 <close+0xcc>)
  4048a6:	011b      	lsls	r3, r3, #4
  4048a8:	4413      	add	r3, r2
  4048aa:	3306      	adds	r3, #6
  4048ac:	2200      	movs	r2, #0
  4048ae:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4048b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048b4:	4a18      	ldr	r2, [pc, #96]	; (404918 <close+0xcc>)
  4048b6:	011b      	lsls	r3, r3, #4
  4048b8:	4413      	add	r3, r2
  4048ba:	330b      	adds	r3, #11
  4048bc:	781b      	ldrb	r3, [r3, #0]
  4048be:	b2db      	uxtb	r3, r3
  4048c0:	f003 0301 	and.w	r3, r3, #1
  4048c4:	2b00      	cmp	r3, #0
  4048c6:	d001      	beq.n	4048cc <close+0x80>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  4048c8:	234e      	movs	r3, #78	; 0x4e
  4048ca:	73bb      	strb	r3, [r7, #14]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  4048cc:	f107 0208 	add.w	r2, r7, #8
  4048d0:	7bb9      	ldrb	r1, [r7, #14]
  4048d2:	2300      	movs	r3, #0
  4048d4:	9302      	str	r3, [sp, #8]
  4048d6:	2300      	movs	r3, #0
  4048d8:	9301      	str	r3, [sp, #4]
  4048da:	2300      	movs	r3, #0
  4048dc:	9300      	str	r3, [sp, #0]
  4048de:	2304      	movs	r3, #4
  4048e0:	2002      	movs	r0, #2
  4048e2:	4c0e      	ldr	r4, [pc, #56]	; (40491c <close+0xd0>)
  4048e4:	47a0      	blx	r4
  4048e6:	4603      	mov	r3, r0
  4048e8:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4048ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4048ee:	2b00      	cmp	r3, #0
  4048f0:	d001      	beq.n	4048f6 <close+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
  4048f2:	23f7      	movs	r3, #247	; 0xf7
  4048f4:	73fb      	strb	r3, [r7, #15]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  4048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048fa:	011b      	lsls	r3, r3, #4
  4048fc:	4a06      	ldr	r2, [pc, #24]	; (404918 <close+0xcc>)
  4048fe:	4413      	add	r3, r2
  404900:	2210      	movs	r2, #16
  404902:	2100      	movs	r1, #0
  404904:	4618      	mov	r0, r3
  404906:	4b06      	ldr	r3, [pc, #24]	; (404920 <close+0xd4>)
  404908:	4798      	blx	r3
	}
	return s8Ret;
  40490a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  40490e:	4618      	mov	r0, r3
  404910:	3714      	adds	r7, #20
  404912:	46bd      	mov	sp, r7
  404914:	bd90      	pop	{r4, r7, pc}
  404916:	bf00      	nop
  404918:	20400fcc 	.word	0x20400fcc
  40491c:	00400e95 	.word	0x00400e95
  404920:	00400be9 	.word	0x00400be9

00404924 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
  404924:	b590      	push	{r4, r7, lr}
  404926:	b089      	sub	sp, #36	; 0x24
  404928:	af04      	add	r7, sp, #16
  40492a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
  40492c:	23fa      	movs	r3, #250	; 0xfa
  40492e:	73fb      	strb	r3, [r7, #15]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
  404930:	6878      	ldr	r0, [r7, #4]
  404932:	4b12      	ldr	r3, [pc, #72]	; (40497c <gethostbyname+0x58>)
  404934:	4798      	blx	r3
  404936:	4603      	mov	r3, r0
  404938:	73bb      	strb	r3, [r7, #14]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
  40493a:	7bbb      	ldrb	r3, [r7, #14]
  40493c:	2b40      	cmp	r3, #64	; 0x40
  40493e:	d817      	bhi.n	404970 <gethostbyname+0x4c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
  404940:	7bbb      	ldrb	r3, [r7, #14]
  404942:	b29b      	uxth	r3, r3
  404944:	3301      	adds	r3, #1
  404946:	b29a      	uxth	r2, r3
  404948:	2300      	movs	r3, #0
  40494a:	9302      	str	r3, [sp, #8]
  40494c:	2300      	movs	r3, #0
  40494e:	9301      	str	r3, [sp, #4]
  404950:	2300      	movs	r3, #0
  404952:	9300      	str	r3, [sp, #0]
  404954:	4613      	mov	r3, r2
  404956:	687a      	ldr	r2, [r7, #4]
  404958:	21ca      	movs	r1, #202	; 0xca
  40495a:	2002      	movs	r0, #2
  40495c:	4c08      	ldr	r4, [pc, #32]	; (404980 <gethostbyname+0x5c>)
  40495e:	47a0      	blx	r4
  404960:	4603      	mov	r3, r0
  404962:	73fb      	strb	r3, [r7, #15]
		if(s8Err != SOCK_ERR_NO_ERROR)
  404964:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404968:	2b00      	cmp	r3, #0
  40496a:	d001      	beq.n	404970 <gethostbyname+0x4c>
		{
			s8Err = SOCK_ERR_INVALID;
  40496c:	23f7      	movs	r3, #247	; 0xf7
  40496e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return s8Err;
  404970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  404974:	4618      	mov	r0, r3
  404976:	3714      	adds	r7, #20
  404978:	46bd      	mov	sp, r7
  40497a:	bd90      	pop	{r4, r7, pc}
  40497c:	00400c25 	.word	0x00400c25
  404980:	00400e95 	.word	0x00400e95

00404984 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
  404984:	b580      	push	{r7, lr}
  404986:	b082      	sub	sp, #8
  404988:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
  40498a:	463b      	mov	r3, r7
  40498c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
  40498e:	687b      	ldr	r3, [r7, #4]
  404990:	22b9      	movs	r2, #185	; 0xb9
  404992:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404994:	2100      	movs	r1, #0
  404996:	4810      	ldr	r0, [pc, #64]	; (4049d8 <spi_flash_enter_low_power_mode+0x54>)
  404998:	4b10      	ldr	r3, [pc, #64]	; (4049dc <spi_flash_enter_low_power_mode+0x58>)
  40499a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  40499c:	687b      	ldr	r3, [r7, #4]
  40499e:	781b      	ldrb	r3, [r3, #0]
  4049a0:	4619      	mov	r1, r3
  4049a2:	480f      	ldr	r0, [pc, #60]	; (4049e0 <spi_flash_enter_low_power_mode+0x5c>)
  4049a4:	4b0d      	ldr	r3, [pc, #52]	; (4049dc <spi_flash_enter_low_power_mode+0x58>)
  4049a6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4049a8:	2101      	movs	r1, #1
  4049aa:	480e      	ldr	r0, [pc, #56]	; (4049e4 <spi_flash_enter_low_power_mode+0x60>)
  4049ac:	4b0b      	ldr	r3, [pc, #44]	; (4049dc <spi_flash_enter_low_power_mode+0x58>)
  4049ae:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4049b0:	2100      	movs	r1, #0
  4049b2:	480d      	ldr	r0, [pc, #52]	; (4049e8 <spi_flash_enter_low_power_mode+0x64>)
  4049b4:	4b09      	ldr	r3, [pc, #36]	; (4049dc <spi_flash_enter_low_power_mode+0x58>)
  4049b6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  4049b8:	2181      	movs	r1, #129	; 0x81
  4049ba:	480c      	ldr	r0, [pc, #48]	; (4049ec <spi_flash_enter_low_power_mode+0x68>)
  4049bc:	4b07      	ldr	r3, [pc, #28]	; (4049dc <spi_flash_enter_low_power_mode+0x58>)
  4049be:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4049c0:	bf00      	nop
  4049c2:	480b      	ldr	r0, [pc, #44]	; (4049f0 <spi_flash_enter_low_power_mode+0x6c>)
  4049c4:	4b0b      	ldr	r3, [pc, #44]	; (4049f4 <spi_flash_enter_low_power_mode+0x70>)
  4049c6:	4798      	blx	r3
  4049c8:	4603      	mov	r3, r0
  4049ca:	2b01      	cmp	r3, #1
  4049cc:	d1f9      	bne.n	4049c2 <spi_flash_enter_low_power_mode+0x3e>
}
  4049ce:	bf00      	nop
  4049d0:	3708      	adds	r7, #8
  4049d2:	46bd      	mov	sp, r7
  4049d4:	bd80      	pop	{r7, pc}
  4049d6:	bf00      	nop
  4049d8:	00010208 	.word	0x00010208
  4049dc:	00402c45 	.word	0x00402c45
  4049e0:	0001020c 	.word	0x0001020c
  4049e4:	00010214 	.word	0x00010214
  4049e8:	0001021c 	.word	0x0001021c
  4049ec:	00010204 	.word	0x00010204
  4049f0:	00010218 	.word	0x00010218
  4049f4:	00402c09 	.word	0x00402c09

004049f8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
  4049f8:	b580      	push	{r7, lr}
  4049fa:	b082      	sub	sp, #8
  4049fc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
  4049fe:	463b      	mov	r3, r7
  404a00:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
  404a02:	687b      	ldr	r3, [r7, #4]
  404a04:	22ab      	movs	r2, #171	; 0xab
  404a06:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404a08:	2100      	movs	r1, #0
  404a0a:	4810      	ldr	r0, [pc, #64]	; (404a4c <spi_flash_leave_low_power_mode+0x54>)
  404a0c:	4b10      	ldr	r3, [pc, #64]	; (404a50 <spi_flash_leave_low_power_mode+0x58>)
  404a0e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404a10:	687b      	ldr	r3, [r7, #4]
  404a12:	781b      	ldrb	r3, [r3, #0]
  404a14:	4619      	mov	r1, r3
  404a16:	480f      	ldr	r0, [pc, #60]	; (404a54 <spi_flash_leave_low_power_mode+0x5c>)
  404a18:	4b0d      	ldr	r3, [pc, #52]	; (404a50 <spi_flash_leave_low_power_mode+0x58>)
  404a1a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404a1c:	2101      	movs	r1, #1
  404a1e:	480e      	ldr	r0, [pc, #56]	; (404a58 <spi_flash_leave_low_power_mode+0x60>)
  404a20:	4b0b      	ldr	r3, [pc, #44]	; (404a50 <spi_flash_leave_low_power_mode+0x58>)
  404a22:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404a24:	2100      	movs	r1, #0
  404a26:	480d      	ldr	r0, [pc, #52]	; (404a5c <spi_flash_leave_low_power_mode+0x64>)
  404a28:	4b09      	ldr	r3, [pc, #36]	; (404a50 <spi_flash_leave_low_power_mode+0x58>)
  404a2a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404a2c:	2181      	movs	r1, #129	; 0x81
  404a2e:	480c      	ldr	r0, [pc, #48]	; (404a60 <spi_flash_leave_low_power_mode+0x68>)
  404a30:	4b07      	ldr	r3, [pc, #28]	; (404a50 <spi_flash_leave_low_power_mode+0x58>)
  404a32:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404a34:	bf00      	nop
  404a36:	480b      	ldr	r0, [pc, #44]	; (404a64 <spi_flash_leave_low_power_mode+0x6c>)
  404a38:	4b0b      	ldr	r3, [pc, #44]	; (404a68 <spi_flash_leave_low_power_mode+0x70>)
  404a3a:	4798      	blx	r3
  404a3c:	4603      	mov	r3, r0
  404a3e:	2b01      	cmp	r3, #1
  404a40:	d1f9      	bne.n	404a36 <spi_flash_leave_low_power_mode+0x3e>
}
  404a42:	bf00      	nop
  404a44:	3708      	adds	r7, #8
  404a46:	46bd      	mov	sp, r7
  404a48:	bd80      	pop	{r7, pc}
  404a4a:	bf00      	nop
  404a4c:	00010208 	.word	0x00010208
  404a50:	00402c45 	.word	0x00402c45
  404a54:	0001020c 	.word	0x0001020c
  404a58:	00010214 	.word	0x00010214
  404a5c:	0001021c 	.word	0x0001021c
  404a60:	00010204 	.word	0x00010204
  404a64:	00010218 	.word	0x00010218
  404a68:	00402c09 	.word	0x00402c09

00404a6c <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404a6c:	b580      	push	{r7, lr}
  404a6e:	b084      	sub	sp, #16
  404a70:	af00      	add	r7, sp, #0
  404a72:	4603      	mov	r3, r0
  404a74:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
  404a76:	2300      	movs	r3, #0
  404a78:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  404a7a:	4b20      	ldr	r3, [pc, #128]	; (404afc <spi_flash_enable+0x90>)
  404a7c:	4798      	blx	r3
  404a7e:	4603      	mov	r3, r0
  404a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
  404a84:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
  404a88:	d332      	bcc.n	404af0 <spi_flash_enable+0x84>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404a8a:	f107 0308 	add.w	r3, r7, #8
  404a8e:	4619      	mov	r1, r3
  404a90:	f241 4010 	movw	r0, #5136	; 0x1410
  404a94:	4b1a      	ldr	r3, [pc, #104]	; (404b00 <spi_flash_enable+0x94>)
  404a96:	4798      	blx	r3
  404a98:	4603      	mov	r3, r0
  404a9a:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
  404a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404aa0:	2b00      	cmp	r3, #0
  404aa2:	d124      	bne.n	404aee <spi_flash_enable+0x82>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
  404aa4:	68ba      	ldr	r2, [r7, #8]
  404aa6:	4b17      	ldr	r3, [pc, #92]	; (404b04 <spi_flash_enable+0x98>)
  404aa8:	4013      	ands	r3, r2
  404aaa:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
  404aac:	68ba      	ldr	r2, [r7, #8]
  404aae:	4b16      	ldr	r3, [pc, #88]	; (404b08 <spi_flash_enable+0x9c>)
  404ab0:	4313      	orrs	r3, r2
  404ab2:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
  404ab4:	68bb      	ldr	r3, [r7, #8]
  404ab6:	4619      	mov	r1, r3
  404ab8:	f241 4010 	movw	r0, #5136	; 0x1410
  404abc:	4b13      	ldr	r3, [pc, #76]	; (404b0c <spi_flash_enable+0xa0>)
  404abe:	4798      	blx	r3
		if(enable) {
  404ac0:	79fb      	ldrb	r3, [r7, #7]
  404ac2:	2b00      	cmp	r3, #0
  404ac4:	d002      	beq.n	404acc <spi_flash_enable+0x60>
			spi_flash_leave_low_power_mode();
  404ac6:	4b12      	ldr	r3, [pc, #72]	; (404b10 <spi_flash_enable+0xa4>)
  404ac8:	4798      	blx	r3
  404aca:	e001      	b.n	404ad0 <spi_flash_enable+0x64>
		} else {
			spi_flash_enter_low_power_mode();
  404acc:	4b11      	ldr	r3, [pc, #68]	; (404b14 <spi_flash_enable+0xa8>)
  404ace:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
  404ad0:	68ba      	ldr	r2, [r7, #8]
  404ad2:	4b0c      	ldr	r3, [pc, #48]	; (404b04 <spi_flash_enable+0x98>)
  404ad4:	4013      	ands	r3, r2
  404ad6:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
  404ad8:	68bb      	ldr	r3, [r7, #8]
  404ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404ade:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
  404ae0:	68bb      	ldr	r3, [r7, #8]
  404ae2:	4619      	mov	r1, r3
  404ae4:	f241 4010 	movw	r0, #5136	; 0x1410
  404ae8:	4b08      	ldr	r3, [pc, #32]	; (404b0c <spi_flash_enable+0xa0>)
  404aea:	4798      	blx	r3
  404aec:	e000      	b.n	404af0 <spi_flash_enable+0x84>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
  404aee:	bf00      	nop
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
  404af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  404af4:	4618      	mov	r0, r3
  404af6:	3710      	adds	r7, #16
  404af8:	46bd      	mov	sp, r7
  404afa:	bd80      	pop	{r7, pc}
  404afc:	0040267d 	.word	0x0040267d
  404b00:	00402c25 	.word	0x00402c25
  404b04:	f8888fff 	.word	0xf8888fff
  404b08:	01111000 	.word	0x01111000
  404b0c:	00402c45 	.word	0x00402c45
  404b10:	004049f9 	.word	0x004049f9
  404b14:	00404985 	.word	0x00404985

00404b18 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  404b18:	b580      	push	{r7, lr}
  404b1a:	b082      	sub	sp, #8
  404b1c:	af00      	add	r7, sp, #0
  404b1e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404b20:	687b      	ldr	r3, [r7, #4]
  404b22:	2b07      	cmp	r3, #7
  404b24:	d831      	bhi.n	404b8a <osc_enable+0x72>
  404b26:	a201      	add	r2, pc, #4	; (adr r2, 404b2c <osc_enable+0x14>)
  404b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404b2c:	00404b89 	.word	0x00404b89
  404b30:	00404b4d 	.word	0x00404b4d
  404b34:	00404b55 	.word	0x00404b55
  404b38:	00404b5d 	.word	0x00404b5d
  404b3c:	00404b65 	.word	0x00404b65
  404b40:	00404b6d 	.word	0x00404b6d
  404b44:	00404b75 	.word	0x00404b75
  404b48:	00404b7f 	.word	0x00404b7f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  404b4c:	2000      	movs	r0, #0
  404b4e:	4b11      	ldr	r3, [pc, #68]	; (404b94 <osc_enable+0x7c>)
  404b50:	4798      	blx	r3
		break;
  404b52:	e01a      	b.n	404b8a <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  404b54:	2001      	movs	r0, #1
  404b56:	4b0f      	ldr	r3, [pc, #60]	; (404b94 <osc_enable+0x7c>)
  404b58:	4798      	blx	r3
		break;
  404b5a:	e016      	b.n	404b8a <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  404b5c:	2000      	movs	r0, #0
  404b5e:	4b0e      	ldr	r3, [pc, #56]	; (404b98 <osc_enable+0x80>)
  404b60:	4798      	blx	r3
		break;
  404b62:	e012      	b.n	404b8a <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  404b64:	2010      	movs	r0, #16
  404b66:	4b0c      	ldr	r3, [pc, #48]	; (404b98 <osc_enable+0x80>)
  404b68:	4798      	blx	r3
		break;
  404b6a:	e00e      	b.n	404b8a <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  404b6c:	2020      	movs	r0, #32
  404b6e:	4b0a      	ldr	r3, [pc, #40]	; (404b98 <osc_enable+0x80>)
  404b70:	4798      	blx	r3
		break;
  404b72:	e00a      	b.n	404b8a <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404b74:	213e      	movs	r1, #62	; 0x3e
  404b76:	2000      	movs	r0, #0
  404b78:	4b08      	ldr	r3, [pc, #32]	; (404b9c <osc_enable+0x84>)
  404b7a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  404b7c:	e005      	b.n	404b8a <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  404b7e:	213e      	movs	r1, #62	; 0x3e
  404b80:	2001      	movs	r0, #1
  404b82:	4b06      	ldr	r3, [pc, #24]	; (404b9c <osc_enable+0x84>)
  404b84:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  404b86:	e000      	b.n	404b8a <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  404b88:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  404b8a:	bf00      	nop
  404b8c:	3708      	adds	r7, #8
  404b8e:	46bd      	mov	sp, r7
  404b90:	bd80      	pop	{r7, pc}
  404b92:	bf00      	nop
  404b94:	00405dad 	.word	0x00405dad
  404b98:	00405e19 	.word	0x00405e19
  404b9c:	00405e89 	.word	0x00405e89

00404ba0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  404ba0:	b580      	push	{r7, lr}
  404ba2:	b082      	sub	sp, #8
  404ba4:	af00      	add	r7, sp, #0
  404ba6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404ba8:	687b      	ldr	r3, [r7, #4]
  404baa:	2b07      	cmp	r3, #7
  404bac:	d826      	bhi.n	404bfc <osc_is_ready+0x5c>
  404bae:	a201      	add	r2, pc, #4	; (adr r2, 404bb4 <osc_is_ready+0x14>)
  404bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404bb4:	00404bd5 	.word	0x00404bd5
  404bb8:	00404bd9 	.word	0x00404bd9
  404bbc:	00404bd9 	.word	0x00404bd9
  404bc0:	00404beb 	.word	0x00404beb
  404bc4:	00404beb 	.word	0x00404beb
  404bc8:	00404beb 	.word	0x00404beb
  404bcc:	00404beb 	.word	0x00404beb
  404bd0:	00404beb 	.word	0x00404beb
	case OSC_SLCK_32K_RC:
		return 1;
  404bd4:	2301      	movs	r3, #1
  404bd6:	e012      	b.n	404bfe <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  404bd8:	4b0b      	ldr	r3, [pc, #44]	; (404c08 <osc_is_ready+0x68>)
  404bda:	4798      	blx	r3
  404bdc:	4603      	mov	r3, r0
  404bde:	2b00      	cmp	r3, #0
  404be0:	bf14      	ite	ne
  404be2:	2301      	movne	r3, #1
  404be4:	2300      	moveq	r3, #0
  404be6:	b2db      	uxtb	r3, r3
  404be8:	e009      	b.n	404bfe <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404bea:	4b08      	ldr	r3, [pc, #32]	; (404c0c <osc_is_ready+0x6c>)
  404bec:	4798      	blx	r3
  404bee:	4603      	mov	r3, r0
  404bf0:	2b00      	cmp	r3, #0
  404bf2:	bf14      	ite	ne
  404bf4:	2301      	movne	r3, #1
  404bf6:	2300      	moveq	r3, #0
  404bf8:	b2db      	uxtb	r3, r3
  404bfa:	e000      	b.n	404bfe <osc_is_ready+0x5e>
	}

	return 0;
  404bfc:	2300      	movs	r3, #0
}
  404bfe:	4618      	mov	r0, r3
  404c00:	3708      	adds	r7, #8
  404c02:	46bd      	mov	sp, r7
  404c04:	bd80      	pop	{r7, pc}
  404c06:	bf00      	nop
  404c08:	00405de5 	.word	0x00405de5
  404c0c:	00405f01 	.word	0x00405f01

00404c10 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  404c10:	b480      	push	{r7}
  404c12:	b083      	sub	sp, #12
  404c14:	af00      	add	r7, sp, #0
  404c16:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404c18:	687b      	ldr	r3, [r7, #4]
  404c1a:	2b07      	cmp	r3, #7
  404c1c:	d825      	bhi.n	404c6a <osc_get_rate+0x5a>
  404c1e:	a201      	add	r2, pc, #4	; (adr r2, 404c24 <osc_get_rate+0x14>)
  404c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404c24:	00404c45 	.word	0x00404c45
  404c28:	00404c4b 	.word	0x00404c4b
  404c2c:	00404c51 	.word	0x00404c51
  404c30:	00404c57 	.word	0x00404c57
  404c34:	00404c5b 	.word	0x00404c5b
  404c38:	00404c5f 	.word	0x00404c5f
  404c3c:	00404c63 	.word	0x00404c63
  404c40:	00404c67 	.word	0x00404c67
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  404c44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404c48:	e010      	b.n	404c6c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  404c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404c4e:	e00d      	b.n	404c6c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  404c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404c54:	e00a      	b.n	404c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  404c56:	4b08      	ldr	r3, [pc, #32]	; (404c78 <osc_get_rate+0x68>)
  404c58:	e008      	b.n	404c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  404c5a:	4b08      	ldr	r3, [pc, #32]	; (404c7c <osc_get_rate+0x6c>)
  404c5c:	e006      	b.n	404c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  404c5e:	4b08      	ldr	r3, [pc, #32]	; (404c80 <osc_get_rate+0x70>)
  404c60:	e004      	b.n	404c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  404c62:	4b07      	ldr	r3, [pc, #28]	; (404c80 <osc_get_rate+0x70>)
  404c64:	e002      	b.n	404c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  404c66:	4b06      	ldr	r3, [pc, #24]	; (404c80 <osc_get_rate+0x70>)
  404c68:	e000      	b.n	404c6c <osc_get_rate+0x5c>
	}

	return 0;
  404c6a:	2300      	movs	r3, #0
}
  404c6c:	4618      	mov	r0, r3
  404c6e:	370c      	adds	r7, #12
  404c70:	46bd      	mov	sp, r7
  404c72:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c76:	4770      	bx	lr
  404c78:	003d0900 	.word	0x003d0900
  404c7c:	007a1200 	.word	0x007a1200
  404c80:	00b71b00 	.word	0x00b71b00

00404c84 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  404c84:	b580      	push	{r7, lr}
  404c86:	b082      	sub	sp, #8
  404c88:	af00      	add	r7, sp, #0
  404c8a:	4603      	mov	r3, r0
  404c8c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  404c8e:	bf00      	nop
  404c90:	79fb      	ldrb	r3, [r7, #7]
  404c92:	4618      	mov	r0, r3
  404c94:	4b05      	ldr	r3, [pc, #20]	; (404cac <osc_wait_ready+0x28>)
  404c96:	4798      	blx	r3
  404c98:	4603      	mov	r3, r0
  404c9a:	f083 0301 	eor.w	r3, r3, #1
  404c9e:	b2db      	uxtb	r3, r3
  404ca0:	2b00      	cmp	r3, #0
  404ca2:	d1f5      	bne.n	404c90 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  404ca4:	bf00      	nop
  404ca6:	3708      	adds	r7, #8
  404ca8:	46bd      	mov	sp, r7
  404caa:	bd80      	pop	{r7, pc}
  404cac:	00404ba1 	.word	0x00404ba1

00404cb0 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  404cb0:	b580      	push	{r7, lr}
  404cb2:	b086      	sub	sp, #24
  404cb4:	af00      	add	r7, sp, #0
  404cb6:	60f8      	str	r0, [r7, #12]
  404cb8:	607a      	str	r2, [r7, #4]
  404cba:	603b      	str	r3, [r7, #0]
  404cbc:	460b      	mov	r3, r1
  404cbe:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  404cc0:	687b      	ldr	r3, [r7, #4]
  404cc2:	2b00      	cmp	r3, #0
  404cc4:	d107      	bne.n	404cd6 <pll_config_init+0x26>
  404cc6:	683b      	ldr	r3, [r7, #0]
  404cc8:	2b00      	cmp	r3, #0
  404cca:	d104      	bne.n	404cd6 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  404ccc:	68fb      	ldr	r3, [r7, #12]
  404cce:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  404cd2:	601a      	str	r2, [r3, #0]
  404cd4:	e019      	b.n	404d0a <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  404cd6:	7afb      	ldrb	r3, [r7, #11]
  404cd8:	4618      	mov	r0, r3
  404cda:	4b0e      	ldr	r3, [pc, #56]	; (404d14 <pll_config_init+0x64>)
  404cdc:	4798      	blx	r3
  404cde:	4602      	mov	r2, r0
  404ce0:	687b      	ldr	r3, [r7, #4]
  404ce2:	fbb2 f3f3 	udiv	r3, r2, r3
  404ce6:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  404ce8:	697b      	ldr	r3, [r7, #20]
  404cea:	683a      	ldr	r2, [r7, #0]
  404cec:	fb02 f303 	mul.w	r3, r2, r3
  404cf0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  404cf2:	683b      	ldr	r3, [r7, #0]
  404cf4:	3b01      	subs	r3, #1
  404cf6:	041a      	lsls	r2, r3, #16
  404cf8:	4b07      	ldr	r3, [pc, #28]	; (404d18 <pll_config_init+0x68>)
  404cfa:	4013      	ands	r3, r2
  404cfc:	687a      	ldr	r2, [r7, #4]
  404cfe:	b2d2      	uxtb	r2, r2
  404d00:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  404d02:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  404d06:	68fb      	ldr	r3, [r7, #12]
  404d08:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  404d0a:	bf00      	nop
  404d0c:	3718      	adds	r7, #24
  404d0e:	46bd      	mov	sp, r7
  404d10:	bd80      	pop	{r7, pc}
  404d12:	bf00      	nop
  404d14:	00404c11 	.word	0x00404c11
  404d18:	07ff0000 	.word	0x07ff0000

00404d1c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  404d1c:	b580      	push	{r7, lr}
  404d1e:	b082      	sub	sp, #8
  404d20:	af00      	add	r7, sp, #0
  404d22:	6078      	str	r0, [r7, #4]
  404d24:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  404d26:	683b      	ldr	r3, [r7, #0]
  404d28:	2b00      	cmp	r3, #0
  404d2a:	d108      	bne.n	404d3e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  404d2c:	4b09      	ldr	r3, [pc, #36]	; (404d54 <pll_enable+0x38>)
  404d2e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404d30:	4a09      	ldr	r2, [pc, #36]	; (404d58 <pll_enable+0x3c>)
  404d32:	687b      	ldr	r3, [r7, #4]
  404d34:	681b      	ldr	r3, [r3, #0]
  404d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  404d3a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  404d3c:	e005      	b.n	404d4a <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  404d3e:	4a06      	ldr	r2, [pc, #24]	; (404d58 <pll_enable+0x3c>)
  404d40:	687b      	ldr	r3, [r7, #4]
  404d42:	681b      	ldr	r3, [r3, #0]
  404d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404d48:	61d3      	str	r3, [r2, #28]
	}
}
  404d4a:	bf00      	nop
  404d4c:	3708      	adds	r7, #8
  404d4e:	46bd      	mov	sp, r7
  404d50:	bd80      	pop	{r7, pc}
  404d52:	bf00      	nop
  404d54:	00405f1d 	.word	0x00405f1d
  404d58:	400e0600 	.word	0x400e0600

00404d5c <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  404d5c:	b580      	push	{r7, lr}
  404d5e:	b082      	sub	sp, #8
  404d60:	af00      	add	r7, sp, #0
  404d62:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  404d64:	687b      	ldr	r3, [r7, #4]
  404d66:	2b00      	cmp	r3, #0
  404d68:	d103      	bne.n	404d72 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  404d6a:	4b05      	ldr	r3, [pc, #20]	; (404d80 <pll_is_locked+0x24>)
  404d6c:	4798      	blx	r3
  404d6e:	4603      	mov	r3, r0
  404d70:	e002      	b.n	404d78 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  404d72:	4b04      	ldr	r3, [pc, #16]	; (404d84 <pll_is_locked+0x28>)
  404d74:	4798      	blx	r3
  404d76:	4603      	mov	r3, r0
	}
}
  404d78:	4618      	mov	r0, r3
  404d7a:	3708      	adds	r7, #8
  404d7c:	46bd      	mov	sp, r7
  404d7e:	bd80      	pop	{r7, pc}
  404d80:	00405f39 	.word	0x00405f39
  404d84:	00405f55 	.word	0x00405f55

00404d88 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  404d88:	b580      	push	{r7, lr}
  404d8a:	b082      	sub	sp, #8
  404d8c:	af00      	add	r7, sp, #0
  404d8e:	4603      	mov	r3, r0
  404d90:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  404d92:	79fb      	ldrb	r3, [r7, #7]
  404d94:	3b03      	subs	r3, #3
  404d96:	2b04      	cmp	r3, #4
  404d98:	d808      	bhi.n	404dac <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  404d9a:	79fb      	ldrb	r3, [r7, #7]
  404d9c:	4618      	mov	r0, r3
  404d9e:	4b06      	ldr	r3, [pc, #24]	; (404db8 <pll_enable_source+0x30>)
  404da0:	4798      	blx	r3
		osc_wait_ready(e_src);
  404da2:	79fb      	ldrb	r3, [r7, #7]
  404da4:	4618      	mov	r0, r3
  404da6:	4b05      	ldr	r3, [pc, #20]	; (404dbc <pll_enable_source+0x34>)
  404da8:	4798      	blx	r3
		break;
  404daa:	e000      	b.n	404dae <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  404dac:	bf00      	nop
	}
}
  404dae:	bf00      	nop
  404db0:	3708      	adds	r7, #8
  404db2:	46bd      	mov	sp, r7
  404db4:	bd80      	pop	{r7, pc}
  404db6:	bf00      	nop
  404db8:	00404b19 	.word	0x00404b19
  404dbc:	00404c85 	.word	0x00404c85

00404dc0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  404dc0:	b580      	push	{r7, lr}
  404dc2:	b082      	sub	sp, #8
  404dc4:	af00      	add	r7, sp, #0
  404dc6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404dc8:	bf00      	nop
  404dca:	6878      	ldr	r0, [r7, #4]
  404dcc:	4b04      	ldr	r3, [pc, #16]	; (404de0 <pll_wait_for_lock+0x20>)
  404dce:	4798      	blx	r3
  404dd0:	4603      	mov	r3, r0
  404dd2:	2b00      	cmp	r3, #0
  404dd4:	d0f9      	beq.n	404dca <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  404dd6:	2300      	movs	r3, #0
}
  404dd8:	4618      	mov	r0, r3
  404dda:	3708      	adds	r7, #8
  404ddc:	46bd      	mov	sp, r7
  404dde:	bd80      	pop	{r7, pc}
  404de0:	00404d5d 	.word	0x00404d5d

00404de4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  404de4:	b580      	push	{r7, lr}
  404de6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  404de8:	2006      	movs	r0, #6
  404dea:	4b05      	ldr	r3, [pc, #20]	; (404e00 <sysclk_get_main_hz+0x1c>)
  404dec:	4798      	blx	r3
  404dee:	4602      	mov	r2, r0
  404df0:	4613      	mov	r3, r2
  404df2:	009b      	lsls	r3, r3, #2
  404df4:	4413      	add	r3, r2
  404df6:	009a      	lsls	r2, r3, #2
  404df8:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  404dfa:	4618      	mov	r0, r3
  404dfc:	bd80      	pop	{r7, pc}
  404dfe:	bf00      	nop
  404e00:	00404c11 	.word	0x00404c11

00404e04 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  404e04:	b580      	push	{r7, lr}
  404e06:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  404e08:	4b02      	ldr	r3, [pc, #8]	; (404e14 <sysclk_get_cpu_hz+0x10>)
  404e0a:	4798      	blx	r3
  404e0c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  404e0e:	4618      	mov	r0, r3
  404e10:	bd80      	pop	{r7, pc}
  404e12:	bf00      	nop
  404e14:	00404de5 	.word	0x00404de5

00404e18 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404e18:	b590      	push	{r4, r7, lr}
  404e1a:	b083      	sub	sp, #12
  404e1c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404e1e:	4813      	ldr	r0, [pc, #76]	; (404e6c <sysclk_init+0x54>)
  404e20:	4b13      	ldr	r3, [pc, #76]	; (404e70 <sysclk_init+0x58>)
  404e22:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  404e24:	2006      	movs	r0, #6
  404e26:	4b13      	ldr	r3, [pc, #76]	; (404e74 <sysclk_init+0x5c>)
  404e28:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  404e2a:	1d38      	adds	r0, r7, #4
  404e2c:	2319      	movs	r3, #25
  404e2e:	2201      	movs	r2, #1
  404e30:	2106      	movs	r1, #6
  404e32:	4c11      	ldr	r4, [pc, #68]	; (404e78 <sysclk_init+0x60>)
  404e34:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  404e36:	1d3b      	adds	r3, r7, #4
  404e38:	2100      	movs	r1, #0
  404e3a:	4618      	mov	r0, r3
  404e3c:	4b0f      	ldr	r3, [pc, #60]	; (404e7c <sysclk_init+0x64>)
  404e3e:	4798      	blx	r3
		pll_wait_for_lock(0);
  404e40:	2000      	movs	r0, #0
  404e42:	4b0f      	ldr	r3, [pc, #60]	; (404e80 <sysclk_init+0x68>)
  404e44:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404e46:	2002      	movs	r0, #2
  404e48:	4b0e      	ldr	r3, [pc, #56]	; (404e84 <sysclk_init+0x6c>)
  404e4a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404e4c:	2000      	movs	r0, #0
  404e4e:	4b0e      	ldr	r3, [pc, #56]	; (404e88 <sysclk_init+0x70>)
  404e50:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404e52:	4b0e      	ldr	r3, [pc, #56]	; (404e8c <sysclk_init+0x74>)
  404e54:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404e56:	4b0e      	ldr	r3, [pc, #56]	; (404e90 <sysclk_init+0x78>)
  404e58:	4798      	blx	r3
  404e5a:	4603      	mov	r3, r0
  404e5c:	4618      	mov	r0, r3
  404e5e:	4b04      	ldr	r3, [pc, #16]	; (404e70 <sysclk_init+0x58>)
  404e60:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  404e62:	bf00      	nop
  404e64:	370c      	adds	r7, #12
  404e66:	46bd      	mov	sp, r7
  404e68:	bd90      	pop	{r4, r7, pc}
  404e6a:	bf00      	nop
  404e6c:	11e1a300 	.word	0x11e1a300
  404e70:	0040697d 	.word	0x0040697d
  404e74:	00404d89 	.word	0x00404d89
  404e78:	00404cb1 	.word	0x00404cb1
  404e7c:	00404d1d 	.word	0x00404d1d
  404e80:	00404dc1 	.word	0x00404dc1
  404e84:	00405cad 	.word	0x00405cad
  404e88:	00405d29 	.word	0x00405d29
  404e8c:	00406811 	.word	0x00406811
  404e90:	00404e05 	.word	0x00404e05

00404e94 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404e94:	b580      	push	{r7, lr}
  404e96:	b086      	sub	sp, #24
  404e98:	af00      	add	r7, sp, #0
  404e9a:	60f8      	str	r0, [r7, #12]
  404e9c:	60b9      	str	r1, [r7, #8]
  404e9e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  404ea0:	2300      	movs	r3, #0
  404ea2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  404ea4:	68fb      	ldr	r3, [r7, #12]
  404ea6:	2b00      	cmp	r3, #0
  404ea8:	d012      	beq.n	404ed0 <_read+0x3c>
		return -1;
  404eaa:	f04f 33ff 	mov.w	r3, #4294967295
  404eae:	e013      	b.n	404ed8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  404eb0:	4b0b      	ldr	r3, [pc, #44]	; (404ee0 <_read+0x4c>)
  404eb2:	681b      	ldr	r3, [r3, #0]
  404eb4:	4a0b      	ldr	r2, [pc, #44]	; (404ee4 <_read+0x50>)
  404eb6:	6812      	ldr	r2, [r2, #0]
  404eb8:	68b9      	ldr	r1, [r7, #8]
  404eba:	4610      	mov	r0, r2
  404ebc:	4798      	blx	r3
		ptr++;
  404ebe:	68bb      	ldr	r3, [r7, #8]
  404ec0:	3301      	adds	r3, #1
  404ec2:	60bb      	str	r3, [r7, #8]
		nChars++;
  404ec4:	697b      	ldr	r3, [r7, #20]
  404ec6:	3301      	adds	r3, #1
  404ec8:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  404eca:	687b      	ldr	r3, [r7, #4]
  404ecc:	3b01      	subs	r3, #1
  404ece:	607b      	str	r3, [r7, #4]
  404ed0:	687b      	ldr	r3, [r7, #4]
  404ed2:	2b00      	cmp	r3, #0
  404ed4:	dcec      	bgt.n	404eb0 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  404ed6:	697b      	ldr	r3, [r7, #20]
}
  404ed8:	4618      	mov	r0, r3
  404eda:	3718      	adds	r7, #24
  404edc:	46bd      	mov	sp, r7
  404ede:	bd80      	pop	{r7, pc}
  404ee0:	20401088 	.word	0x20401088
  404ee4:	20401090 	.word	0x20401090

00404ee8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  404ee8:	b580      	push	{r7, lr}
  404eea:	b086      	sub	sp, #24
  404eec:	af00      	add	r7, sp, #0
  404eee:	60f8      	str	r0, [r7, #12]
  404ef0:	60b9      	str	r1, [r7, #8]
  404ef2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  404ef4:	2300      	movs	r3, #0
  404ef6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  404ef8:	68fb      	ldr	r3, [r7, #12]
  404efa:	2b01      	cmp	r3, #1
  404efc:	d01e      	beq.n	404f3c <_write+0x54>
  404efe:	68fb      	ldr	r3, [r7, #12]
  404f00:	2b02      	cmp	r3, #2
  404f02:	d01b      	beq.n	404f3c <_write+0x54>
  404f04:	68fb      	ldr	r3, [r7, #12]
  404f06:	2b03      	cmp	r3, #3
  404f08:	d018      	beq.n	404f3c <_write+0x54>
		return -1;
  404f0a:	f04f 33ff 	mov.w	r3, #4294967295
  404f0e:	e019      	b.n	404f44 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404f10:	4b0e      	ldr	r3, [pc, #56]	; (404f4c <_write+0x64>)
  404f12:	681a      	ldr	r2, [r3, #0]
  404f14:	4b0e      	ldr	r3, [pc, #56]	; (404f50 <_write+0x68>)
  404f16:	6818      	ldr	r0, [r3, #0]
  404f18:	68bb      	ldr	r3, [r7, #8]
  404f1a:	1c59      	adds	r1, r3, #1
  404f1c:	60b9      	str	r1, [r7, #8]
  404f1e:	781b      	ldrb	r3, [r3, #0]
  404f20:	4619      	mov	r1, r3
  404f22:	4790      	blx	r2
  404f24:	4603      	mov	r3, r0
  404f26:	2b00      	cmp	r3, #0
  404f28:	da02      	bge.n	404f30 <_write+0x48>
			return -1;
  404f2a:	f04f 33ff 	mov.w	r3, #4294967295
  404f2e:	e009      	b.n	404f44 <_write+0x5c>
		}
		++nChars;
  404f30:	697b      	ldr	r3, [r7, #20]
  404f32:	3301      	adds	r3, #1
  404f34:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  404f36:	687b      	ldr	r3, [r7, #4]
  404f38:	3b01      	subs	r3, #1
  404f3a:	607b      	str	r3, [r7, #4]
  404f3c:	687b      	ldr	r3, [r7, #4]
  404f3e:	2b00      	cmp	r3, #0
  404f40:	d1e6      	bne.n	404f10 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  404f42:	697b      	ldr	r3, [r7, #20]
}
  404f44:	4618      	mov	r0, r3
  404f46:	3718      	adds	r7, #24
  404f48:	46bd      	mov	sp, r7
  404f4a:	bd80      	pop	{r7, pc}
  404f4c:	2040108c 	.word	0x2040108c
  404f50:	20401090 	.word	0x20401090

00404f54 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  404f54:	b480      	push	{r7}
  404f56:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404f58:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  404f5c:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404f60:	4b09      	ldr	r3, [pc, #36]	; (404f88 <SCB_EnableICache+0x34>)
  404f62:	2200      	movs	r2, #0
  404f64:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404f68:	4a07      	ldr	r2, [pc, #28]	; (404f88 <SCB_EnableICache+0x34>)
  404f6a:	4b07      	ldr	r3, [pc, #28]	; (404f88 <SCB_EnableICache+0x34>)
  404f6c:	695b      	ldr	r3, [r3, #20]
  404f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  404f72:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404f74:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  404f78:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  404f7c:	bf00      	nop
  404f7e:	46bd      	mov	sp, r7
  404f80:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f84:	4770      	bx	lr
  404f86:	bf00      	nop
  404f88:	e000ed00 	.word	0xe000ed00

00404f8c <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  404f8c:	b480      	push	{r7}
  404f8e:	b08b      	sub	sp, #44	; 0x2c
  404f90:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404f92:	4b26      	ldr	r3, [pc, #152]	; (40502c <SCB_EnableDCache+0xa0>)
  404f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  404f98:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  404f9a:	69fb      	ldr	r3, [r7, #28]
  404f9c:	0b5b      	lsrs	r3, r3, #13
  404f9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
  404fa2:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404fa4:	69fb      	ldr	r3, [r7, #28]
  404fa6:	f003 0307 	and.w	r3, r3, #7
  404faa:	3304      	adds	r3, #4
  404fac:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  404fae:	69fb      	ldr	r3, [r7, #28]
  404fb0:	08db      	lsrs	r3, r3, #3
  404fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  404fb6:	617b      	str	r3, [r7, #20]
  404fb8:	697b      	ldr	r3, [r7, #20]
  404fba:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404fbc:	68fb      	ldr	r3, [r7, #12]
  404fbe:	fab3 f383 	clz	r3, r3
  404fc2:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  404fc4:	687b      	ldr	r3, [r7, #4]
  404fc6:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  404fc8:	f003 031f 	and.w	r3, r3, #31
  404fcc:	613b      	str	r3, [r7, #16]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404fce:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  404fd2:	697b      	ldr	r3, [r7, #20]
  404fd4:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  404fd6:	6a3a      	ldr	r2, [r7, #32]
  404fd8:	693b      	ldr	r3, [r7, #16]
  404fda:	fa02 f303 	lsl.w	r3, r2, r3
  404fde:	4619      	mov	r1, r3
  404fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  404fe2:	69bb      	ldr	r3, [r7, #24]
  404fe4:	fa02 f303 	lsl.w	r3, r2, r3
  404fe8:	430b      	orrs	r3, r1
  404fea:	60bb      	str	r3, [r7, #8]
              SCB->DCISW = sw;
  404fec:	4a0f      	ldr	r2, [pc, #60]	; (40502c <SCB_EnableDCache+0xa0>)
  404fee:	68bb      	ldr	r3, [r7, #8]
  404ff0:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  404ff4:	6a3b      	ldr	r3, [r7, #32]
  404ff6:	1e5a      	subs	r2, r3, #1
  404ff8:	623a      	str	r2, [r7, #32]
  404ffa:	2b00      	cmp	r3, #0
  404ffc:	d1eb      	bne.n	404fd6 <SCB_EnableDCache+0x4a>
        } while(sets--);
  404ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405000:	1e5a      	subs	r2, r3, #1
  405002:	627a      	str	r2, [r7, #36]	; 0x24
  405004:	2b00      	cmp	r3, #0
  405006:	d1e4      	bne.n	404fd2 <SCB_EnableDCache+0x46>
  405008:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40500c:	4a07      	ldr	r2, [pc, #28]	; (40502c <SCB_EnableDCache+0xa0>)
  40500e:	4b07      	ldr	r3, [pc, #28]	; (40502c <SCB_EnableDCache+0xa0>)
  405010:	695b      	ldr	r3, [r3, #20]
  405012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  405016:	6153      	str	r3, [r2, #20]
  405018:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40501c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  405020:	bf00      	nop
  405022:	372c      	adds	r7, #44	; 0x2c
  405024:	46bd      	mov	sp, r7
  405026:	f85d 7b04 	ldr.w	r7, [sp], #4
  40502a:	4770      	bx	lr
  40502c:	e000ed00 	.word	0xe000ed00

00405030 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  405030:	b580      	push	{r7, lr}
  405032:	b082      	sub	sp, #8
  405034:	af00      	add	r7, sp, #0
  405036:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  405038:	6878      	ldr	r0, [r7, #4]
  40503a:	4b03      	ldr	r3, [pc, #12]	; (405048 <sysclk_enable_peripheral_clock+0x18>)
  40503c:	4798      	blx	r3
}
  40503e:	bf00      	nop
  405040:	3708      	adds	r7, #8
  405042:	46bd      	mov	sp, r7
  405044:	bd80      	pop	{r7, pc}
  405046:	bf00      	nop
  405048:	00405f71 	.word	0x00405f71

0040504c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40504c:	b580      	push	{r7, lr}
  40504e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  405050:	200a      	movs	r0, #10
  405052:	4b08      	ldr	r3, [pc, #32]	; (405074 <ioport_init+0x28>)
  405054:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  405056:	200b      	movs	r0, #11
  405058:	4b06      	ldr	r3, [pc, #24]	; (405074 <ioport_init+0x28>)
  40505a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  40505c:	200c      	movs	r0, #12
  40505e:	4b05      	ldr	r3, [pc, #20]	; (405074 <ioport_init+0x28>)
  405060:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  405062:	2010      	movs	r0, #16
  405064:	4b03      	ldr	r3, [pc, #12]	; (405074 <ioport_init+0x28>)
  405066:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  405068:	2011      	movs	r0, #17
  40506a:	4b02      	ldr	r3, [pc, #8]	; (405074 <ioport_init+0x28>)
  40506c:	4798      	blx	r3
	arch_ioport_init();
}
  40506e:	bf00      	nop
  405070:	bd80      	pop	{r7, pc}
  405072:	bf00      	nop
  405074:	00405031 	.word	0x00405031

00405078 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  405078:	b480      	push	{r7}
  40507a:	b089      	sub	sp, #36	; 0x24
  40507c:	af00      	add	r7, sp, #0
  40507e:	6078      	str	r0, [r7, #4]
  405080:	687b      	ldr	r3, [r7, #4]
  405082:	61fb      	str	r3, [r7, #28]
  405084:	69fb      	ldr	r3, [r7, #28]
  405086:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  405088:	69bb      	ldr	r3, [r7, #24]
  40508a:	095a      	lsrs	r2, r3, #5
  40508c:	69fb      	ldr	r3, [r7, #28]
  40508e:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  405090:	697b      	ldr	r3, [r7, #20]
  405092:	f003 031f 	and.w	r3, r3, #31
  405096:	2101      	movs	r1, #1
  405098:	fa01 f303 	lsl.w	r3, r1, r3
  40509c:	613a      	str	r2, [r7, #16]
  40509e:	60fb      	str	r3, [r7, #12]
  4050a0:	693b      	ldr	r3, [r7, #16]
  4050a2:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4050a4:	68ba      	ldr	r2, [r7, #8]
  4050a6:	4b06      	ldr	r3, [pc, #24]	; (4050c0 <ioport_disable_pin+0x48>)
  4050a8:	4413      	add	r3, r2
  4050aa:	025b      	lsls	r3, r3, #9
  4050ac:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4050ae:	68fb      	ldr	r3, [r7, #12]
  4050b0:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  4050b2:	bf00      	nop
  4050b4:	3724      	adds	r7, #36	; 0x24
  4050b6:	46bd      	mov	sp, r7
  4050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050bc:	4770      	bx	lr
  4050be:	bf00      	nop
  4050c0:	00200707 	.word	0x00200707

004050c4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4050c4:	b480      	push	{r7}
  4050c6:	b08d      	sub	sp, #52	; 0x34
  4050c8:	af00      	add	r7, sp, #0
  4050ca:	6078      	str	r0, [r7, #4]
  4050cc:	6039      	str	r1, [r7, #0]
  4050ce:	687b      	ldr	r3, [r7, #4]
  4050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4050d2:	683b      	ldr	r3, [r7, #0]
  4050d4:	62bb      	str	r3, [r7, #40]	; 0x28
  4050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4050d8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4050dc:	095a      	lsrs	r2, r3, #5
  4050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4050e0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4050e2:	6a3b      	ldr	r3, [r7, #32]
  4050e4:	f003 031f 	and.w	r3, r3, #31
  4050e8:	2101      	movs	r1, #1
  4050ea:	fa01 f303 	lsl.w	r3, r1, r3
  4050ee:	61fa      	str	r2, [r7, #28]
  4050f0:	61bb      	str	r3, [r7, #24]
  4050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4050f4:	617b      	str	r3, [r7, #20]
  4050f6:	69fb      	ldr	r3, [r7, #28]
  4050f8:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4050fa:	693a      	ldr	r2, [r7, #16]
  4050fc:	4b37      	ldr	r3, [pc, #220]	; (4051dc <ioport_set_pin_mode+0x118>)
  4050fe:	4413      	add	r3, r2
  405100:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  405102:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  405104:	697b      	ldr	r3, [r7, #20]
  405106:	f003 0308 	and.w	r3, r3, #8
  40510a:	2b00      	cmp	r3, #0
  40510c:	d003      	beq.n	405116 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  40510e:	68fb      	ldr	r3, [r7, #12]
  405110:	69ba      	ldr	r2, [r7, #24]
  405112:	665a      	str	r2, [r3, #100]	; 0x64
  405114:	e002      	b.n	40511c <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  405116:	68fb      	ldr	r3, [r7, #12]
  405118:	69ba      	ldr	r2, [r7, #24]
  40511a:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  40511c:	697b      	ldr	r3, [r7, #20]
  40511e:	f003 0310 	and.w	r3, r3, #16
  405122:	2b00      	cmp	r3, #0
  405124:	d004      	beq.n	405130 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  405126:	68fb      	ldr	r3, [r7, #12]
  405128:	69ba      	ldr	r2, [r7, #24]
  40512a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40512e:	e003      	b.n	405138 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  405130:	68fb      	ldr	r3, [r7, #12]
  405132:	69ba      	ldr	r2, [r7, #24]
  405134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  405138:	697b      	ldr	r3, [r7, #20]
  40513a:	f003 0320 	and.w	r3, r3, #32
  40513e:	2b00      	cmp	r3, #0
  405140:	d003      	beq.n	40514a <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  405142:	68fb      	ldr	r3, [r7, #12]
  405144:	69ba      	ldr	r2, [r7, #24]
  405146:	651a      	str	r2, [r3, #80]	; 0x50
  405148:	e002      	b.n	405150 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40514a:	68fb      	ldr	r3, [r7, #12]
  40514c:	69ba      	ldr	r2, [r7, #24]
  40514e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  405150:	697b      	ldr	r3, [r7, #20]
  405152:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  405156:	2b00      	cmp	r3, #0
  405158:	d003      	beq.n	405162 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40515a:	68fb      	ldr	r3, [r7, #12]
  40515c:	69ba      	ldr	r2, [r7, #24]
  40515e:	621a      	str	r2, [r3, #32]
  405160:	e002      	b.n	405168 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  405162:	68fb      	ldr	r3, [r7, #12]
  405164:	69ba      	ldr	r2, [r7, #24]
  405166:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  405168:	697b      	ldr	r3, [r7, #20]
  40516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40516e:	2b00      	cmp	r3, #0
  405170:	d004      	beq.n	40517c <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  405172:	68fb      	ldr	r3, [r7, #12]
  405174:	69ba      	ldr	r2, [r7, #24]
  405176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40517a:	e003      	b.n	405184 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40517c:	68fb      	ldr	r3, [r7, #12]
  40517e:	69ba      	ldr	r2, [r7, #24]
  405180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  405184:	697b      	ldr	r3, [r7, #20]
  405186:	f003 0301 	and.w	r3, r3, #1
  40518a:	2b00      	cmp	r3, #0
  40518c:	d006      	beq.n	40519c <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40518e:	68fb      	ldr	r3, [r7, #12]
  405190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405192:	69bb      	ldr	r3, [r7, #24]
  405194:	431a      	orrs	r2, r3
  405196:	68fb      	ldr	r3, [r7, #12]
  405198:	671a      	str	r2, [r3, #112]	; 0x70
  40519a:	e006      	b.n	4051aa <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40519c:	68fb      	ldr	r3, [r7, #12]
  40519e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4051a0:	69bb      	ldr	r3, [r7, #24]
  4051a2:	43db      	mvns	r3, r3
  4051a4:	401a      	ands	r2, r3
  4051a6:	68fb      	ldr	r3, [r7, #12]
  4051a8:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4051aa:	697b      	ldr	r3, [r7, #20]
  4051ac:	f003 0302 	and.w	r3, r3, #2
  4051b0:	2b00      	cmp	r3, #0
  4051b2:	d006      	beq.n	4051c2 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  4051b4:	68fb      	ldr	r3, [r7, #12]
  4051b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4051b8:	69bb      	ldr	r3, [r7, #24]
  4051ba:	431a      	orrs	r2, r3
  4051bc:	68fb      	ldr	r3, [r7, #12]
  4051be:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4051c0:	e006      	b.n	4051d0 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4051c2:	68fb      	ldr	r3, [r7, #12]
  4051c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4051c6:	69bb      	ldr	r3, [r7, #24]
  4051c8:	43db      	mvns	r3, r3
  4051ca:	401a      	ands	r2, r3
  4051cc:	68fb      	ldr	r3, [r7, #12]
  4051ce:	675a      	str	r2, [r3, #116]	; 0x74
  4051d0:	bf00      	nop
  4051d2:	3734      	adds	r7, #52	; 0x34
  4051d4:	46bd      	mov	sp, r7
  4051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051da:	4770      	bx	lr
  4051dc:	00200707 	.word	0x00200707

004051e0 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4051e0:	b480      	push	{r7}
  4051e2:	b08d      	sub	sp, #52	; 0x34
  4051e4:	af00      	add	r7, sp, #0
  4051e6:	6078      	str	r0, [r7, #4]
  4051e8:	460b      	mov	r3, r1
  4051ea:	70fb      	strb	r3, [r7, #3]
  4051ec:	687b      	ldr	r3, [r7, #4]
  4051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  4051f0:	78fb      	ldrb	r3, [r7, #3]
  4051f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4051f8:	627b      	str	r3, [r7, #36]	; 0x24
  4051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4051fc:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4051fe:	6a3b      	ldr	r3, [r7, #32]
  405200:	095b      	lsrs	r3, r3, #5
  405202:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405204:	69fa      	ldr	r2, [r7, #28]
  405206:	4b17      	ldr	r3, [pc, #92]	; (405264 <ioport_set_pin_dir+0x84>)
  405208:	4413      	add	r3, r2
  40520a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40520c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40520e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  405212:	2b01      	cmp	r3, #1
  405214:	d109      	bne.n	40522a <ioport_set_pin_dir+0x4a>
  405216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405218:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40521a:	697b      	ldr	r3, [r7, #20]
  40521c:	f003 031f 	and.w	r3, r3, #31
  405220:	2201      	movs	r2, #1
  405222:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405224:	69bb      	ldr	r3, [r7, #24]
  405226:	611a      	str	r2, [r3, #16]
  405228:	e00c      	b.n	405244 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40522a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40522e:	2b00      	cmp	r3, #0
  405230:	d108      	bne.n	405244 <ioport_set_pin_dir+0x64>
  405232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405234:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  405236:	693b      	ldr	r3, [r7, #16]
  405238:	f003 031f 	and.w	r3, r3, #31
  40523c:	2201      	movs	r2, #1
  40523e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405240:	69bb      	ldr	r3, [r7, #24]
  405242:	615a      	str	r2, [r3, #20]
  405244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405246:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  405248:	68fb      	ldr	r3, [r7, #12]
  40524a:	f003 031f 	and.w	r3, r3, #31
  40524e:	2201      	movs	r2, #1
  405250:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405252:	69bb      	ldr	r3, [r7, #24]
  405254:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  405258:	bf00      	nop
  40525a:	3734      	adds	r7, #52	; 0x34
  40525c:	46bd      	mov	sp, r7
  40525e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405262:	4770      	bx	lr
  405264:	00200707 	.word	0x00200707

00405268 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  405268:	b480      	push	{r7}
  40526a:	b08b      	sub	sp, #44	; 0x2c
  40526c:	af00      	add	r7, sp, #0
  40526e:	6078      	str	r0, [r7, #4]
  405270:	460b      	mov	r3, r1
  405272:	70fb      	strb	r3, [r7, #3]
  405274:	687b      	ldr	r3, [r7, #4]
  405276:	627b      	str	r3, [r7, #36]	; 0x24
  405278:	78fb      	ldrb	r3, [r7, #3]
  40527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405280:	61fb      	str	r3, [r7, #28]
  405282:	69fb      	ldr	r3, [r7, #28]
  405284:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  405286:	69bb      	ldr	r3, [r7, #24]
  405288:	095b      	lsrs	r3, r3, #5
  40528a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40528c:	697a      	ldr	r2, [r7, #20]
  40528e:	4b10      	ldr	r3, [pc, #64]	; (4052d0 <ioport_set_pin_level+0x68>)
  405290:	4413      	add	r3, r2
  405292:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  405294:	613b      	str	r3, [r7, #16]

	if (level) {
  405296:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40529a:	2b00      	cmp	r3, #0
  40529c:	d009      	beq.n	4052b2 <ioport_set_pin_level+0x4a>
  40529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4052a0:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4052a2:	68fb      	ldr	r3, [r7, #12]
  4052a4:	f003 031f 	and.w	r3, r3, #31
  4052a8:	2201      	movs	r2, #1
  4052aa:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4052ac:	693b      	ldr	r3, [r7, #16]
  4052ae:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4052b0:	e008      	b.n	4052c4 <ioport_set_pin_level+0x5c>
  4052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4052b4:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4052b6:	68bb      	ldr	r3, [r7, #8]
  4052b8:	f003 031f 	and.w	r3, r3, #31
  4052bc:	2201      	movs	r2, #1
  4052be:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4052c0:	693b      	ldr	r3, [r7, #16]
  4052c2:	635a      	str	r2, [r3, #52]	; 0x34
  4052c4:	bf00      	nop
  4052c6:	372c      	adds	r7, #44	; 0x2c
  4052c8:	46bd      	mov	sp, r7
  4052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4052ce:	4770      	bx	lr
  4052d0:	00200707 	.word	0x00200707

004052d4 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4052d4:	b480      	push	{r7}
  4052d6:	b08d      	sub	sp, #52	; 0x34
  4052d8:	af00      	add	r7, sp, #0
  4052da:	6078      	str	r0, [r7, #4]
  4052dc:	460b      	mov	r3, r1
  4052de:	70fb      	strb	r3, [r7, #3]
  4052e0:	687b      	ldr	r3, [r7, #4]
  4052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4052e4:	78fb      	ldrb	r3, [r7, #3]
  4052e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4052ec:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4052f0:	095a      	lsrs	r2, r3, #5
  4052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4052f4:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4052f6:	6a3b      	ldr	r3, [r7, #32]
  4052f8:	f003 031f 	and.w	r3, r3, #31
  4052fc:	2101      	movs	r1, #1
  4052fe:	fa01 f303 	lsl.w	r3, r1, r3
  405302:	61fa      	str	r2, [r7, #28]
  405304:	61bb      	str	r3, [r7, #24]
  405306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40530a:	75fb      	strb	r3, [r7, #23]
  40530c:	69fb      	ldr	r3, [r7, #28]
  40530e:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405310:	693a      	ldr	r2, [r7, #16]
  405312:	4b23      	ldr	r3, [pc, #140]	; (4053a0 <ioport_set_pin_sense_mode+0xcc>)
  405314:	4413      	add	r3, r2
  405316:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  405318:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  40531a:	7dfb      	ldrb	r3, [r7, #23]
  40531c:	3b01      	subs	r3, #1
  40531e:	2b03      	cmp	r3, #3
  405320:	d82e      	bhi.n	405380 <ioport_set_pin_sense_mode+0xac>
  405322:	a201      	add	r2, pc, #4	; (adr r2, 405328 <ioport_set_pin_sense_mode+0x54>)
  405324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405328:	0040535d 	.word	0x0040535d
  40532c:	0040536f 	.word	0x0040536f
  405330:	00405339 	.word	0x00405339
  405334:	0040534b 	.word	0x0040534b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  405338:	68fb      	ldr	r3, [r7, #12]
  40533a:	69ba      	ldr	r2, [r7, #24]
  40533c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  405340:	68fb      	ldr	r3, [r7, #12]
  405342:	69ba      	ldr	r2, [r7, #24]
  405344:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  405348:	e01f      	b.n	40538a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40534a:	68fb      	ldr	r3, [r7, #12]
  40534c:	69ba      	ldr	r2, [r7, #24]
  40534e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  405352:	68fb      	ldr	r3, [r7, #12]
  405354:	69ba      	ldr	r2, [r7, #24]
  405356:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40535a:	e016      	b.n	40538a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  40535c:	68fb      	ldr	r3, [r7, #12]
  40535e:	69ba      	ldr	r2, [r7, #24]
  405360:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  405364:	68fb      	ldr	r3, [r7, #12]
  405366:	69ba      	ldr	r2, [r7, #24]
  405368:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40536c:	e00d      	b.n	40538a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40536e:	68fb      	ldr	r3, [r7, #12]
  405370:	69ba      	ldr	r2, [r7, #24]
  405372:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  405376:	68fb      	ldr	r3, [r7, #12]
  405378:	69ba      	ldr	r2, [r7, #24]
  40537a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40537e:	e004      	b.n	40538a <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  405380:	68fb      	ldr	r3, [r7, #12]
  405382:	69ba      	ldr	r2, [r7, #24]
  405384:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  405388:	e003      	b.n	405392 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  40538a:	68fb      	ldr	r3, [r7, #12]
  40538c:	69ba      	ldr	r2, [r7, #24]
  40538e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  405392:	bf00      	nop
  405394:	3734      	adds	r7, #52	; 0x34
  405396:	46bd      	mov	sp, r7
  405398:	f85d 7b04 	ldr.w	r7, [sp], #4
  40539c:	4770      	bx	lr
  40539e:	bf00      	nop
  4053a0:	00200707 	.word	0x00200707

004053a4 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  4053a4:	b480      	push	{r7}
  4053a6:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4053a8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4053ac:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4053b0:	4a0c      	ldr	r2, [pc, #48]	; (4053e4 <tcm_disable+0x40>)
  4053b2:	4b0c      	ldr	r3, [pc, #48]	; (4053e4 <tcm_disable+0x40>)
  4053b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  4053b8:	f023 0301 	bic.w	r3, r3, #1
  4053bc:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4053c0:	4a08      	ldr	r2, [pc, #32]	; (4053e4 <tcm_disable+0x40>)
  4053c2:	4b08      	ldr	r3, [pc, #32]	; (4053e4 <tcm_disable+0x40>)
  4053c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  4053c8:	f023 0301 	bic.w	r3, r3, #1
  4053cc:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4053d0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4053d4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4053d8:	bf00      	nop
  4053da:	46bd      	mov	sp, r7
  4053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053e0:	4770      	bx	lr
  4053e2:	bf00      	nop
  4053e4:	e000ed00 	.word	0xe000ed00

004053e8 <board_init>:
#endif

void board_init(void)
{
  4053e8:	b580      	push	{r7, lr}
  4053ea:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4053ec:	4b1e      	ldr	r3, [pc, #120]	; (405468 <board_init+0x80>)
  4053ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4053f2:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  4053f4:	4b1d      	ldr	r3, [pc, #116]	; (40546c <board_init+0x84>)
  4053f6:	4798      	blx	r3
	SCB_EnableDCache();
  4053f8:	4b1d      	ldr	r3, [pc, #116]	; (405470 <board_init+0x88>)
  4053fa:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4053fc:	4b1d      	ldr	r3, [pc, #116]	; (405474 <board_init+0x8c>)
  4053fe:	4a1e      	ldr	r2, [pc, #120]	; (405478 <board_init+0x90>)
  405400:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  405402:	4b1c      	ldr	r3, [pc, #112]	; (405474 <board_init+0x8c>)
  405404:	4a1d      	ldr	r2, [pc, #116]	; (40547c <board_init+0x94>)
  405406:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  405408:	4b1d      	ldr	r3, [pc, #116]	; (405480 <board_init+0x98>)
  40540a:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  40540c:	4b1d      	ldr	r3, [pc, #116]	; (405484 <board_init+0x9c>)
  40540e:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  405410:	2101      	movs	r1, #1
  405412:	2048      	movs	r0, #72	; 0x48
  405414:	4b1c      	ldr	r3, [pc, #112]	; (405488 <board_init+0xa0>)
  405416:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  405418:	2101      	movs	r1, #1
  40541a:	2048      	movs	r0, #72	; 0x48
  40541c:	4b1b      	ldr	r3, [pc, #108]	; (40548c <board_init+0xa4>)
  40541e:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  405420:	2100      	movs	r1, #0
  405422:	200b      	movs	r0, #11
  405424:	4b18      	ldr	r3, [pc, #96]	; (405488 <board_init+0xa0>)
  405426:	4798      	blx	r3
  405428:	2188      	movs	r1, #136	; 0x88
  40542a:	200b      	movs	r0, #11
  40542c:	4b18      	ldr	r3, [pc, #96]	; (405490 <board_init+0xa8>)
  40542e:	4798      	blx	r3
  405430:	2102      	movs	r1, #2
  405432:	200b      	movs	r0, #11
  405434:	4b17      	ldr	r3, [pc, #92]	; (405494 <board_init+0xac>)
  405436:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  405438:	2100      	movs	r1, #0
  40543a:	2015      	movs	r0, #21
  40543c:	4b14      	ldr	r3, [pc, #80]	; (405490 <board_init+0xa8>)
  40543e:	4798      	blx	r3
  405440:	2015      	movs	r0, #21
  405442:	4b15      	ldr	r3, [pc, #84]	; (405498 <board_init+0xb0>)
  405444:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  405446:	4a15      	ldr	r2, [pc, #84]	; (40549c <board_init+0xb4>)
  405448:	4b14      	ldr	r3, [pc, #80]	; (40549c <board_init+0xb4>)
  40544a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  40544e:	f043 0310 	orr.w	r3, r3, #16
  405452:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  405456:	2103      	movs	r1, #3
  405458:	2024      	movs	r0, #36	; 0x24
  40545a:	4b0d      	ldr	r3, [pc, #52]	; (405490 <board_init+0xa8>)
  40545c:	4798      	blx	r3
  40545e:	2024      	movs	r0, #36	; 0x24
  405460:	4b0d      	ldr	r3, [pc, #52]	; (405498 <board_init+0xb0>)
  405462:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  405464:	bf00      	nop
  405466:	bd80      	pop	{r7, pc}
  405468:	400e1850 	.word	0x400e1850
  40546c:	00404f55 	.word	0x00404f55
  405470:	00404f8d 	.word	0x00404f8d
  405474:	400e0c00 	.word	0x400e0c00
  405478:	5a00080c 	.word	0x5a00080c
  40547c:	5a00070c 	.word	0x5a00070c
  405480:	004053a5 	.word	0x004053a5
  405484:	0040504d 	.word	0x0040504d
  405488:	004051e1 	.word	0x004051e1
  40548c:	00405269 	.word	0x00405269
  405490:	004050c5 	.word	0x004050c5
  405494:	004052d5 	.word	0x004052d5
  405498:	00405079 	.word	0x00405079
  40549c:	40088000 	.word	0x40088000

004054a0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4054a0:	b480      	push	{r7}
  4054a2:	b085      	sub	sp, #20
  4054a4:	af00      	add	r7, sp, #0
  4054a6:	60f8      	str	r0, [r7, #12]
  4054a8:	60b9      	str	r1, [r7, #8]
  4054aa:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4054ac:	687b      	ldr	r3, [r7, #4]
  4054ae:	2b00      	cmp	r3, #0
  4054b0:	d003      	beq.n	4054ba <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4054b2:	68fb      	ldr	r3, [r7, #12]
  4054b4:	68ba      	ldr	r2, [r7, #8]
  4054b6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4054b8:	e002      	b.n	4054c0 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4054ba:	68fb      	ldr	r3, [r7, #12]
  4054bc:	68ba      	ldr	r2, [r7, #8]
  4054be:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  4054c0:	bf00      	nop
  4054c2:	3714      	adds	r7, #20
  4054c4:	46bd      	mov	sp, r7
  4054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054ca:	4770      	bx	lr

004054cc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4054cc:	b480      	push	{r7}
  4054ce:	b087      	sub	sp, #28
  4054d0:	af00      	add	r7, sp, #0
  4054d2:	60f8      	str	r0, [r7, #12]
  4054d4:	60b9      	str	r1, [r7, #8]
  4054d6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4054d8:	68fb      	ldr	r3, [r7, #12]
  4054da:	687a      	ldr	r2, [r7, #4]
  4054dc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4054de:	68bb      	ldr	r3, [r7, #8]
  4054e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4054e4:	d04a      	beq.n	40557c <pio_set_peripheral+0xb0>
  4054e6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4054ea:	d808      	bhi.n	4054fe <pio_set_peripheral+0x32>
  4054ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4054f0:	d016      	beq.n	405520 <pio_set_peripheral+0x54>
  4054f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4054f6:	d02c      	beq.n	405552 <pio_set_peripheral+0x86>
  4054f8:	2b00      	cmp	r3, #0
  4054fa:	d069      	beq.n	4055d0 <pio_set_peripheral+0x104>
  4054fc:	e064      	b.n	4055c8 <pio_set_peripheral+0xfc>
  4054fe:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405502:	d065      	beq.n	4055d0 <pio_set_peripheral+0x104>
  405504:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405508:	d803      	bhi.n	405512 <pio_set_peripheral+0x46>
  40550a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40550e:	d04a      	beq.n	4055a6 <pio_set_peripheral+0xda>
  405510:	e05a      	b.n	4055c8 <pio_set_peripheral+0xfc>
  405512:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405516:	d05b      	beq.n	4055d0 <pio_set_peripheral+0x104>
  405518:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40551c:	d058      	beq.n	4055d0 <pio_set_peripheral+0x104>
  40551e:	e053      	b.n	4055c8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405520:	68fb      	ldr	r3, [r7, #12]
  405522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405524:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405526:	68fb      	ldr	r3, [r7, #12]
  405528:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40552a:	687b      	ldr	r3, [r7, #4]
  40552c:	43d9      	mvns	r1, r3
  40552e:	697b      	ldr	r3, [r7, #20]
  405530:	400b      	ands	r3, r1
  405532:	401a      	ands	r2, r3
  405534:	68fb      	ldr	r3, [r7, #12]
  405536:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405538:	68fb      	ldr	r3, [r7, #12]
  40553a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40553c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40553e:	68fb      	ldr	r3, [r7, #12]
  405540:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405542:	687b      	ldr	r3, [r7, #4]
  405544:	43d9      	mvns	r1, r3
  405546:	697b      	ldr	r3, [r7, #20]
  405548:	400b      	ands	r3, r1
  40554a:	401a      	ands	r2, r3
  40554c:	68fb      	ldr	r3, [r7, #12]
  40554e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405550:	e03a      	b.n	4055c8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405552:	68fb      	ldr	r3, [r7, #12]
  405554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405556:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405558:	687a      	ldr	r2, [r7, #4]
  40555a:	697b      	ldr	r3, [r7, #20]
  40555c:	431a      	orrs	r2, r3
  40555e:	68fb      	ldr	r3, [r7, #12]
  405560:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405562:	68fb      	ldr	r3, [r7, #12]
  405564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405566:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405568:	68fb      	ldr	r3, [r7, #12]
  40556a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40556c:	687b      	ldr	r3, [r7, #4]
  40556e:	43d9      	mvns	r1, r3
  405570:	697b      	ldr	r3, [r7, #20]
  405572:	400b      	ands	r3, r1
  405574:	401a      	ands	r2, r3
  405576:	68fb      	ldr	r3, [r7, #12]
  405578:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40557a:	e025      	b.n	4055c8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40557c:	68fb      	ldr	r3, [r7, #12]
  40557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405580:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405582:	68fb      	ldr	r3, [r7, #12]
  405584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405586:	687b      	ldr	r3, [r7, #4]
  405588:	43d9      	mvns	r1, r3
  40558a:	697b      	ldr	r3, [r7, #20]
  40558c:	400b      	ands	r3, r1
  40558e:	401a      	ands	r2, r3
  405590:	68fb      	ldr	r3, [r7, #12]
  405592:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405594:	68fb      	ldr	r3, [r7, #12]
  405596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405598:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40559a:	687a      	ldr	r2, [r7, #4]
  40559c:	697b      	ldr	r3, [r7, #20]
  40559e:	431a      	orrs	r2, r3
  4055a0:	68fb      	ldr	r3, [r7, #12]
  4055a2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4055a4:	e010      	b.n	4055c8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4055a6:	68fb      	ldr	r3, [r7, #12]
  4055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4055aa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4055ac:	687a      	ldr	r2, [r7, #4]
  4055ae:	697b      	ldr	r3, [r7, #20]
  4055b0:	431a      	orrs	r2, r3
  4055b2:	68fb      	ldr	r3, [r7, #12]
  4055b4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4055b6:	68fb      	ldr	r3, [r7, #12]
  4055b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4055ba:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4055bc:	687a      	ldr	r2, [r7, #4]
  4055be:	697b      	ldr	r3, [r7, #20]
  4055c0:	431a      	orrs	r2, r3
  4055c2:	68fb      	ldr	r3, [r7, #12]
  4055c4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4055c6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4055c8:	68fb      	ldr	r3, [r7, #12]
  4055ca:	687a      	ldr	r2, [r7, #4]
  4055cc:	605a      	str	r2, [r3, #4]
  4055ce:	e000      	b.n	4055d2 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  4055d0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  4055d2:	371c      	adds	r7, #28
  4055d4:	46bd      	mov	sp, r7
  4055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4055da:	4770      	bx	lr

004055dc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4055dc:	b580      	push	{r7, lr}
  4055de:	b084      	sub	sp, #16
  4055e0:	af00      	add	r7, sp, #0
  4055e2:	60f8      	str	r0, [r7, #12]
  4055e4:	60b9      	str	r1, [r7, #8]
  4055e6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4055e8:	68b9      	ldr	r1, [r7, #8]
  4055ea:	68f8      	ldr	r0, [r7, #12]
  4055ec:	4b19      	ldr	r3, [pc, #100]	; (405654 <pio_set_input+0x78>)
  4055ee:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4055f0:	687b      	ldr	r3, [r7, #4]
  4055f2:	f003 0301 	and.w	r3, r3, #1
  4055f6:	461a      	mov	r2, r3
  4055f8:	68b9      	ldr	r1, [r7, #8]
  4055fa:	68f8      	ldr	r0, [r7, #12]
  4055fc:	4b16      	ldr	r3, [pc, #88]	; (405658 <pio_set_input+0x7c>)
  4055fe:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  405600:	687b      	ldr	r3, [r7, #4]
  405602:	f003 030a 	and.w	r3, r3, #10
  405606:	2b00      	cmp	r3, #0
  405608:	d003      	beq.n	405612 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40560a:	68fb      	ldr	r3, [r7, #12]
  40560c:	68ba      	ldr	r2, [r7, #8]
  40560e:	621a      	str	r2, [r3, #32]
  405610:	e002      	b.n	405618 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  405612:	68fb      	ldr	r3, [r7, #12]
  405614:	68ba      	ldr	r2, [r7, #8]
  405616:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  405618:	687b      	ldr	r3, [r7, #4]
  40561a:	f003 0302 	and.w	r3, r3, #2
  40561e:	2b00      	cmp	r3, #0
  405620:	d004      	beq.n	40562c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  405622:	68fb      	ldr	r3, [r7, #12]
  405624:	68ba      	ldr	r2, [r7, #8]
  405626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40562a:	e008      	b.n	40563e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40562c:	687b      	ldr	r3, [r7, #4]
  40562e:	f003 0308 	and.w	r3, r3, #8
  405632:	2b00      	cmp	r3, #0
  405634:	d003      	beq.n	40563e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  405636:	68fb      	ldr	r3, [r7, #12]
  405638:	68ba      	ldr	r2, [r7, #8]
  40563a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40563e:	68fb      	ldr	r3, [r7, #12]
  405640:	68ba      	ldr	r2, [r7, #8]
  405642:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  405644:	68fb      	ldr	r3, [r7, #12]
  405646:	68ba      	ldr	r2, [r7, #8]
  405648:	601a      	str	r2, [r3, #0]
}
  40564a:	bf00      	nop
  40564c:	3710      	adds	r7, #16
  40564e:	46bd      	mov	sp, r7
  405650:	bd80      	pop	{r7, pc}
  405652:	bf00      	nop
  405654:	00405749 	.word	0x00405749
  405658:	004054a1 	.word	0x004054a1

0040565c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40565c:	b580      	push	{r7, lr}
  40565e:	b084      	sub	sp, #16
  405660:	af00      	add	r7, sp, #0
  405662:	60f8      	str	r0, [r7, #12]
  405664:	60b9      	str	r1, [r7, #8]
  405666:	607a      	str	r2, [r7, #4]
  405668:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40566a:	68b9      	ldr	r1, [r7, #8]
  40566c:	68f8      	ldr	r0, [r7, #12]
  40566e:	4b12      	ldr	r3, [pc, #72]	; (4056b8 <pio_set_output+0x5c>)
  405670:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  405672:	69ba      	ldr	r2, [r7, #24]
  405674:	68b9      	ldr	r1, [r7, #8]
  405676:	68f8      	ldr	r0, [r7, #12]
  405678:	4b10      	ldr	r3, [pc, #64]	; (4056bc <pio_set_output+0x60>)
  40567a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40567c:	683b      	ldr	r3, [r7, #0]
  40567e:	2b00      	cmp	r3, #0
  405680:	d003      	beq.n	40568a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  405682:	68fb      	ldr	r3, [r7, #12]
  405684:	68ba      	ldr	r2, [r7, #8]
  405686:	651a      	str	r2, [r3, #80]	; 0x50
  405688:	e002      	b.n	405690 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40568a:	68fb      	ldr	r3, [r7, #12]
  40568c:	68ba      	ldr	r2, [r7, #8]
  40568e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  405690:	687b      	ldr	r3, [r7, #4]
  405692:	2b00      	cmp	r3, #0
  405694:	d003      	beq.n	40569e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  405696:	68fb      	ldr	r3, [r7, #12]
  405698:	68ba      	ldr	r2, [r7, #8]
  40569a:	631a      	str	r2, [r3, #48]	; 0x30
  40569c:	e002      	b.n	4056a4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40569e:	68fb      	ldr	r3, [r7, #12]
  4056a0:	68ba      	ldr	r2, [r7, #8]
  4056a2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4056a4:	68fb      	ldr	r3, [r7, #12]
  4056a6:	68ba      	ldr	r2, [r7, #8]
  4056a8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4056aa:	68fb      	ldr	r3, [r7, #12]
  4056ac:	68ba      	ldr	r2, [r7, #8]
  4056ae:	601a      	str	r2, [r3, #0]
}
  4056b0:	bf00      	nop
  4056b2:	3710      	adds	r7, #16
  4056b4:	46bd      	mov	sp, r7
  4056b6:	bd80      	pop	{r7, pc}
  4056b8:	00405749 	.word	0x00405749
  4056bc:	004054a1 	.word	0x004054a1

004056c0 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  4056c0:	b480      	push	{r7}
  4056c2:	b085      	sub	sp, #20
  4056c4:	af00      	add	r7, sp, #0
  4056c6:	60f8      	str	r0, [r7, #12]
  4056c8:	60b9      	str	r1, [r7, #8]
  4056ca:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4056cc:	687b      	ldr	r3, [r7, #4]
  4056ce:	f003 0310 	and.w	r3, r3, #16
  4056d2:	2b00      	cmp	r3, #0
  4056d4:	d020      	beq.n	405718 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4056d6:	68fb      	ldr	r3, [r7, #12]
  4056d8:	68ba      	ldr	r2, [r7, #8]
  4056da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4056de:	687b      	ldr	r3, [r7, #4]
  4056e0:	f003 0320 	and.w	r3, r3, #32
  4056e4:	2b00      	cmp	r3, #0
  4056e6:	d004      	beq.n	4056f2 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4056e8:	68fb      	ldr	r3, [r7, #12]
  4056ea:	68ba      	ldr	r2, [r7, #8]
  4056ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4056f0:	e003      	b.n	4056fa <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4056f2:	68fb      	ldr	r3, [r7, #12]
  4056f4:	68ba      	ldr	r2, [r7, #8]
  4056f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4056fa:	687b      	ldr	r3, [r7, #4]
  4056fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405700:	2b00      	cmp	r3, #0
  405702:	d004      	beq.n	40570e <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  405704:	68fb      	ldr	r3, [r7, #12]
  405706:	68ba      	ldr	r2, [r7, #8]
  405708:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40570c:	e008      	b.n	405720 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40570e:	68fb      	ldr	r3, [r7, #12]
  405710:	68ba      	ldr	r2, [r7, #8]
  405712:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  405716:	e003      	b.n	405720 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  405718:	68fb      	ldr	r3, [r7, #12]
  40571a:	68ba      	ldr	r2, [r7, #8]
  40571c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  405720:	bf00      	nop
  405722:	3714      	adds	r7, #20
  405724:	46bd      	mov	sp, r7
  405726:	f85d 7b04 	ldr.w	r7, [sp], #4
  40572a:	4770      	bx	lr

0040572c <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40572c:	b480      	push	{r7}
  40572e:	b083      	sub	sp, #12
  405730:	af00      	add	r7, sp, #0
  405732:	6078      	str	r0, [r7, #4]
  405734:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  405736:	687b      	ldr	r3, [r7, #4]
  405738:	683a      	ldr	r2, [r7, #0]
  40573a:	641a      	str	r2, [r3, #64]	; 0x40
}
  40573c:	bf00      	nop
  40573e:	370c      	adds	r7, #12
  405740:	46bd      	mov	sp, r7
  405742:	f85d 7b04 	ldr.w	r7, [sp], #4
  405746:	4770      	bx	lr

00405748 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  405748:	b480      	push	{r7}
  40574a:	b083      	sub	sp, #12
  40574c:	af00      	add	r7, sp, #0
  40574e:	6078      	str	r0, [r7, #4]
  405750:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  405752:	687b      	ldr	r3, [r7, #4]
  405754:	683a      	ldr	r2, [r7, #0]
  405756:	645a      	str	r2, [r3, #68]	; 0x44
}
  405758:	bf00      	nop
  40575a:	370c      	adds	r7, #12
  40575c:	46bd      	mov	sp, r7
  40575e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405762:	4770      	bx	lr

00405764 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  405764:	b480      	push	{r7}
  405766:	b083      	sub	sp, #12
  405768:	af00      	add	r7, sp, #0
  40576a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40576c:	687b      	ldr	r3, [r7, #4]
  40576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  405770:	4618      	mov	r0, r3
  405772:	370c      	adds	r7, #12
  405774:	46bd      	mov	sp, r7
  405776:	f85d 7b04 	ldr.w	r7, [sp], #4
  40577a:	4770      	bx	lr

0040577c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40577c:	b480      	push	{r7}
  40577e:	b083      	sub	sp, #12
  405780:	af00      	add	r7, sp, #0
  405782:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  405784:	687b      	ldr	r3, [r7, #4]
  405786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  405788:	4618      	mov	r0, r3
  40578a:	370c      	adds	r7, #12
  40578c:	46bd      	mov	sp, r7
  40578e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405792:	4770      	bx	lr

00405794 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  405794:	b590      	push	{r4, r7, lr}
  405796:	b087      	sub	sp, #28
  405798:	af02      	add	r7, sp, #8
  40579a:	6078      	str	r0, [r7, #4]
  40579c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40579e:	6878      	ldr	r0, [r7, #4]
  4057a0:	4b63      	ldr	r3, [pc, #396]	; (405930 <pio_configure_pin+0x19c>)
  4057a2:	4798      	blx	r3
  4057a4:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4057a6:	683b      	ldr	r3, [r7, #0]
  4057a8:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4057ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4057b0:	d067      	beq.n	405882 <pio_configure_pin+0xee>
  4057b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4057b6:	d809      	bhi.n	4057cc <pio_configure_pin+0x38>
  4057b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4057bc:	d02b      	beq.n	405816 <pio_configure_pin+0x82>
  4057be:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4057c2:	d043      	beq.n	40584c <pio_configure_pin+0xb8>
  4057c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4057c8:	d00a      	beq.n	4057e0 <pio_configure_pin+0x4c>
  4057ca:	e0a9      	b.n	405920 <pio_configure_pin+0x18c>
  4057cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4057d0:	d07e      	beq.n	4058d0 <pio_configure_pin+0x13c>
  4057d2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4057d6:	d07b      	beq.n	4058d0 <pio_configure_pin+0x13c>
  4057d8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4057dc:	d06c      	beq.n	4058b8 <pio_configure_pin+0x124>
  4057de:	e09f      	b.n	405920 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4057e0:	687b      	ldr	r3, [r7, #4]
  4057e2:	f003 031f 	and.w	r3, r3, #31
  4057e6:	2201      	movs	r2, #1
  4057e8:	fa02 f303 	lsl.w	r3, r2, r3
  4057ec:	461a      	mov	r2, r3
  4057ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4057f2:	68f8      	ldr	r0, [r7, #12]
  4057f4:	4b4f      	ldr	r3, [pc, #316]	; (405934 <pio_configure_pin+0x1a0>)
  4057f6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4057f8:	687b      	ldr	r3, [r7, #4]
  4057fa:	f003 031f 	and.w	r3, r3, #31
  4057fe:	2201      	movs	r2, #1
  405800:	fa02 f303 	lsl.w	r3, r2, r3
  405804:	4619      	mov	r1, r3
  405806:	683b      	ldr	r3, [r7, #0]
  405808:	f003 0301 	and.w	r3, r3, #1
  40580c:	461a      	mov	r2, r3
  40580e:	68f8      	ldr	r0, [r7, #12]
  405810:	4b49      	ldr	r3, [pc, #292]	; (405938 <pio_configure_pin+0x1a4>)
  405812:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  405814:	e086      	b.n	405924 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  405816:	687b      	ldr	r3, [r7, #4]
  405818:	f003 031f 	and.w	r3, r3, #31
  40581c:	2201      	movs	r2, #1
  40581e:	fa02 f303 	lsl.w	r3, r2, r3
  405822:	461a      	mov	r2, r3
  405824:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405828:	68f8      	ldr	r0, [r7, #12]
  40582a:	4b42      	ldr	r3, [pc, #264]	; (405934 <pio_configure_pin+0x1a0>)
  40582c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40582e:	687b      	ldr	r3, [r7, #4]
  405830:	f003 031f 	and.w	r3, r3, #31
  405834:	2201      	movs	r2, #1
  405836:	fa02 f303 	lsl.w	r3, r2, r3
  40583a:	4619      	mov	r1, r3
  40583c:	683b      	ldr	r3, [r7, #0]
  40583e:	f003 0301 	and.w	r3, r3, #1
  405842:	461a      	mov	r2, r3
  405844:	68f8      	ldr	r0, [r7, #12]
  405846:	4b3c      	ldr	r3, [pc, #240]	; (405938 <pio_configure_pin+0x1a4>)
  405848:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40584a:	e06b      	b.n	405924 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40584c:	687b      	ldr	r3, [r7, #4]
  40584e:	f003 031f 	and.w	r3, r3, #31
  405852:	2201      	movs	r2, #1
  405854:	fa02 f303 	lsl.w	r3, r2, r3
  405858:	461a      	mov	r2, r3
  40585a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40585e:	68f8      	ldr	r0, [r7, #12]
  405860:	4b34      	ldr	r3, [pc, #208]	; (405934 <pio_configure_pin+0x1a0>)
  405862:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  405864:	687b      	ldr	r3, [r7, #4]
  405866:	f003 031f 	and.w	r3, r3, #31
  40586a:	2201      	movs	r2, #1
  40586c:	fa02 f303 	lsl.w	r3, r2, r3
  405870:	4619      	mov	r1, r3
  405872:	683b      	ldr	r3, [r7, #0]
  405874:	f003 0301 	and.w	r3, r3, #1
  405878:	461a      	mov	r2, r3
  40587a:	68f8      	ldr	r0, [r7, #12]
  40587c:	4b2e      	ldr	r3, [pc, #184]	; (405938 <pio_configure_pin+0x1a4>)
  40587e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  405880:	e050      	b.n	405924 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  405882:	687b      	ldr	r3, [r7, #4]
  405884:	f003 031f 	and.w	r3, r3, #31
  405888:	2201      	movs	r2, #1
  40588a:	fa02 f303 	lsl.w	r3, r2, r3
  40588e:	461a      	mov	r2, r3
  405890:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  405894:	68f8      	ldr	r0, [r7, #12]
  405896:	4b27      	ldr	r3, [pc, #156]	; (405934 <pio_configure_pin+0x1a0>)
  405898:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40589a:	687b      	ldr	r3, [r7, #4]
  40589c:	f003 031f 	and.w	r3, r3, #31
  4058a0:	2201      	movs	r2, #1
  4058a2:	fa02 f303 	lsl.w	r3, r2, r3
  4058a6:	4619      	mov	r1, r3
  4058a8:	683b      	ldr	r3, [r7, #0]
  4058aa:	f003 0301 	and.w	r3, r3, #1
  4058ae:	461a      	mov	r2, r3
  4058b0:	68f8      	ldr	r0, [r7, #12]
  4058b2:	4b21      	ldr	r3, [pc, #132]	; (405938 <pio_configure_pin+0x1a4>)
  4058b4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4058b6:	e035      	b.n	405924 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4058b8:	687b      	ldr	r3, [r7, #4]
  4058ba:	f003 031f 	and.w	r3, r3, #31
  4058be:	2201      	movs	r2, #1
  4058c0:	fa02 f303 	lsl.w	r3, r2, r3
  4058c4:	683a      	ldr	r2, [r7, #0]
  4058c6:	4619      	mov	r1, r3
  4058c8:	68f8      	ldr	r0, [r7, #12]
  4058ca:	4b1c      	ldr	r3, [pc, #112]	; (40593c <pio_configure_pin+0x1a8>)
  4058cc:	4798      	blx	r3
		break;
  4058ce:	e029      	b.n	405924 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4058d0:	687b      	ldr	r3, [r7, #4]
  4058d2:	f003 031f 	and.w	r3, r3, #31
  4058d6:	2201      	movs	r2, #1
  4058d8:	fa02 f303 	lsl.w	r3, r2, r3
  4058dc:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4058de:	683b      	ldr	r3, [r7, #0]
  4058e0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4058e4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4058e8:	bf0c      	ite	eq
  4058ea:	2301      	moveq	r3, #1
  4058ec:	2300      	movne	r3, #0
  4058ee:	b2db      	uxtb	r3, r3
  4058f0:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4058f2:	683b      	ldr	r3, [r7, #0]
  4058f4:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4058f8:	2b00      	cmp	r3, #0
  4058fa:	bf14      	ite	ne
  4058fc:	2301      	movne	r3, #1
  4058fe:	2300      	moveq	r3, #0
  405900:	b2db      	uxtb	r3, r3
  405902:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  405904:	683b      	ldr	r3, [r7, #0]
  405906:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40590a:	2b00      	cmp	r3, #0
  40590c:	bf14      	ite	ne
  40590e:	2301      	movne	r3, #1
  405910:	2300      	moveq	r3, #0
  405912:	b2db      	uxtb	r3, r3
  405914:	9300      	str	r3, [sp, #0]
  405916:	4603      	mov	r3, r0
  405918:	68f8      	ldr	r0, [r7, #12]
  40591a:	4c09      	ldr	r4, [pc, #36]	; (405940 <pio_configure_pin+0x1ac>)
  40591c:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40591e:	e001      	b.n	405924 <pio_configure_pin+0x190>

	default:
		return 0;
  405920:	2300      	movs	r3, #0
  405922:	e000      	b.n	405926 <pio_configure_pin+0x192>
	}

	return 1;
  405924:	2301      	movs	r3, #1
}
  405926:	4618      	mov	r0, r3
  405928:	3714      	adds	r7, #20
  40592a:	46bd      	mov	sp, r7
  40592c:	bd90      	pop	{r4, r7, pc}
  40592e:	bf00      	nop
  405930:	00405945 	.word	0x00405945
  405934:	004054cd 	.word	0x004054cd
  405938:	004054a1 	.word	0x004054a1
  40593c:	004055dd 	.word	0x004055dd
  405940:	0040565d 	.word	0x0040565d

00405944 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  405944:	b480      	push	{r7}
  405946:	b085      	sub	sp, #20
  405948:	af00      	add	r7, sp, #0
  40594a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40594c:	687b      	ldr	r3, [r7, #4]
  40594e:	095a      	lsrs	r2, r3, #5
  405950:	4b05      	ldr	r3, [pc, #20]	; (405968 <pio_get_pin_group+0x24>)
  405952:	4413      	add	r3, r2
  405954:	025b      	lsls	r3, r3, #9
  405956:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  405958:	68fb      	ldr	r3, [r7, #12]
}
  40595a:	4618      	mov	r0, r3
  40595c:	3714      	adds	r7, #20
  40595e:	46bd      	mov	sp, r7
  405960:	f85d 7b04 	ldr.w	r7, [sp], #4
  405964:	4770      	bx	lr
  405966:	bf00      	nop
  405968:	00200707 	.word	0x00200707

0040596c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40596c:	b480      	push	{r7}
  40596e:	b083      	sub	sp, #12
  405970:	af00      	add	r7, sp, #0
  405972:	4603      	mov	r3, r0
  405974:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405976:	4909      	ldr	r1, [pc, #36]	; (40599c <NVIC_EnableIRQ+0x30>)
  405978:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40597c:	095b      	lsrs	r3, r3, #5
  40597e:	79fa      	ldrb	r2, [r7, #7]
  405980:	f002 021f 	and.w	r2, r2, #31
  405984:	2001      	movs	r0, #1
  405986:	fa00 f202 	lsl.w	r2, r0, r2
  40598a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40598e:	bf00      	nop
  405990:	370c      	adds	r7, #12
  405992:	46bd      	mov	sp, r7
  405994:	f85d 7b04 	ldr.w	r7, [sp], #4
  405998:	4770      	bx	lr
  40599a:	bf00      	nop
  40599c:	e000e100 	.word	0xe000e100

004059a0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4059a0:	b480      	push	{r7}
  4059a2:	b083      	sub	sp, #12
  4059a4:	af00      	add	r7, sp, #0
  4059a6:	4603      	mov	r3, r0
  4059a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4059aa:	4909      	ldr	r1, [pc, #36]	; (4059d0 <NVIC_DisableIRQ+0x30>)
  4059ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4059b0:	095b      	lsrs	r3, r3, #5
  4059b2:	79fa      	ldrb	r2, [r7, #7]
  4059b4:	f002 021f 	and.w	r2, r2, #31
  4059b8:	2001      	movs	r0, #1
  4059ba:	fa00 f202 	lsl.w	r2, r0, r2
  4059be:	3320      	adds	r3, #32
  4059c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4059c4:	bf00      	nop
  4059c6:	370c      	adds	r7, #12
  4059c8:	46bd      	mov	sp, r7
  4059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059ce:	4770      	bx	lr
  4059d0:	e000e100 	.word	0xe000e100

004059d4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4059d4:	b480      	push	{r7}
  4059d6:	b083      	sub	sp, #12
  4059d8:	af00      	add	r7, sp, #0
  4059da:	4603      	mov	r3, r0
  4059dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4059de:	4909      	ldr	r1, [pc, #36]	; (405a04 <NVIC_ClearPendingIRQ+0x30>)
  4059e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4059e4:	095b      	lsrs	r3, r3, #5
  4059e6:	79fa      	ldrb	r2, [r7, #7]
  4059e8:	f002 021f 	and.w	r2, r2, #31
  4059ec:	2001      	movs	r0, #1
  4059ee:	fa00 f202 	lsl.w	r2, r0, r2
  4059f2:	3360      	adds	r3, #96	; 0x60
  4059f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4059f8:	bf00      	nop
  4059fa:	370c      	adds	r7, #12
  4059fc:	46bd      	mov	sp, r7
  4059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a02:	4770      	bx	lr
  405a04:	e000e100 	.word	0xe000e100

00405a08 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  405a08:	b480      	push	{r7}
  405a0a:	b083      	sub	sp, #12
  405a0c:	af00      	add	r7, sp, #0
  405a0e:	4603      	mov	r3, r0
  405a10:	6039      	str	r1, [r7, #0]
  405a12:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  405a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405a18:	2b00      	cmp	r3, #0
  405a1a:	da0b      	bge.n	405a34 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  405a1c:	490d      	ldr	r1, [pc, #52]	; (405a54 <NVIC_SetPriority+0x4c>)
  405a1e:	79fb      	ldrb	r3, [r7, #7]
  405a20:	f003 030f 	and.w	r3, r3, #15
  405a24:	3b04      	subs	r3, #4
  405a26:	683a      	ldr	r2, [r7, #0]
  405a28:	b2d2      	uxtb	r2, r2
  405a2a:	0152      	lsls	r2, r2, #5
  405a2c:	b2d2      	uxtb	r2, r2
  405a2e:	440b      	add	r3, r1
  405a30:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  405a32:	e009      	b.n	405a48 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405a34:	4908      	ldr	r1, [pc, #32]	; (405a58 <NVIC_SetPriority+0x50>)
  405a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405a3a:	683a      	ldr	r2, [r7, #0]
  405a3c:	b2d2      	uxtb	r2, r2
  405a3e:	0152      	lsls	r2, r2, #5
  405a40:	b2d2      	uxtb	r2, r2
  405a42:	440b      	add	r3, r1
  405a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  405a48:	bf00      	nop
  405a4a:	370c      	adds	r7, #12
  405a4c:	46bd      	mov	sp, r7
  405a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a52:	4770      	bx	lr
  405a54:	e000ed00 	.word	0xe000ed00
  405a58:	e000e100 	.word	0xe000e100

00405a5c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  405a5c:	b580      	push	{r7, lr}
  405a5e:	b084      	sub	sp, #16
  405a60:	af00      	add	r7, sp, #0
  405a62:	6078      	str	r0, [r7, #4]
  405a64:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  405a66:	6878      	ldr	r0, [r7, #4]
  405a68:	4b26      	ldr	r3, [pc, #152]	; (405b04 <pio_handler_process+0xa8>)
  405a6a:	4798      	blx	r3
  405a6c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  405a6e:	6878      	ldr	r0, [r7, #4]
  405a70:	4b25      	ldr	r3, [pc, #148]	; (405b08 <pio_handler_process+0xac>)
  405a72:	4798      	blx	r3
  405a74:	4602      	mov	r2, r0
  405a76:	68fb      	ldr	r3, [r7, #12]
  405a78:	4013      	ands	r3, r2
  405a7a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  405a7c:	68fb      	ldr	r3, [r7, #12]
  405a7e:	2b00      	cmp	r3, #0
  405a80:	d03c      	beq.n	405afc <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  405a82:	2300      	movs	r3, #0
  405a84:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  405a86:	e034      	b.n	405af2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  405a88:	4a20      	ldr	r2, [pc, #128]	; (405b0c <pio_handler_process+0xb0>)
  405a8a:	68bb      	ldr	r3, [r7, #8]
  405a8c:	011b      	lsls	r3, r3, #4
  405a8e:	4413      	add	r3, r2
  405a90:	681a      	ldr	r2, [r3, #0]
  405a92:	683b      	ldr	r3, [r7, #0]
  405a94:	429a      	cmp	r2, r3
  405a96:	d126      	bne.n	405ae6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  405a98:	4a1c      	ldr	r2, [pc, #112]	; (405b0c <pio_handler_process+0xb0>)
  405a9a:	68bb      	ldr	r3, [r7, #8]
  405a9c:	011b      	lsls	r3, r3, #4
  405a9e:	4413      	add	r3, r2
  405aa0:	3304      	adds	r3, #4
  405aa2:	681a      	ldr	r2, [r3, #0]
  405aa4:	68fb      	ldr	r3, [r7, #12]
  405aa6:	4013      	ands	r3, r2
  405aa8:	2b00      	cmp	r3, #0
  405aaa:	d01c      	beq.n	405ae6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  405aac:	4a17      	ldr	r2, [pc, #92]	; (405b0c <pio_handler_process+0xb0>)
  405aae:	68bb      	ldr	r3, [r7, #8]
  405ab0:	011b      	lsls	r3, r3, #4
  405ab2:	4413      	add	r3, r2
  405ab4:	330c      	adds	r3, #12
  405ab6:	681b      	ldr	r3, [r3, #0]
  405ab8:	4914      	ldr	r1, [pc, #80]	; (405b0c <pio_handler_process+0xb0>)
  405aba:	68ba      	ldr	r2, [r7, #8]
  405abc:	0112      	lsls	r2, r2, #4
  405abe:	440a      	add	r2, r1
  405ac0:	6810      	ldr	r0, [r2, #0]
  405ac2:	4912      	ldr	r1, [pc, #72]	; (405b0c <pio_handler_process+0xb0>)
  405ac4:	68ba      	ldr	r2, [r7, #8]
  405ac6:	0112      	lsls	r2, r2, #4
  405ac8:	440a      	add	r2, r1
  405aca:	3204      	adds	r2, #4
  405acc:	6812      	ldr	r2, [r2, #0]
  405ace:	4611      	mov	r1, r2
  405ad0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  405ad2:	4a0e      	ldr	r2, [pc, #56]	; (405b0c <pio_handler_process+0xb0>)
  405ad4:	68bb      	ldr	r3, [r7, #8]
  405ad6:	011b      	lsls	r3, r3, #4
  405ad8:	4413      	add	r3, r2
  405ada:	3304      	adds	r3, #4
  405adc:	681b      	ldr	r3, [r3, #0]
  405ade:	43db      	mvns	r3, r3
  405ae0:	68fa      	ldr	r2, [r7, #12]
  405ae2:	4013      	ands	r3, r2
  405ae4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  405ae6:	68bb      	ldr	r3, [r7, #8]
  405ae8:	3301      	adds	r3, #1
  405aea:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  405aec:	68bb      	ldr	r3, [r7, #8]
  405aee:	2b06      	cmp	r3, #6
  405af0:	d803      	bhi.n	405afa <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  405af2:	68fb      	ldr	r3, [r7, #12]
  405af4:	2b00      	cmp	r3, #0
  405af6:	d1c7      	bne.n	405a88 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  405af8:	e000      	b.n	405afc <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  405afa:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  405afc:	bf00      	nop
  405afe:	3710      	adds	r7, #16
  405b00:	46bd      	mov	sp, r7
  405b02:	bd80      	pop	{r7, pc}
  405b04:	00405765 	.word	0x00405765
  405b08:	0040577d 	.word	0x0040577d
  405b0c:	20400994 	.word	0x20400994

00405b10 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  405b10:	b580      	push	{r7, lr}
  405b12:	b086      	sub	sp, #24
  405b14:	af00      	add	r7, sp, #0
  405b16:	60f8      	str	r0, [r7, #12]
  405b18:	60b9      	str	r1, [r7, #8]
  405b1a:	607a      	str	r2, [r7, #4]
  405b1c:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  405b1e:	4b21      	ldr	r3, [pc, #132]	; (405ba4 <pio_handler_set+0x94>)
  405b20:	681b      	ldr	r3, [r3, #0]
  405b22:	2b06      	cmp	r3, #6
  405b24:	d901      	bls.n	405b2a <pio_handler_set+0x1a>
		return 1;
  405b26:	2301      	movs	r3, #1
  405b28:	e038      	b.n	405b9c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  405b2a:	2300      	movs	r3, #0
  405b2c:	75fb      	strb	r3, [r7, #23]
  405b2e:	e011      	b.n	405b54 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  405b30:	7dfb      	ldrb	r3, [r7, #23]
  405b32:	011b      	lsls	r3, r3, #4
  405b34:	4a1c      	ldr	r2, [pc, #112]	; (405ba8 <pio_handler_set+0x98>)
  405b36:	4413      	add	r3, r2
  405b38:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  405b3a:	693b      	ldr	r3, [r7, #16]
  405b3c:	681a      	ldr	r2, [r3, #0]
  405b3e:	68bb      	ldr	r3, [r7, #8]
  405b40:	429a      	cmp	r2, r3
  405b42:	d104      	bne.n	405b4e <pio_handler_set+0x3e>
  405b44:	693b      	ldr	r3, [r7, #16]
  405b46:	685a      	ldr	r2, [r3, #4]
  405b48:	687b      	ldr	r3, [r7, #4]
  405b4a:	429a      	cmp	r2, r3
  405b4c:	d008      	beq.n	405b60 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  405b4e:	7dfb      	ldrb	r3, [r7, #23]
  405b50:	3301      	adds	r3, #1
  405b52:	75fb      	strb	r3, [r7, #23]
  405b54:	7dfa      	ldrb	r2, [r7, #23]
  405b56:	4b13      	ldr	r3, [pc, #76]	; (405ba4 <pio_handler_set+0x94>)
  405b58:	681b      	ldr	r3, [r3, #0]
  405b5a:	429a      	cmp	r2, r3
  405b5c:	d9e8      	bls.n	405b30 <pio_handler_set+0x20>
  405b5e:	e000      	b.n	405b62 <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  405b60:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  405b62:	693b      	ldr	r3, [r7, #16]
  405b64:	68ba      	ldr	r2, [r7, #8]
  405b66:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  405b68:	693b      	ldr	r3, [r7, #16]
  405b6a:	687a      	ldr	r2, [r7, #4]
  405b6c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  405b6e:	693b      	ldr	r3, [r7, #16]
  405b70:	683a      	ldr	r2, [r7, #0]
  405b72:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  405b74:	693b      	ldr	r3, [r7, #16]
  405b76:	6a3a      	ldr	r2, [r7, #32]
  405b78:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  405b7a:	7dfa      	ldrb	r2, [r7, #23]
  405b7c:	4b09      	ldr	r3, [pc, #36]	; (405ba4 <pio_handler_set+0x94>)
  405b7e:	681b      	ldr	r3, [r3, #0]
  405b80:	3301      	adds	r3, #1
  405b82:	429a      	cmp	r2, r3
  405b84:	d104      	bne.n	405b90 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  405b86:	4b07      	ldr	r3, [pc, #28]	; (405ba4 <pio_handler_set+0x94>)
  405b88:	681b      	ldr	r3, [r3, #0]
  405b8a:	3301      	adds	r3, #1
  405b8c:	4a05      	ldr	r2, [pc, #20]	; (405ba4 <pio_handler_set+0x94>)
  405b8e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  405b90:	683a      	ldr	r2, [r7, #0]
  405b92:	6879      	ldr	r1, [r7, #4]
  405b94:	68f8      	ldr	r0, [r7, #12]
  405b96:	4b05      	ldr	r3, [pc, #20]	; (405bac <pio_handler_set+0x9c>)
  405b98:	4798      	blx	r3

	return 0;
  405b9a:	2300      	movs	r3, #0
}
  405b9c:	4618      	mov	r0, r3
  405b9e:	3718      	adds	r7, #24
  405ba0:	46bd      	mov	sp, r7
  405ba2:	bd80      	pop	{r7, pc}
  405ba4:	20400a04 	.word	0x20400a04
  405ba8:	20400994 	.word	0x20400994
  405bac:	004056c1 	.word	0x004056c1

00405bb0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  405bb0:	b580      	push	{r7, lr}
  405bb2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  405bb4:	210a      	movs	r1, #10
  405bb6:	4802      	ldr	r0, [pc, #8]	; (405bc0 <PIOA_Handler+0x10>)
  405bb8:	4b02      	ldr	r3, [pc, #8]	; (405bc4 <PIOA_Handler+0x14>)
  405bba:	4798      	blx	r3
}
  405bbc:	bf00      	nop
  405bbe:	bd80      	pop	{r7, pc}
  405bc0:	400e0e00 	.word	0x400e0e00
  405bc4:	00405a5d 	.word	0x00405a5d

00405bc8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  405bc8:	b580      	push	{r7, lr}
  405bca:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  405bcc:	210b      	movs	r1, #11
  405bce:	4802      	ldr	r0, [pc, #8]	; (405bd8 <PIOB_Handler+0x10>)
  405bd0:	4b02      	ldr	r3, [pc, #8]	; (405bdc <PIOB_Handler+0x14>)
  405bd2:	4798      	blx	r3
}
  405bd4:	bf00      	nop
  405bd6:	bd80      	pop	{r7, pc}
  405bd8:	400e1000 	.word	0x400e1000
  405bdc:	00405a5d 	.word	0x00405a5d

00405be0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  405be0:	b580      	push	{r7, lr}
  405be2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  405be4:	210c      	movs	r1, #12
  405be6:	4802      	ldr	r0, [pc, #8]	; (405bf0 <PIOC_Handler+0x10>)
  405be8:	4b02      	ldr	r3, [pc, #8]	; (405bf4 <PIOC_Handler+0x14>)
  405bea:	4798      	blx	r3
}
  405bec:	bf00      	nop
  405bee:	bd80      	pop	{r7, pc}
  405bf0:	400e1200 	.word	0x400e1200
  405bf4:	00405a5d 	.word	0x00405a5d

00405bf8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  405bf8:	b580      	push	{r7, lr}
  405bfa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  405bfc:	2110      	movs	r1, #16
  405bfe:	4802      	ldr	r0, [pc, #8]	; (405c08 <PIOD_Handler+0x10>)
  405c00:	4b02      	ldr	r3, [pc, #8]	; (405c0c <PIOD_Handler+0x14>)
  405c02:	4798      	blx	r3
}
  405c04:	bf00      	nop
  405c06:	bd80      	pop	{r7, pc}
  405c08:	400e1400 	.word	0x400e1400
  405c0c:	00405a5d 	.word	0x00405a5d

00405c10 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  405c10:	b580      	push	{r7, lr}
  405c12:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  405c14:	2111      	movs	r1, #17
  405c16:	4802      	ldr	r0, [pc, #8]	; (405c20 <PIOE_Handler+0x10>)
  405c18:	4b02      	ldr	r3, [pc, #8]	; (405c24 <PIOE_Handler+0x14>)
  405c1a:	4798      	blx	r3
}
  405c1c:	bf00      	nop
  405c1e:	bd80      	pop	{r7, pc}
  405c20:	400e1600 	.word	0x400e1600
  405c24:	00405a5d 	.word	0x00405a5d

00405c28 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  405c28:	b580      	push	{r7, lr}
  405c2a:	b086      	sub	sp, #24
  405c2c:	af00      	add	r7, sp, #0
  405c2e:	60f8      	str	r0, [r7, #12]
  405c30:	460b      	mov	r3, r1
  405c32:	607a      	str	r2, [r7, #4]
  405c34:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  405c36:	2300      	movs	r3, #0
  405c38:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  405c3a:	68f8      	ldr	r0, [r7, #12]
  405c3c:	4b13      	ldr	r3, [pc, #76]	; (405c8c <pio_handler_set_priority+0x64>)
  405c3e:	4798      	blx	r3
  405c40:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  405c42:	f04f 31ff 	mov.w	r1, #4294967295
  405c46:	68f8      	ldr	r0, [r7, #12]
  405c48:	4b11      	ldr	r3, [pc, #68]	; (405c90 <pio_handler_set_priority+0x68>)
  405c4a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  405c4c:	68f8      	ldr	r0, [r7, #12]
  405c4e:	4b11      	ldr	r3, [pc, #68]	; (405c94 <pio_handler_set_priority+0x6c>)
  405c50:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  405c52:	f997 300b 	ldrsb.w	r3, [r7, #11]
  405c56:	4618      	mov	r0, r3
  405c58:	4b0f      	ldr	r3, [pc, #60]	; (405c98 <pio_handler_set_priority+0x70>)
  405c5a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  405c5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
  405c60:	4618      	mov	r0, r3
  405c62:	4b0e      	ldr	r3, [pc, #56]	; (405c9c <pio_handler_set_priority+0x74>)
  405c64:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  405c66:	f997 300b 	ldrsb.w	r3, [r7, #11]
  405c6a:	6879      	ldr	r1, [r7, #4]
  405c6c:	4618      	mov	r0, r3
  405c6e:	4b0c      	ldr	r3, [pc, #48]	; (405ca0 <pio_handler_set_priority+0x78>)
  405c70:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  405c72:	f997 300b 	ldrsb.w	r3, [r7, #11]
  405c76:	4618      	mov	r0, r3
  405c78:	4b0a      	ldr	r3, [pc, #40]	; (405ca4 <pio_handler_set_priority+0x7c>)
  405c7a:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  405c7c:	6979      	ldr	r1, [r7, #20]
  405c7e:	68f8      	ldr	r0, [r7, #12]
  405c80:	4b09      	ldr	r3, [pc, #36]	; (405ca8 <pio_handler_set_priority+0x80>)
  405c82:	4798      	blx	r3
}
  405c84:	bf00      	nop
  405c86:	3718      	adds	r7, #24
  405c88:	46bd      	mov	sp, r7
  405c8a:	bd80      	pop	{r7, pc}
  405c8c:	0040577d 	.word	0x0040577d
  405c90:	00405749 	.word	0x00405749
  405c94:	00405765 	.word	0x00405765
  405c98:	004059a1 	.word	0x004059a1
  405c9c:	004059d5 	.word	0x004059d5
  405ca0:	00405a09 	.word	0x00405a09
  405ca4:	0040596d 	.word	0x0040596d
  405ca8:	0040572d 	.word	0x0040572d

00405cac <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  405cac:	b480      	push	{r7}
  405cae:	b083      	sub	sp, #12
  405cb0:	af00      	add	r7, sp, #0
  405cb2:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  405cb4:	687b      	ldr	r3, [r7, #4]
  405cb6:	3b01      	subs	r3, #1
  405cb8:	2b03      	cmp	r3, #3
  405cba:	d81a      	bhi.n	405cf2 <pmc_mck_set_division+0x46>
  405cbc:	a201      	add	r2, pc, #4	; (adr r2, 405cc4 <pmc_mck_set_division+0x18>)
  405cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405cc2:	bf00      	nop
  405cc4:	00405cd5 	.word	0x00405cd5
  405cc8:	00405cdb 	.word	0x00405cdb
  405ccc:	00405ce3 	.word	0x00405ce3
  405cd0:	00405ceb 	.word	0x00405ceb
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  405cd4:	2300      	movs	r3, #0
  405cd6:	607b      	str	r3, [r7, #4]
			break;
  405cd8:	e00e      	b.n	405cf8 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  405cda:	f44f 7380 	mov.w	r3, #256	; 0x100
  405cde:	607b      	str	r3, [r7, #4]
			break;
  405ce0:	e00a      	b.n	405cf8 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  405ce2:	f44f 7340 	mov.w	r3, #768	; 0x300
  405ce6:	607b      	str	r3, [r7, #4]
			break;
  405ce8:	e006      	b.n	405cf8 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  405cea:	f44f 7300 	mov.w	r3, #512	; 0x200
  405cee:	607b      	str	r3, [r7, #4]
			break;
  405cf0:	e002      	b.n	405cf8 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  405cf2:	2300      	movs	r3, #0
  405cf4:	607b      	str	r3, [r7, #4]
			break;
  405cf6:	bf00      	nop
	}
	PMC->PMC_MCKR =
  405cf8:	490a      	ldr	r1, [pc, #40]	; (405d24 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  405cfa:	4b0a      	ldr	r3, [pc, #40]	; (405d24 <pmc_mck_set_division+0x78>)
  405cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405cfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  405d02:	687b      	ldr	r3, [r7, #4]
  405d04:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  405d06:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  405d08:	bf00      	nop
  405d0a:	4b06      	ldr	r3, [pc, #24]	; (405d24 <pmc_mck_set_division+0x78>)
  405d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405d0e:	f003 0308 	and.w	r3, r3, #8
  405d12:	2b00      	cmp	r3, #0
  405d14:	d0f9      	beq.n	405d0a <pmc_mck_set_division+0x5e>
}
  405d16:	bf00      	nop
  405d18:	370c      	adds	r7, #12
  405d1a:	46bd      	mov	sp, r7
  405d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d20:	4770      	bx	lr
  405d22:	bf00      	nop
  405d24:	400e0600 	.word	0x400e0600

00405d28 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  405d28:	b480      	push	{r7}
  405d2a:	b085      	sub	sp, #20
  405d2c:	af00      	add	r7, sp, #0
  405d2e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  405d30:	491d      	ldr	r1, [pc, #116]	; (405da8 <pmc_switch_mck_to_pllack+0x80>)
  405d32:	4b1d      	ldr	r3, [pc, #116]	; (405da8 <pmc_switch_mck_to_pllack+0x80>)
  405d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  405d3a:	687b      	ldr	r3, [r7, #4]
  405d3c:	4313      	orrs	r3, r2
  405d3e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405d44:	60fb      	str	r3, [r7, #12]
  405d46:	e007      	b.n	405d58 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405d48:	68fb      	ldr	r3, [r7, #12]
  405d4a:	2b00      	cmp	r3, #0
  405d4c:	d101      	bne.n	405d52 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  405d4e:	2301      	movs	r3, #1
  405d50:	e023      	b.n	405d9a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  405d52:	68fb      	ldr	r3, [r7, #12]
  405d54:	3b01      	subs	r3, #1
  405d56:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405d58:	4b13      	ldr	r3, [pc, #76]	; (405da8 <pmc_switch_mck_to_pllack+0x80>)
  405d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405d5c:	f003 0308 	and.w	r3, r3, #8
  405d60:	2b00      	cmp	r3, #0
  405d62:	d0f1      	beq.n	405d48 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  405d64:	4a10      	ldr	r2, [pc, #64]	; (405da8 <pmc_switch_mck_to_pllack+0x80>)
  405d66:	4b10      	ldr	r3, [pc, #64]	; (405da8 <pmc_switch_mck_to_pllack+0x80>)
  405d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405d6a:	f023 0303 	bic.w	r3, r3, #3
  405d6e:	f043 0302 	orr.w	r3, r3, #2
  405d72:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405d78:	60fb      	str	r3, [r7, #12]
  405d7a:	e007      	b.n	405d8c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405d7c:	68fb      	ldr	r3, [r7, #12]
  405d7e:	2b00      	cmp	r3, #0
  405d80:	d101      	bne.n	405d86 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  405d82:	2301      	movs	r3, #1
  405d84:	e009      	b.n	405d9a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  405d86:	68fb      	ldr	r3, [r7, #12]
  405d88:	3b01      	subs	r3, #1
  405d8a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405d8c:	4b06      	ldr	r3, [pc, #24]	; (405da8 <pmc_switch_mck_to_pllack+0x80>)
  405d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405d90:	f003 0308 	and.w	r3, r3, #8
  405d94:	2b00      	cmp	r3, #0
  405d96:	d0f1      	beq.n	405d7c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  405d98:	2300      	movs	r3, #0
}
  405d9a:	4618      	mov	r0, r3
  405d9c:	3714      	adds	r7, #20
  405d9e:	46bd      	mov	sp, r7
  405da0:	f85d 7b04 	ldr.w	r7, [sp], #4
  405da4:	4770      	bx	lr
  405da6:	bf00      	nop
  405da8:	400e0600 	.word	0x400e0600

00405dac <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  405dac:	b480      	push	{r7}
  405dae:	b083      	sub	sp, #12
  405db0:	af00      	add	r7, sp, #0
  405db2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  405db4:	687b      	ldr	r3, [r7, #4]
  405db6:	2b01      	cmp	r3, #1
  405db8:	d105      	bne.n	405dc6 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  405dba:	4907      	ldr	r1, [pc, #28]	; (405dd8 <pmc_switch_sclk_to_32kxtal+0x2c>)
  405dbc:	4b06      	ldr	r3, [pc, #24]	; (405dd8 <pmc_switch_sclk_to_32kxtal+0x2c>)
  405dbe:	689a      	ldr	r2, [r3, #8]
  405dc0:	4b06      	ldr	r3, [pc, #24]	; (405ddc <pmc_switch_sclk_to_32kxtal+0x30>)
  405dc2:	4313      	orrs	r3, r2
  405dc4:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  405dc6:	4b04      	ldr	r3, [pc, #16]	; (405dd8 <pmc_switch_sclk_to_32kxtal+0x2c>)
  405dc8:	4a05      	ldr	r2, [pc, #20]	; (405de0 <pmc_switch_sclk_to_32kxtal+0x34>)
  405dca:	601a      	str	r2, [r3, #0]
}
  405dcc:	bf00      	nop
  405dce:	370c      	adds	r7, #12
  405dd0:	46bd      	mov	sp, r7
  405dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405dd6:	4770      	bx	lr
  405dd8:	400e1810 	.word	0x400e1810
  405ddc:	a5100000 	.word	0xa5100000
  405de0:	a5000008 	.word	0xa5000008

00405de4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  405de4:	b480      	push	{r7}
  405de6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  405de8:	4b09      	ldr	r3, [pc, #36]	; (405e10 <pmc_osc_is_ready_32kxtal+0x2c>)
  405dea:	695b      	ldr	r3, [r3, #20]
  405dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  405df0:	2b00      	cmp	r3, #0
  405df2:	d007      	beq.n	405e04 <pmc_osc_is_ready_32kxtal+0x20>
  405df4:	4b07      	ldr	r3, [pc, #28]	; (405e14 <pmc_osc_is_ready_32kxtal+0x30>)
  405df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405dfc:	2b00      	cmp	r3, #0
  405dfe:	d001      	beq.n	405e04 <pmc_osc_is_ready_32kxtal+0x20>
  405e00:	2301      	movs	r3, #1
  405e02:	e000      	b.n	405e06 <pmc_osc_is_ready_32kxtal+0x22>
  405e04:	2300      	movs	r3, #0
}
  405e06:	4618      	mov	r0, r3
  405e08:	46bd      	mov	sp, r7
  405e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e0e:	4770      	bx	lr
  405e10:	400e1810 	.word	0x400e1810
  405e14:	400e0600 	.word	0x400e0600

00405e18 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  405e18:	b480      	push	{r7}
  405e1a:	b083      	sub	sp, #12
  405e1c:	af00      	add	r7, sp, #0
  405e1e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  405e20:	4915      	ldr	r1, [pc, #84]	; (405e78 <pmc_switch_mainck_to_fastrc+0x60>)
  405e22:	4b15      	ldr	r3, [pc, #84]	; (405e78 <pmc_switch_mainck_to_fastrc+0x60>)
  405e24:	6a1a      	ldr	r2, [r3, #32]
  405e26:	4b15      	ldr	r3, [pc, #84]	; (405e7c <pmc_switch_mainck_to_fastrc+0x64>)
  405e28:	4313      	orrs	r3, r2
  405e2a:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  405e2c:	bf00      	nop
  405e2e:	4b12      	ldr	r3, [pc, #72]	; (405e78 <pmc_switch_mainck_to_fastrc+0x60>)
  405e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  405e36:	2b00      	cmp	r3, #0
  405e38:	d0f9      	beq.n	405e2e <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  405e3a:	490f      	ldr	r1, [pc, #60]	; (405e78 <pmc_switch_mainck_to_fastrc+0x60>)
  405e3c:	4b0e      	ldr	r3, [pc, #56]	; (405e78 <pmc_switch_mainck_to_fastrc+0x60>)
  405e3e:	6a1a      	ldr	r2, [r3, #32]
  405e40:	4b0f      	ldr	r3, [pc, #60]	; (405e80 <pmc_switch_mainck_to_fastrc+0x68>)
  405e42:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  405e44:	687a      	ldr	r2, [r7, #4]
  405e46:	4313      	orrs	r3, r2
  405e48:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  405e4c:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  405e4e:	bf00      	nop
  405e50:	4b09      	ldr	r3, [pc, #36]	; (405e78 <pmc_switch_mainck_to_fastrc+0x60>)
  405e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  405e58:	2b00      	cmp	r3, #0
  405e5a:	d0f9      	beq.n	405e50 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  405e5c:	4906      	ldr	r1, [pc, #24]	; (405e78 <pmc_switch_mainck_to_fastrc+0x60>)
  405e5e:	4b06      	ldr	r3, [pc, #24]	; (405e78 <pmc_switch_mainck_to_fastrc+0x60>)
  405e60:	6a1a      	ldr	r2, [r3, #32]
  405e62:	4b08      	ldr	r3, [pc, #32]	; (405e84 <pmc_switch_mainck_to_fastrc+0x6c>)
  405e64:	4013      	ands	r3, r2
  405e66:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  405e6a:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  405e6c:	bf00      	nop
  405e6e:	370c      	adds	r7, #12
  405e70:	46bd      	mov	sp, r7
  405e72:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e76:	4770      	bx	lr
  405e78:	400e0600 	.word	0x400e0600
  405e7c:	00370008 	.word	0x00370008
  405e80:	ffc8ff8f 	.word	0xffc8ff8f
  405e84:	fec8ffff 	.word	0xfec8ffff

00405e88 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  405e88:	b480      	push	{r7}
  405e8a:	b083      	sub	sp, #12
  405e8c:	af00      	add	r7, sp, #0
  405e8e:	6078      	str	r0, [r7, #4]
  405e90:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  405e92:	687b      	ldr	r3, [r7, #4]
  405e94:	2b00      	cmp	r3, #0
  405e96:	d008      	beq.n	405eaa <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405e98:	4913      	ldr	r1, [pc, #76]	; (405ee8 <pmc_switch_mainck_to_xtal+0x60>)
  405e9a:	4b13      	ldr	r3, [pc, #76]	; (405ee8 <pmc_switch_mainck_to_xtal+0x60>)
  405e9c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  405e9e:	4a13      	ldr	r2, [pc, #76]	; (405eec <pmc_switch_mainck_to_xtal+0x64>)
  405ea0:	401a      	ands	r2, r3
  405ea2:	4b13      	ldr	r3, [pc, #76]	; (405ef0 <pmc_switch_mainck_to_xtal+0x68>)
  405ea4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405ea6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  405ea8:	e018      	b.n	405edc <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405eaa:	490f      	ldr	r1, [pc, #60]	; (405ee8 <pmc_switch_mainck_to_xtal+0x60>)
  405eac:	4b0e      	ldr	r3, [pc, #56]	; (405ee8 <pmc_switch_mainck_to_xtal+0x60>)
  405eae:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405eb0:	4b10      	ldr	r3, [pc, #64]	; (405ef4 <pmc_switch_mainck_to_xtal+0x6c>)
  405eb2:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  405eb4:	683a      	ldr	r2, [r7, #0]
  405eb6:	0212      	lsls	r2, r2, #8
  405eb8:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405eba:	431a      	orrs	r2, r3
  405ebc:	4b0e      	ldr	r3, [pc, #56]	; (405ef8 <pmc_switch_mainck_to_xtal+0x70>)
  405ebe:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405ec0:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  405ec2:	bf00      	nop
  405ec4:	4b08      	ldr	r3, [pc, #32]	; (405ee8 <pmc_switch_mainck_to_xtal+0x60>)
  405ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405ec8:	f003 0301 	and.w	r3, r3, #1
  405ecc:	2b00      	cmp	r3, #0
  405ece:	d0f9      	beq.n	405ec4 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  405ed0:	4905      	ldr	r1, [pc, #20]	; (405ee8 <pmc_switch_mainck_to_xtal+0x60>)
  405ed2:	4b05      	ldr	r3, [pc, #20]	; (405ee8 <pmc_switch_mainck_to_xtal+0x60>)
  405ed4:	6a1a      	ldr	r2, [r3, #32]
  405ed6:	4b09      	ldr	r3, [pc, #36]	; (405efc <pmc_switch_mainck_to_xtal+0x74>)
  405ed8:	4313      	orrs	r3, r2
  405eda:	620b      	str	r3, [r1, #32]
	}
}
  405edc:	bf00      	nop
  405ede:	370c      	adds	r7, #12
  405ee0:	46bd      	mov	sp, r7
  405ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ee6:	4770      	bx	lr
  405ee8:	400e0600 	.word	0x400e0600
  405eec:	fec8fffc 	.word	0xfec8fffc
  405ef0:	01370002 	.word	0x01370002
  405ef4:	ffc8fffc 	.word	0xffc8fffc
  405ef8:	00370001 	.word	0x00370001
  405efc:	01370000 	.word	0x01370000

00405f00 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  405f00:	b480      	push	{r7}
  405f02:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  405f04:	4b04      	ldr	r3, [pc, #16]	; (405f18 <pmc_osc_is_ready_mainck+0x18>)
  405f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  405f0c:	4618      	mov	r0, r3
  405f0e:	46bd      	mov	sp, r7
  405f10:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f14:	4770      	bx	lr
  405f16:	bf00      	nop
  405f18:	400e0600 	.word	0x400e0600

00405f1c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  405f1c:	b480      	push	{r7}
  405f1e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  405f20:	4b04      	ldr	r3, [pc, #16]	; (405f34 <pmc_disable_pllack+0x18>)
  405f22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  405f26:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  405f28:	bf00      	nop
  405f2a:	46bd      	mov	sp, r7
  405f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f30:	4770      	bx	lr
  405f32:	bf00      	nop
  405f34:	400e0600 	.word	0x400e0600

00405f38 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  405f38:	b480      	push	{r7}
  405f3a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  405f3c:	4b04      	ldr	r3, [pc, #16]	; (405f50 <pmc_is_locked_pllack+0x18>)
  405f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405f40:	f003 0302 	and.w	r3, r3, #2
}
  405f44:	4618      	mov	r0, r3
  405f46:	46bd      	mov	sp, r7
  405f48:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f4c:	4770      	bx	lr
  405f4e:	bf00      	nop
  405f50:	400e0600 	.word	0x400e0600

00405f54 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  405f54:	b480      	push	{r7}
  405f56:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  405f58:	4b04      	ldr	r3, [pc, #16]	; (405f6c <pmc_is_locked_upll+0x18>)
  405f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  405f60:	4618      	mov	r0, r3
  405f62:	46bd      	mov	sp, r7
  405f64:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f68:	4770      	bx	lr
  405f6a:	bf00      	nop
  405f6c:	400e0600 	.word	0x400e0600

00405f70 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  405f70:	b480      	push	{r7}
  405f72:	b083      	sub	sp, #12
  405f74:	af00      	add	r7, sp, #0
  405f76:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  405f78:	687b      	ldr	r3, [r7, #4]
  405f7a:	2b3f      	cmp	r3, #63	; 0x3f
  405f7c:	d901      	bls.n	405f82 <pmc_enable_periph_clk+0x12>
		return 1;
  405f7e:	2301      	movs	r3, #1
  405f80:	e02f      	b.n	405fe2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  405f82:	687b      	ldr	r3, [r7, #4]
  405f84:	2b1f      	cmp	r3, #31
  405f86:	d813      	bhi.n	405fb0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  405f88:	4b19      	ldr	r3, [pc, #100]	; (405ff0 <pmc_enable_periph_clk+0x80>)
  405f8a:	699a      	ldr	r2, [r3, #24]
  405f8c:	2101      	movs	r1, #1
  405f8e:	687b      	ldr	r3, [r7, #4]
  405f90:	fa01 f303 	lsl.w	r3, r1, r3
  405f94:	401a      	ands	r2, r3
  405f96:	2101      	movs	r1, #1
  405f98:	687b      	ldr	r3, [r7, #4]
  405f9a:	fa01 f303 	lsl.w	r3, r1, r3
  405f9e:	429a      	cmp	r2, r3
  405fa0:	d01e      	beq.n	405fe0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  405fa2:	4a13      	ldr	r2, [pc, #76]	; (405ff0 <pmc_enable_periph_clk+0x80>)
  405fa4:	2101      	movs	r1, #1
  405fa6:	687b      	ldr	r3, [r7, #4]
  405fa8:	fa01 f303 	lsl.w	r3, r1, r3
  405fac:	6113      	str	r3, [r2, #16]
  405fae:	e017      	b.n	405fe0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  405fb0:	687b      	ldr	r3, [r7, #4]
  405fb2:	3b20      	subs	r3, #32
  405fb4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  405fb6:	4b0e      	ldr	r3, [pc, #56]	; (405ff0 <pmc_enable_periph_clk+0x80>)
  405fb8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  405fbc:	2101      	movs	r1, #1
  405fbe:	687b      	ldr	r3, [r7, #4]
  405fc0:	fa01 f303 	lsl.w	r3, r1, r3
  405fc4:	401a      	ands	r2, r3
  405fc6:	2101      	movs	r1, #1
  405fc8:	687b      	ldr	r3, [r7, #4]
  405fca:	fa01 f303 	lsl.w	r3, r1, r3
  405fce:	429a      	cmp	r2, r3
  405fd0:	d006      	beq.n	405fe0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  405fd2:	4a07      	ldr	r2, [pc, #28]	; (405ff0 <pmc_enable_periph_clk+0x80>)
  405fd4:	2101      	movs	r1, #1
  405fd6:	687b      	ldr	r3, [r7, #4]
  405fd8:	fa01 f303 	lsl.w	r3, r1, r3
  405fdc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  405fe0:	2300      	movs	r3, #0
}
  405fe2:	4618      	mov	r0, r3
  405fe4:	370c      	adds	r7, #12
  405fe6:	46bd      	mov	sp, r7
  405fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fec:	4770      	bx	lr
  405fee:	bf00      	nop
  405ff0:	400e0600 	.word	0x400e0600

00405ff4 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  405ff4:	b480      	push	{r7}
  405ff6:	b083      	sub	sp, #12
  405ff8:	af00      	add	r7, sp, #0
  405ffa:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  405ffc:	687b      	ldr	r3, [r7, #4]
  405ffe:	685b      	ldr	r3, [r3, #4]
  406000:	f003 0302 	and.w	r3, r3, #2
  406004:	2b00      	cmp	r3, #0
  406006:	d001      	beq.n	40600c <spi_get_peripheral_select_mode+0x18>
		return 1;
  406008:	2301      	movs	r3, #1
  40600a:	e000      	b.n	40600e <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  40600c:	2300      	movs	r3, #0
	}
}
  40600e:	4618      	mov	r0, r3
  406010:	370c      	adds	r7, #12
  406012:	46bd      	mov	sp, r7
  406014:	f85d 7b04 	ldr.w	r7, [sp], #4
  406018:	4770      	bx	lr
  40601a:	bf00      	nop

0040601c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40601c:	b580      	push	{r7, lr}
  40601e:	b082      	sub	sp, #8
  406020:	af00      	add	r7, sp, #0
  406022:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  406024:	6878      	ldr	r0, [r7, #4]
  406026:	4b03      	ldr	r3, [pc, #12]	; (406034 <sysclk_enable_peripheral_clock+0x18>)
  406028:	4798      	blx	r3
}
  40602a:	bf00      	nop
  40602c:	3708      	adds	r7, #8
  40602e:	46bd      	mov	sp, r7
  406030:	bd80      	pop	{r7, pc}
  406032:	bf00      	nop
  406034:	00405f71 	.word	0x00405f71

00406038 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  406038:	b580      	push	{r7, lr}
  40603a:	b082      	sub	sp, #8
  40603c:	af00      	add	r7, sp, #0
  40603e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  406040:	687b      	ldr	r3, [r7, #4]
  406042:	4a09      	ldr	r2, [pc, #36]	; (406068 <spi_enable_clock+0x30>)
  406044:	4293      	cmp	r3, r2
  406046:	d103      	bne.n	406050 <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  406048:	2015      	movs	r0, #21
  40604a:	4b08      	ldr	r3, [pc, #32]	; (40606c <spi_enable_clock+0x34>)
  40604c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40604e:	e006      	b.n	40605e <spi_enable_clock+0x26>
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  406050:	687b      	ldr	r3, [r7, #4]
  406052:	4a07      	ldr	r2, [pc, #28]	; (406070 <spi_enable_clock+0x38>)
  406054:	4293      	cmp	r3, r2
  406056:	d102      	bne.n	40605e <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  406058:	202a      	movs	r0, #42	; 0x2a
  40605a:	4b04      	ldr	r3, [pc, #16]	; (40606c <spi_enable_clock+0x34>)
  40605c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40605e:	bf00      	nop
  406060:	3708      	adds	r7, #8
  406062:	46bd      	mov	sp, r7
  406064:	bd80      	pop	{r7, pc}
  406066:	bf00      	nop
  406068:	40008000 	.word	0x40008000
  40606c:	0040601d 	.word	0x0040601d
  406070:	40058000 	.word	0x40058000

00406074 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  406074:	b480      	push	{r7}
  406076:	b083      	sub	sp, #12
  406078:	af00      	add	r7, sp, #0
  40607a:	6078      	str	r0, [r7, #4]
  40607c:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40607e:	687b      	ldr	r3, [r7, #4]
  406080:	685b      	ldr	r3, [r3, #4]
  406082:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  406086:	687b      	ldr	r3, [r7, #4]
  406088:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40608a:	687b      	ldr	r3, [r7, #4]
  40608c:	685a      	ldr	r2, [r3, #4]
  40608e:	683b      	ldr	r3, [r7, #0]
  406090:	041b      	lsls	r3, r3, #16
  406092:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  406096:	431a      	orrs	r2, r3
  406098:	687b      	ldr	r3, [r7, #4]
  40609a:	605a      	str	r2, [r3, #4]
}
  40609c:	bf00      	nop
  40609e:	370c      	adds	r7, #12
  4060a0:	46bd      	mov	sp, r7
  4060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060a6:	4770      	bx	lr

004060a8 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4060a8:	b580      	push	{r7, lr}
  4060aa:	b086      	sub	sp, #24
  4060ac:	af00      	add	r7, sp, #0
  4060ae:	60f8      	str	r0, [r7, #12]
  4060b0:	60b9      	str	r1, [r7, #8]
  4060b2:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  4060b4:	f643 2398 	movw	r3, #15000	; 0x3a98
  4060b8:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4060ba:	e006      	b.n	4060ca <spi_read+0x22>
		if (!timeout--) {
  4060bc:	697b      	ldr	r3, [r7, #20]
  4060be:	1e5a      	subs	r2, r3, #1
  4060c0:	617a      	str	r2, [r7, #20]
  4060c2:	2b00      	cmp	r3, #0
  4060c4:	d101      	bne.n	4060ca <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
  4060c6:	2301      	movs	r3, #1
  4060c8:	e01e      	b.n	406108 <spi_read+0x60>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4060ca:	68fb      	ldr	r3, [r7, #12]
  4060cc:	691b      	ldr	r3, [r3, #16]
  4060ce:	f003 0301 	and.w	r3, r3, #1
  4060d2:	2b00      	cmp	r3, #0
  4060d4:	d0f2      	beq.n	4060bc <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  4060d6:	68fb      	ldr	r3, [r7, #12]
  4060d8:	689b      	ldr	r3, [r3, #8]
  4060da:	4a0d      	ldr	r2, [pc, #52]	; (406110 <spi_read+0x68>)
  4060dc:	6013      	str	r3, [r2, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4060de:	68f8      	ldr	r0, [r7, #12]
  4060e0:	4b0c      	ldr	r3, [pc, #48]	; (406114 <spi_read+0x6c>)
  4060e2:	4798      	blx	r3
  4060e4:	4603      	mov	r3, r0
  4060e6:	2b00      	cmp	r3, #0
  4060e8:	d008      	beq.n	4060fc <spi_read+0x54>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4060ea:	4b09      	ldr	r3, [pc, #36]	; (406110 <spi_read+0x68>)
  4060ec:	681b      	ldr	r3, [r3, #0]
  4060ee:	0c1b      	lsrs	r3, r3, #16
  4060f0:	b2db      	uxtb	r3, r3
  4060f2:	f003 030f 	and.w	r3, r3, #15
  4060f6:	b2da      	uxtb	r2, r3
  4060f8:	687b      	ldr	r3, [r7, #4]
  4060fa:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4060fc:	4b04      	ldr	r3, [pc, #16]	; (406110 <spi_read+0x68>)
  4060fe:	681b      	ldr	r3, [r3, #0]
  406100:	b29a      	uxth	r2, r3
  406102:	68bb      	ldr	r3, [r7, #8]
  406104:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
  406106:	2300      	movs	r3, #0
}
  406108:	4618      	mov	r0, r3
  40610a:	3718      	adds	r7, #24
  40610c:	46bd      	mov	sp, r7
  40610e:	bd80      	pop	{r7, pc}
  406110:	20400a08 	.word	0x20400a08
  406114:	00405ff5 	.word	0x00405ff5

00406118 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  406118:	b580      	push	{r7, lr}
  40611a:	b084      	sub	sp, #16
  40611c:	af00      	add	r7, sp, #0
  40611e:	6078      	str	r0, [r7, #4]
  406120:	4608      	mov	r0, r1
  406122:	4611      	mov	r1, r2
  406124:	461a      	mov	r2, r3
  406126:	4603      	mov	r3, r0
  406128:	807b      	strh	r3, [r7, #2]
  40612a:	460b      	mov	r3, r1
  40612c:	707b      	strb	r3, [r7, #1]
  40612e:	4613      	mov	r3, r2
  406130:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  406132:	f643 2398 	movw	r3, #15000	; 0x3a98
  406136:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  406138:	e006      	b.n	406148 <spi_write+0x30>
		if (!timeout--) {
  40613a:	68fb      	ldr	r3, [r7, #12]
  40613c:	1e5a      	subs	r2, r3, #1
  40613e:	60fa      	str	r2, [r7, #12]
  406140:	2b00      	cmp	r3, #0
  406142:	d101      	bne.n	406148 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  406144:	2301      	movs	r3, #1
  406146:	e020      	b.n	40618a <spi_write+0x72>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  406148:	687b      	ldr	r3, [r7, #4]
  40614a:	691b      	ldr	r3, [r3, #16]
  40614c:	f003 0302 	and.w	r3, r3, #2
  406150:	2b00      	cmp	r3, #0
  406152:	d0f2      	beq.n	40613a <spi_write+0x22>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  406154:	6878      	ldr	r0, [r7, #4]
  406156:	4b0f      	ldr	r3, [pc, #60]	; (406194 <spi_write+0x7c>)
  406158:	4798      	blx	r3
  40615a:	4603      	mov	r3, r0
  40615c:	2b00      	cmp	r3, #0
  40615e:	d00e      	beq.n	40617e <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  406160:	887a      	ldrh	r2, [r7, #2]
  406162:	787b      	ldrb	r3, [r7, #1]
  406164:	041b      	lsls	r3, r3, #16
  406166:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40616a:	4313      	orrs	r3, r2
  40616c:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  40616e:	783b      	ldrb	r3, [r7, #0]
  406170:	2b00      	cmp	r3, #0
  406172:	d006      	beq.n	406182 <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  406174:	68bb      	ldr	r3, [r7, #8]
  406176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  40617a:	60bb      	str	r3, [r7, #8]
  40617c:	e001      	b.n	406182 <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  40617e:	887b      	ldrh	r3, [r7, #2]
  406180:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  406182:	687b      	ldr	r3, [r7, #4]
  406184:	68ba      	ldr	r2, [r7, #8]
  406186:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  406188:	2300      	movs	r3, #0
}
  40618a:	4618      	mov	r0, r3
  40618c:	3710      	adds	r7, #16
  40618e:	46bd      	mov	sp, r7
  406190:	bd80      	pop	{r7, pc}
  406192:	bf00      	nop
  406194:	00405ff5 	.word	0x00405ff5

00406198 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  406198:	b480      	push	{r7}
  40619a:	b085      	sub	sp, #20
  40619c:	af00      	add	r7, sp, #0
  40619e:	60f8      	str	r0, [r7, #12]
  4061a0:	60b9      	str	r1, [r7, #8]
  4061a2:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  4061a4:	687b      	ldr	r3, [r7, #4]
  4061a6:	2b00      	cmp	r3, #0
  4061a8:	d00c      	beq.n	4061c4 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4061aa:	68fb      	ldr	r3, [r7, #12]
  4061ac:	68ba      	ldr	r2, [r7, #8]
  4061ae:	320c      	adds	r2, #12
  4061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4061b4:	f043 0101 	orr.w	r1, r3, #1
  4061b8:	68fb      	ldr	r3, [r7, #12]
  4061ba:	68ba      	ldr	r2, [r7, #8]
  4061bc:	320c      	adds	r2, #12
  4061be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4061c2:	e00b      	b.n	4061dc <spi_set_clock_polarity+0x44>
		uint32_t ul_polarity)
{
	if (ul_polarity) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4061c4:	68fb      	ldr	r3, [r7, #12]
  4061c6:	68ba      	ldr	r2, [r7, #8]
  4061c8:	320c      	adds	r2, #12
  4061ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4061ce:	f023 0101 	bic.w	r1, r3, #1
  4061d2:	68fb      	ldr	r3, [r7, #12]
  4061d4:	68ba      	ldr	r2, [r7, #8]
  4061d6:	320c      	adds	r2, #12
  4061d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
  4061dc:	bf00      	nop
  4061de:	3714      	adds	r7, #20
  4061e0:	46bd      	mov	sp, r7
  4061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061e6:	4770      	bx	lr

004061e8 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4061e8:	b480      	push	{r7}
  4061ea:	b085      	sub	sp, #20
  4061ec:	af00      	add	r7, sp, #0
  4061ee:	60f8      	str	r0, [r7, #12]
  4061f0:	60b9      	str	r1, [r7, #8]
  4061f2:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4061f4:	687b      	ldr	r3, [r7, #4]
  4061f6:	2b00      	cmp	r3, #0
  4061f8:	d00c      	beq.n	406214 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4061fa:	68fb      	ldr	r3, [r7, #12]
  4061fc:	68ba      	ldr	r2, [r7, #8]
  4061fe:	320c      	adds	r2, #12
  406200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406204:	f043 0102 	orr.w	r1, r3, #2
  406208:	68fb      	ldr	r3, [r7, #12]
  40620a:	68ba      	ldr	r2, [r7, #8]
  40620c:	320c      	adds	r2, #12
  40620e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  406212:	e00b      	b.n	40622c <spi_set_clock_phase+0x44>
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  406214:	68fb      	ldr	r3, [r7, #12]
  406216:	68ba      	ldr	r2, [r7, #8]
  406218:	320c      	adds	r2, #12
  40621a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40621e:	f023 0102 	bic.w	r1, r3, #2
  406222:	68fb      	ldr	r3, [r7, #12]
  406224:	68ba      	ldr	r2, [r7, #8]
  406226:	320c      	adds	r2, #12
  406228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
  40622c:	bf00      	nop
  40622e:	3714      	adds	r7, #20
  406230:	46bd      	mov	sp, r7
  406232:	f85d 7b04 	ldr.w	r7, [sp], #4
  406236:	4770      	bx	lr

00406238 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  406238:	b480      	push	{r7}
  40623a:	b085      	sub	sp, #20
  40623c:	af00      	add	r7, sp, #0
  40623e:	60f8      	str	r0, [r7, #12]
  406240:	60b9      	str	r1, [r7, #8]
  406242:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  406244:	68fb      	ldr	r3, [r7, #12]
  406246:	68ba      	ldr	r2, [r7, #8]
  406248:	320c      	adds	r2, #12
  40624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40624e:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  406252:	68fb      	ldr	r3, [r7, #12]
  406254:	68ba      	ldr	r2, [r7, #8]
  406256:	320c      	adds	r2, #12
  406258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40625c:	68fb      	ldr	r3, [r7, #12]
  40625e:	68ba      	ldr	r2, [r7, #8]
  406260:	320c      	adds	r2, #12
  406262:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  406266:	687b      	ldr	r3, [r7, #4]
  406268:	ea42 0103 	orr.w	r1, r2, r3
  40626c:	68fb      	ldr	r3, [r7, #12]
  40626e:	68ba      	ldr	r2, [r7, #8]
  406270:	320c      	adds	r2, #12
  406272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406276:	bf00      	nop
  406278:	3714      	adds	r7, #20
  40627a:	46bd      	mov	sp, r7
  40627c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406280:	4770      	bx	lr
  406282:	bf00      	nop

00406284 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  406284:	b480      	push	{r7}
  406286:	b085      	sub	sp, #20
  406288:	af00      	add	r7, sp, #0
  40628a:	6078      	str	r0, [r7, #4]
  40628c:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40628e:	683a      	ldr	r2, [r7, #0]
  406290:	687b      	ldr	r3, [r7, #4]
  406292:	4413      	add	r3, r2
  406294:	1e5a      	subs	r2, r3, #1
  406296:	687b      	ldr	r3, [r7, #4]
  406298:	fbb2 f3f3 	udiv	r3, r2, r3
  40629c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40629e:	68fb      	ldr	r3, [r7, #12]
  4062a0:	2b00      	cmp	r3, #0
  4062a2:	dd02      	ble.n	4062aa <spi_calc_baudrate_div+0x26>
  4062a4:	68fb      	ldr	r3, [r7, #12]
  4062a6:	2bff      	cmp	r3, #255	; 0xff
  4062a8:	dd02      	ble.n	4062b0 <spi_calc_baudrate_div+0x2c>
		return -1;
  4062aa:	f04f 33ff 	mov.w	r3, #4294967295
  4062ae:	e001      	b.n	4062b4 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  4062b0:	68fb      	ldr	r3, [r7, #12]
  4062b2:	b21b      	sxth	r3, r3
}
  4062b4:	4618      	mov	r0, r3
  4062b6:	3714      	adds	r7, #20
  4062b8:	46bd      	mov	sp, r7
  4062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4062be:	4770      	bx	lr

004062c0 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4062c0:	b480      	push	{r7}
  4062c2:	b085      	sub	sp, #20
  4062c4:	af00      	add	r7, sp, #0
  4062c6:	60f8      	str	r0, [r7, #12]
  4062c8:	60b9      	str	r1, [r7, #8]
  4062ca:	4613      	mov	r3, r2
  4062cc:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4062ce:	79fb      	ldrb	r3, [r7, #7]
  4062d0:	2b00      	cmp	r3, #0
  4062d2:	d102      	bne.n	4062da <spi_set_baudrate_div+0x1a>
        return -1;
  4062d4:	f04f 33ff 	mov.w	r3, #4294967295
  4062d8:	e01b      	b.n	406312 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4062da:	68fb      	ldr	r3, [r7, #12]
  4062dc:	68ba      	ldr	r2, [r7, #8]
  4062de:	320c      	adds	r2, #12
  4062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4062e4:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  4062e8:	68fb      	ldr	r3, [r7, #12]
  4062ea:	68ba      	ldr	r2, [r7, #8]
  4062ec:	320c      	adds	r2, #12
  4062ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4062f2:	68fb      	ldr	r3, [r7, #12]
  4062f4:	68ba      	ldr	r2, [r7, #8]
  4062f6:	320c      	adds	r2, #12
  4062f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4062fc:	79fb      	ldrb	r3, [r7, #7]
  4062fe:	021b      	lsls	r3, r3, #8
  406300:	b29b      	uxth	r3, r3
  406302:	ea42 0103 	orr.w	r1, r2, r3
  406306:	68fb      	ldr	r3, [r7, #12]
  406308:	68ba      	ldr	r2, [r7, #8]
  40630a:	320c      	adds	r2, #12
  40630c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  406310:	2300      	movs	r3, #0
}
  406312:	4618      	mov	r0, r3
  406314:	3714      	adds	r7, #20
  406316:	46bd      	mov	sp, r7
  406318:	f85d 7b04 	ldr.w	r7, [sp], #4
  40631c:	4770      	bx	lr
  40631e:	bf00      	nop

00406320 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  406320:	b480      	push	{r7}
  406322:	b085      	sub	sp, #20
  406324:	af00      	add	r7, sp, #0
  406326:	60f8      	str	r0, [r7, #12]
  406328:	60b9      	str	r1, [r7, #8]
  40632a:	4611      	mov	r1, r2
  40632c:	461a      	mov	r2, r3
  40632e:	460b      	mov	r3, r1
  406330:	71fb      	strb	r3, [r7, #7]
  406332:	4613      	mov	r3, r2
  406334:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  406336:	68fb      	ldr	r3, [r7, #12]
  406338:	68ba      	ldr	r2, [r7, #8]
  40633a:	320c      	adds	r2, #12
  40633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406340:	b299      	uxth	r1, r3
  406342:	68fb      	ldr	r3, [r7, #12]
  406344:	68ba      	ldr	r2, [r7, #8]
  406346:	320c      	adds	r2, #12
  406348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40634c:	68fb      	ldr	r3, [r7, #12]
  40634e:	68ba      	ldr	r2, [r7, #8]
  406350:	320c      	adds	r2, #12
  406352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  406356:	79fb      	ldrb	r3, [r7, #7]
  406358:	041b      	lsls	r3, r3, #16
  40635a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  40635e:	79b9      	ldrb	r1, [r7, #6]
  406360:	0609      	lsls	r1, r1, #24
  406362:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  406364:	ea42 0103 	orr.w	r1, r2, r3
  406368:	68fb      	ldr	r3, [r7, #12]
  40636a:	68ba      	ldr	r2, [r7, #8]
  40636c:	320c      	adds	r2, #12
  40636e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  406372:	bf00      	nop
  406374:	3714      	adds	r7, #20
  406376:	46bd      	mov	sp, r7
  406378:	f85d 7b04 	ldr.w	r7, [sp], #4
  40637c:	4770      	bx	lr
  40637e:	bf00      	nop

00406380 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  406380:	b480      	push	{r7}
  406382:	b085      	sub	sp, #20
  406384:	af00      	add	r7, sp, #0
  406386:	6078      	str	r0, [r7, #4]
  406388:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40638a:	2300      	movs	r3, #0
  40638c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40638e:	687b      	ldr	r3, [r7, #4]
  406390:	22ac      	movs	r2, #172	; 0xac
  406392:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  406394:	683b      	ldr	r3, [r7, #0]
  406396:	681a      	ldr	r2, [r3, #0]
  406398:	683b      	ldr	r3, [r7, #0]
  40639a:	685b      	ldr	r3, [r3, #4]
  40639c:	fbb2 f3f3 	udiv	r3, r2, r3
  4063a0:	091b      	lsrs	r3, r3, #4
  4063a2:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4063a4:	68fb      	ldr	r3, [r7, #12]
  4063a6:	2b00      	cmp	r3, #0
  4063a8:	d003      	beq.n	4063b2 <uart_init+0x32>
  4063aa:	68fb      	ldr	r3, [r7, #12]
  4063ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4063b0:	d301      	bcc.n	4063b6 <uart_init+0x36>
		return 1;
  4063b2:	2301      	movs	r3, #1
  4063b4:	e00a      	b.n	4063cc <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  4063b6:	687b      	ldr	r3, [r7, #4]
  4063b8:	68fa      	ldr	r2, [r7, #12]
  4063ba:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4063bc:	683b      	ldr	r3, [r7, #0]
  4063be:	689a      	ldr	r2, [r3, #8]
  4063c0:	687b      	ldr	r3, [r7, #4]
  4063c2:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4063c4:	687b      	ldr	r3, [r7, #4]
  4063c6:	2250      	movs	r2, #80	; 0x50
  4063c8:	601a      	str	r2, [r3, #0]

	return 0;
  4063ca:	2300      	movs	r3, #0
}
  4063cc:	4618      	mov	r0, r3
  4063ce:	3714      	adds	r7, #20
  4063d0:	46bd      	mov	sp, r7
  4063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4063d6:	4770      	bx	lr

004063d8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4063d8:	b480      	push	{r7}
  4063da:	b083      	sub	sp, #12
  4063dc:	af00      	add	r7, sp, #0
  4063de:	6078      	str	r0, [r7, #4]
  4063e0:	460b      	mov	r3, r1
  4063e2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4063e4:	687b      	ldr	r3, [r7, #4]
  4063e6:	695b      	ldr	r3, [r3, #20]
  4063e8:	f003 0302 	and.w	r3, r3, #2
  4063ec:	2b00      	cmp	r3, #0
  4063ee:	d101      	bne.n	4063f4 <uart_write+0x1c>
		return 1;
  4063f0:	2301      	movs	r3, #1
  4063f2:	e003      	b.n	4063fc <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4063f4:	78fa      	ldrb	r2, [r7, #3]
  4063f6:	687b      	ldr	r3, [r7, #4]
  4063f8:	61da      	str	r2, [r3, #28]
	return 0;
  4063fa:	2300      	movs	r3, #0
}
  4063fc:	4618      	mov	r0, r3
  4063fe:	370c      	adds	r7, #12
  406400:	46bd      	mov	sp, r7
  406402:	f85d 7b04 	ldr.w	r7, [sp], #4
  406406:	4770      	bx	lr

00406408 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  406408:	b480      	push	{r7}
  40640a:	b083      	sub	sp, #12
  40640c:	af00      	add	r7, sp, #0
  40640e:	6078      	str	r0, [r7, #4]
  406410:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  406412:	687b      	ldr	r3, [r7, #4]
  406414:	695b      	ldr	r3, [r3, #20]
  406416:	f003 0301 	and.w	r3, r3, #1
  40641a:	2b00      	cmp	r3, #0
  40641c:	d101      	bne.n	406422 <uart_read+0x1a>
		return 1;
  40641e:	2301      	movs	r3, #1
  406420:	e005      	b.n	40642e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  406422:	687b      	ldr	r3, [r7, #4]
  406424:	699b      	ldr	r3, [r3, #24]
  406426:	b2da      	uxtb	r2, r3
  406428:	683b      	ldr	r3, [r7, #0]
  40642a:	701a      	strb	r2, [r3, #0]
	return 0;
  40642c:	2300      	movs	r3, #0
}
  40642e:	4618      	mov	r0, r3
  406430:	370c      	adds	r7, #12
  406432:	46bd      	mov	sp, r7
  406434:	f85d 7b04 	ldr.w	r7, [sp], #4
  406438:	4770      	bx	lr
  40643a:	bf00      	nop

0040643c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40643c:	b480      	push	{r7}
  40643e:	b089      	sub	sp, #36	; 0x24
  406440:	af00      	add	r7, sp, #0
  406442:	60f8      	str	r0, [r7, #12]
  406444:	60b9      	str	r1, [r7, #8]
  406446:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  406448:	68bb      	ldr	r3, [r7, #8]
  40644a:	011a      	lsls	r2, r3, #4
  40644c:	687b      	ldr	r3, [r7, #4]
  40644e:	429a      	cmp	r2, r3
  406450:	d802      	bhi.n	406458 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  406452:	2310      	movs	r3, #16
  406454:	61fb      	str	r3, [r7, #28]
  406456:	e001      	b.n	40645c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  406458:	2308      	movs	r3, #8
  40645a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40645c:	687b      	ldr	r3, [r7, #4]
  40645e:	00da      	lsls	r2, r3, #3
  406460:	69fb      	ldr	r3, [r7, #28]
  406462:	68b9      	ldr	r1, [r7, #8]
  406464:	fb01 f303 	mul.w	r3, r1, r3
  406468:	085b      	lsrs	r3, r3, #1
  40646a:	441a      	add	r2, r3
  40646c:	69fb      	ldr	r3, [r7, #28]
  40646e:	68b9      	ldr	r1, [r7, #8]
  406470:	fb01 f303 	mul.w	r3, r1, r3
  406474:	fbb2 f3f3 	udiv	r3, r2, r3
  406478:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40647a:	69bb      	ldr	r3, [r7, #24]
  40647c:	08db      	lsrs	r3, r3, #3
  40647e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  406480:	69bb      	ldr	r3, [r7, #24]
  406482:	f003 0307 	and.w	r3, r3, #7
  406486:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  406488:	697b      	ldr	r3, [r7, #20]
  40648a:	2b00      	cmp	r3, #0
  40648c:	d003      	beq.n	406496 <usart_set_async_baudrate+0x5a>
  40648e:	697b      	ldr	r3, [r7, #20]
  406490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  406494:	d301      	bcc.n	40649a <usart_set_async_baudrate+0x5e>
		return 1;
  406496:	2301      	movs	r3, #1
  406498:	e00f      	b.n	4064ba <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40649a:	69fb      	ldr	r3, [r7, #28]
  40649c:	2b08      	cmp	r3, #8
  40649e:	d105      	bne.n	4064ac <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4064a0:	68fb      	ldr	r3, [r7, #12]
  4064a2:	685b      	ldr	r3, [r3, #4]
  4064a4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4064a8:	68fb      	ldr	r3, [r7, #12]
  4064aa:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4064ac:	693b      	ldr	r3, [r7, #16]
  4064ae:	041a      	lsls	r2, r3, #16
  4064b0:	697b      	ldr	r3, [r7, #20]
  4064b2:	431a      	orrs	r2, r3
  4064b4:	68fb      	ldr	r3, [r7, #12]
  4064b6:	621a      	str	r2, [r3, #32]

	return 0;
  4064b8:	2300      	movs	r3, #0
}
  4064ba:	4618      	mov	r0, r3
  4064bc:	3724      	adds	r7, #36	; 0x24
  4064be:	46bd      	mov	sp, r7
  4064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064c4:	4770      	bx	lr
  4064c6:	bf00      	nop

004064c8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4064c8:	b580      	push	{r7, lr}
  4064ca:	b082      	sub	sp, #8
  4064cc:	af00      	add	r7, sp, #0
  4064ce:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4064d0:	6878      	ldr	r0, [r7, #4]
  4064d2:	4b0d      	ldr	r3, [pc, #52]	; (406508 <usart_reset+0x40>)
  4064d4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4064d6:	687b      	ldr	r3, [r7, #4]
  4064d8:	2200      	movs	r2, #0
  4064da:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4064dc:	687b      	ldr	r3, [r7, #4]
  4064de:	2200      	movs	r2, #0
  4064e0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4064e2:	687b      	ldr	r3, [r7, #4]
  4064e4:	2200      	movs	r2, #0
  4064e6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4064e8:	6878      	ldr	r0, [r7, #4]
  4064ea:	4b08      	ldr	r3, [pc, #32]	; (40650c <usart_reset+0x44>)
  4064ec:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4064ee:	6878      	ldr	r0, [r7, #4]
  4064f0:	4b07      	ldr	r3, [pc, #28]	; (406510 <usart_reset+0x48>)
  4064f2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4064f4:	6878      	ldr	r0, [r7, #4]
  4064f6:	4b07      	ldr	r3, [pc, #28]	; (406514 <usart_reset+0x4c>)
  4064f8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4064fa:	6878      	ldr	r0, [r7, #4]
  4064fc:	4b06      	ldr	r3, [pc, #24]	; (406518 <usart_reset+0x50>)
  4064fe:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  406500:	bf00      	nop
  406502:	3708      	adds	r7, #8
  406504:	46bd      	mov	sp, r7
  406506:	bd80      	pop	{r7, pc}
  406508:	004066b1 	.word	0x004066b1
  40650c:	004065bd 	.word	0x004065bd
  406510:	004065f5 	.word	0x004065f5
  406514:	00406611 	.word	0x00406611
  406518:	0040662d 	.word	0x0040662d

0040651c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40651c:	b580      	push	{r7, lr}
  40651e:	b084      	sub	sp, #16
  406520:	af00      	add	r7, sp, #0
  406522:	60f8      	str	r0, [r7, #12]
  406524:	60b9      	str	r1, [r7, #8]
  406526:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  406528:	68f8      	ldr	r0, [r7, #12]
  40652a:	4b1a      	ldr	r3, [pc, #104]	; (406594 <usart_init_rs232+0x78>)
  40652c:	4798      	blx	r3

	ul_reg_val = 0;
  40652e:	4b1a      	ldr	r3, [pc, #104]	; (406598 <usart_init_rs232+0x7c>)
  406530:	2200      	movs	r2, #0
  406532:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  406534:	68bb      	ldr	r3, [r7, #8]
  406536:	2b00      	cmp	r3, #0
  406538:	d009      	beq.n	40654e <usart_init_rs232+0x32>
  40653a:	68bb      	ldr	r3, [r7, #8]
  40653c:	681b      	ldr	r3, [r3, #0]
  40653e:	687a      	ldr	r2, [r7, #4]
  406540:	4619      	mov	r1, r3
  406542:	68f8      	ldr	r0, [r7, #12]
  406544:	4b15      	ldr	r3, [pc, #84]	; (40659c <usart_init_rs232+0x80>)
  406546:	4798      	blx	r3
  406548:	4603      	mov	r3, r0
  40654a:	2b00      	cmp	r3, #0
  40654c:	d001      	beq.n	406552 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40654e:	2301      	movs	r3, #1
  406550:	e01b      	b.n	40658a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406552:	68bb      	ldr	r3, [r7, #8]
  406554:	685a      	ldr	r2, [r3, #4]
  406556:	68bb      	ldr	r3, [r7, #8]
  406558:	689b      	ldr	r3, [r3, #8]
  40655a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40655c:	68bb      	ldr	r3, [r7, #8]
  40655e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406560:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  406562:	68bb      	ldr	r3, [r7, #8]
  406564:	68db      	ldr	r3, [r3, #12]
  406566:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406568:	4b0b      	ldr	r3, [pc, #44]	; (406598 <usart_init_rs232+0x7c>)
  40656a:	681b      	ldr	r3, [r3, #0]
  40656c:	4313      	orrs	r3, r2
  40656e:	4a0a      	ldr	r2, [pc, #40]	; (406598 <usart_init_rs232+0x7c>)
  406570:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  406572:	4b09      	ldr	r3, [pc, #36]	; (406598 <usart_init_rs232+0x7c>)
  406574:	681b      	ldr	r3, [r3, #0]
  406576:	4a08      	ldr	r2, [pc, #32]	; (406598 <usart_init_rs232+0x7c>)
  406578:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40657a:	68fb      	ldr	r3, [r7, #12]
  40657c:	685a      	ldr	r2, [r3, #4]
  40657e:	4b06      	ldr	r3, [pc, #24]	; (406598 <usart_init_rs232+0x7c>)
  406580:	681b      	ldr	r3, [r3, #0]
  406582:	431a      	orrs	r2, r3
  406584:	68fb      	ldr	r3, [r7, #12]
  406586:	605a      	str	r2, [r3, #4]

	return 0;
  406588:	2300      	movs	r3, #0
}
  40658a:	4618      	mov	r0, r3
  40658c:	3710      	adds	r7, #16
  40658e:	46bd      	mov	sp, r7
  406590:	bd80      	pop	{r7, pc}
  406592:	bf00      	nop
  406594:	004064c9 	.word	0x004064c9
  406598:	20400a0c 	.word	0x20400a0c
  40659c:	0040643d 	.word	0x0040643d

004065a0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4065a0:	b480      	push	{r7}
  4065a2:	b083      	sub	sp, #12
  4065a4:	af00      	add	r7, sp, #0
  4065a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4065a8:	687b      	ldr	r3, [r7, #4]
  4065aa:	2240      	movs	r2, #64	; 0x40
  4065ac:	601a      	str	r2, [r3, #0]
}
  4065ae:	bf00      	nop
  4065b0:	370c      	adds	r7, #12
  4065b2:	46bd      	mov	sp, r7
  4065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4065b8:	4770      	bx	lr
  4065ba:	bf00      	nop

004065bc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4065bc:	b480      	push	{r7}
  4065be:	b083      	sub	sp, #12
  4065c0:	af00      	add	r7, sp, #0
  4065c2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4065c4:	687b      	ldr	r3, [r7, #4]
  4065c6:	2288      	movs	r2, #136	; 0x88
  4065c8:	601a      	str	r2, [r3, #0]
}
  4065ca:	bf00      	nop
  4065cc:	370c      	adds	r7, #12
  4065ce:	46bd      	mov	sp, r7
  4065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4065d4:	4770      	bx	lr
  4065d6:	bf00      	nop

004065d8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4065d8:	b480      	push	{r7}
  4065da:	b083      	sub	sp, #12
  4065dc:	af00      	add	r7, sp, #0
  4065de:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4065e0:	687b      	ldr	r3, [r7, #4]
  4065e2:	2210      	movs	r2, #16
  4065e4:	601a      	str	r2, [r3, #0]
}
  4065e6:	bf00      	nop
  4065e8:	370c      	adds	r7, #12
  4065ea:	46bd      	mov	sp, r7
  4065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4065f0:	4770      	bx	lr
  4065f2:	bf00      	nop

004065f4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4065f4:	b480      	push	{r7}
  4065f6:	b083      	sub	sp, #12
  4065f8:	af00      	add	r7, sp, #0
  4065fa:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4065fc:	687b      	ldr	r3, [r7, #4]
  4065fe:	2224      	movs	r2, #36	; 0x24
  406600:	601a      	str	r2, [r3, #0]
}
  406602:	bf00      	nop
  406604:	370c      	adds	r7, #12
  406606:	46bd      	mov	sp, r7
  406608:	f85d 7b04 	ldr.w	r7, [sp], #4
  40660c:	4770      	bx	lr
  40660e:	bf00      	nop

00406610 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  406610:	b480      	push	{r7}
  406612:	b083      	sub	sp, #12
  406614:	af00      	add	r7, sp, #0
  406616:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  406618:	687b      	ldr	r3, [r7, #4]
  40661a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40661e:	601a      	str	r2, [r3, #0]
}
  406620:	bf00      	nop
  406622:	370c      	adds	r7, #12
  406624:	46bd      	mov	sp, r7
  406626:	f85d 7b04 	ldr.w	r7, [sp], #4
  40662a:	4770      	bx	lr

0040662c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40662c:	b480      	push	{r7}
  40662e:	b083      	sub	sp, #12
  406630:	af00      	add	r7, sp, #0
  406632:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  406634:	687b      	ldr	r3, [r7, #4]
  406636:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40663a:	601a      	str	r2, [r3, #0]
}
  40663c:	bf00      	nop
  40663e:	370c      	adds	r7, #12
  406640:	46bd      	mov	sp, r7
  406642:	f85d 7b04 	ldr.w	r7, [sp], #4
  406646:	4770      	bx	lr

00406648 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  406648:	b480      	push	{r7}
  40664a:	b083      	sub	sp, #12
  40664c:	af00      	add	r7, sp, #0
  40664e:	6078      	str	r0, [r7, #4]
  406650:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  406652:	687b      	ldr	r3, [r7, #4]
  406654:	695b      	ldr	r3, [r3, #20]
  406656:	f003 0302 	and.w	r3, r3, #2
  40665a:	2b00      	cmp	r3, #0
  40665c:	d101      	bne.n	406662 <usart_write+0x1a>
		return 1;
  40665e:	2301      	movs	r3, #1
  406660:	e005      	b.n	40666e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  406662:	683b      	ldr	r3, [r7, #0]
  406664:	f3c3 0208 	ubfx	r2, r3, #0, #9
  406668:	687b      	ldr	r3, [r7, #4]
  40666a:	61da      	str	r2, [r3, #28]
	return 0;
  40666c:	2300      	movs	r3, #0
}
  40666e:	4618      	mov	r0, r3
  406670:	370c      	adds	r7, #12
  406672:	46bd      	mov	sp, r7
  406674:	f85d 7b04 	ldr.w	r7, [sp], #4
  406678:	4770      	bx	lr
  40667a:	bf00      	nop

0040667c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40667c:	b480      	push	{r7}
  40667e:	b083      	sub	sp, #12
  406680:	af00      	add	r7, sp, #0
  406682:	6078      	str	r0, [r7, #4]
  406684:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  406686:	687b      	ldr	r3, [r7, #4]
  406688:	695b      	ldr	r3, [r3, #20]
  40668a:	f003 0301 	and.w	r3, r3, #1
  40668e:	2b00      	cmp	r3, #0
  406690:	d101      	bne.n	406696 <usart_read+0x1a>
		return 1;
  406692:	2301      	movs	r3, #1
  406694:	e006      	b.n	4066a4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  406696:	687b      	ldr	r3, [r7, #4]
  406698:	699b      	ldr	r3, [r3, #24]
  40669a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40669e:	683b      	ldr	r3, [r7, #0]
  4066a0:	601a      	str	r2, [r3, #0]

	return 0;
  4066a2:	2300      	movs	r3, #0
}
  4066a4:	4618      	mov	r0, r3
  4066a6:	370c      	adds	r7, #12
  4066a8:	46bd      	mov	sp, r7
  4066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066ae:	4770      	bx	lr

004066b0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4066b0:	b480      	push	{r7}
  4066b2:	b083      	sub	sp, #12
  4066b4:	af00      	add	r7, sp, #0
  4066b6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4066b8:	687b      	ldr	r3, [r7, #4]
  4066ba:	4a04      	ldr	r2, [pc, #16]	; (4066cc <usart_disable_writeprotect+0x1c>)
  4066bc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4066c0:	bf00      	nop
  4066c2:	370c      	adds	r7, #12
  4066c4:	46bd      	mov	sp, r7
  4066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066ca:	4770      	bx	lr
  4066cc:	55534100 	.word	0x55534100

004066d0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4066d0:	b480      	push	{r7}
  4066d2:	b083      	sub	sp, #12
  4066d4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4066d6:	f3ef 8310 	mrs	r3, PRIMASK
  4066da:	607b      	str	r3, [r7, #4]
  return(result);
  4066dc:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4066de:	2b00      	cmp	r3, #0
  4066e0:	bf0c      	ite	eq
  4066e2:	2301      	moveq	r3, #1
  4066e4:	2300      	movne	r3, #0
  4066e6:	b2db      	uxtb	r3, r3
  4066e8:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4066ea:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4066ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4066f0:	4b04      	ldr	r3, [pc, #16]	; (406704 <cpu_irq_save+0x34>)
  4066f2:	2200      	movs	r2, #0
  4066f4:	701a      	strb	r2, [r3, #0]
	return flags;
  4066f6:	683b      	ldr	r3, [r7, #0]
}
  4066f8:	4618      	mov	r0, r3
  4066fa:	370c      	adds	r7, #12
  4066fc:	46bd      	mov	sp, r7
  4066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  406702:	4770      	bx	lr
  406704:	20400014 	.word	0x20400014

00406708 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  406708:	b480      	push	{r7}
  40670a:	b083      	sub	sp, #12
  40670c:	af00      	add	r7, sp, #0
  40670e:	6078      	str	r0, [r7, #4]
	return (flags);
  406710:	687b      	ldr	r3, [r7, #4]
  406712:	2b00      	cmp	r3, #0
  406714:	bf14      	ite	ne
  406716:	2301      	movne	r3, #1
  406718:	2300      	moveq	r3, #0
  40671a:	b2db      	uxtb	r3, r3
}
  40671c:	4618      	mov	r0, r3
  40671e:	370c      	adds	r7, #12
  406720:	46bd      	mov	sp, r7
  406722:	f85d 7b04 	ldr.w	r7, [sp], #4
  406726:	4770      	bx	lr

00406728 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  406728:	b580      	push	{r7, lr}
  40672a:	b082      	sub	sp, #8
  40672c:	af00      	add	r7, sp, #0
  40672e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  406730:	6878      	ldr	r0, [r7, #4]
  406732:	4b07      	ldr	r3, [pc, #28]	; (406750 <cpu_irq_restore+0x28>)
  406734:	4798      	blx	r3
  406736:	4603      	mov	r3, r0
  406738:	2b00      	cmp	r3, #0
  40673a:	d005      	beq.n	406748 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40673c:	4b05      	ldr	r3, [pc, #20]	; (406754 <cpu_irq_restore+0x2c>)
  40673e:	2201      	movs	r2, #1
  406740:	701a      	strb	r2, [r3, #0]
  406742:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  406746:	b662      	cpsie	i
}
  406748:	bf00      	nop
  40674a:	3708      	adds	r7, #8
  40674c:	46bd      	mov	sp, r7
  40674e:	bd80      	pop	{r7, pc}
  406750:	00406709 	.word	0x00406709
  406754:	20400014 	.word	0x20400014

00406758 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  406758:	b580      	push	{r7, lr}
  40675a:	b084      	sub	sp, #16
  40675c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40675e:	4b1e      	ldr	r3, [pc, #120]	; (4067d8 <Reset_Handler+0x80>)
  406760:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  406762:	4b1e      	ldr	r3, [pc, #120]	; (4067dc <Reset_Handler+0x84>)
  406764:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  406766:	68fa      	ldr	r2, [r7, #12]
  406768:	68bb      	ldr	r3, [r7, #8]
  40676a:	429a      	cmp	r2, r3
  40676c:	d00c      	beq.n	406788 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40676e:	e007      	b.n	406780 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  406770:	68bb      	ldr	r3, [r7, #8]
  406772:	1d1a      	adds	r2, r3, #4
  406774:	60ba      	str	r2, [r7, #8]
  406776:	68fa      	ldr	r2, [r7, #12]
  406778:	1d11      	adds	r1, r2, #4
  40677a:	60f9      	str	r1, [r7, #12]
  40677c:	6812      	ldr	r2, [r2, #0]
  40677e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  406780:	68bb      	ldr	r3, [r7, #8]
  406782:	4a17      	ldr	r2, [pc, #92]	; (4067e0 <Reset_Handler+0x88>)
  406784:	4293      	cmp	r3, r2
  406786:	d3f3      	bcc.n	406770 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  406788:	4b16      	ldr	r3, [pc, #88]	; (4067e4 <Reset_Handler+0x8c>)
  40678a:	60bb      	str	r3, [r7, #8]
  40678c:	e004      	b.n	406798 <Reset_Handler+0x40>
                *pDest++ = 0;
  40678e:	68bb      	ldr	r3, [r7, #8]
  406790:	1d1a      	adds	r2, r3, #4
  406792:	60ba      	str	r2, [r7, #8]
  406794:	2200      	movs	r2, #0
  406796:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  406798:	68bb      	ldr	r3, [r7, #8]
  40679a:	4a13      	ldr	r2, [pc, #76]	; (4067e8 <Reset_Handler+0x90>)
  40679c:	4293      	cmp	r3, r2
  40679e:	d3f6      	bcc.n	40678e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4067a0:	4b12      	ldr	r3, [pc, #72]	; (4067ec <Reset_Handler+0x94>)
  4067a2:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4067a4:	4a12      	ldr	r2, [pc, #72]	; (4067f0 <Reset_Handler+0x98>)
  4067a6:	68fb      	ldr	r3, [r7, #12]
  4067a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4067ac:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4067ae:	4b11      	ldr	r3, [pc, #68]	; (4067f4 <Reset_Handler+0x9c>)
  4067b0:	4798      	blx	r3
  4067b2:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4067b4:	4a10      	ldr	r2, [pc, #64]	; (4067f8 <Reset_Handler+0xa0>)
  4067b6:	4b10      	ldr	r3, [pc, #64]	; (4067f8 <Reset_Handler+0xa0>)
  4067b8:	681b      	ldr	r3, [r3, #0]
  4067ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4067be:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4067c0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4067c4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4067c8:	6878      	ldr	r0, [r7, #4]
  4067ca:	4b0c      	ldr	r3, [pc, #48]	; (4067fc <Reset_Handler+0xa4>)
  4067cc:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4067ce:	4b0c      	ldr	r3, [pc, #48]	; (406800 <Reset_Handler+0xa8>)
  4067d0:	4798      	blx	r3

        /* Branch to main function */
        main();
  4067d2:	4b0c      	ldr	r3, [pc, #48]	; (406804 <Reset_Handler+0xac>)
  4067d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4067d6:	e7fe      	b.n	4067d6 <Reset_Handler+0x7e>
  4067d8:	0040f0d0 	.word	0x0040f0d0
  4067dc:	20400000 	.word	0x20400000
  4067e0:	20400944 	.word	0x20400944
  4067e4:	20400944 	.word	0x20400944
  4067e8:	20401098 	.word	0x20401098
  4067ec:	00400000 	.word	0x00400000
  4067f0:	e000ed00 	.word	0xe000ed00
  4067f4:	004066d1 	.word	0x004066d1
  4067f8:	e000ed88 	.word	0xe000ed88
  4067fc:	00406729 	.word	0x00406729
  406800:	0040786d 	.word	0x0040786d
  406804:	00407361 	.word	0x00407361

00406808 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  406808:	b480      	push	{r7}
  40680a:	af00      	add	r7, sp, #0
        while (1) {
        }
  40680c:	e7fe      	b.n	40680c <Dummy_Handler+0x4>
  40680e:	bf00      	nop

00406810 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  406810:	b480      	push	{r7}
  406812:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  406814:	4b52      	ldr	r3, [pc, #328]	; (406960 <SystemCoreClockUpdate+0x150>)
  406816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406818:	f003 0303 	and.w	r3, r3, #3
  40681c:	2b01      	cmp	r3, #1
  40681e:	d014      	beq.n	40684a <SystemCoreClockUpdate+0x3a>
  406820:	2b01      	cmp	r3, #1
  406822:	d302      	bcc.n	40682a <SystemCoreClockUpdate+0x1a>
  406824:	2b02      	cmp	r3, #2
  406826:	d038      	beq.n	40689a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  406828:	e07a      	b.n	406920 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40682a:	4b4e      	ldr	r3, [pc, #312]	; (406964 <SystemCoreClockUpdate+0x154>)
  40682c:	695b      	ldr	r3, [r3, #20]
  40682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406832:	2b00      	cmp	r3, #0
  406834:	d004      	beq.n	406840 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  406836:	4b4c      	ldr	r3, [pc, #304]	; (406968 <SystemCoreClockUpdate+0x158>)
  406838:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40683c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40683e:	e06f      	b.n	406920 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  406840:	4b49      	ldr	r3, [pc, #292]	; (406968 <SystemCoreClockUpdate+0x158>)
  406842:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  406846:	601a      	str	r2, [r3, #0]
      }
    break;
  406848:	e06a      	b.n	406920 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40684a:	4b45      	ldr	r3, [pc, #276]	; (406960 <SystemCoreClockUpdate+0x150>)
  40684c:	6a1b      	ldr	r3, [r3, #32]
  40684e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  406852:	2b00      	cmp	r3, #0
  406854:	d003      	beq.n	40685e <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  406856:	4b44      	ldr	r3, [pc, #272]	; (406968 <SystemCoreClockUpdate+0x158>)
  406858:	4a44      	ldr	r2, [pc, #272]	; (40696c <SystemCoreClockUpdate+0x15c>)
  40685a:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  40685c:	e060      	b.n	406920 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40685e:	4b42      	ldr	r3, [pc, #264]	; (406968 <SystemCoreClockUpdate+0x158>)
  406860:	4a43      	ldr	r2, [pc, #268]	; (406970 <SystemCoreClockUpdate+0x160>)
  406862:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  406864:	4b3e      	ldr	r3, [pc, #248]	; (406960 <SystemCoreClockUpdate+0x150>)
  406866:	6a1b      	ldr	r3, [r3, #32]
  406868:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40686c:	2b10      	cmp	r3, #16
  40686e:	d004      	beq.n	40687a <SystemCoreClockUpdate+0x6a>
  406870:	2b20      	cmp	r3, #32
  406872:	d008      	beq.n	406886 <SystemCoreClockUpdate+0x76>
  406874:	2b00      	cmp	r3, #0
  406876:	d00e      	beq.n	406896 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  406878:	e00e      	b.n	406898 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40687a:	4b3b      	ldr	r3, [pc, #236]	; (406968 <SystemCoreClockUpdate+0x158>)
  40687c:	681b      	ldr	r3, [r3, #0]
  40687e:	005b      	lsls	r3, r3, #1
  406880:	4a39      	ldr	r2, [pc, #228]	; (406968 <SystemCoreClockUpdate+0x158>)
  406882:	6013      	str	r3, [r2, #0]
          break;
  406884:	e008      	b.n	406898 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  406886:	4b38      	ldr	r3, [pc, #224]	; (406968 <SystemCoreClockUpdate+0x158>)
  406888:	681a      	ldr	r2, [r3, #0]
  40688a:	4613      	mov	r3, r2
  40688c:	005b      	lsls	r3, r3, #1
  40688e:	4413      	add	r3, r2
  406890:	4a35      	ldr	r2, [pc, #212]	; (406968 <SystemCoreClockUpdate+0x158>)
  406892:	6013      	str	r3, [r2, #0]
          break;
  406894:	e000      	b.n	406898 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  406896:	bf00      	nop

          default:
          break;
        }
      }
    break;
  406898:	e042      	b.n	406920 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40689a:	4b31      	ldr	r3, [pc, #196]	; (406960 <SystemCoreClockUpdate+0x150>)
  40689c:	6a1b      	ldr	r3, [r3, #32]
  40689e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4068a2:	2b00      	cmp	r3, #0
  4068a4:	d003      	beq.n	4068ae <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4068a6:	4b30      	ldr	r3, [pc, #192]	; (406968 <SystemCoreClockUpdate+0x158>)
  4068a8:	4a30      	ldr	r2, [pc, #192]	; (40696c <SystemCoreClockUpdate+0x15c>)
  4068aa:	601a      	str	r2, [r3, #0]
  4068ac:	e01c      	b.n	4068e8 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4068ae:	4b2e      	ldr	r3, [pc, #184]	; (406968 <SystemCoreClockUpdate+0x158>)
  4068b0:	4a2f      	ldr	r2, [pc, #188]	; (406970 <SystemCoreClockUpdate+0x160>)
  4068b2:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4068b4:	4b2a      	ldr	r3, [pc, #168]	; (406960 <SystemCoreClockUpdate+0x150>)
  4068b6:	6a1b      	ldr	r3, [r3, #32]
  4068b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4068bc:	2b10      	cmp	r3, #16
  4068be:	d004      	beq.n	4068ca <SystemCoreClockUpdate+0xba>
  4068c0:	2b20      	cmp	r3, #32
  4068c2:	d008      	beq.n	4068d6 <SystemCoreClockUpdate+0xc6>
  4068c4:	2b00      	cmp	r3, #0
  4068c6:	d00e      	beq.n	4068e6 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4068c8:	e00e      	b.n	4068e8 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4068ca:	4b27      	ldr	r3, [pc, #156]	; (406968 <SystemCoreClockUpdate+0x158>)
  4068cc:	681b      	ldr	r3, [r3, #0]
  4068ce:	005b      	lsls	r3, r3, #1
  4068d0:	4a25      	ldr	r2, [pc, #148]	; (406968 <SystemCoreClockUpdate+0x158>)
  4068d2:	6013      	str	r3, [r2, #0]
          break;
  4068d4:	e008      	b.n	4068e8 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4068d6:	4b24      	ldr	r3, [pc, #144]	; (406968 <SystemCoreClockUpdate+0x158>)
  4068d8:	681a      	ldr	r2, [r3, #0]
  4068da:	4613      	mov	r3, r2
  4068dc:	005b      	lsls	r3, r3, #1
  4068de:	4413      	add	r3, r2
  4068e0:	4a21      	ldr	r2, [pc, #132]	; (406968 <SystemCoreClockUpdate+0x158>)
  4068e2:	6013      	str	r3, [r2, #0]
          break;
  4068e4:	e000      	b.n	4068e8 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4068e6:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4068e8:	4b1d      	ldr	r3, [pc, #116]	; (406960 <SystemCoreClockUpdate+0x150>)
  4068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4068ec:	f003 0303 	and.w	r3, r3, #3
  4068f0:	2b02      	cmp	r3, #2
  4068f2:	d114      	bne.n	40691e <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4068f4:	4b1a      	ldr	r3, [pc, #104]	; (406960 <SystemCoreClockUpdate+0x150>)
  4068f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4068f8:	4b1e      	ldr	r3, [pc, #120]	; (406974 <SystemCoreClockUpdate+0x164>)
  4068fa:	4013      	ands	r3, r2
  4068fc:	0c1b      	lsrs	r3, r3, #16
  4068fe:	3301      	adds	r3, #1
  406900:	4a19      	ldr	r2, [pc, #100]	; (406968 <SystemCoreClockUpdate+0x158>)
  406902:	6812      	ldr	r2, [r2, #0]
  406904:	fb02 f303 	mul.w	r3, r2, r3
  406908:	4a17      	ldr	r2, [pc, #92]	; (406968 <SystemCoreClockUpdate+0x158>)
  40690a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40690c:	4b14      	ldr	r3, [pc, #80]	; (406960 <SystemCoreClockUpdate+0x150>)
  40690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  406910:	b2db      	uxtb	r3, r3
  406912:	4a15      	ldr	r2, [pc, #84]	; (406968 <SystemCoreClockUpdate+0x158>)
  406914:	6812      	ldr	r2, [r2, #0]
  406916:	fbb2 f3f3 	udiv	r3, r2, r3
  40691a:	4a13      	ldr	r2, [pc, #76]	; (406968 <SystemCoreClockUpdate+0x158>)
  40691c:	6013      	str	r3, [r2, #0]
      }
    break;
  40691e:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  406920:	4b0f      	ldr	r3, [pc, #60]	; (406960 <SystemCoreClockUpdate+0x150>)
  406922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406924:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406928:	2b70      	cmp	r3, #112	; 0x70
  40692a:	d108      	bne.n	40693e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  40692c:	4b0e      	ldr	r3, [pc, #56]	; (406968 <SystemCoreClockUpdate+0x158>)
  40692e:	681b      	ldr	r3, [r3, #0]
  406930:	4a11      	ldr	r2, [pc, #68]	; (406978 <SystemCoreClockUpdate+0x168>)
  406932:	fba2 2303 	umull	r2, r3, r2, r3
  406936:	085b      	lsrs	r3, r3, #1
  406938:	4a0b      	ldr	r2, [pc, #44]	; (406968 <SystemCoreClockUpdate+0x158>)
  40693a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  40693c:	e00a      	b.n	406954 <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40693e:	4b08      	ldr	r3, [pc, #32]	; (406960 <SystemCoreClockUpdate+0x150>)
  406940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406942:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406946:	091b      	lsrs	r3, r3, #4
  406948:	4a07      	ldr	r2, [pc, #28]	; (406968 <SystemCoreClockUpdate+0x158>)
  40694a:	6812      	ldr	r2, [r2, #0]
  40694c:	fa22 f303 	lsr.w	r3, r2, r3
  406950:	4a05      	ldr	r2, [pc, #20]	; (406968 <SystemCoreClockUpdate+0x158>)
  406952:	6013      	str	r3, [r2, #0]
  }
}
  406954:	bf00      	nop
  406956:	46bd      	mov	sp, r7
  406958:	f85d 7b04 	ldr.w	r7, [sp], #4
  40695c:	4770      	bx	lr
  40695e:	bf00      	nop
  406960:	400e0600 	.word	0x400e0600
  406964:	400e1810 	.word	0x400e1810
  406968:	20400018 	.word	0x20400018
  40696c:	00b71b00 	.word	0x00b71b00
  406970:	003d0900 	.word	0x003d0900
  406974:	07ff0000 	.word	0x07ff0000
  406978:	aaaaaaab 	.word	0xaaaaaaab

0040697c <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  40697c:	b480      	push	{r7}
  40697e:	b083      	sub	sp, #12
  406980:	af00      	add	r7, sp, #0
  406982:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  406984:	687b      	ldr	r3, [r7, #4]
  406986:	4a19      	ldr	r2, [pc, #100]	; (4069ec <system_init_flash+0x70>)
  406988:	4293      	cmp	r3, r2
  40698a:	d804      	bhi.n	406996 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40698c:	4b18      	ldr	r3, [pc, #96]	; (4069f0 <system_init_flash+0x74>)
  40698e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  406992:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  406994:	e023      	b.n	4069de <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  406996:	687b      	ldr	r3, [r7, #4]
  406998:	4a16      	ldr	r2, [pc, #88]	; (4069f4 <system_init_flash+0x78>)
  40699a:	4293      	cmp	r3, r2
  40699c:	d803      	bhi.n	4069a6 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40699e:	4b14      	ldr	r3, [pc, #80]	; (4069f0 <system_init_flash+0x74>)
  4069a0:	4a15      	ldr	r2, [pc, #84]	; (4069f8 <system_init_flash+0x7c>)
  4069a2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4069a4:	e01b      	b.n	4069de <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4069a6:	687b      	ldr	r3, [r7, #4]
  4069a8:	4a14      	ldr	r2, [pc, #80]	; (4069fc <system_init_flash+0x80>)
  4069aa:	4293      	cmp	r3, r2
  4069ac:	d803      	bhi.n	4069b6 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4069ae:	4b10      	ldr	r3, [pc, #64]	; (4069f0 <system_init_flash+0x74>)
  4069b0:	4a13      	ldr	r2, [pc, #76]	; (406a00 <system_init_flash+0x84>)
  4069b2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4069b4:	e013      	b.n	4069de <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4069b6:	687b      	ldr	r3, [r7, #4]
  4069b8:	4a12      	ldr	r2, [pc, #72]	; (406a04 <system_init_flash+0x88>)
  4069ba:	4293      	cmp	r3, r2
  4069bc:	d803      	bhi.n	4069c6 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4069be:	4b0c      	ldr	r3, [pc, #48]	; (4069f0 <system_init_flash+0x74>)
  4069c0:	4a11      	ldr	r2, [pc, #68]	; (406a08 <system_init_flash+0x8c>)
  4069c2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4069c4:	e00b      	b.n	4069de <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4069c6:	687b      	ldr	r3, [r7, #4]
  4069c8:	4a10      	ldr	r2, [pc, #64]	; (406a0c <system_init_flash+0x90>)
  4069ca:	4293      	cmp	r3, r2
  4069cc:	d804      	bhi.n	4069d8 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4069ce:	4b08      	ldr	r3, [pc, #32]	; (4069f0 <system_init_flash+0x74>)
  4069d0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4069d4:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4069d6:	e002      	b.n	4069de <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4069d8:	4b05      	ldr	r3, [pc, #20]	; (4069f0 <system_init_flash+0x74>)
  4069da:	4a0d      	ldr	r2, [pc, #52]	; (406a10 <system_init_flash+0x94>)
  4069dc:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4069de:	bf00      	nop
  4069e0:	370c      	adds	r7, #12
  4069e2:	46bd      	mov	sp, r7
  4069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069e8:	4770      	bx	lr
  4069ea:	bf00      	nop
  4069ec:	01312cff 	.word	0x01312cff
  4069f0:	400e0c00 	.word	0x400e0c00
  4069f4:	026259ff 	.word	0x026259ff
  4069f8:	04000100 	.word	0x04000100
  4069fc:	039386ff 	.word	0x039386ff
  406a00:	04000200 	.word	0x04000200
  406a04:	04c4b3ff 	.word	0x04c4b3ff
  406a08:	04000300 	.word	0x04000300
  406a0c:	05f5e0ff 	.word	0x05f5e0ff
  406a10:	04000500 	.word	0x04000500

00406a14 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  406a14:	b480      	push	{r7}
  406a16:	b085      	sub	sp, #20
  406a18:	af00      	add	r7, sp, #0
  406a1a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  406a1c:	4b10      	ldr	r3, [pc, #64]	; (406a60 <_sbrk+0x4c>)
  406a1e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  406a20:	4b10      	ldr	r3, [pc, #64]	; (406a64 <_sbrk+0x50>)
  406a22:	681b      	ldr	r3, [r3, #0]
  406a24:	2b00      	cmp	r3, #0
  406a26:	d102      	bne.n	406a2e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  406a28:	4b0e      	ldr	r3, [pc, #56]	; (406a64 <_sbrk+0x50>)
  406a2a:	4a0f      	ldr	r2, [pc, #60]	; (406a68 <_sbrk+0x54>)
  406a2c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  406a2e:	4b0d      	ldr	r3, [pc, #52]	; (406a64 <_sbrk+0x50>)
  406a30:	681b      	ldr	r3, [r3, #0]
  406a32:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  406a34:	68ba      	ldr	r2, [r7, #8]
  406a36:	687b      	ldr	r3, [r7, #4]
  406a38:	441a      	add	r2, r3
  406a3a:	68fb      	ldr	r3, [r7, #12]
  406a3c:	429a      	cmp	r2, r3
  406a3e:	dd02      	ble.n	406a46 <_sbrk+0x32>
		return (caddr_t) -1;	
  406a40:	f04f 33ff 	mov.w	r3, #4294967295
  406a44:	e006      	b.n	406a54 <_sbrk+0x40>
	}

	heap += incr;
  406a46:	4b07      	ldr	r3, [pc, #28]	; (406a64 <_sbrk+0x50>)
  406a48:	681a      	ldr	r2, [r3, #0]
  406a4a:	687b      	ldr	r3, [r7, #4]
  406a4c:	4413      	add	r3, r2
  406a4e:	4a05      	ldr	r2, [pc, #20]	; (406a64 <_sbrk+0x50>)
  406a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  406a52:	68bb      	ldr	r3, [r7, #8]
}
  406a54:	4618      	mov	r0, r3
  406a56:	3714      	adds	r7, #20
  406a58:	46bd      	mov	sp, r7
  406a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a5e:	4770      	bx	lr
  406a60:	2045fffc 	.word	0x2045fffc
  406a64:	20400a10 	.word	0x20400a10
  406a68:	20403298 	.word	0x20403298

00406a6c <_close>:
{
	return -1;
}

extern int _close(int file)
{
  406a6c:	b480      	push	{r7}
  406a6e:	b083      	sub	sp, #12
  406a70:	af00      	add	r7, sp, #0
  406a72:	6078      	str	r0, [r7, #4]
	return -1;
  406a74:	f04f 33ff 	mov.w	r3, #4294967295
}
  406a78:	4618      	mov	r0, r3
  406a7a:	370c      	adds	r7, #12
  406a7c:	46bd      	mov	sp, r7
  406a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a82:	4770      	bx	lr

00406a84 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  406a84:	b480      	push	{r7}
  406a86:	b083      	sub	sp, #12
  406a88:	af00      	add	r7, sp, #0
  406a8a:	6078      	str	r0, [r7, #4]
  406a8c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  406a8e:	683b      	ldr	r3, [r7, #0]
  406a90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  406a94:	605a      	str	r2, [r3, #4]

	return 0;
  406a96:	2300      	movs	r3, #0
}
  406a98:	4618      	mov	r0, r3
  406a9a:	370c      	adds	r7, #12
  406a9c:	46bd      	mov	sp, r7
  406a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406aa2:	4770      	bx	lr

00406aa4 <_isatty>:

extern int _isatty(int file)
{
  406aa4:	b480      	push	{r7}
  406aa6:	b083      	sub	sp, #12
  406aa8:	af00      	add	r7, sp, #0
  406aaa:	6078      	str	r0, [r7, #4]
	return 1;
  406aac:	2301      	movs	r3, #1
}
  406aae:	4618      	mov	r0, r3
  406ab0:	370c      	adds	r7, #12
  406ab2:	46bd      	mov	sp, r7
  406ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
  406ab8:	4770      	bx	lr
  406aba:	bf00      	nop

00406abc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  406abc:	b480      	push	{r7}
  406abe:	b085      	sub	sp, #20
  406ac0:	af00      	add	r7, sp, #0
  406ac2:	60f8      	str	r0, [r7, #12]
  406ac4:	60b9      	str	r1, [r7, #8]
  406ac6:	607a      	str	r2, [r7, #4]
	return 0;
  406ac8:	2300      	movs	r3, #0
}
  406aca:	4618      	mov	r0, r3
  406acc:	3714      	adds	r7, #20
  406ace:	46bd      	mov	sp, r7
  406ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
  406ad4:	4770      	bx	lr
  406ad6:	bf00      	nop

00406ad8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  406ad8:	b480      	push	{r7}
  406ada:	b083      	sub	sp, #12
  406adc:	af00      	add	r7, sp, #0
  406ade:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  406ae0:	687b      	ldr	r3, [r7, #4]
  406ae2:	2b07      	cmp	r3, #7
  406ae4:	d825      	bhi.n	406b32 <osc_get_rate+0x5a>
  406ae6:	a201      	add	r2, pc, #4	; (adr r2, 406aec <osc_get_rate+0x14>)
  406ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406aec:	00406b0d 	.word	0x00406b0d
  406af0:	00406b13 	.word	0x00406b13
  406af4:	00406b19 	.word	0x00406b19
  406af8:	00406b1f 	.word	0x00406b1f
  406afc:	00406b23 	.word	0x00406b23
  406b00:	00406b27 	.word	0x00406b27
  406b04:	00406b2b 	.word	0x00406b2b
  406b08:	00406b2f 	.word	0x00406b2f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  406b0c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  406b10:	e010      	b.n	406b34 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  406b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406b16:	e00d      	b.n	406b34 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  406b18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406b1c:	e00a      	b.n	406b34 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  406b1e:	4b08      	ldr	r3, [pc, #32]	; (406b40 <osc_get_rate+0x68>)
  406b20:	e008      	b.n	406b34 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  406b22:	4b08      	ldr	r3, [pc, #32]	; (406b44 <osc_get_rate+0x6c>)
  406b24:	e006      	b.n	406b34 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  406b26:	4b08      	ldr	r3, [pc, #32]	; (406b48 <osc_get_rate+0x70>)
  406b28:	e004      	b.n	406b34 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  406b2a:	4b07      	ldr	r3, [pc, #28]	; (406b48 <osc_get_rate+0x70>)
  406b2c:	e002      	b.n	406b34 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  406b2e:	4b06      	ldr	r3, [pc, #24]	; (406b48 <osc_get_rate+0x70>)
  406b30:	e000      	b.n	406b34 <osc_get_rate+0x5c>
	}

	return 0;
  406b32:	2300      	movs	r3, #0
}
  406b34:	4618      	mov	r0, r3
  406b36:	370c      	adds	r7, #12
  406b38:	46bd      	mov	sp, r7
  406b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  406b3e:	4770      	bx	lr
  406b40:	003d0900 	.word	0x003d0900
  406b44:	007a1200 	.word	0x007a1200
  406b48:	00b71b00 	.word	0x00b71b00

00406b4c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  406b4c:	b580      	push	{r7, lr}
  406b4e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  406b50:	2006      	movs	r0, #6
  406b52:	4b05      	ldr	r3, [pc, #20]	; (406b68 <sysclk_get_main_hz+0x1c>)
  406b54:	4798      	blx	r3
  406b56:	4602      	mov	r2, r0
  406b58:	4613      	mov	r3, r2
  406b5a:	009b      	lsls	r3, r3, #2
  406b5c:	4413      	add	r3, r2
  406b5e:	009a      	lsls	r2, r3, #2
  406b60:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  406b62:	4618      	mov	r0, r3
  406b64:	bd80      	pop	{r7, pc}
  406b66:	bf00      	nop
  406b68:	00406ad9 	.word	0x00406ad9

00406b6c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  406b6c:	b580      	push	{r7, lr}
  406b6e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  406b70:	4b02      	ldr	r3, [pc, #8]	; (406b7c <sysclk_get_peripheral_hz+0x10>)
  406b72:	4798      	blx	r3
  406b74:	4603      	mov	r3, r0
  406b76:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  406b78:	4618      	mov	r0, r3
  406b7a:	bd80      	pop	{r7, pc}
  406b7c:	00406b4d 	.word	0x00406b4d

00406b80 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  406b80:	b580      	push	{r7, lr}
  406b82:	b082      	sub	sp, #8
  406b84:	af00      	add	r7, sp, #0
  406b86:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  406b88:	6878      	ldr	r0, [r7, #4]
  406b8a:	4b03      	ldr	r3, [pc, #12]	; (406b98 <sysclk_enable_peripheral_clock+0x18>)
  406b8c:	4798      	blx	r3
}
  406b8e:	bf00      	nop
  406b90:	3708      	adds	r7, #8
  406b92:	46bd      	mov	sp, r7
  406b94:	bd80      	pop	{r7, pc}
  406b96:	bf00      	nop
  406b98:	00405f71 	.word	0x00405f71

00406b9c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  406b9c:	b580      	push	{r7, lr}
  406b9e:	b08c      	sub	sp, #48	; 0x30
  406ba0:	af00      	add	r7, sp, #0
  406ba2:	6078      	str	r0, [r7, #4]
  406ba4:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  406ba6:	4b49      	ldr	r3, [pc, #292]	; (406ccc <usart_serial_init+0x130>)
  406ba8:	4798      	blx	r3
  406baa:	4603      	mov	r3, r0
  406bac:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  406bae:	683b      	ldr	r3, [r7, #0]
  406bb0:	681b      	ldr	r3, [r3, #0]
  406bb2:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  406bb4:	683b      	ldr	r3, [r7, #0]
  406bb6:	689b      	ldr	r3, [r3, #8]
  406bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  406bba:	683b      	ldr	r3, [r7, #0]
  406bbc:	681b      	ldr	r3, [r3, #0]
  406bbe:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  406bc0:	683b      	ldr	r3, [r7, #0]
  406bc2:	685b      	ldr	r3, [r3, #4]
  406bc4:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  406bc6:	683b      	ldr	r3, [r7, #0]
  406bc8:	689b      	ldr	r3, [r3, #8]
  406bca:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  406bcc:	683b      	ldr	r3, [r7, #0]
  406bce:	68db      	ldr	r3, [r3, #12]
  406bd0:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  406bd2:	2300      	movs	r3, #0
  406bd4:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406bd6:	687b      	ldr	r3, [r7, #4]
  406bd8:	4a3d      	ldr	r2, [pc, #244]	; (406cd0 <usart_serial_init+0x134>)
  406bda:	4293      	cmp	r3, r2
  406bdc:	d108      	bne.n	406bf0 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  406bde:	2007      	movs	r0, #7
  406be0:	4b3c      	ldr	r3, [pc, #240]	; (406cd4 <usart_serial_init+0x138>)
  406be2:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  406be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
  406be8:	4619      	mov	r1, r3
  406bea:	6878      	ldr	r0, [r7, #4]
  406bec:	4b3a      	ldr	r3, [pc, #232]	; (406cd8 <usart_serial_init+0x13c>)
  406bee:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406bf0:	687b      	ldr	r3, [r7, #4]
  406bf2:	4a3a      	ldr	r2, [pc, #232]	; (406cdc <usart_serial_init+0x140>)
  406bf4:	4293      	cmp	r3, r2
  406bf6:	d108      	bne.n	406c0a <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  406bf8:	2008      	movs	r0, #8
  406bfa:	4b36      	ldr	r3, [pc, #216]	; (406cd4 <usart_serial_init+0x138>)
  406bfc:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  406bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
  406c02:	4619      	mov	r1, r3
  406c04:	6878      	ldr	r0, [r7, #4]
  406c06:	4b34      	ldr	r3, [pc, #208]	; (406cd8 <usart_serial_init+0x13c>)
  406c08:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406c0a:	687b      	ldr	r3, [r7, #4]
  406c0c:	4a34      	ldr	r2, [pc, #208]	; (406ce0 <usart_serial_init+0x144>)
  406c0e:	4293      	cmp	r3, r2
  406c10:	d108      	bne.n	406c24 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  406c12:	202c      	movs	r0, #44	; 0x2c
  406c14:	4b2f      	ldr	r3, [pc, #188]	; (406cd4 <usart_serial_init+0x138>)
  406c16:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  406c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
  406c1c:	4619      	mov	r1, r3
  406c1e:	6878      	ldr	r0, [r7, #4]
  406c20:	4b2d      	ldr	r3, [pc, #180]	; (406cd8 <usart_serial_init+0x13c>)
  406c22:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406c24:	687b      	ldr	r3, [r7, #4]
  406c26:	4a2f      	ldr	r2, [pc, #188]	; (406ce4 <usart_serial_init+0x148>)
  406c28:	4293      	cmp	r3, r2
  406c2a:	d108      	bne.n	406c3e <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  406c2c:	202d      	movs	r0, #45	; 0x2d
  406c2e:	4b29      	ldr	r3, [pc, #164]	; (406cd4 <usart_serial_init+0x138>)
  406c30:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  406c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
  406c36:	4619      	mov	r1, r3
  406c38:	6878      	ldr	r0, [r7, #4]
  406c3a:	4b27      	ldr	r3, [pc, #156]	; (406cd8 <usart_serial_init+0x13c>)
  406c3c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406c3e:	687b      	ldr	r3, [r7, #4]
  406c40:	4a29      	ldr	r2, [pc, #164]	; (406ce8 <usart_serial_init+0x14c>)
  406c42:	4293      	cmp	r3, r2
  406c44:	d111      	bne.n	406c6a <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  406c46:	200d      	movs	r0, #13
  406c48:	4b22      	ldr	r3, [pc, #136]	; (406cd4 <usart_serial_init+0x138>)
  406c4a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406c4c:	4b1f      	ldr	r3, [pc, #124]	; (406ccc <usart_serial_init+0x130>)
  406c4e:	4798      	blx	r3
  406c50:	4602      	mov	r2, r0
  406c52:	f107 030c 	add.w	r3, r7, #12
  406c56:	4619      	mov	r1, r3
  406c58:	6878      	ldr	r0, [r7, #4]
  406c5a:	4b24      	ldr	r3, [pc, #144]	; (406cec <usart_serial_init+0x150>)
  406c5c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406c5e:	6878      	ldr	r0, [r7, #4]
  406c60:	4b23      	ldr	r3, [pc, #140]	; (406cf0 <usart_serial_init+0x154>)
  406c62:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406c64:	6878      	ldr	r0, [r7, #4]
  406c66:	4b23      	ldr	r3, [pc, #140]	; (406cf4 <usart_serial_init+0x158>)
  406c68:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406c6a:	687b      	ldr	r3, [r7, #4]
  406c6c:	4a22      	ldr	r2, [pc, #136]	; (406cf8 <usart_serial_init+0x15c>)
  406c6e:	4293      	cmp	r3, r2
  406c70:	d111      	bne.n	406c96 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  406c72:	200e      	movs	r0, #14
  406c74:	4b17      	ldr	r3, [pc, #92]	; (406cd4 <usart_serial_init+0x138>)
  406c76:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406c78:	4b14      	ldr	r3, [pc, #80]	; (406ccc <usart_serial_init+0x130>)
  406c7a:	4798      	blx	r3
  406c7c:	4602      	mov	r2, r0
  406c7e:	f107 030c 	add.w	r3, r7, #12
  406c82:	4619      	mov	r1, r3
  406c84:	6878      	ldr	r0, [r7, #4]
  406c86:	4b19      	ldr	r3, [pc, #100]	; (406cec <usart_serial_init+0x150>)
  406c88:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406c8a:	6878      	ldr	r0, [r7, #4]
  406c8c:	4b18      	ldr	r3, [pc, #96]	; (406cf0 <usart_serial_init+0x154>)
  406c8e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406c90:	6878      	ldr	r0, [r7, #4]
  406c92:	4b18      	ldr	r3, [pc, #96]	; (406cf4 <usart_serial_init+0x158>)
  406c94:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406c96:	687b      	ldr	r3, [r7, #4]
  406c98:	4a18      	ldr	r2, [pc, #96]	; (406cfc <usart_serial_init+0x160>)
  406c9a:	4293      	cmp	r3, r2
  406c9c:	d111      	bne.n	406cc2 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  406c9e:	200f      	movs	r0, #15
  406ca0:	4b0c      	ldr	r3, [pc, #48]	; (406cd4 <usart_serial_init+0x138>)
  406ca2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406ca4:	4b09      	ldr	r3, [pc, #36]	; (406ccc <usart_serial_init+0x130>)
  406ca6:	4798      	blx	r3
  406ca8:	4602      	mov	r2, r0
  406caa:	f107 030c 	add.w	r3, r7, #12
  406cae:	4619      	mov	r1, r3
  406cb0:	6878      	ldr	r0, [r7, #4]
  406cb2:	4b0e      	ldr	r3, [pc, #56]	; (406cec <usart_serial_init+0x150>)
  406cb4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406cb6:	6878      	ldr	r0, [r7, #4]
  406cb8:	4b0d      	ldr	r3, [pc, #52]	; (406cf0 <usart_serial_init+0x154>)
  406cba:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406cbc:	6878      	ldr	r0, [r7, #4]
  406cbe:	4b0d      	ldr	r3, [pc, #52]	; (406cf4 <usart_serial_init+0x158>)
  406cc0:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  406cc2:	bf00      	nop
  406cc4:	3730      	adds	r7, #48	; 0x30
  406cc6:	46bd      	mov	sp, r7
  406cc8:	bd80      	pop	{r7, pc}
  406cca:	bf00      	nop
  406ccc:	00406b6d 	.word	0x00406b6d
  406cd0:	400e0800 	.word	0x400e0800
  406cd4:	00406b81 	.word	0x00406b81
  406cd8:	00406381 	.word	0x00406381
  406cdc:	400e0a00 	.word	0x400e0a00
  406ce0:	400e1a00 	.word	0x400e1a00
  406ce4:	400e1c00 	.word	0x400e1c00
  406ce8:	40024000 	.word	0x40024000
  406cec:	0040651d 	.word	0x0040651d
  406cf0:	004065a1 	.word	0x004065a1
  406cf4:	004065d9 	.word	0x004065d9
  406cf8:	40028000 	.word	0x40028000
  406cfc:	4002c000 	.word	0x4002c000

00406d00 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  406d00:	b580      	push	{r7, lr}
  406d02:	b082      	sub	sp, #8
  406d04:	af00      	add	r7, sp, #0
  406d06:	6078      	str	r0, [r7, #4]
  406d08:	460b      	mov	r3, r1
  406d0a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406d0c:	687b      	ldr	r3, [r7, #4]
  406d0e:	4a36      	ldr	r2, [pc, #216]	; (406de8 <usart_serial_putchar+0xe8>)
  406d10:	4293      	cmp	r3, r2
  406d12:	d10a      	bne.n	406d2a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  406d14:	bf00      	nop
  406d16:	78fb      	ldrb	r3, [r7, #3]
  406d18:	4619      	mov	r1, r3
  406d1a:	6878      	ldr	r0, [r7, #4]
  406d1c:	4b33      	ldr	r3, [pc, #204]	; (406dec <usart_serial_putchar+0xec>)
  406d1e:	4798      	blx	r3
  406d20:	4603      	mov	r3, r0
  406d22:	2b00      	cmp	r3, #0
  406d24:	d1f7      	bne.n	406d16 <usart_serial_putchar+0x16>
		return 1;
  406d26:	2301      	movs	r3, #1
  406d28:	e05a      	b.n	406de0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406d2a:	687b      	ldr	r3, [r7, #4]
  406d2c:	4a30      	ldr	r2, [pc, #192]	; (406df0 <usart_serial_putchar+0xf0>)
  406d2e:	4293      	cmp	r3, r2
  406d30:	d10a      	bne.n	406d48 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  406d32:	bf00      	nop
  406d34:	78fb      	ldrb	r3, [r7, #3]
  406d36:	4619      	mov	r1, r3
  406d38:	6878      	ldr	r0, [r7, #4]
  406d3a:	4b2c      	ldr	r3, [pc, #176]	; (406dec <usart_serial_putchar+0xec>)
  406d3c:	4798      	blx	r3
  406d3e:	4603      	mov	r3, r0
  406d40:	2b00      	cmp	r3, #0
  406d42:	d1f7      	bne.n	406d34 <usart_serial_putchar+0x34>
		return 1;
  406d44:	2301      	movs	r3, #1
  406d46:	e04b      	b.n	406de0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406d48:	687b      	ldr	r3, [r7, #4]
  406d4a:	4a2a      	ldr	r2, [pc, #168]	; (406df4 <usart_serial_putchar+0xf4>)
  406d4c:	4293      	cmp	r3, r2
  406d4e:	d10a      	bne.n	406d66 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  406d50:	bf00      	nop
  406d52:	78fb      	ldrb	r3, [r7, #3]
  406d54:	4619      	mov	r1, r3
  406d56:	6878      	ldr	r0, [r7, #4]
  406d58:	4b24      	ldr	r3, [pc, #144]	; (406dec <usart_serial_putchar+0xec>)
  406d5a:	4798      	blx	r3
  406d5c:	4603      	mov	r3, r0
  406d5e:	2b00      	cmp	r3, #0
  406d60:	d1f7      	bne.n	406d52 <usart_serial_putchar+0x52>
		return 1;
  406d62:	2301      	movs	r3, #1
  406d64:	e03c      	b.n	406de0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406d66:	687b      	ldr	r3, [r7, #4]
  406d68:	4a23      	ldr	r2, [pc, #140]	; (406df8 <usart_serial_putchar+0xf8>)
  406d6a:	4293      	cmp	r3, r2
  406d6c:	d10a      	bne.n	406d84 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  406d6e:	bf00      	nop
  406d70:	78fb      	ldrb	r3, [r7, #3]
  406d72:	4619      	mov	r1, r3
  406d74:	6878      	ldr	r0, [r7, #4]
  406d76:	4b1d      	ldr	r3, [pc, #116]	; (406dec <usart_serial_putchar+0xec>)
  406d78:	4798      	blx	r3
  406d7a:	4603      	mov	r3, r0
  406d7c:	2b00      	cmp	r3, #0
  406d7e:	d1f7      	bne.n	406d70 <usart_serial_putchar+0x70>
		return 1;
  406d80:	2301      	movs	r3, #1
  406d82:	e02d      	b.n	406de0 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406d84:	687b      	ldr	r3, [r7, #4]
  406d86:	4a1d      	ldr	r2, [pc, #116]	; (406dfc <usart_serial_putchar+0xfc>)
  406d88:	4293      	cmp	r3, r2
  406d8a:	d10a      	bne.n	406da2 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  406d8c:	bf00      	nop
  406d8e:	78fb      	ldrb	r3, [r7, #3]
  406d90:	4619      	mov	r1, r3
  406d92:	6878      	ldr	r0, [r7, #4]
  406d94:	4b1a      	ldr	r3, [pc, #104]	; (406e00 <usart_serial_putchar+0x100>)
  406d96:	4798      	blx	r3
  406d98:	4603      	mov	r3, r0
  406d9a:	2b00      	cmp	r3, #0
  406d9c:	d1f7      	bne.n	406d8e <usart_serial_putchar+0x8e>
		return 1;
  406d9e:	2301      	movs	r3, #1
  406da0:	e01e      	b.n	406de0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406da2:	687b      	ldr	r3, [r7, #4]
  406da4:	4a17      	ldr	r2, [pc, #92]	; (406e04 <usart_serial_putchar+0x104>)
  406da6:	4293      	cmp	r3, r2
  406da8:	d10a      	bne.n	406dc0 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  406daa:	bf00      	nop
  406dac:	78fb      	ldrb	r3, [r7, #3]
  406dae:	4619      	mov	r1, r3
  406db0:	6878      	ldr	r0, [r7, #4]
  406db2:	4b13      	ldr	r3, [pc, #76]	; (406e00 <usart_serial_putchar+0x100>)
  406db4:	4798      	blx	r3
  406db6:	4603      	mov	r3, r0
  406db8:	2b00      	cmp	r3, #0
  406dba:	d1f7      	bne.n	406dac <usart_serial_putchar+0xac>
		return 1;
  406dbc:	2301      	movs	r3, #1
  406dbe:	e00f      	b.n	406de0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406dc0:	687b      	ldr	r3, [r7, #4]
  406dc2:	4a11      	ldr	r2, [pc, #68]	; (406e08 <usart_serial_putchar+0x108>)
  406dc4:	4293      	cmp	r3, r2
  406dc6:	d10a      	bne.n	406dde <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  406dc8:	bf00      	nop
  406dca:	78fb      	ldrb	r3, [r7, #3]
  406dcc:	4619      	mov	r1, r3
  406dce:	6878      	ldr	r0, [r7, #4]
  406dd0:	4b0b      	ldr	r3, [pc, #44]	; (406e00 <usart_serial_putchar+0x100>)
  406dd2:	4798      	blx	r3
  406dd4:	4603      	mov	r3, r0
  406dd6:	2b00      	cmp	r3, #0
  406dd8:	d1f7      	bne.n	406dca <usart_serial_putchar+0xca>
		return 1;
  406dda:	2301      	movs	r3, #1
  406ddc:	e000      	b.n	406de0 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  406dde:	2300      	movs	r3, #0
}
  406de0:	4618      	mov	r0, r3
  406de2:	3708      	adds	r7, #8
  406de4:	46bd      	mov	sp, r7
  406de6:	bd80      	pop	{r7, pc}
  406de8:	400e0800 	.word	0x400e0800
  406dec:	004063d9 	.word	0x004063d9
  406df0:	400e0a00 	.word	0x400e0a00
  406df4:	400e1a00 	.word	0x400e1a00
  406df8:	400e1c00 	.word	0x400e1c00
  406dfc:	40024000 	.word	0x40024000
  406e00:	00406649 	.word	0x00406649
  406e04:	40028000 	.word	0x40028000
  406e08:	4002c000 	.word	0x4002c000

00406e0c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  406e0c:	b580      	push	{r7, lr}
  406e0e:	b084      	sub	sp, #16
  406e10:	af00      	add	r7, sp, #0
  406e12:	6078      	str	r0, [r7, #4]
  406e14:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  406e16:	2300      	movs	r3, #0
  406e18:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406e1a:	687b      	ldr	r3, [r7, #4]
  406e1c:	4a34      	ldr	r2, [pc, #208]	; (406ef0 <usart_serial_getchar+0xe4>)
  406e1e:	4293      	cmp	r3, r2
  406e20:	d107      	bne.n	406e32 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  406e22:	bf00      	nop
  406e24:	6839      	ldr	r1, [r7, #0]
  406e26:	6878      	ldr	r0, [r7, #4]
  406e28:	4b32      	ldr	r3, [pc, #200]	; (406ef4 <usart_serial_getchar+0xe8>)
  406e2a:	4798      	blx	r3
  406e2c:	4603      	mov	r3, r0
  406e2e:	2b00      	cmp	r3, #0
  406e30:	d1f8      	bne.n	406e24 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406e32:	687b      	ldr	r3, [r7, #4]
  406e34:	4a30      	ldr	r2, [pc, #192]	; (406ef8 <usart_serial_getchar+0xec>)
  406e36:	4293      	cmp	r3, r2
  406e38:	d107      	bne.n	406e4a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  406e3a:	bf00      	nop
  406e3c:	6839      	ldr	r1, [r7, #0]
  406e3e:	6878      	ldr	r0, [r7, #4]
  406e40:	4b2c      	ldr	r3, [pc, #176]	; (406ef4 <usart_serial_getchar+0xe8>)
  406e42:	4798      	blx	r3
  406e44:	4603      	mov	r3, r0
  406e46:	2b00      	cmp	r3, #0
  406e48:	d1f8      	bne.n	406e3c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406e4a:	687b      	ldr	r3, [r7, #4]
  406e4c:	4a2b      	ldr	r2, [pc, #172]	; (406efc <usart_serial_getchar+0xf0>)
  406e4e:	4293      	cmp	r3, r2
  406e50:	d107      	bne.n	406e62 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  406e52:	bf00      	nop
  406e54:	6839      	ldr	r1, [r7, #0]
  406e56:	6878      	ldr	r0, [r7, #4]
  406e58:	4b26      	ldr	r3, [pc, #152]	; (406ef4 <usart_serial_getchar+0xe8>)
  406e5a:	4798      	blx	r3
  406e5c:	4603      	mov	r3, r0
  406e5e:	2b00      	cmp	r3, #0
  406e60:	d1f8      	bne.n	406e54 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406e62:	687b      	ldr	r3, [r7, #4]
  406e64:	4a26      	ldr	r2, [pc, #152]	; (406f00 <usart_serial_getchar+0xf4>)
  406e66:	4293      	cmp	r3, r2
  406e68:	d107      	bne.n	406e7a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  406e6a:	bf00      	nop
  406e6c:	6839      	ldr	r1, [r7, #0]
  406e6e:	6878      	ldr	r0, [r7, #4]
  406e70:	4b20      	ldr	r3, [pc, #128]	; (406ef4 <usart_serial_getchar+0xe8>)
  406e72:	4798      	blx	r3
  406e74:	4603      	mov	r3, r0
  406e76:	2b00      	cmp	r3, #0
  406e78:	d1f8      	bne.n	406e6c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406e7a:	687b      	ldr	r3, [r7, #4]
  406e7c:	4a21      	ldr	r2, [pc, #132]	; (406f04 <usart_serial_getchar+0xf8>)
  406e7e:	4293      	cmp	r3, r2
  406e80:	d10d      	bne.n	406e9e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  406e82:	bf00      	nop
  406e84:	f107 030c 	add.w	r3, r7, #12
  406e88:	4619      	mov	r1, r3
  406e8a:	6878      	ldr	r0, [r7, #4]
  406e8c:	4b1e      	ldr	r3, [pc, #120]	; (406f08 <usart_serial_getchar+0xfc>)
  406e8e:	4798      	blx	r3
  406e90:	4603      	mov	r3, r0
  406e92:	2b00      	cmp	r3, #0
  406e94:	d1f6      	bne.n	406e84 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  406e96:	68fb      	ldr	r3, [r7, #12]
  406e98:	b2da      	uxtb	r2, r3
  406e9a:	683b      	ldr	r3, [r7, #0]
  406e9c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406e9e:	687b      	ldr	r3, [r7, #4]
  406ea0:	4a1a      	ldr	r2, [pc, #104]	; (406f0c <usart_serial_getchar+0x100>)
  406ea2:	4293      	cmp	r3, r2
  406ea4:	d10d      	bne.n	406ec2 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  406ea6:	bf00      	nop
  406ea8:	f107 030c 	add.w	r3, r7, #12
  406eac:	4619      	mov	r1, r3
  406eae:	6878      	ldr	r0, [r7, #4]
  406eb0:	4b15      	ldr	r3, [pc, #84]	; (406f08 <usart_serial_getchar+0xfc>)
  406eb2:	4798      	blx	r3
  406eb4:	4603      	mov	r3, r0
  406eb6:	2b00      	cmp	r3, #0
  406eb8:	d1f6      	bne.n	406ea8 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  406eba:	68fb      	ldr	r3, [r7, #12]
  406ebc:	b2da      	uxtb	r2, r3
  406ebe:	683b      	ldr	r3, [r7, #0]
  406ec0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406ec2:	687b      	ldr	r3, [r7, #4]
  406ec4:	4a12      	ldr	r2, [pc, #72]	; (406f10 <usart_serial_getchar+0x104>)
  406ec6:	4293      	cmp	r3, r2
  406ec8:	d10d      	bne.n	406ee6 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  406eca:	bf00      	nop
  406ecc:	f107 030c 	add.w	r3, r7, #12
  406ed0:	4619      	mov	r1, r3
  406ed2:	6878      	ldr	r0, [r7, #4]
  406ed4:	4b0c      	ldr	r3, [pc, #48]	; (406f08 <usart_serial_getchar+0xfc>)
  406ed6:	4798      	blx	r3
  406ed8:	4603      	mov	r3, r0
  406eda:	2b00      	cmp	r3, #0
  406edc:	d1f6      	bne.n	406ecc <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  406ede:	68fb      	ldr	r3, [r7, #12]
  406ee0:	b2da      	uxtb	r2, r3
  406ee2:	683b      	ldr	r3, [r7, #0]
  406ee4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406ee6:	bf00      	nop
  406ee8:	3710      	adds	r7, #16
  406eea:	46bd      	mov	sp, r7
  406eec:	bd80      	pop	{r7, pc}
  406eee:	bf00      	nop
  406ef0:	400e0800 	.word	0x400e0800
  406ef4:	00406409 	.word	0x00406409
  406ef8:	400e0a00 	.word	0x400e0a00
  406efc:	400e1a00 	.word	0x400e1a00
  406f00:	400e1c00 	.word	0x400e1c00
  406f04:	40024000 	.word	0x40024000
  406f08:	0040667d 	.word	0x0040667d
  406f0c:	40028000 	.word	0x40028000
  406f10:	4002c000 	.word	0x4002c000

00406f14 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  406f14:	b580      	push	{r7, lr}
  406f16:	b082      	sub	sp, #8
  406f18:	af00      	add	r7, sp, #0
  406f1a:	6078      	str	r0, [r7, #4]
  406f1c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  406f1e:	4a0f      	ldr	r2, [pc, #60]	; (406f5c <stdio_serial_init+0x48>)
  406f20:	687b      	ldr	r3, [r7, #4]
  406f22:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  406f24:	4b0e      	ldr	r3, [pc, #56]	; (406f60 <stdio_serial_init+0x4c>)
  406f26:	4a0f      	ldr	r2, [pc, #60]	; (406f64 <stdio_serial_init+0x50>)
  406f28:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  406f2a:	4b0f      	ldr	r3, [pc, #60]	; (406f68 <stdio_serial_init+0x54>)
  406f2c:	4a0f      	ldr	r2, [pc, #60]	; (406f6c <stdio_serial_init+0x58>)
  406f2e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  406f30:	6839      	ldr	r1, [r7, #0]
  406f32:	6878      	ldr	r0, [r7, #4]
  406f34:	4b0e      	ldr	r3, [pc, #56]	; (406f70 <stdio_serial_init+0x5c>)
  406f36:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  406f38:	4b0e      	ldr	r3, [pc, #56]	; (406f74 <stdio_serial_init+0x60>)
  406f3a:	681b      	ldr	r3, [r3, #0]
  406f3c:	689b      	ldr	r3, [r3, #8]
  406f3e:	2100      	movs	r1, #0
  406f40:	4618      	mov	r0, r3
  406f42:	4b0d      	ldr	r3, [pc, #52]	; (406f78 <stdio_serial_init+0x64>)
  406f44:	4798      	blx	r3
	setbuf(stdin, NULL);
  406f46:	4b0b      	ldr	r3, [pc, #44]	; (406f74 <stdio_serial_init+0x60>)
  406f48:	681b      	ldr	r3, [r3, #0]
  406f4a:	685b      	ldr	r3, [r3, #4]
  406f4c:	2100      	movs	r1, #0
  406f4e:	4618      	mov	r0, r3
  406f50:	4b09      	ldr	r3, [pc, #36]	; (406f78 <stdio_serial_init+0x64>)
  406f52:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  406f54:	bf00      	nop
  406f56:	3708      	adds	r7, #8
  406f58:	46bd      	mov	sp, r7
  406f5a:	bd80      	pop	{r7, pc}
  406f5c:	20401090 	.word	0x20401090
  406f60:	2040108c 	.word	0x2040108c
  406f64:	00406d01 	.word	0x00406d01
  406f68:	20401088 	.word	0x20401088
  406f6c:	00406e0d 	.word	0x00406e0d
  406f70:	00406b9d 	.word	0x00406b9d
  406f74:	204004d0 	.word	0x204004d0
  406f78:	00407981 	.word	0x00407981

00406f7c <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
  406f7c:	b590      	push	{r4, r7, lr}
  406f7e:	b085      	sub	sp, #20
  406f80:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  406f82:	4b08      	ldr	r3, [pc, #32]	; (406fa4 <configure_console+0x28>)
  406f84:	463c      	mov	r4, r7
  406f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  406f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype =	CONF_UART_PARITY,
		.stopbits =		CONF_UART_STOP_BITS,
	};

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  406f8c:	200e      	movs	r0, #14
  406f8e:	4b06      	ldr	r3, [pc, #24]	; (406fa8 <configure_console+0x2c>)
  406f90:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  406f92:	463b      	mov	r3, r7
  406f94:	4619      	mov	r1, r3
  406f96:	4805      	ldr	r0, [pc, #20]	; (406fac <configure_console+0x30>)
  406f98:	4b05      	ldr	r3, [pc, #20]	; (406fb0 <configure_console+0x34>)
  406f9a:	4798      	blx	r3
}
  406f9c:	bf00      	nop
  406f9e:	3714      	adds	r7, #20
  406fa0:	46bd      	mov	sp, r7
  406fa2:	bd90      	pop	{r4, r7, pc}
  406fa4:	0040ec54 	.word	0x0040ec54
  406fa8:	00406b81 	.word	0x00406b81
  406fac:	40028000 	.word	0x40028000
  406fb0:	00406f15 	.word	0x00406f15

00406fb4 <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  406fb4:	b590      	push	{r4, r7, lr}
  406fb6:	b085      	sub	sp, #20
  406fb8:	af02      	add	r7, sp, #8
  406fba:	6078      	str	r0, [r7, #4]
  406fbc:	6039      	str	r1, [r7, #0]
	gu32HostIp = hostIp;
  406fbe:	4a0e      	ldr	r2, [pc, #56]	; (406ff8 <resolve_cb+0x44>)
  406fc0:	683b      	ldr	r3, [r7, #0]
  406fc2:	6013      	str	r3, [r2, #0]
	gbHostIpByName = true;
  406fc4:	4b0d      	ldr	r3, [pc, #52]	; (406ffc <resolve_cb+0x48>)
  406fc6:	2201      	movs	r2, #1
  406fc8:	701a      	strb	r2, [r3, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  406fca:	683b      	ldr	r3, [r7, #0]
  406fcc:	b2d9      	uxtb	r1, r3
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
  406fce:	683b      	ldr	r3, [r7, #0]
  406fd0:	0a1b      	lsrs	r3, r3, #8
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	gu32HostIp = hostIp;
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  406fd2:	b2d8      	uxtb	r0, r3
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  406fd4:	683b      	ldr	r3, [r7, #0]
  406fd6:	0c1b      	lsrs	r3, r3, #16
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	gu32HostIp = hostIp;
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  406fd8:	b2db      	uxtb	r3, r3
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  406fda:	683a      	ldr	r2, [r7, #0]
  406fdc:	0e12      	lsrs	r2, r2, #24
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	gu32HostIp = hostIp;
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  406fde:	9201      	str	r2, [sp, #4]
  406fe0:	9300      	str	r3, [sp, #0]
  406fe2:	4603      	mov	r3, r0
  406fe4:	460a      	mov	r2, r1
  406fe6:	6879      	ldr	r1, [r7, #4]
  406fe8:	4805      	ldr	r0, [pc, #20]	; (407000 <resolve_cb+0x4c>)
  406fea:	4c06      	ldr	r4, [pc, #24]	; (407004 <resolve_cb+0x50>)
  406fec:	47a0      	blx	r4
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
}
  406fee:	bf00      	nop
  406ff0:	370c      	adds	r7, #12
  406ff2:	46bd      	mov	sp, r7
  406ff4:	bd90      	pop	{r4, r7, pc}
  406ff6:	bf00      	nop
  406ff8:	20400a14 	.word	0x20400a14
  406ffc:	20400f91 	.word	0x20400f91
  407000:	0040ec64 	.word	0x0040ec64
  407004:	004078bd 	.word	0x004078bd

00407008 <socket_cb>:
 * \param[in] pvMsg A structure contains notification informations.
 *
 * \return None.
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  407008:	b590      	push	{r4, r7, lr}
  40700a:	b087      	sub	sp, #28
  40700c:	af02      	add	r7, sp, #8
  40700e:	4603      	mov	r3, r0
  407010:	603a      	str	r2, [r7, #0]
  407012:	71fb      	strb	r3, [r7, #7]
  407014:	460b      	mov	r3, r1
  407016:	71bb      	strb	r3, [r7, #6]
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  407018:	4b3c      	ldr	r3, [pc, #240]	; (40710c <socket_cb+0x104>)
  40701a:	f993 3000 	ldrsb.w	r3, [r3]
  40701e:	f997 2007 	ldrsb.w	r2, [r7, #7]
  407022:	429a      	cmp	r2, r3
  407024:	d16d      	bne.n	407102 <socket_cb+0xfa>
		switch (u8Msg) {
  407026:	79bb      	ldrb	r3, [r7, #6]
  407028:	2b05      	cmp	r3, #5
  40702a:	d002      	beq.n	407032 <socket_cb+0x2a>
  40702c:	2b06      	cmp	r3, #6
  40702e:	d049      	beq.n	4070c4 <socket_cb+0xbc>
			}
		}
		break;

		default:
			break;
  407030:	e067      	b.n	407102 <socket_cb+0xfa>
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
		switch (u8Msg) {
		case SOCKET_MSG_CONNECT:
		{
			if (gbTcpConnection) {
  407032:	4b37      	ldr	r3, [pc, #220]	; (407110 <socket_cb+0x108>)
  407034:	781b      	ldrb	r3, [r3, #0]
  407036:	2b00      	cmp	r3, #0
  407038:	d062      	beq.n	407100 <socket_cb+0xf8>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  40703a:	f44f 62af 	mov.w	r2, #1400	; 0x578
  40703e:	2100      	movs	r1, #0
  407040:	4834      	ldr	r0, [pc, #208]	; (407114 <socket_cb+0x10c>)
  407042:	4b35      	ldr	r3, [pc, #212]	; (407118 <socket_cb+0x110>)
  407044:	4798      	blx	r3
				sprintf((char *)gau8ReceivedBuffer,
  407046:	4b35      	ldr	r3, [pc, #212]	; (40711c <socket_cb+0x114>)
  407048:	9300      	str	r3, [sp, #0]
  40704a:	4b35      	ldr	r3, [pc, #212]	; (407120 <socket_cb+0x118>)
  40704c:	4a35      	ldr	r2, [pc, #212]	; (407124 <socket_cb+0x11c>)
  40704e:	4936      	ldr	r1, [pc, #216]	; (407128 <socket_cb+0x120>)
  407050:	4830      	ldr	r0, [pc, #192]	; (407114 <socket_cb+0x10c>)
  407052:	4c36      	ldr	r4, [pc, #216]	; (40712c <socket_cb+0x124>)
  407054:	47a0      	blx	r4
						"%s%s%s", MAIN_PREFIX_BUFFER,
						(char *)MAIN_CITY_NAME,
						MAIN_POST_BUFFER);

				tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
  407056:	683b      	ldr	r3, [r7, #0]
  407058:	60fb      	str	r3, [r7, #12]
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  40705a:	68fb      	ldr	r3, [r7, #12]
  40705c:	2b00      	cmp	r3, #0
  40705e:	d021      	beq.n	4070a4 <socket_cb+0x9c>
  407060:	68fb      	ldr	r3, [r7, #12]
  407062:	f993 3001 	ldrsb.w	r3, [r3, #1]
  407066:	2b00      	cmp	r3, #0
  407068:	db1c      	blt.n	4070a4 <socket_cb+0x9c>
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  40706a:	4b28      	ldr	r3, [pc, #160]	; (40710c <socket_cb+0x104>)
  40706c:	f993 4000 	ldrsb.w	r4, [r3]
  407070:	4828      	ldr	r0, [pc, #160]	; (407114 <socket_cb+0x10c>)
  407072:	4b2f      	ldr	r3, [pc, #188]	; (407130 <socket_cb+0x128>)
  407074:	4798      	blx	r3
  407076:	4603      	mov	r3, r0
  407078:	b29a      	uxth	r2, r3
  40707a:	2300      	movs	r3, #0
  40707c:	4925      	ldr	r1, [pc, #148]	; (407114 <socket_cb+0x10c>)
  40707e:	4620      	mov	r0, r4
  407080:	4c2c      	ldr	r4, [pc, #176]	; (407134 <socket_cb+0x12c>)
  407082:	47a0      	blx	r4

					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  407084:	f44f 62af 	mov.w	r2, #1400	; 0x578
  407088:	2100      	movs	r1, #0
  40708a:	4822      	ldr	r0, [pc, #136]	; (407114 <socket_cb+0x10c>)
  40708c:	4b22      	ldr	r3, [pc, #136]	; (407118 <socket_cb+0x110>)
  40708e:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  407090:	4b1e      	ldr	r3, [pc, #120]	; (40710c <socket_cb+0x104>)
  407092:	f993 0000 	ldrsb.w	r0, [r3]
  407096:	2300      	movs	r3, #0
  407098:	f44f 62af 	mov.w	r2, #1400	; 0x578
  40709c:	491d      	ldr	r1, [pc, #116]	; (407114 <socket_cb+0x10c>)
  40709e:	4c26      	ldr	r4, [pc, #152]	; (407138 <socket_cb+0x130>)
  4070a0:	47a0      	blx	r4
					close(tcp_client_socket);
					tcp_client_socket = -1;
				}
			}
		}
		break;
  4070a2:	e02d      	b.n	407100 <socket_cb+0xf8>
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);

					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
				} else {
					printf("socket_cb: connect error!\r\n");
  4070a4:	4825      	ldr	r0, [pc, #148]	; (40713c <socket_cb+0x134>)
  4070a6:	4b26      	ldr	r3, [pc, #152]	; (407140 <socket_cb+0x138>)
  4070a8:	4798      	blx	r3
					gbTcpConnection = false;
  4070aa:	4b19      	ldr	r3, [pc, #100]	; (407110 <socket_cb+0x108>)
  4070ac:	2200      	movs	r2, #0
  4070ae:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
  4070b0:	4b16      	ldr	r3, [pc, #88]	; (40710c <socket_cb+0x104>)
  4070b2:	f993 3000 	ldrsb.w	r3, [r3]
  4070b6:	4618      	mov	r0, r3
  4070b8:	4b22      	ldr	r3, [pc, #136]	; (407144 <socket_cb+0x13c>)
  4070ba:	4798      	blx	r3
					tcp_client_socket = -1;
  4070bc:	4b13      	ldr	r3, [pc, #76]	; (40710c <socket_cb+0x104>)
  4070be:	22ff      	movs	r2, #255	; 0xff
  4070c0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		break;
  4070c2:	e01d      	b.n	407100 <socket_cb+0xf8>
		case SOCKET_MSG_RECV:
		{
			char *pcIndxPtr;
			char *pcEndPtr;

			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
  4070c4:	683b      	ldr	r3, [r7, #0]
  4070c6:	60bb      	str	r3, [r7, #8]
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  4070c8:	68bb      	ldr	r3, [r7, #8]
  4070ca:	2b00      	cmp	r3, #0
  4070cc:	d00b      	beq.n	4070e6 <socket_cb+0xde>
  4070ce:	68bb      	ldr	r3, [r7, #8]
  4070d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  4070d4:	2b00      	cmp	r3, #0
  4070d6:	dd06      	ble.n	4070e6 <socket_cb+0xde>
				printf("%s\r\n", (uint8 *) pstrRecv->pu8Buffer);
  4070d8:	68bb      	ldr	r3, [r7, #8]
  4070da:	681b      	ldr	r3, [r3, #0]
  4070dc:	4619      	mov	r1, r3
  4070de:	481a      	ldr	r0, [pc, #104]	; (407148 <socket_cb+0x140>)
  4070e0:	4b17      	ldr	r3, [pc, #92]	; (407140 <socket_cb+0x138>)
  4070e2:	4798      	blx	r3
				printf("socket_cb: recv error!\r\n");
				close(tcp_client_socket);
				tcp_client_socket = -1;
			}
		}
		break;
  4070e4:	e00d      	b.n	407102 <socket_cb+0xfa>
				//}
//
				//memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
				//recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
			} else {
				printf("socket_cb: recv error!\r\n");
  4070e6:	4819      	ldr	r0, [pc, #100]	; (40714c <socket_cb+0x144>)
  4070e8:	4b15      	ldr	r3, [pc, #84]	; (407140 <socket_cb+0x138>)
  4070ea:	4798      	blx	r3
				close(tcp_client_socket);
  4070ec:	4b07      	ldr	r3, [pc, #28]	; (40710c <socket_cb+0x104>)
  4070ee:	f993 3000 	ldrsb.w	r3, [r3]
  4070f2:	4618      	mov	r0, r3
  4070f4:	4b13      	ldr	r3, [pc, #76]	; (407144 <socket_cb+0x13c>)
  4070f6:	4798      	blx	r3
				tcp_client_socket = -1;
  4070f8:	4b04      	ldr	r3, [pc, #16]	; (40710c <socket_cb+0x104>)
  4070fa:	22ff      	movs	r2, #255	; 0xff
  4070fc:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
  4070fe:	e000      	b.n	407102 <socket_cb+0xfa>
					close(tcp_client_socket);
					tcp_client_socket = -1;
				}
			}
		}
		break;
  407100:	bf00      	nop

		default:
			break;
		}
	}
}
  407102:	bf00      	nop
  407104:	3714      	adds	r7, #20
  407106:	46bd      	mov	sp, r7
  407108:	bd90      	pop	{r4, r7, pc}
  40710a:	bf00      	nop
  40710c:	20400080 	.word	0x20400080
  407110:	20400f92 	.word	0x20400f92
  407114:	20400a18 	.word	0x20400a18
  407118:	004078e5 	.word	0x004078e5
  40711c:	0040ecb8 	.word	0x0040ecb8
  407120:	0040ec94 	.word	0x0040ec94
  407124:	0040eca0 	.word	0x0040eca0
  407128:	0040ecb0 	.word	0x0040ecb0
  40712c:	00407ae1 	.word	0x00407ae1
  407130:	00407b41 	.word	0x00407b41
  407134:	0040464d 	.word	0x0040464d
  407138:	0040473d 	.word	0x0040473d
  40713c:	0040ecbc 	.word	0x0040ecbc
  407140:	004078bd 	.word	0x004078bd
  407144:	0040484d 	.word	0x0040484d
  407148:	0040ecd8 	.word	0x0040ecd8
  40714c:	0040ece0 	.word	0x0040ece0

00407150 <set_dev_name_to_mac>:

static void set_dev_name_to_mac(uint8_t *name, uint8_t *mac_addr)
{
  407150:	b580      	push	{r7, lr}
  407152:	b084      	sub	sp, #16
  407154:	af00      	add	r7, sp, #0
  407156:	6078      	str	r0, [r7, #4]
  407158:	6039      	str	r1, [r7, #0]
	/* Name must be in the format WINC1500_00:00 */
	uint16 len;

	len = m2m_strlen(name);
  40715a:	6878      	ldr	r0, [r7, #4]
  40715c:	4b3f      	ldr	r3, [pc, #252]	; (40725c <set_dev_name_to_mac+0x10c>)
  40715e:	4798      	blx	r3
  407160:	4603      	mov	r3, r0
  407162:	81fb      	strh	r3, [r7, #14]
	if (len >= 5) {
  407164:	89fb      	ldrh	r3, [r7, #14]
  407166:	2b04      	cmp	r3, #4
  407168:	d973      	bls.n	407252 <set_dev_name_to_mac+0x102>
		name[len - 1] = MAIN_HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
  40716a:	89fb      	ldrh	r3, [r7, #14]
  40716c:	3b01      	subs	r3, #1
  40716e:	687a      	ldr	r2, [r7, #4]
  407170:	441a      	add	r2, r3
  407172:	683b      	ldr	r3, [r7, #0]
  407174:	3305      	adds	r3, #5
  407176:	781b      	ldrb	r3, [r3, #0]
  407178:	f003 030f 	and.w	r3, r3, #15
  40717c:	2b09      	cmp	r3, #9
  40717e:	dd08      	ble.n	407192 <set_dev_name_to_mac+0x42>
  407180:	683b      	ldr	r3, [r7, #0]
  407182:	3305      	adds	r3, #5
  407184:	781b      	ldrb	r3, [r3, #0]
  407186:	f003 030f 	and.w	r3, r3, #15
  40718a:	b2db      	uxtb	r3, r3
  40718c:	3337      	adds	r3, #55	; 0x37
  40718e:	b2db      	uxtb	r3, r3
  407190:	e007      	b.n	4071a2 <set_dev_name_to_mac+0x52>
  407192:	683b      	ldr	r3, [r7, #0]
  407194:	3305      	adds	r3, #5
  407196:	781b      	ldrb	r3, [r3, #0]
  407198:	f003 030f 	and.w	r3, r3, #15
  40719c:	b2db      	uxtb	r3, r3
  40719e:	3330      	adds	r3, #48	; 0x30
  4071a0:	b2db      	uxtb	r3, r3
  4071a2:	7013      	strb	r3, [r2, #0]
		name[len - 2] = MAIN_HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
  4071a4:	89fb      	ldrh	r3, [r7, #14]
  4071a6:	3b02      	subs	r3, #2
  4071a8:	687a      	ldr	r2, [r7, #4]
  4071aa:	441a      	add	r2, r3
  4071ac:	683b      	ldr	r3, [r7, #0]
  4071ae:	3305      	adds	r3, #5
  4071b0:	781b      	ldrb	r3, [r3, #0]
  4071b2:	091b      	lsrs	r3, r3, #4
  4071b4:	b2db      	uxtb	r3, r3
  4071b6:	f003 030f 	and.w	r3, r3, #15
  4071ba:	2b09      	cmp	r3, #9
  4071bc:	dd07      	ble.n	4071ce <set_dev_name_to_mac+0x7e>
  4071be:	683b      	ldr	r3, [r7, #0]
  4071c0:	3305      	adds	r3, #5
  4071c2:	781b      	ldrb	r3, [r3, #0]
  4071c4:	091b      	lsrs	r3, r3, #4
  4071c6:	b2db      	uxtb	r3, r3
  4071c8:	3337      	adds	r3, #55	; 0x37
  4071ca:	b2db      	uxtb	r3, r3
  4071cc:	e006      	b.n	4071dc <set_dev_name_to_mac+0x8c>
  4071ce:	683b      	ldr	r3, [r7, #0]
  4071d0:	3305      	adds	r3, #5
  4071d2:	781b      	ldrb	r3, [r3, #0]
  4071d4:	091b      	lsrs	r3, r3, #4
  4071d6:	b2db      	uxtb	r3, r3
  4071d8:	3330      	adds	r3, #48	; 0x30
  4071da:	b2db      	uxtb	r3, r3
  4071dc:	7013      	strb	r3, [r2, #0]
		name[len - 4] = MAIN_HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
  4071de:	89fb      	ldrh	r3, [r7, #14]
  4071e0:	3b04      	subs	r3, #4
  4071e2:	687a      	ldr	r2, [r7, #4]
  4071e4:	441a      	add	r2, r3
  4071e6:	683b      	ldr	r3, [r7, #0]
  4071e8:	3304      	adds	r3, #4
  4071ea:	781b      	ldrb	r3, [r3, #0]
  4071ec:	f003 030f 	and.w	r3, r3, #15
  4071f0:	2b09      	cmp	r3, #9
  4071f2:	dd08      	ble.n	407206 <set_dev_name_to_mac+0xb6>
  4071f4:	683b      	ldr	r3, [r7, #0]
  4071f6:	3304      	adds	r3, #4
  4071f8:	781b      	ldrb	r3, [r3, #0]
  4071fa:	f003 030f 	and.w	r3, r3, #15
  4071fe:	b2db      	uxtb	r3, r3
  407200:	3337      	adds	r3, #55	; 0x37
  407202:	b2db      	uxtb	r3, r3
  407204:	e007      	b.n	407216 <set_dev_name_to_mac+0xc6>
  407206:	683b      	ldr	r3, [r7, #0]
  407208:	3304      	adds	r3, #4
  40720a:	781b      	ldrb	r3, [r3, #0]
  40720c:	f003 030f 	and.w	r3, r3, #15
  407210:	b2db      	uxtb	r3, r3
  407212:	3330      	adds	r3, #48	; 0x30
  407214:	b2db      	uxtb	r3, r3
  407216:	7013      	strb	r3, [r2, #0]
		name[len - 5] = MAIN_HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
  407218:	89fb      	ldrh	r3, [r7, #14]
  40721a:	3b05      	subs	r3, #5
  40721c:	687a      	ldr	r2, [r7, #4]
  40721e:	441a      	add	r2, r3
  407220:	683b      	ldr	r3, [r7, #0]
  407222:	3304      	adds	r3, #4
  407224:	781b      	ldrb	r3, [r3, #0]
  407226:	091b      	lsrs	r3, r3, #4
  407228:	b2db      	uxtb	r3, r3
  40722a:	f003 030f 	and.w	r3, r3, #15
  40722e:	2b09      	cmp	r3, #9
  407230:	dd07      	ble.n	407242 <set_dev_name_to_mac+0xf2>
  407232:	683b      	ldr	r3, [r7, #0]
  407234:	3304      	adds	r3, #4
  407236:	781b      	ldrb	r3, [r3, #0]
  407238:	091b      	lsrs	r3, r3, #4
  40723a:	b2db      	uxtb	r3, r3
  40723c:	3337      	adds	r3, #55	; 0x37
  40723e:	b2db      	uxtb	r3, r3
  407240:	e006      	b.n	407250 <set_dev_name_to_mac+0x100>
  407242:	683b      	ldr	r3, [r7, #0]
  407244:	3304      	adds	r3, #4
  407246:	781b      	ldrb	r3, [r3, #0]
  407248:	091b      	lsrs	r3, r3, #4
  40724a:	b2db      	uxtb	r3, r3
  40724c:	3330      	adds	r3, #48	; 0x30
  40724e:	b2db      	uxtb	r3, r3
  407250:	7013      	strb	r3, [r2, #0]
	}
}
  407252:	bf00      	nop
  407254:	3710      	adds	r7, #16
  407256:	46bd      	mov	sp, r7
  407258:	bd80      	pop	{r7, pc}
  40725a:	bf00      	nop
  40725c:	00400c25 	.word	0x00400c25

00407260 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 *
 * \return None.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  407260:	b590      	push	{r4, r7, lr}
  407262:	b089      	sub	sp, #36	; 0x24
  407264:	af02      	add	r7, sp, #8
  407266:	4603      	mov	r3, r0
  407268:	6039      	str	r1, [r7, #0]
  40726a:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
  40726c:	79fb      	ldrb	r3, [r7, #7]
  40726e:	2b2c      	cmp	r3, #44	; 0x2c
  407270:	d004      	beq.n	40727c <wifi_cb+0x1c>
  407272:	2b32      	cmp	r3, #50	; 0x32
  407274:	d019      	beq.n	4072aa <wifi_cb+0x4a>
  407276:	2b09      	cmp	r3, #9
  407278:	d033      	beq.n	4072e2 <wifi_cb+0x82>
	}
	break;

	default:
	{
		break;
  40727a:	e055      	b.n	407328 <wifi_cb+0xc8>
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
  40727c:	683b      	ldr	r3, [r7, #0]
  40727e:	617b      	str	r3, [r7, #20]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  407280:	697b      	ldr	r3, [r7, #20]
  407282:	781b      	ldrb	r3, [r3, #0]
  407284:	2b01      	cmp	r3, #1
  407286:	d105      	bne.n	407294 <wifi_cb+0x34>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  407288:	4829      	ldr	r0, [pc, #164]	; (407330 <wifi_cb+0xd0>)
  40728a:	4b2a      	ldr	r3, [pc, #168]	; (407334 <wifi_cb+0xd4>)
  40728c:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  40728e:	4b2a      	ldr	r3, [pc, #168]	; (407338 <wifi_cb+0xd8>)
  407290:	4798      	blx	r3
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
			gbConnectedWifi = false;
		}

		break;
  407292:	e048      	b.n	407326 <wifi_cb+0xc6>
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
			m2m_wifi_request_dhcp_client();
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  407294:	697b      	ldr	r3, [r7, #20]
  407296:	781b      	ldrb	r3, [r3, #0]
  407298:	2b00      	cmp	r3, #0
  40729a:	d144      	bne.n	407326 <wifi_cb+0xc6>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  40729c:	4827      	ldr	r0, [pc, #156]	; (40733c <wifi_cb+0xdc>)
  40729e:	4b25      	ldr	r3, [pc, #148]	; (407334 <wifi_cb+0xd4>)
  4072a0:	4798      	blx	r3
			gbConnectedWifi = false;
  4072a2:	4b27      	ldr	r3, [pc, #156]	; (407340 <wifi_cb+0xe0>)
  4072a4:	2200      	movs	r2, #0
  4072a6:	701a      	strb	r2, [r3, #0]
		}

		break;
  4072a8:	e03d      	b.n	407326 <wifi_cb+0xc6>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
  4072aa:	683b      	ldr	r3, [r7, #0]
  4072ac:	613b      	str	r3, [r7, #16]
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
  4072ae:	693b      	ldr	r3, [r7, #16]
  4072b0:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  4072b2:	4619      	mov	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
  4072b4:	693b      	ldr	r3, [r7, #16]
  4072b6:	3301      	adds	r3, #1
  4072b8:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  4072ba:	461a      	mov	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
  4072bc:	693b      	ldr	r3, [r7, #16]
  4072be:	3302      	adds	r3, #2
  4072c0:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  4072c2:	4618      	mov	r0, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
  4072c4:	693b      	ldr	r3, [r7, #16]
  4072c6:	3303      	adds	r3, #3
  4072c8:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  4072ca:	9300      	str	r3, [sp, #0]
  4072cc:	4603      	mov	r3, r0
  4072ce:	481d      	ldr	r0, [pc, #116]	; (407344 <wifi_cb+0xe4>)
  4072d0:	4c18      	ldr	r4, [pc, #96]	; (407334 <wifi_cb+0xd4>)
  4072d2:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gbConnectedWifi = true;
  4072d4:	4b1a      	ldr	r3, [pc, #104]	; (407340 <wifi_cb+0xe0>)
  4072d6:	2201      	movs	r2, #1
  4072d8:	701a      	strb	r2, [r3, #0]
		/* Obtain the IP Address by network name */
		gethostbyname((uint8_t *)server_host_name);
  4072da:	481b      	ldr	r0, [pc, #108]	; (407348 <wifi_cb+0xe8>)
  4072dc:	4b1b      	ldr	r3, [pc, #108]	; (40734c <wifi_cb+0xec>)
  4072de:	4798      	blx	r3
		break;
  4072e0:	e022      	b.n	407328 <wifi_cb+0xc8>
	}

	case M2M_WIFI_RESP_PROVISION_INFO:
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
  4072e2:	683b      	ldr	r3, [r7, #0]
  4072e4:	60fb      	str	r3, [r7, #12]
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO\r\n");
  4072e6:	481a      	ldr	r0, [pc, #104]	; (407350 <wifi_cb+0xf0>)
  4072e8:	4b12      	ldr	r3, [pc, #72]	; (407334 <wifi_cb+0xd4>)
  4072ea:	4798      	blx	r3

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
  4072ec:	68fb      	ldr	r3, [r7, #12]
  4072ee:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
  4072f2:	2b00      	cmp	r3, #0
  4072f4:	d113      	bne.n	40731e <wifi_cb+0xbe>
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
  4072f6:	68fc      	ldr	r4, [r7, #12]
  4072f8:	68fb      	ldr	r3, [r7, #12]
  4072fa:	4618      	mov	r0, r3
  4072fc:	4b15      	ldr	r3, [pc, #84]	; (407354 <wifi_cb+0xf4>)
  4072fe:	4798      	blx	r3
  407300:	4603      	mov	r3, r0
  407302:	b2d9      	uxtb	r1, r3
  407304:	68fb      	ldr	r3, [r7, #12]
  407306:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
  40730a:	68fb      	ldr	r3, [r7, #12]
  40730c:	f103 0021 	add.w	r0, r3, #33	; 0x21
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO\r\n");

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
  407310:	23ff      	movs	r3, #255	; 0xff
  407312:	9300      	str	r3, [sp, #0]
  407314:	4603      	mov	r3, r0
  407316:	4620      	mov	r0, r4
  407318:	4c0f      	ldr	r4, [pc, #60]	; (407358 <wifi_cb+0xf8>)
  40731a:	47a0      	blx	r4
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
		} else {
			printf("wifi_cb: provision failed!\r\n");
		}
	}
	break;
  40731c:	e004      	b.n	407328 <wifi_cb+0xc8>

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
		} else {
			printf("wifi_cb: provision failed!\r\n");
  40731e:	480f      	ldr	r0, [pc, #60]	; (40735c <wifi_cb+0xfc>)
  407320:	4b04      	ldr	r3, [pc, #16]	; (407334 <wifi_cb+0xd4>)
  407322:	4798      	blx	r3
		}
	}
	break;
  407324:	e000      	b.n	407328 <wifi_cb+0xc8>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
			gbConnectedWifi = false;
		}

		break;
  407326:	bf00      	nop
	default:
	{
		break;
	}
	}
}
  407328:	bf00      	nop
  40732a:	371c      	adds	r7, #28
  40732c:	46bd      	mov	sp, r7
  40732e:	bd90      	pop	{r4, r7, pc}
  407330:	0040ecfc 	.word	0x0040ecfc
  407334:	004078bd 	.word	0x004078bd
  407338:	004021f5 	.word	0x004021f5
  40733c:	0040ed1c 	.word	0x0040ed1c
  407340:	20400f90 	.word	0x20400f90
  407344:	0040ed40 	.word	0x0040ed40
  407348:	20400084 	.word	0x20400084
  40734c:	00404925 	.word	0x00404925
  407350:	0040ed68 	.word	0x0040ed68
  407354:	00407b41 	.word	0x00407b41
  407358:	00401e05 	.word	0x00401e05
  40735c:	0040ed90 	.word	0x0040ed90

00407360 <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  407360:	b580      	push	{r7, lr}
  407362:	b08e      	sub	sp, #56	; 0x38
  407364:	af00      	add	r7, sp, #0
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;

	/* Initialize the board. */
	sysclk_init();
  407366:	4b56      	ldr	r3, [pc, #344]	; (4074c0 <main+0x160>)
  407368:	4798      	blx	r3
	board_init();
  40736a:	4b56      	ldr	r3, [pc, #344]	; (4074c4 <main+0x164>)
  40736c:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
  40736e:	4b56      	ldr	r3, [pc, #344]	; (4074c8 <main+0x168>)
  407370:	4798      	blx	r3
	printf(STRING_HEADER);
  407372:	4856      	ldr	r0, [pc, #344]	; (4074cc <main+0x16c>)
  407374:	4b56      	ldr	r3, [pc, #344]	; (4074d0 <main+0x170>)
  407376:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  407378:	4b56      	ldr	r3, [pc, #344]	; (4074d4 <main+0x174>)
  40737a:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  40737c:	f107 031c 	add.w	r3, r7, #28
  407380:	2218      	movs	r2, #24
  407382:	2100      	movs	r1, #0
  407384:	4618      	mov	r0, r3
  407386:	4b54      	ldr	r3, [pc, #336]	; (4074d8 <main+0x178>)
  407388:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  40738a:	4b54      	ldr	r3, [pc, #336]	; (4074dc <main+0x17c>)
  40738c:	61fb      	str	r3, [r7, #28]
	ret = m2m_wifi_init(&param);
  40738e:	f107 031c 	add.w	r3, r7, #28
  407392:	4618      	mov	r0, r3
  407394:	4b52      	ldr	r3, [pc, #328]	; (4074e0 <main+0x180>)
  407396:	4798      	blx	r3
  407398:	4603      	mov	r3, r0
  40739a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (M2M_SUCCESS != ret) {
  40739e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  4073a2:	2b00      	cmp	r3, #0
  4073a4:	d006      	beq.n	4073b4 <main+0x54>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  4073a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  4073aa:	4619      	mov	r1, r3
  4073ac:	484d      	ldr	r0, [pc, #308]	; (4074e4 <main+0x184>)
  4073ae:	4b48      	ldr	r3, [pc, #288]	; (4074d0 <main+0x170>)
  4073b0:	4798      	blx	r3
		while (1) {
		}
  4073b2:	e7fe      	b.n	4073b2 <main+0x52>
	}

	/* Initialize socket API. */
	socketInit();
  4073b4:	4b4c      	ldr	r3, [pc, #304]	; (4074e8 <main+0x188>)
  4073b6:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
  4073b8:	494c      	ldr	r1, [pc, #304]	; (4074ec <main+0x18c>)
  4073ba:	484d      	ldr	r0, [pc, #308]	; (4074f0 <main+0x190>)
  4073bc:	4b4d      	ldr	r3, [pc, #308]	; (4074f4 <main+0x194>)
  4073be:	4798      	blx	r3

	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
  4073c0:	f107 0213 	add.w	r2, r7, #19
  4073c4:	f107 0314 	add.w	r3, r7, #20
  4073c8:	4611      	mov	r1, r2
  4073ca:	4618      	mov	r0, r3
  4073cc:	4b4a      	ldr	r3, [pc, #296]	; (4074f8 <main+0x198>)
  4073ce:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
  4073d0:	7cfb      	ldrb	r3, [r7, #19]
  4073d2:	2b00      	cmp	r3, #0
  4073d4:	d102      	bne.n	4073dc <main+0x7c>
		m2m_wifi_set_mac_address(gau8MacAddr);
  4073d6:	4849      	ldr	r0, [pc, #292]	; (4074fc <main+0x19c>)
  4073d8:	4b49      	ldr	r3, [pc, #292]	; (407500 <main+0x1a0>)
  4073da:	4798      	blx	r3
	}

	/* Retrieve MAC address of the WINC and use it for AP name. */
	m2m_wifi_get_mac_address(gau8MacAddr);
  4073dc:	4847      	ldr	r0, [pc, #284]	; (4074fc <main+0x19c>)
  4073de:	4b49      	ldr	r3, [pc, #292]	; (407504 <main+0x1a4>)
  4073e0:	4798      	blx	r3
	set_dev_name_to_mac((uint8_t *)gacDeviceName, gau8MacAddr);
  4073e2:	4946      	ldr	r1, [pc, #280]	; (4074fc <main+0x19c>)
  4073e4:	4848      	ldr	r0, [pc, #288]	; (407508 <main+0x1a8>)
  4073e6:	4b49      	ldr	r3, [pc, #292]	; (40750c <main+0x1ac>)
  4073e8:	4798      	blx	r3
	set_dev_name_to_mac((uint8_t *)gstrM2MAPConfig.au8SSID, gau8MacAddr);
  4073ea:	4944      	ldr	r1, [pc, #272]	; (4074fc <main+0x19c>)
  4073ec:	4848      	ldr	r0, [pc, #288]	; (407510 <main+0x1b0>)
  4073ee:	4b47      	ldr	r3, [pc, #284]	; (40750c <main+0x1ac>)
  4073f0:	4798      	blx	r3
	m2m_wifi_set_device_name((uint8_t *)gacDeviceName, (uint8_t)m2m_strlen((uint8_t *)gacDeviceName));
  4073f2:	4845      	ldr	r0, [pc, #276]	; (407508 <main+0x1a8>)
  4073f4:	4b47      	ldr	r3, [pc, #284]	; (407514 <main+0x1b4>)
  4073f6:	4798      	blx	r3
  4073f8:	4603      	mov	r3, r0
  4073fa:	b2db      	uxtb	r3, r3
  4073fc:	4619      	mov	r1, r3
  4073fe:	4842      	ldr	r0, [pc, #264]	; (407508 <main+0x1a8>)
  407400:	4b45      	ldr	r3, [pc, #276]	; (407518 <main+0x1b8>)
  407402:	4798      	blx	r3
	gstrM2MAPConfig.au8DHCPServerIP[0] = 0xC0; /* 192 */
  407404:	4b42      	ldr	r3, [pc, #264]	; (407510 <main+0x1b0>)
  407406:	22c0      	movs	r2, #192	; 0xc0
  407408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	gstrM2MAPConfig.au8DHCPServerIP[1] = 0xA8; /* 168 */
  40740c:	4b40      	ldr	r3, [pc, #256]	; (407510 <main+0x1b0>)
  40740e:	22a8      	movs	r2, #168	; 0xa8
  407410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	gstrM2MAPConfig.au8DHCPServerIP[2] = 0x01; /* 1 */
  407414:	4b3e      	ldr	r3, [pc, #248]	; (407510 <main+0x1b0>)
  407416:	2201      	movs	r2, #1
  407418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	gstrM2MAPConfig.au8DHCPServerIP[3] = 0x01; /* 1 */
  40741c:	4b3c      	ldr	r3, [pc, #240]	; (407510 <main+0x1b0>)
  40741e:	2201      	movs	r2, #1
  407420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	/* Start web provisioning mode. */
	m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
  407424:	2201      	movs	r2, #1
  407426:	493d      	ldr	r1, [pc, #244]	; (40751c <main+0x1bc>)
  407428:	4839      	ldr	r0, [pc, #228]	; (407510 <main+0x1b0>)
  40742a:	4b3d      	ldr	r3, [pc, #244]	; (407520 <main+0x1c0>)
  40742c:	4798      	blx	r3
	printf("\r\nProvision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n\r\n",
  40742e:	4a38      	ldr	r2, [pc, #224]	; (407510 <main+0x1b0>)
  407430:	493c      	ldr	r1, [pc, #240]	; (407524 <main+0x1c4>)
  407432:	483d      	ldr	r0, [pc, #244]	; (407528 <main+0x1c8>)
  407434:	4b26      	ldr	r3, [pc, #152]	; (4074d0 <main+0x170>)
  407436:	4798      	blx	r3
			MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);

	while (1) {
		m2m_wifi_handle_events(NULL);
  407438:	2000      	movs	r0, #0
  40743a:	4b3c      	ldr	r3, [pc, #240]	; (40752c <main+0x1cc>)
  40743c:	4798      	blx	r3

		if (gbConnectedWifi && !gbTcpConnection) {
  40743e:	4b3c      	ldr	r3, [pc, #240]	; (407530 <main+0x1d0>)
  407440:	781b      	ldrb	r3, [r3, #0]
  407442:	2b00      	cmp	r3, #0
  407444:	d0f8      	beq.n	407438 <main+0xd8>
  407446:	4b3b      	ldr	r3, [pc, #236]	; (407534 <main+0x1d4>)
  407448:	781b      	ldrb	r3, [r3, #0]
  40744a:	f083 0301 	eor.w	r3, r3, #1
  40744e:	b2db      	uxtb	r3, r3
  407450:	2b00      	cmp	r3, #0
  407452:	d0f1      	beq.n	407438 <main+0xd8>
			if (gbHostIpByName) {
  407454:	4b38      	ldr	r3, [pc, #224]	; (407538 <main+0x1d8>)
  407456:	781b      	ldrb	r3, [r3, #0]
  407458:	2b00      	cmp	r3, #0
  40745a:	d0ed      	beq.n	407438 <main+0xd8>
				/* Open TCP client socket. */
				if (tcp_client_socket < 0) {
  40745c:	4b37      	ldr	r3, [pc, #220]	; (40753c <main+0x1dc>)
  40745e:	f993 3000 	ldrsb.w	r3, [r3]
  407462:	2b00      	cmp	r3, #0
  407464:	da11      	bge.n	40748a <main+0x12a>
					if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  407466:	2200      	movs	r2, #0
  407468:	2101      	movs	r1, #1
  40746a:	2002      	movs	r0, #2
  40746c:	4b34      	ldr	r3, [pc, #208]	; (407540 <main+0x1e0>)
  40746e:	4798      	blx	r3
  407470:	4603      	mov	r3, r0
  407472:	461a      	mov	r2, r3
  407474:	4b31      	ldr	r3, [pc, #196]	; (40753c <main+0x1dc>)
  407476:	701a      	strb	r2, [r3, #0]
  407478:	4b30      	ldr	r3, [pc, #192]	; (40753c <main+0x1dc>)
  40747a:	f993 3000 	ldrsb.w	r3, [r3]
  40747e:	2b00      	cmp	r3, #0
  407480:	da03      	bge.n	40748a <main+0x12a>
						printf("main: failed to create TCP client socket error!\r\n");
  407482:	4830      	ldr	r0, [pc, #192]	; (407544 <main+0x1e4>)
  407484:	4b12      	ldr	r3, [pc, #72]	; (4074d0 <main+0x170>)
  407486:	4798      	blx	r3
						continue;
  407488:	e019      	b.n	4074be <main+0x15e>
					}
				}

				/* Connect TCP client socket. */
				addr_in.sin_family = AF_INET;
  40748a:	2302      	movs	r3, #2
  40748c:	803b      	strh	r3, [r7, #0]
				addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  40748e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
  407492:	807b      	strh	r3, [r7, #2]
				addr_in.sin_addr.s_addr = gu32HostIp;
  407494:	4b2c      	ldr	r3, [pc, #176]	; (407548 <main+0x1e8>)
  407496:	681b      	ldr	r3, [r3, #0]
  407498:	607b      	str	r3, [r7, #4]
				if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  40749a:	4b28      	ldr	r3, [pc, #160]	; (40753c <main+0x1dc>)
  40749c:	f993 3000 	ldrsb.w	r3, [r3]
  4074a0:	4639      	mov	r1, r7
  4074a2:	2210      	movs	r2, #16
  4074a4:	4618      	mov	r0, r3
  4074a6:	4b29      	ldr	r3, [pc, #164]	; (40754c <main+0x1ec>)
  4074a8:	4798      	blx	r3
  4074aa:	4603      	mov	r3, r0
  4074ac:	2b00      	cmp	r3, #0
  4074ae:	d003      	beq.n	4074b8 <main+0x158>
					printf("main: failed to connect socket error!\r\n");
  4074b0:	4827      	ldr	r0, [pc, #156]	; (407550 <main+0x1f0>)
  4074b2:	4b07      	ldr	r3, [pc, #28]	; (4074d0 <main+0x170>)
  4074b4:	4798      	blx	r3
					continue;
  4074b6:	e002      	b.n	4074be <main+0x15e>
				}

				gbTcpConnection = true;
  4074b8:	4b1e      	ldr	r3, [pc, #120]	; (407534 <main+0x1d4>)
  4074ba:	2201      	movs	r2, #1
  4074bc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
  4074be:	e7bb      	b.n	407438 <main+0xd8>
  4074c0:	00404e19 	.word	0x00404e19
  4074c4:	004053e9 	.word	0x004053e9
  4074c8:	00406f7d 	.word	0x00406f7d
  4074cc:	0040edb0 	.word	0x0040edb0
  4074d0:	004078bd 	.word	0x004078bd
  4074d4:	00400431 	.word	0x00400431
  4074d8:	004078e5 	.word	0x004078e5
  4074dc:	00407261 	.word	0x00407261
  4074e0:	00401ca1 	.word	0x00401ca1
  4074e4:	0040ee1c 	.word	0x0040ee1c
  4074e8:	00404409 	.word	0x00404409
  4074ec:	00406fb5 	.word	0x00406fb5
  4074f0:	00407009 	.word	0x00407009
  4074f4:	00404451 	.word	0x00404451
  4074f8:	00402205 	.word	0x00402205
  4074fc:	20400064 	.word	0x20400064
  407500:	004021b1 	.word	0x004021b1
  407504:	00402259 	.word	0x00402259
  407508:	2040006c 	.word	0x2040006c
  40750c:	00407151 	.word	0x00407151
  407510:	2040001c 	.word	0x2040001c
  407514:	00400c25 	.word	0x00400c25
  407518:	004022a9 	.word	0x004022a9
  40751c:	0040ec44 	.word	0x0040ec44
  407520:	00402301 	.word	0x00402301
  407524:	0040ee44 	.word	0x0040ee44
  407528:	0040ee54 	.word	0x0040ee54
  40752c:	00401de9 	.word	0x00401de9
  407530:	20400f90 	.word	0x20400f90
  407534:	20400f92 	.word	0x20400f92
  407538:	20400f91 	.word	0x20400f91
  40753c:	20400080 	.word	0x20400080
  407540:	0040447d 	.word	0x0040447d
  407544:	0040eea4 	.word	0x0040eea4
  407548:	20400a14 	.word	0x20400a14
  40754c:	00404579 	.word	0x00404579
  407550:	0040eed8 	.word	0x0040eed8

00407554 <__aeabi_uldivmod>:
  407554:	b953      	cbnz	r3, 40756c <__aeabi_uldivmod+0x18>
  407556:	b94a      	cbnz	r2, 40756c <__aeabi_uldivmod+0x18>
  407558:	2900      	cmp	r1, #0
  40755a:	bf08      	it	eq
  40755c:	2800      	cmpeq	r0, #0
  40755e:	bf1c      	itt	ne
  407560:	f04f 31ff 	movne.w	r1, #4294967295
  407564:	f04f 30ff 	movne.w	r0, #4294967295
  407568:	f000 b97e 	b.w	407868 <__aeabi_idiv0>
  40756c:	f1ad 0c08 	sub.w	ip, sp, #8
  407570:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407574:	f000 f806 	bl	407584 <__udivmoddi4>
  407578:	f8dd e004 	ldr.w	lr, [sp, #4]
  40757c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407580:	b004      	add	sp, #16
  407582:	4770      	bx	lr

00407584 <__udivmoddi4>:
  407584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407588:	468c      	mov	ip, r1
  40758a:	460e      	mov	r6, r1
  40758c:	4604      	mov	r4, r0
  40758e:	9d08      	ldr	r5, [sp, #32]
  407590:	2b00      	cmp	r3, #0
  407592:	d150      	bne.n	407636 <__udivmoddi4+0xb2>
  407594:	428a      	cmp	r2, r1
  407596:	4617      	mov	r7, r2
  407598:	d96c      	bls.n	407674 <__udivmoddi4+0xf0>
  40759a:	fab2 fe82 	clz	lr, r2
  40759e:	f1be 0f00 	cmp.w	lr, #0
  4075a2:	d00b      	beq.n	4075bc <__udivmoddi4+0x38>
  4075a4:	f1ce 0420 	rsb	r4, lr, #32
  4075a8:	fa20 f404 	lsr.w	r4, r0, r4
  4075ac:	fa01 f60e 	lsl.w	r6, r1, lr
  4075b0:	ea44 0c06 	orr.w	ip, r4, r6
  4075b4:	fa02 f70e 	lsl.w	r7, r2, lr
  4075b8:	fa00 f40e 	lsl.w	r4, r0, lr
  4075bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4075c0:	0c22      	lsrs	r2, r4, #16
  4075c2:	fbbc f0f9 	udiv	r0, ip, r9
  4075c6:	fa1f f887 	uxth.w	r8, r7
  4075ca:	fb09 c610 	mls	r6, r9, r0, ip
  4075ce:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4075d2:	fb00 f308 	mul.w	r3, r0, r8
  4075d6:	42b3      	cmp	r3, r6
  4075d8:	d909      	bls.n	4075ee <__udivmoddi4+0x6a>
  4075da:	19f6      	adds	r6, r6, r7
  4075dc:	f100 32ff 	add.w	r2, r0, #4294967295
  4075e0:	f080 8122 	bcs.w	407828 <__udivmoddi4+0x2a4>
  4075e4:	42b3      	cmp	r3, r6
  4075e6:	f240 811f 	bls.w	407828 <__udivmoddi4+0x2a4>
  4075ea:	3802      	subs	r0, #2
  4075ec:	443e      	add	r6, r7
  4075ee:	1af6      	subs	r6, r6, r3
  4075f0:	b2a2      	uxth	r2, r4
  4075f2:	fbb6 f3f9 	udiv	r3, r6, r9
  4075f6:	fb09 6613 	mls	r6, r9, r3, r6
  4075fa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4075fe:	fb03 f808 	mul.w	r8, r3, r8
  407602:	45a0      	cmp	r8, r4
  407604:	d909      	bls.n	40761a <__udivmoddi4+0x96>
  407606:	19e4      	adds	r4, r4, r7
  407608:	f103 32ff 	add.w	r2, r3, #4294967295
  40760c:	f080 810a 	bcs.w	407824 <__udivmoddi4+0x2a0>
  407610:	45a0      	cmp	r8, r4
  407612:	f240 8107 	bls.w	407824 <__udivmoddi4+0x2a0>
  407616:	3b02      	subs	r3, #2
  407618:	443c      	add	r4, r7
  40761a:	ebc8 0404 	rsb	r4, r8, r4
  40761e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407622:	2100      	movs	r1, #0
  407624:	2d00      	cmp	r5, #0
  407626:	d062      	beq.n	4076ee <__udivmoddi4+0x16a>
  407628:	fa24 f40e 	lsr.w	r4, r4, lr
  40762c:	2300      	movs	r3, #0
  40762e:	602c      	str	r4, [r5, #0]
  407630:	606b      	str	r3, [r5, #4]
  407632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407636:	428b      	cmp	r3, r1
  407638:	d907      	bls.n	40764a <__udivmoddi4+0xc6>
  40763a:	2d00      	cmp	r5, #0
  40763c:	d055      	beq.n	4076ea <__udivmoddi4+0x166>
  40763e:	2100      	movs	r1, #0
  407640:	e885 0041 	stmia.w	r5, {r0, r6}
  407644:	4608      	mov	r0, r1
  407646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40764a:	fab3 f183 	clz	r1, r3
  40764e:	2900      	cmp	r1, #0
  407650:	f040 8090 	bne.w	407774 <__udivmoddi4+0x1f0>
  407654:	42b3      	cmp	r3, r6
  407656:	d302      	bcc.n	40765e <__udivmoddi4+0xda>
  407658:	4282      	cmp	r2, r0
  40765a:	f200 80f8 	bhi.w	40784e <__udivmoddi4+0x2ca>
  40765e:	1a84      	subs	r4, r0, r2
  407660:	eb66 0603 	sbc.w	r6, r6, r3
  407664:	2001      	movs	r0, #1
  407666:	46b4      	mov	ip, r6
  407668:	2d00      	cmp	r5, #0
  40766a:	d040      	beq.n	4076ee <__udivmoddi4+0x16a>
  40766c:	e885 1010 	stmia.w	r5, {r4, ip}
  407670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407674:	b912      	cbnz	r2, 40767c <__udivmoddi4+0xf8>
  407676:	2701      	movs	r7, #1
  407678:	fbb7 f7f2 	udiv	r7, r7, r2
  40767c:	fab7 fe87 	clz	lr, r7
  407680:	f1be 0f00 	cmp.w	lr, #0
  407684:	d135      	bne.n	4076f2 <__udivmoddi4+0x16e>
  407686:	1bf3      	subs	r3, r6, r7
  407688:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40768c:	fa1f fc87 	uxth.w	ip, r7
  407690:	2101      	movs	r1, #1
  407692:	fbb3 f0f8 	udiv	r0, r3, r8
  407696:	0c22      	lsrs	r2, r4, #16
  407698:	fb08 3610 	mls	r6, r8, r0, r3
  40769c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4076a0:	fb0c f300 	mul.w	r3, ip, r0
  4076a4:	42b3      	cmp	r3, r6
  4076a6:	d907      	bls.n	4076b8 <__udivmoddi4+0x134>
  4076a8:	19f6      	adds	r6, r6, r7
  4076aa:	f100 32ff 	add.w	r2, r0, #4294967295
  4076ae:	d202      	bcs.n	4076b6 <__udivmoddi4+0x132>
  4076b0:	42b3      	cmp	r3, r6
  4076b2:	f200 80ce 	bhi.w	407852 <__udivmoddi4+0x2ce>
  4076b6:	4610      	mov	r0, r2
  4076b8:	1af6      	subs	r6, r6, r3
  4076ba:	b2a2      	uxth	r2, r4
  4076bc:	fbb6 f3f8 	udiv	r3, r6, r8
  4076c0:	fb08 6613 	mls	r6, r8, r3, r6
  4076c4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4076c8:	fb0c fc03 	mul.w	ip, ip, r3
  4076cc:	45a4      	cmp	ip, r4
  4076ce:	d907      	bls.n	4076e0 <__udivmoddi4+0x15c>
  4076d0:	19e4      	adds	r4, r4, r7
  4076d2:	f103 32ff 	add.w	r2, r3, #4294967295
  4076d6:	d202      	bcs.n	4076de <__udivmoddi4+0x15a>
  4076d8:	45a4      	cmp	ip, r4
  4076da:	f200 80b5 	bhi.w	407848 <__udivmoddi4+0x2c4>
  4076de:	4613      	mov	r3, r2
  4076e0:	ebcc 0404 	rsb	r4, ip, r4
  4076e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4076e8:	e79c      	b.n	407624 <__udivmoddi4+0xa0>
  4076ea:	4629      	mov	r1, r5
  4076ec:	4628      	mov	r0, r5
  4076ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4076f2:	f1ce 0120 	rsb	r1, lr, #32
  4076f6:	fa06 f30e 	lsl.w	r3, r6, lr
  4076fa:	fa07 f70e 	lsl.w	r7, r7, lr
  4076fe:	fa20 f901 	lsr.w	r9, r0, r1
  407702:	ea4f 4817 	mov.w	r8, r7, lsr #16
  407706:	40ce      	lsrs	r6, r1
  407708:	ea49 0903 	orr.w	r9, r9, r3
  40770c:	fbb6 faf8 	udiv	sl, r6, r8
  407710:	ea4f 4419 	mov.w	r4, r9, lsr #16
  407714:	fb08 661a 	mls	r6, r8, sl, r6
  407718:	fa1f fc87 	uxth.w	ip, r7
  40771c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  407720:	fb0a f20c 	mul.w	r2, sl, ip
  407724:	429a      	cmp	r2, r3
  407726:	fa00 f40e 	lsl.w	r4, r0, lr
  40772a:	d90a      	bls.n	407742 <__udivmoddi4+0x1be>
  40772c:	19db      	adds	r3, r3, r7
  40772e:	f10a 31ff 	add.w	r1, sl, #4294967295
  407732:	f080 8087 	bcs.w	407844 <__udivmoddi4+0x2c0>
  407736:	429a      	cmp	r2, r3
  407738:	f240 8084 	bls.w	407844 <__udivmoddi4+0x2c0>
  40773c:	f1aa 0a02 	sub.w	sl, sl, #2
  407740:	443b      	add	r3, r7
  407742:	1a9b      	subs	r3, r3, r2
  407744:	fa1f f989 	uxth.w	r9, r9
  407748:	fbb3 f1f8 	udiv	r1, r3, r8
  40774c:	fb08 3311 	mls	r3, r8, r1, r3
  407750:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  407754:	fb01 f60c 	mul.w	r6, r1, ip
  407758:	429e      	cmp	r6, r3
  40775a:	d907      	bls.n	40776c <__udivmoddi4+0x1e8>
  40775c:	19db      	adds	r3, r3, r7
  40775e:	f101 32ff 	add.w	r2, r1, #4294967295
  407762:	d26b      	bcs.n	40783c <__udivmoddi4+0x2b8>
  407764:	429e      	cmp	r6, r3
  407766:	d969      	bls.n	40783c <__udivmoddi4+0x2b8>
  407768:	3902      	subs	r1, #2
  40776a:	443b      	add	r3, r7
  40776c:	1b9b      	subs	r3, r3, r6
  40776e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  407772:	e78e      	b.n	407692 <__udivmoddi4+0x10e>
  407774:	f1c1 0e20 	rsb	lr, r1, #32
  407778:	fa22 f40e 	lsr.w	r4, r2, lr
  40777c:	408b      	lsls	r3, r1
  40777e:	4323      	orrs	r3, r4
  407780:	fa20 f70e 	lsr.w	r7, r0, lr
  407784:	fa06 f401 	lsl.w	r4, r6, r1
  407788:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40778c:	fa26 f60e 	lsr.w	r6, r6, lr
  407790:	433c      	orrs	r4, r7
  407792:	fbb6 f9fc 	udiv	r9, r6, ip
  407796:	0c27      	lsrs	r7, r4, #16
  407798:	fb0c 6619 	mls	r6, ip, r9, r6
  40779c:	fa1f f883 	uxth.w	r8, r3
  4077a0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4077a4:	fb09 f708 	mul.w	r7, r9, r8
  4077a8:	42b7      	cmp	r7, r6
  4077aa:	fa02 f201 	lsl.w	r2, r2, r1
  4077ae:	fa00 fa01 	lsl.w	sl, r0, r1
  4077b2:	d908      	bls.n	4077c6 <__udivmoddi4+0x242>
  4077b4:	18f6      	adds	r6, r6, r3
  4077b6:	f109 30ff 	add.w	r0, r9, #4294967295
  4077ba:	d241      	bcs.n	407840 <__udivmoddi4+0x2bc>
  4077bc:	42b7      	cmp	r7, r6
  4077be:	d93f      	bls.n	407840 <__udivmoddi4+0x2bc>
  4077c0:	f1a9 0902 	sub.w	r9, r9, #2
  4077c4:	441e      	add	r6, r3
  4077c6:	1bf6      	subs	r6, r6, r7
  4077c8:	b2a0      	uxth	r0, r4
  4077ca:	fbb6 f4fc 	udiv	r4, r6, ip
  4077ce:	fb0c 6614 	mls	r6, ip, r4, r6
  4077d2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4077d6:	fb04 f808 	mul.w	r8, r4, r8
  4077da:	45b8      	cmp	r8, r7
  4077dc:	d907      	bls.n	4077ee <__udivmoddi4+0x26a>
  4077de:	18ff      	adds	r7, r7, r3
  4077e0:	f104 30ff 	add.w	r0, r4, #4294967295
  4077e4:	d228      	bcs.n	407838 <__udivmoddi4+0x2b4>
  4077e6:	45b8      	cmp	r8, r7
  4077e8:	d926      	bls.n	407838 <__udivmoddi4+0x2b4>
  4077ea:	3c02      	subs	r4, #2
  4077ec:	441f      	add	r7, r3
  4077ee:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4077f2:	ebc8 0707 	rsb	r7, r8, r7
  4077f6:	fba0 8902 	umull	r8, r9, r0, r2
  4077fa:	454f      	cmp	r7, r9
  4077fc:	4644      	mov	r4, r8
  4077fe:	464e      	mov	r6, r9
  407800:	d314      	bcc.n	40782c <__udivmoddi4+0x2a8>
  407802:	d029      	beq.n	407858 <__udivmoddi4+0x2d4>
  407804:	b365      	cbz	r5, 407860 <__udivmoddi4+0x2dc>
  407806:	ebba 0304 	subs.w	r3, sl, r4
  40780a:	eb67 0706 	sbc.w	r7, r7, r6
  40780e:	fa07 fe0e 	lsl.w	lr, r7, lr
  407812:	40cb      	lsrs	r3, r1
  407814:	40cf      	lsrs	r7, r1
  407816:	ea4e 0303 	orr.w	r3, lr, r3
  40781a:	e885 0088 	stmia.w	r5, {r3, r7}
  40781e:	2100      	movs	r1, #0
  407820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407824:	4613      	mov	r3, r2
  407826:	e6f8      	b.n	40761a <__udivmoddi4+0x96>
  407828:	4610      	mov	r0, r2
  40782a:	e6e0      	b.n	4075ee <__udivmoddi4+0x6a>
  40782c:	ebb8 0402 	subs.w	r4, r8, r2
  407830:	eb69 0603 	sbc.w	r6, r9, r3
  407834:	3801      	subs	r0, #1
  407836:	e7e5      	b.n	407804 <__udivmoddi4+0x280>
  407838:	4604      	mov	r4, r0
  40783a:	e7d8      	b.n	4077ee <__udivmoddi4+0x26a>
  40783c:	4611      	mov	r1, r2
  40783e:	e795      	b.n	40776c <__udivmoddi4+0x1e8>
  407840:	4681      	mov	r9, r0
  407842:	e7c0      	b.n	4077c6 <__udivmoddi4+0x242>
  407844:	468a      	mov	sl, r1
  407846:	e77c      	b.n	407742 <__udivmoddi4+0x1be>
  407848:	3b02      	subs	r3, #2
  40784a:	443c      	add	r4, r7
  40784c:	e748      	b.n	4076e0 <__udivmoddi4+0x15c>
  40784e:	4608      	mov	r0, r1
  407850:	e70a      	b.n	407668 <__udivmoddi4+0xe4>
  407852:	3802      	subs	r0, #2
  407854:	443e      	add	r6, r7
  407856:	e72f      	b.n	4076b8 <__udivmoddi4+0x134>
  407858:	45c2      	cmp	sl, r8
  40785a:	d3e7      	bcc.n	40782c <__udivmoddi4+0x2a8>
  40785c:	463e      	mov	r6, r7
  40785e:	e7d1      	b.n	407804 <__udivmoddi4+0x280>
  407860:	4629      	mov	r1, r5
  407862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407866:	bf00      	nop

00407868 <__aeabi_idiv0>:
  407868:	4770      	bx	lr
  40786a:	bf00      	nop

0040786c <__libc_init_array>:
  40786c:	b570      	push	{r4, r5, r6, lr}
  40786e:	4e0f      	ldr	r6, [pc, #60]	; (4078ac <__libc_init_array+0x40>)
  407870:	4d0f      	ldr	r5, [pc, #60]	; (4078b0 <__libc_init_array+0x44>)
  407872:	1b76      	subs	r6, r6, r5
  407874:	10b6      	asrs	r6, r6, #2
  407876:	bf18      	it	ne
  407878:	2400      	movne	r4, #0
  40787a:	d005      	beq.n	407888 <__libc_init_array+0x1c>
  40787c:	3401      	adds	r4, #1
  40787e:	f855 3b04 	ldr.w	r3, [r5], #4
  407882:	4798      	blx	r3
  407884:	42a6      	cmp	r6, r4
  407886:	d1f9      	bne.n	40787c <__libc_init_array+0x10>
  407888:	4e0a      	ldr	r6, [pc, #40]	; (4078b4 <__libc_init_array+0x48>)
  40788a:	4d0b      	ldr	r5, [pc, #44]	; (4078b8 <__libc_init_array+0x4c>)
  40788c:	1b76      	subs	r6, r6, r5
  40788e:	f007 fc09 	bl	40f0a4 <_init>
  407892:	10b6      	asrs	r6, r6, #2
  407894:	bf18      	it	ne
  407896:	2400      	movne	r4, #0
  407898:	d006      	beq.n	4078a8 <__libc_init_array+0x3c>
  40789a:	3401      	adds	r4, #1
  40789c:	f855 3b04 	ldr.w	r3, [r5], #4
  4078a0:	4798      	blx	r3
  4078a2:	42a6      	cmp	r6, r4
  4078a4:	d1f9      	bne.n	40789a <__libc_init_array+0x2e>
  4078a6:	bd70      	pop	{r4, r5, r6, pc}
  4078a8:	bd70      	pop	{r4, r5, r6, pc}
  4078aa:	bf00      	nop
  4078ac:	0040f0b0 	.word	0x0040f0b0
  4078b0:	0040f0b0 	.word	0x0040f0b0
  4078b4:	0040f0b8 	.word	0x0040f0b8
  4078b8:	0040f0b0 	.word	0x0040f0b0

004078bc <iprintf>:
  4078bc:	b40f      	push	{r0, r1, r2, r3}
  4078be:	b500      	push	{lr}
  4078c0:	4907      	ldr	r1, [pc, #28]	; (4078e0 <iprintf+0x24>)
  4078c2:	b083      	sub	sp, #12
  4078c4:	ab04      	add	r3, sp, #16
  4078c6:	6808      	ldr	r0, [r1, #0]
  4078c8:	f853 2b04 	ldr.w	r2, [r3], #4
  4078cc:	6881      	ldr	r1, [r0, #8]
  4078ce:	9301      	str	r3, [sp, #4]
  4078d0:	f001 fd2e 	bl	409330 <_vfiprintf_r>
  4078d4:	b003      	add	sp, #12
  4078d6:	f85d eb04 	ldr.w	lr, [sp], #4
  4078da:	b004      	add	sp, #16
  4078dc:	4770      	bx	lr
  4078de:	bf00      	nop
  4078e0:	204004d0 	.word	0x204004d0

004078e4 <memset>:
  4078e4:	b470      	push	{r4, r5, r6}
  4078e6:	0784      	lsls	r4, r0, #30
  4078e8:	d046      	beq.n	407978 <memset+0x94>
  4078ea:	1e54      	subs	r4, r2, #1
  4078ec:	2a00      	cmp	r2, #0
  4078ee:	d041      	beq.n	407974 <memset+0x90>
  4078f0:	b2cd      	uxtb	r5, r1
  4078f2:	4603      	mov	r3, r0
  4078f4:	e002      	b.n	4078fc <memset+0x18>
  4078f6:	1e62      	subs	r2, r4, #1
  4078f8:	b3e4      	cbz	r4, 407974 <memset+0x90>
  4078fa:	4614      	mov	r4, r2
  4078fc:	f803 5b01 	strb.w	r5, [r3], #1
  407900:	079a      	lsls	r2, r3, #30
  407902:	d1f8      	bne.n	4078f6 <memset+0x12>
  407904:	2c03      	cmp	r4, #3
  407906:	d92e      	bls.n	407966 <memset+0x82>
  407908:	b2cd      	uxtb	r5, r1
  40790a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40790e:	2c0f      	cmp	r4, #15
  407910:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407914:	d919      	bls.n	40794a <memset+0x66>
  407916:	f103 0210 	add.w	r2, r3, #16
  40791a:	4626      	mov	r6, r4
  40791c:	3e10      	subs	r6, #16
  40791e:	2e0f      	cmp	r6, #15
  407920:	f842 5c10 	str.w	r5, [r2, #-16]
  407924:	f842 5c0c 	str.w	r5, [r2, #-12]
  407928:	f842 5c08 	str.w	r5, [r2, #-8]
  40792c:	f842 5c04 	str.w	r5, [r2, #-4]
  407930:	f102 0210 	add.w	r2, r2, #16
  407934:	d8f2      	bhi.n	40791c <memset+0x38>
  407936:	f1a4 0210 	sub.w	r2, r4, #16
  40793a:	f022 020f 	bic.w	r2, r2, #15
  40793e:	f004 040f 	and.w	r4, r4, #15
  407942:	3210      	adds	r2, #16
  407944:	2c03      	cmp	r4, #3
  407946:	4413      	add	r3, r2
  407948:	d90d      	bls.n	407966 <memset+0x82>
  40794a:	461e      	mov	r6, r3
  40794c:	4622      	mov	r2, r4
  40794e:	3a04      	subs	r2, #4
  407950:	2a03      	cmp	r2, #3
  407952:	f846 5b04 	str.w	r5, [r6], #4
  407956:	d8fa      	bhi.n	40794e <memset+0x6a>
  407958:	1f22      	subs	r2, r4, #4
  40795a:	f022 0203 	bic.w	r2, r2, #3
  40795e:	3204      	adds	r2, #4
  407960:	4413      	add	r3, r2
  407962:	f004 0403 	and.w	r4, r4, #3
  407966:	b12c      	cbz	r4, 407974 <memset+0x90>
  407968:	b2c9      	uxtb	r1, r1
  40796a:	441c      	add	r4, r3
  40796c:	f803 1b01 	strb.w	r1, [r3], #1
  407970:	42a3      	cmp	r3, r4
  407972:	d1fb      	bne.n	40796c <memset+0x88>
  407974:	bc70      	pop	{r4, r5, r6}
  407976:	4770      	bx	lr
  407978:	4614      	mov	r4, r2
  40797a:	4603      	mov	r3, r0
  40797c:	e7c2      	b.n	407904 <memset+0x20>
  40797e:	bf00      	nop

00407980 <setbuf>:
  407980:	2900      	cmp	r1, #0
  407982:	bf0c      	ite	eq
  407984:	2202      	moveq	r2, #2
  407986:	2200      	movne	r2, #0
  407988:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40798c:	f000 b800 	b.w	407990 <setvbuf>

00407990 <setvbuf>:
  407990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407994:	4c51      	ldr	r4, [pc, #324]	; (407adc <setvbuf+0x14c>)
  407996:	6825      	ldr	r5, [r4, #0]
  407998:	b083      	sub	sp, #12
  40799a:	4604      	mov	r4, r0
  40799c:	460f      	mov	r7, r1
  40799e:	4690      	mov	r8, r2
  4079a0:	461e      	mov	r6, r3
  4079a2:	b115      	cbz	r5, 4079aa <setvbuf+0x1a>
  4079a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4079a6:	2b00      	cmp	r3, #0
  4079a8:	d079      	beq.n	407a9e <setvbuf+0x10e>
  4079aa:	f1b8 0f02 	cmp.w	r8, #2
  4079ae:	d004      	beq.n	4079ba <setvbuf+0x2a>
  4079b0:	f1b8 0f01 	cmp.w	r8, #1
  4079b4:	d87f      	bhi.n	407ab6 <setvbuf+0x126>
  4079b6:	2e00      	cmp	r6, #0
  4079b8:	db7d      	blt.n	407ab6 <setvbuf+0x126>
  4079ba:	4621      	mov	r1, r4
  4079bc:	4628      	mov	r0, r5
  4079be:	f003 fcc3 	bl	40b348 <_fflush_r>
  4079c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4079c4:	b141      	cbz	r1, 4079d8 <setvbuf+0x48>
  4079c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4079ca:	4299      	cmp	r1, r3
  4079cc:	d002      	beq.n	4079d4 <setvbuf+0x44>
  4079ce:	4628      	mov	r0, r5
  4079d0:	f003 fe18 	bl	40b604 <_free_r>
  4079d4:	2300      	movs	r3, #0
  4079d6:	6323      	str	r3, [r4, #48]	; 0x30
  4079d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4079dc:	2200      	movs	r2, #0
  4079de:	61a2      	str	r2, [r4, #24]
  4079e0:	6062      	str	r2, [r4, #4]
  4079e2:	061a      	lsls	r2, r3, #24
  4079e4:	d454      	bmi.n	407a90 <setvbuf+0x100>
  4079e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4079ea:	f023 0303 	bic.w	r3, r3, #3
  4079ee:	f1b8 0f02 	cmp.w	r8, #2
  4079f2:	81a3      	strh	r3, [r4, #12]
  4079f4:	d039      	beq.n	407a6a <setvbuf+0xda>
  4079f6:	ab01      	add	r3, sp, #4
  4079f8:	466a      	mov	r2, sp
  4079fa:	4621      	mov	r1, r4
  4079fc:	4628      	mov	r0, r5
  4079fe:	f004 f8a3 	bl	40bb48 <__swhatbuf_r>
  407a02:	89a3      	ldrh	r3, [r4, #12]
  407a04:	4318      	orrs	r0, r3
  407a06:	81a0      	strh	r0, [r4, #12]
  407a08:	b326      	cbz	r6, 407a54 <setvbuf+0xc4>
  407a0a:	b327      	cbz	r7, 407a56 <setvbuf+0xc6>
  407a0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407a0e:	2b00      	cmp	r3, #0
  407a10:	d04d      	beq.n	407aae <setvbuf+0x11e>
  407a12:	9b00      	ldr	r3, [sp, #0]
  407a14:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  407a18:	6027      	str	r7, [r4, #0]
  407a1a:	429e      	cmp	r6, r3
  407a1c:	bf1c      	itt	ne
  407a1e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  407a22:	81a0      	strhne	r0, [r4, #12]
  407a24:	f1b8 0f01 	cmp.w	r8, #1
  407a28:	bf08      	it	eq
  407a2a:	f040 0001 	orreq.w	r0, r0, #1
  407a2e:	b283      	uxth	r3, r0
  407a30:	bf08      	it	eq
  407a32:	81a0      	strheq	r0, [r4, #12]
  407a34:	f003 0008 	and.w	r0, r3, #8
  407a38:	b280      	uxth	r0, r0
  407a3a:	6127      	str	r7, [r4, #16]
  407a3c:	6166      	str	r6, [r4, #20]
  407a3e:	b318      	cbz	r0, 407a88 <setvbuf+0xf8>
  407a40:	f013 0001 	ands.w	r0, r3, #1
  407a44:	d02f      	beq.n	407aa6 <setvbuf+0x116>
  407a46:	2000      	movs	r0, #0
  407a48:	4276      	negs	r6, r6
  407a4a:	61a6      	str	r6, [r4, #24]
  407a4c:	60a0      	str	r0, [r4, #8]
  407a4e:	b003      	add	sp, #12
  407a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407a54:	9e00      	ldr	r6, [sp, #0]
  407a56:	4630      	mov	r0, r6
  407a58:	f004 f8ea 	bl	40bc30 <malloc>
  407a5c:	4607      	mov	r7, r0
  407a5e:	b368      	cbz	r0, 407abc <setvbuf+0x12c>
  407a60:	89a3      	ldrh	r3, [r4, #12]
  407a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407a66:	81a3      	strh	r3, [r4, #12]
  407a68:	e7d0      	b.n	407a0c <setvbuf+0x7c>
  407a6a:	2000      	movs	r0, #0
  407a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407a70:	f043 0302 	orr.w	r3, r3, #2
  407a74:	2500      	movs	r5, #0
  407a76:	2101      	movs	r1, #1
  407a78:	81a3      	strh	r3, [r4, #12]
  407a7a:	60a5      	str	r5, [r4, #8]
  407a7c:	6022      	str	r2, [r4, #0]
  407a7e:	6122      	str	r2, [r4, #16]
  407a80:	6161      	str	r1, [r4, #20]
  407a82:	b003      	add	sp, #12
  407a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407a88:	60a0      	str	r0, [r4, #8]
  407a8a:	b003      	add	sp, #12
  407a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407a90:	6921      	ldr	r1, [r4, #16]
  407a92:	4628      	mov	r0, r5
  407a94:	f003 fdb6 	bl	40b604 <_free_r>
  407a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a9c:	e7a3      	b.n	4079e6 <setvbuf+0x56>
  407a9e:	4628      	mov	r0, r5
  407aa0:	f003 fce6 	bl	40b470 <__sinit>
  407aa4:	e781      	b.n	4079aa <setvbuf+0x1a>
  407aa6:	60a6      	str	r6, [r4, #8]
  407aa8:	b003      	add	sp, #12
  407aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407aae:	4628      	mov	r0, r5
  407ab0:	f003 fcde 	bl	40b470 <__sinit>
  407ab4:	e7ad      	b.n	407a12 <setvbuf+0x82>
  407ab6:	f04f 30ff 	mov.w	r0, #4294967295
  407aba:	e7e2      	b.n	407a82 <setvbuf+0xf2>
  407abc:	f8dd 9000 	ldr.w	r9, [sp]
  407ac0:	45b1      	cmp	r9, r6
  407ac2:	d006      	beq.n	407ad2 <setvbuf+0x142>
  407ac4:	4648      	mov	r0, r9
  407ac6:	f004 f8b3 	bl	40bc30 <malloc>
  407aca:	4607      	mov	r7, r0
  407acc:	b108      	cbz	r0, 407ad2 <setvbuf+0x142>
  407ace:	464e      	mov	r6, r9
  407ad0:	e7c6      	b.n	407a60 <setvbuf+0xd0>
  407ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407ad6:	f04f 30ff 	mov.w	r0, #4294967295
  407ada:	e7c7      	b.n	407a6c <setvbuf+0xdc>
  407adc:	204004d0 	.word	0x204004d0

00407ae0 <sprintf>:
  407ae0:	b40e      	push	{r1, r2, r3}
  407ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
  407ae4:	b09c      	sub	sp, #112	; 0x70
  407ae6:	ab21      	add	r3, sp, #132	; 0x84
  407ae8:	490f      	ldr	r1, [pc, #60]	; (407b28 <sprintf+0x48>)
  407aea:	f853 2b04 	ldr.w	r2, [r3], #4
  407aee:	9301      	str	r3, [sp, #4]
  407af0:	4605      	mov	r5, r0
  407af2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  407af6:	6808      	ldr	r0, [r1, #0]
  407af8:	9502      	str	r5, [sp, #8]
  407afa:	f44f 7702 	mov.w	r7, #520	; 0x208
  407afe:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407b02:	a902      	add	r1, sp, #8
  407b04:	9506      	str	r5, [sp, #24]
  407b06:	f8ad 7014 	strh.w	r7, [sp, #20]
  407b0a:	9404      	str	r4, [sp, #16]
  407b0c:	9407      	str	r4, [sp, #28]
  407b0e:	f8ad 6016 	strh.w	r6, [sp, #22]
  407b12:	f000 f883 	bl	407c1c <_svfprintf_r>
  407b16:	9b02      	ldr	r3, [sp, #8]
  407b18:	2200      	movs	r2, #0
  407b1a:	701a      	strb	r2, [r3, #0]
  407b1c:	b01c      	add	sp, #112	; 0x70
  407b1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407b22:	b003      	add	sp, #12
  407b24:	4770      	bx	lr
  407b26:	bf00      	nop
  407b28:	204004d0 	.word	0x204004d0
	...

00407b40 <strlen>:
  407b40:	f890 f000 	pld	[r0]
  407b44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407b48:	f020 0107 	bic.w	r1, r0, #7
  407b4c:	f06f 0c00 	mvn.w	ip, #0
  407b50:	f010 0407 	ands.w	r4, r0, #7
  407b54:	f891 f020 	pld	[r1, #32]
  407b58:	f040 8049 	bne.w	407bee <strlen+0xae>
  407b5c:	f04f 0400 	mov.w	r4, #0
  407b60:	f06f 0007 	mvn.w	r0, #7
  407b64:	e9d1 2300 	ldrd	r2, r3, [r1]
  407b68:	f891 f040 	pld	[r1, #64]	; 0x40
  407b6c:	f100 0008 	add.w	r0, r0, #8
  407b70:	fa82 f24c 	uadd8	r2, r2, ip
  407b74:	faa4 f28c 	sel	r2, r4, ip
  407b78:	fa83 f34c 	uadd8	r3, r3, ip
  407b7c:	faa2 f38c 	sel	r3, r2, ip
  407b80:	bb4b      	cbnz	r3, 407bd6 <strlen+0x96>
  407b82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407b86:	fa82 f24c 	uadd8	r2, r2, ip
  407b8a:	f100 0008 	add.w	r0, r0, #8
  407b8e:	faa4 f28c 	sel	r2, r4, ip
  407b92:	fa83 f34c 	uadd8	r3, r3, ip
  407b96:	faa2 f38c 	sel	r3, r2, ip
  407b9a:	b9e3      	cbnz	r3, 407bd6 <strlen+0x96>
  407b9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407ba0:	fa82 f24c 	uadd8	r2, r2, ip
  407ba4:	f100 0008 	add.w	r0, r0, #8
  407ba8:	faa4 f28c 	sel	r2, r4, ip
  407bac:	fa83 f34c 	uadd8	r3, r3, ip
  407bb0:	faa2 f38c 	sel	r3, r2, ip
  407bb4:	b97b      	cbnz	r3, 407bd6 <strlen+0x96>
  407bb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  407bba:	f101 0120 	add.w	r1, r1, #32
  407bbe:	fa82 f24c 	uadd8	r2, r2, ip
  407bc2:	f100 0008 	add.w	r0, r0, #8
  407bc6:	faa4 f28c 	sel	r2, r4, ip
  407bca:	fa83 f34c 	uadd8	r3, r3, ip
  407bce:	faa2 f38c 	sel	r3, r2, ip
  407bd2:	2b00      	cmp	r3, #0
  407bd4:	d0c6      	beq.n	407b64 <strlen+0x24>
  407bd6:	2a00      	cmp	r2, #0
  407bd8:	bf04      	itt	eq
  407bda:	3004      	addeq	r0, #4
  407bdc:	461a      	moveq	r2, r3
  407bde:	ba12      	rev	r2, r2
  407be0:	fab2 f282 	clz	r2, r2
  407be4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407be8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  407bec:	4770      	bx	lr
  407bee:	e9d1 2300 	ldrd	r2, r3, [r1]
  407bf2:	f004 0503 	and.w	r5, r4, #3
  407bf6:	f1c4 0000 	rsb	r0, r4, #0
  407bfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  407bfe:	f014 0f04 	tst.w	r4, #4
  407c02:	f891 f040 	pld	[r1, #64]	; 0x40
  407c06:	fa0c f505 	lsl.w	r5, ip, r5
  407c0a:	ea62 0205 	orn	r2, r2, r5
  407c0e:	bf1c      	itt	ne
  407c10:	ea63 0305 	ornne	r3, r3, r5
  407c14:	4662      	movne	r2, ip
  407c16:	f04f 0400 	mov.w	r4, #0
  407c1a:	e7a9      	b.n	407b70 <strlen+0x30>

00407c1c <_svfprintf_r>:
  407c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c20:	b0c1      	sub	sp, #260	; 0x104
  407c22:	460c      	mov	r4, r1
  407c24:	9109      	str	r1, [sp, #36]	; 0x24
  407c26:	4615      	mov	r5, r2
  407c28:	930e      	str	r3, [sp, #56]	; 0x38
  407c2a:	900a      	str	r0, [sp, #40]	; 0x28
  407c2c:	f003 ff88 	bl	40bb40 <_localeconv_r>
  407c30:	6803      	ldr	r3, [r0, #0]
  407c32:	9317      	str	r3, [sp, #92]	; 0x5c
  407c34:	4618      	mov	r0, r3
  407c36:	f7ff ff83 	bl	407b40 <strlen>
  407c3a:	89a3      	ldrh	r3, [r4, #12]
  407c3c:	9016      	str	r0, [sp, #88]	; 0x58
  407c3e:	061e      	lsls	r6, r3, #24
  407c40:	d503      	bpl.n	407c4a <_svfprintf_r+0x2e>
  407c42:	6923      	ldr	r3, [r4, #16]
  407c44:	2b00      	cmp	r3, #0
  407c46:	f001 8119 	beq.w	408e7c <_svfprintf_r+0x1260>
  407c4a:	2300      	movs	r3, #0
  407c4c:	461a      	mov	r2, r3
  407c4e:	9312      	str	r3, [sp, #72]	; 0x48
  407c50:	9325      	str	r3, [sp, #148]	; 0x94
  407c52:	9324      	str	r3, [sp, #144]	; 0x90
  407c54:	9319      	str	r3, [sp, #100]	; 0x64
  407c56:	930b      	str	r3, [sp, #44]	; 0x2c
  407c58:	f8df a464 	ldr.w	sl, [pc, #1124]	; 4080c0 <_svfprintf_r+0x4a4>
  407c5c:	9214      	str	r2, [sp, #80]	; 0x50
  407c5e:	ab30      	add	r3, sp, #192	; 0xc0
  407c60:	9323      	str	r3, [sp, #140]	; 0x8c
  407c62:	4699      	mov	r9, r3
  407c64:	9215      	str	r2, [sp, #84]	; 0x54
  407c66:	46a8      	mov	r8, r5
  407c68:	f898 3000 	ldrb.w	r3, [r8]
  407c6c:	4644      	mov	r4, r8
  407c6e:	b1eb      	cbz	r3, 407cac <_svfprintf_r+0x90>
  407c70:	2b25      	cmp	r3, #37	; 0x25
  407c72:	d102      	bne.n	407c7a <_svfprintf_r+0x5e>
  407c74:	e01a      	b.n	407cac <_svfprintf_r+0x90>
  407c76:	2b25      	cmp	r3, #37	; 0x25
  407c78:	d003      	beq.n	407c82 <_svfprintf_r+0x66>
  407c7a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407c7e:	2b00      	cmp	r3, #0
  407c80:	d1f9      	bne.n	407c76 <_svfprintf_r+0x5a>
  407c82:	ebc8 0504 	rsb	r5, r8, r4
  407c86:	b18d      	cbz	r5, 407cac <_svfprintf_r+0x90>
  407c88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407c8c:	f8c9 8000 	str.w	r8, [r9]
  407c90:	3301      	adds	r3, #1
  407c92:	442a      	add	r2, r5
  407c94:	2b07      	cmp	r3, #7
  407c96:	f8c9 5004 	str.w	r5, [r9, #4]
  407c9a:	9225      	str	r2, [sp, #148]	; 0x94
  407c9c:	9324      	str	r3, [sp, #144]	; 0x90
  407c9e:	f300 80a6 	bgt.w	407dee <_svfprintf_r+0x1d2>
  407ca2:	f109 0908 	add.w	r9, r9, #8
  407ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407ca8:	442b      	add	r3, r5
  407caa:	930b      	str	r3, [sp, #44]	; 0x2c
  407cac:	7823      	ldrb	r3, [r4, #0]
  407cae:	2b00      	cmp	r3, #0
  407cb0:	f000 80a6 	beq.w	407e00 <_svfprintf_r+0x1e4>
  407cb4:	2300      	movs	r3, #0
  407cb6:	461a      	mov	r2, r3
  407cb8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407cbc:	4619      	mov	r1, r3
  407cbe:	930c      	str	r3, [sp, #48]	; 0x30
  407cc0:	9307      	str	r3, [sp, #28]
  407cc2:	f04f 3bff 	mov.w	fp, #4294967295
  407cc6:	7863      	ldrb	r3, [r4, #1]
  407cc8:	f104 0801 	add.w	r8, r4, #1
  407ccc:	465d      	mov	r5, fp
  407cce:	f108 0801 	add.w	r8, r8, #1
  407cd2:	f1a3 0020 	sub.w	r0, r3, #32
  407cd6:	2858      	cmp	r0, #88	; 0x58
  407cd8:	f200 8425 	bhi.w	408526 <_svfprintf_r+0x90a>
  407cdc:	e8df f010 	tbh	[pc, r0, lsl #1]
  407ce0:	04230388 	.word	0x04230388
  407ce4:	03900423 	.word	0x03900423
  407ce8:	04230423 	.word	0x04230423
  407cec:	04230423 	.word	0x04230423
  407cf0:	04230423 	.word	0x04230423
  407cf4:	03a50397 	.word	0x03a50397
  407cf8:	005d0423 	.word	0x005d0423
  407cfc:	042300e2 	.word	0x042300e2
  407d00:	010500fe 	.word	0x010500fe
  407d04:	01050105 	.word	0x01050105
  407d08:	01050105 	.word	0x01050105
  407d0c:	01050105 	.word	0x01050105
  407d10:	01050105 	.word	0x01050105
  407d14:	04230423 	.word	0x04230423
  407d18:	04230423 	.word	0x04230423
  407d1c:	04230423 	.word	0x04230423
  407d20:	04230423 	.word	0x04230423
  407d24:	04230423 	.word	0x04230423
  407d28:	02810115 	.word	0x02810115
  407d2c:	02810423 	.word	0x02810423
  407d30:	04230423 	.word	0x04230423
  407d34:	04230423 	.word	0x04230423
  407d38:	042302c6 	.word	0x042302c6
  407d3c:	02cd0423 	.word	0x02cd0423
  407d40:	04230423 	.word	0x04230423
  407d44:	04230423 	.word	0x04230423
  407d48:	02f70423 	.word	0x02f70423
  407d4c:	04230423 	.word	0x04230423
  407d50:	04230325 	.word	0x04230325
  407d54:	04230423 	.word	0x04230423
  407d58:	04230423 	.word	0x04230423
  407d5c:	04230423 	.word	0x04230423
  407d60:	04230423 	.word	0x04230423
  407d64:	03660423 	.word	0x03660423
  407d68:	02810379 	.word	0x02810379
  407d6c:	02810281 	.word	0x02810281
  407d70:	03790381 	.word	0x03790381
  407d74:	04230423 	.word	0x04230423
  407d78:	042303d1 	.word	0x042303d1
  407d7c:	00a303db 	.word	0x00a303db
  407d80:	03ee0064 	.word	0x03ee0064
  407d84:	03f50423 	.word	0x03f50423
  407d88:	03aa0423 	.word	0x03aa0423
  407d8c:	04230423 	.word	0x04230423
  407d90:	03bc      	.short	0x03bc
  407d92:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d94:	930e      	str	r3, [sp, #56]	; 0x38
  407d96:	4240      	negs	r0, r0
  407d98:	900c      	str	r0, [sp, #48]	; 0x30
  407d9a:	9b07      	ldr	r3, [sp, #28]
  407d9c:	f043 0304 	orr.w	r3, r3, #4
  407da0:	9307      	str	r3, [sp, #28]
  407da2:	f898 3000 	ldrb.w	r3, [r8]
  407da6:	e792      	b.n	407cce <_svfprintf_r+0xb2>
  407da8:	980e      	ldr	r0, [sp, #56]	; 0x38
  407daa:	46ab      	mov	fp, r5
  407dac:	2100      	movs	r1, #0
  407dae:	6804      	ldr	r4, [r0, #0]
  407db0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407db4:	1d07      	adds	r7, r0, #4
  407db6:	9807      	ldr	r0, [sp, #28]
  407db8:	2330      	movs	r3, #48	; 0x30
  407dba:	2278      	movs	r2, #120	; 0x78
  407dbc:	458b      	cmp	fp, r1
  407dbe:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  407dc2:	f04f 0500 	mov.w	r5, #0
  407dc6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  407dca:	f040 0302 	orr.w	r3, r0, #2
  407dce:	f2c0 83c7 	blt.w	408560 <_svfprintf_r+0x944>
  407dd2:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  407dd6:	f043 0302 	orr.w	r3, r3, #2
  407dda:	9307      	str	r3, [sp, #28]
  407ddc:	ea54 0305 	orrs.w	r3, r4, r5
  407de0:	970e      	str	r7, [sp, #56]	; 0x38
  407de2:	f000 8393 	beq.w	40850c <_svfprintf_r+0x8f0>
  407de6:	460f      	mov	r7, r1
  407de8:	9211      	str	r2, [sp, #68]	; 0x44
  407dea:	48b3      	ldr	r0, [pc, #716]	; (4080b8 <_svfprintf_r+0x49c>)
  407dec:	e2ce      	b.n	40838c <_svfprintf_r+0x770>
  407dee:	aa23      	add	r2, sp, #140	; 0x8c
  407df0:	9909      	ldr	r1, [sp, #36]	; 0x24
  407df2:	980a      	ldr	r0, [sp, #40]	; 0x28
  407df4:	f005 f882 	bl	40cefc <__ssprint_r>
  407df8:	b948      	cbnz	r0, 407e0e <_svfprintf_r+0x1f2>
  407dfa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  407dfe:	e752      	b.n	407ca6 <_svfprintf_r+0x8a>
  407e00:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407e02:	b123      	cbz	r3, 407e0e <_svfprintf_r+0x1f2>
  407e04:	980a      	ldr	r0, [sp, #40]	; 0x28
  407e06:	9909      	ldr	r1, [sp, #36]	; 0x24
  407e08:	aa23      	add	r2, sp, #140	; 0x8c
  407e0a:	f005 f877 	bl	40cefc <__ssprint_r>
  407e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407e10:	899b      	ldrh	r3, [r3, #12]
  407e12:	f013 0f40 	tst.w	r3, #64	; 0x40
  407e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407e18:	bf18      	it	ne
  407e1a:	f04f 33ff 	movne.w	r3, #4294967295
  407e1e:	4618      	mov	r0, r3
  407e20:	b041      	add	sp, #260	; 0x104
  407e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e26:	9311      	str	r3, [sp, #68]	; 0x44
  407e28:	46ab      	mov	fp, r5
  407e2a:	2a00      	cmp	r2, #0
  407e2c:	f041 8223 	bne.w	409276 <_svfprintf_r+0x165a>
  407e30:	9a07      	ldr	r2, [sp, #28]
  407e32:	f012 0320 	ands.w	r3, r2, #32
  407e36:	f000 822e 	beq.w	408296 <_svfprintf_r+0x67a>
  407e3a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  407e3c:	3707      	adds	r7, #7
  407e3e:	f027 0307 	bic.w	r3, r7, #7
  407e42:	2700      	movs	r7, #0
  407e44:	f103 0108 	add.w	r1, r3, #8
  407e48:	45bb      	cmp	fp, r7
  407e4a:	910e      	str	r1, [sp, #56]	; 0x38
  407e4c:	e9d3 4500 	ldrd	r4, r5, [r3]
  407e50:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  407e54:	f2c0 8752 	blt.w	408cfc <_svfprintf_r+0x10e0>
  407e58:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  407e5c:	9307      	str	r3, [sp, #28]
  407e5e:	ea54 0305 	orrs.w	r3, r4, r5
  407e62:	f000 8375 	beq.w	408550 <_svfprintf_r+0x934>
  407e66:	ae30      	add	r6, sp, #192	; 0xc0
  407e68:	08e2      	lsrs	r2, r4, #3
  407e6a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  407e6e:	08e9      	lsrs	r1, r5, #3
  407e70:	f004 0307 	and.w	r3, r4, #7
  407e74:	460d      	mov	r5, r1
  407e76:	4614      	mov	r4, r2
  407e78:	3330      	adds	r3, #48	; 0x30
  407e7a:	ea54 0205 	orrs.w	r2, r4, r5
  407e7e:	f806 3d01 	strb.w	r3, [r6, #-1]!
  407e82:	d1f1      	bne.n	407e68 <_svfprintf_r+0x24c>
  407e84:	9a07      	ldr	r2, [sp, #28]
  407e86:	07d1      	lsls	r1, r2, #31
  407e88:	f140 8084 	bpl.w	407f94 <_svfprintf_r+0x378>
  407e8c:	2b30      	cmp	r3, #48	; 0x30
  407e8e:	f000 8081 	beq.w	407f94 <_svfprintf_r+0x378>
  407e92:	2230      	movs	r2, #48	; 0x30
  407e94:	1e73      	subs	r3, r6, #1
  407e96:	f806 2c01 	strb.w	r2, [r6, #-1]
  407e9a:	aa30      	add	r2, sp, #192	; 0xc0
  407e9c:	1ad2      	subs	r2, r2, r3
  407e9e:	920d      	str	r2, [sp, #52]	; 0x34
  407ea0:	461e      	mov	r6, r3
  407ea2:	e07a      	b.n	407f9a <_svfprintf_r+0x37e>
  407ea4:	f898 3000 	ldrb.w	r3, [r8]
  407ea8:	2b2a      	cmp	r3, #42	; 0x2a
  407eaa:	f108 0401 	add.w	r4, r8, #1
  407eae:	f001 81b1 	beq.w	409214 <_svfprintf_r+0x15f8>
  407eb2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407eb6:	2809      	cmp	r0, #9
  407eb8:	bf98      	it	ls
  407eba:	2500      	movls	r5, #0
  407ebc:	f201 8164 	bhi.w	409188 <_svfprintf_r+0x156c>
  407ec0:	f814 3b01 	ldrb.w	r3, [r4], #1
  407ec4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  407ec8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  407ecc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407ed0:	2809      	cmp	r0, #9
  407ed2:	d9f5      	bls.n	407ec0 <_svfprintf_r+0x2a4>
  407ed4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  407ed8:	46a0      	mov	r8, r4
  407eda:	e6fa      	b.n	407cd2 <_svfprintf_r+0xb6>
  407edc:	9b07      	ldr	r3, [sp, #28]
  407ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407ee2:	9307      	str	r3, [sp, #28]
  407ee4:	f898 3000 	ldrb.w	r3, [r8]
  407ee8:	e6f1      	b.n	407cce <_svfprintf_r+0xb2>
  407eea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407eee:	2300      	movs	r3, #0
  407ef0:	461c      	mov	r4, r3
  407ef2:	f818 3b01 	ldrb.w	r3, [r8], #1
  407ef6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407efa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407efe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407f02:	2809      	cmp	r0, #9
  407f04:	d9f5      	bls.n	407ef2 <_svfprintf_r+0x2d6>
  407f06:	940c      	str	r4, [sp, #48]	; 0x30
  407f08:	e6e3      	b.n	407cd2 <_svfprintf_r+0xb6>
  407f0a:	9311      	str	r3, [sp, #68]	; 0x44
  407f0c:	46ab      	mov	fp, r5
  407f0e:	2a00      	cmp	r2, #0
  407f10:	f041 81c9 	bne.w	4092a6 <_svfprintf_r+0x168a>
  407f14:	9b07      	ldr	r3, [sp, #28]
  407f16:	f043 0310 	orr.w	r3, r3, #16
  407f1a:	9307      	str	r3, [sp, #28]
  407f1c:	9b07      	ldr	r3, [sp, #28]
  407f1e:	0698      	lsls	r0, r3, #26
  407f20:	f140 8530 	bpl.w	408984 <_svfprintf_r+0xd68>
  407f24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  407f26:	3707      	adds	r7, #7
  407f28:	f027 0707 	bic.w	r7, r7, #7
  407f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
  407f30:	f107 0108 	add.w	r1, r7, #8
  407f34:	910e      	str	r1, [sp, #56]	; 0x38
  407f36:	4614      	mov	r4, r2
  407f38:	461d      	mov	r5, r3
  407f3a:	2a00      	cmp	r2, #0
  407f3c:	f173 0300 	sbcs.w	r3, r3, #0
  407f40:	f2c0 855b 	blt.w	4089fa <_svfprintf_r+0xdde>
  407f44:	f1bb 0f00 	cmp.w	fp, #0
  407f48:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407f4c:	f2c0 8538 	blt.w	4089c0 <_svfprintf_r+0xda4>
  407f50:	9b07      	ldr	r3, [sp, #28]
  407f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407f56:	9307      	str	r3, [sp, #28]
  407f58:	ea54 0305 	orrs.w	r3, r4, r5
  407f5c:	f000 81db 	beq.w	408316 <_svfprintf_r+0x6fa>
  407f60:	2d00      	cmp	r5, #0
  407f62:	bf08      	it	eq
  407f64:	2c0a      	cmpeq	r4, #10
  407f66:	f0c0 81db 	bcc.w	408320 <_svfprintf_r+0x704>
  407f6a:	ae30      	add	r6, sp, #192	; 0xc0
  407f6c:	4620      	mov	r0, r4
  407f6e:	4629      	mov	r1, r5
  407f70:	220a      	movs	r2, #10
  407f72:	2300      	movs	r3, #0
  407f74:	f7ff faee 	bl	407554 <__aeabi_uldivmod>
  407f78:	3230      	adds	r2, #48	; 0x30
  407f7a:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407f7e:	4620      	mov	r0, r4
  407f80:	4629      	mov	r1, r5
  407f82:	2300      	movs	r3, #0
  407f84:	220a      	movs	r2, #10
  407f86:	f7ff fae5 	bl	407554 <__aeabi_uldivmod>
  407f8a:	4604      	mov	r4, r0
  407f8c:	460d      	mov	r5, r1
  407f8e:	ea54 0305 	orrs.w	r3, r4, r5
  407f92:	d1eb      	bne.n	407f6c <_svfprintf_r+0x350>
  407f94:	ab30      	add	r3, sp, #192	; 0xc0
  407f96:	1b9b      	subs	r3, r3, r6
  407f98:	930d      	str	r3, [sp, #52]	; 0x34
  407f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407f9c:	455b      	cmp	r3, fp
  407f9e:	bfb8      	it	lt
  407fa0:	465b      	movlt	r3, fp
  407fa2:	9308      	str	r3, [sp, #32]
  407fa4:	2300      	movs	r3, #0
  407fa6:	9313      	str	r3, [sp, #76]	; 0x4c
  407fa8:	b117      	cbz	r7, 407fb0 <_svfprintf_r+0x394>
  407faa:	9b08      	ldr	r3, [sp, #32]
  407fac:	3301      	adds	r3, #1
  407fae:	9308      	str	r3, [sp, #32]
  407fb0:	9b07      	ldr	r3, [sp, #28]
  407fb2:	f013 0302 	ands.w	r3, r3, #2
  407fb6:	930f      	str	r3, [sp, #60]	; 0x3c
  407fb8:	d002      	beq.n	407fc0 <_svfprintf_r+0x3a4>
  407fba:	9b08      	ldr	r3, [sp, #32]
  407fbc:	3302      	adds	r3, #2
  407fbe:	9308      	str	r3, [sp, #32]
  407fc0:	9b07      	ldr	r3, [sp, #28]
  407fc2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  407fc6:	9310      	str	r3, [sp, #64]	; 0x40
  407fc8:	f040 82d7 	bne.w	40857a <_svfprintf_r+0x95e>
  407fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407fce:	9a08      	ldr	r2, [sp, #32]
  407fd0:	1a9d      	subs	r5, r3, r2
  407fd2:	2d00      	cmp	r5, #0
  407fd4:	f340 82d1 	ble.w	40857a <_svfprintf_r+0x95e>
  407fd8:	2d10      	cmp	r5, #16
  407fda:	9925      	ldr	r1, [sp, #148]	; 0x94
  407fdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407fde:	4f37      	ldr	r7, [pc, #220]	; (4080bc <_svfprintf_r+0x4a0>)
  407fe0:	dd27      	ble.n	408032 <_svfprintf_r+0x416>
  407fe2:	9618      	str	r6, [sp, #96]	; 0x60
  407fe4:	4648      	mov	r0, r9
  407fe6:	2410      	movs	r4, #16
  407fe8:	46b9      	mov	r9, r7
  407fea:	9e09      	ldr	r6, [sp, #36]	; 0x24
  407fec:	462f      	mov	r7, r5
  407fee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407ff0:	e004      	b.n	407ffc <_svfprintf_r+0x3e0>
  407ff2:	3f10      	subs	r7, #16
  407ff4:	2f10      	cmp	r7, #16
  407ff6:	f100 0008 	add.w	r0, r0, #8
  407ffa:	dd16      	ble.n	40802a <_svfprintf_r+0x40e>
  407ffc:	3201      	adds	r2, #1
  407ffe:	4b2f      	ldr	r3, [pc, #188]	; (4080bc <_svfprintf_r+0x4a0>)
  408000:	9224      	str	r2, [sp, #144]	; 0x90
  408002:	3110      	adds	r1, #16
  408004:	2a07      	cmp	r2, #7
  408006:	9125      	str	r1, [sp, #148]	; 0x94
  408008:	e880 0018 	stmia.w	r0, {r3, r4}
  40800c:	ddf1      	ble.n	407ff2 <_svfprintf_r+0x3d6>
  40800e:	aa23      	add	r2, sp, #140	; 0x8c
  408010:	4631      	mov	r1, r6
  408012:	4628      	mov	r0, r5
  408014:	f004 ff72 	bl	40cefc <__ssprint_r>
  408018:	2800      	cmp	r0, #0
  40801a:	f47f aef8 	bne.w	407e0e <_svfprintf_r+0x1f2>
  40801e:	3f10      	subs	r7, #16
  408020:	2f10      	cmp	r7, #16
  408022:	9925      	ldr	r1, [sp, #148]	; 0x94
  408024:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408026:	a830      	add	r0, sp, #192	; 0xc0
  408028:	dce8      	bgt.n	407ffc <_svfprintf_r+0x3e0>
  40802a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40802c:	463d      	mov	r5, r7
  40802e:	464f      	mov	r7, r9
  408030:	4681      	mov	r9, r0
  408032:	3201      	adds	r2, #1
  408034:	186c      	adds	r4, r5, r1
  408036:	2a07      	cmp	r2, #7
  408038:	9425      	str	r4, [sp, #148]	; 0x94
  40803a:	9224      	str	r2, [sp, #144]	; 0x90
  40803c:	f8c9 7000 	str.w	r7, [r9]
  408040:	f8c9 5004 	str.w	r5, [r9, #4]
  408044:	f300 8428 	bgt.w	408898 <_svfprintf_r+0xc7c>
  408048:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40804c:	f109 0908 	add.w	r9, r9, #8
  408050:	b177      	cbz	r7, 408070 <_svfprintf_r+0x454>
  408052:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408054:	3301      	adds	r3, #1
  408056:	3401      	adds	r4, #1
  408058:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40805c:	2201      	movs	r2, #1
  40805e:	2b07      	cmp	r3, #7
  408060:	9425      	str	r4, [sp, #148]	; 0x94
  408062:	9324      	str	r3, [sp, #144]	; 0x90
  408064:	e889 0006 	stmia.w	r9, {r1, r2}
  408068:	f300 83a0 	bgt.w	4087ac <_svfprintf_r+0xb90>
  40806c:	f109 0908 	add.w	r9, r9, #8
  408070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408072:	b16b      	cbz	r3, 408090 <_svfprintf_r+0x474>
  408074:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408076:	3301      	adds	r3, #1
  408078:	3402      	adds	r4, #2
  40807a:	a91c      	add	r1, sp, #112	; 0x70
  40807c:	2202      	movs	r2, #2
  40807e:	2b07      	cmp	r3, #7
  408080:	9425      	str	r4, [sp, #148]	; 0x94
  408082:	9324      	str	r3, [sp, #144]	; 0x90
  408084:	e889 0006 	stmia.w	r9, {r1, r2}
  408088:	f300 839c 	bgt.w	4087c4 <_svfprintf_r+0xba8>
  40808c:	f109 0908 	add.w	r9, r9, #8
  408090:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408092:	2b80      	cmp	r3, #128	; 0x80
  408094:	f000 82d5 	beq.w	408642 <_svfprintf_r+0xa26>
  408098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40809a:	ebc3 070b 	rsb	r7, r3, fp
  40809e:	2f00      	cmp	r7, #0
  4080a0:	dd39      	ble.n	408116 <_svfprintf_r+0x4fa>
  4080a2:	4a07      	ldr	r2, [pc, #28]	; (4080c0 <_svfprintf_r+0x4a4>)
  4080a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4080a8:	2f10      	cmp	r7, #16
  4080aa:	dd28      	ble.n	4080fe <_svfprintf_r+0x4e2>
  4080ac:	4622      	mov	r2, r4
  4080ae:	f04f 0b10 	mov.w	fp, #16
  4080b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4080b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4080b6:	e00a      	b.n	4080ce <_svfprintf_r+0x4b2>
  4080b8:	0040ef3c 	.word	0x0040ef3c
  4080bc:	0040ef5c 	.word	0x0040ef5c
  4080c0:	0040ef08 	.word	0x0040ef08
  4080c4:	3f10      	subs	r7, #16
  4080c6:	2f10      	cmp	r7, #16
  4080c8:	f109 0908 	add.w	r9, r9, #8
  4080cc:	dd16      	ble.n	4080fc <_svfprintf_r+0x4e0>
  4080ce:	3301      	adds	r3, #1
  4080d0:	3210      	adds	r2, #16
  4080d2:	2b07      	cmp	r3, #7
  4080d4:	9225      	str	r2, [sp, #148]	; 0x94
  4080d6:	9324      	str	r3, [sp, #144]	; 0x90
  4080d8:	e889 0c00 	stmia.w	r9, {sl, fp}
  4080dc:	ddf2      	ble.n	4080c4 <_svfprintf_r+0x4a8>
  4080de:	aa23      	add	r2, sp, #140	; 0x8c
  4080e0:	4621      	mov	r1, r4
  4080e2:	4628      	mov	r0, r5
  4080e4:	f004 ff0a 	bl	40cefc <__ssprint_r>
  4080e8:	2800      	cmp	r0, #0
  4080ea:	f47f ae90 	bne.w	407e0e <_svfprintf_r+0x1f2>
  4080ee:	3f10      	subs	r7, #16
  4080f0:	2f10      	cmp	r7, #16
  4080f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4080f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080f6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4080fa:	dce8      	bgt.n	4080ce <_svfprintf_r+0x4b2>
  4080fc:	4614      	mov	r4, r2
  4080fe:	3301      	adds	r3, #1
  408100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408102:	9324      	str	r3, [sp, #144]	; 0x90
  408104:	443c      	add	r4, r7
  408106:	2b07      	cmp	r3, #7
  408108:	9425      	str	r4, [sp, #148]	; 0x94
  40810a:	e889 0084 	stmia.w	r9, {r2, r7}
  40810e:	f300 8341 	bgt.w	408794 <_svfprintf_r+0xb78>
  408112:	f109 0908 	add.w	r9, r9, #8
  408116:	9b07      	ldr	r3, [sp, #28]
  408118:	05da      	lsls	r2, r3, #23
  40811a:	f100 8230 	bmi.w	40857e <_svfprintf_r+0x962>
  40811e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408120:	990d      	ldr	r1, [sp, #52]	; 0x34
  408122:	f8c9 6000 	str.w	r6, [r9]
  408126:	3301      	adds	r3, #1
  408128:	440c      	add	r4, r1
  40812a:	2b07      	cmp	r3, #7
  40812c:	9425      	str	r4, [sp, #148]	; 0x94
  40812e:	f8c9 1004 	str.w	r1, [r9, #4]
  408132:	9324      	str	r3, [sp, #144]	; 0x90
  408134:	f300 8318 	bgt.w	408768 <_svfprintf_r+0xb4c>
  408138:	f109 0908 	add.w	r9, r9, #8
  40813c:	9b07      	ldr	r3, [sp, #28]
  40813e:	0759      	lsls	r1, r3, #29
  408140:	d53f      	bpl.n	4081c2 <_svfprintf_r+0x5a6>
  408142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408144:	9a08      	ldr	r2, [sp, #32]
  408146:	1a9d      	subs	r5, r3, r2
  408148:	2d00      	cmp	r5, #0
  40814a:	dd3a      	ble.n	4081c2 <_svfprintf_r+0x5a6>
  40814c:	2d10      	cmp	r5, #16
  40814e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408150:	4fbc      	ldr	r7, [pc, #752]	; (408444 <_svfprintf_r+0x828>)
  408152:	dd23      	ble.n	40819c <_svfprintf_r+0x580>
  408154:	4622      	mov	r2, r4
  408156:	2610      	movs	r6, #16
  408158:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40815c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40815e:	e004      	b.n	40816a <_svfprintf_r+0x54e>
  408160:	3d10      	subs	r5, #16
  408162:	2d10      	cmp	r5, #16
  408164:	f109 0908 	add.w	r9, r9, #8
  408168:	dd17      	ble.n	40819a <_svfprintf_r+0x57e>
  40816a:	3301      	adds	r3, #1
  40816c:	49b5      	ldr	r1, [pc, #724]	; (408444 <_svfprintf_r+0x828>)
  40816e:	9324      	str	r3, [sp, #144]	; 0x90
  408170:	3210      	adds	r2, #16
  408172:	2b07      	cmp	r3, #7
  408174:	9225      	str	r2, [sp, #148]	; 0x94
  408176:	e889 0042 	stmia.w	r9, {r1, r6}
  40817a:	ddf1      	ble.n	408160 <_svfprintf_r+0x544>
  40817c:	aa23      	add	r2, sp, #140	; 0x8c
  40817e:	4621      	mov	r1, r4
  408180:	4658      	mov	r0, fp
  408182:	f004 febb 	bl	40cefc <__ssprint_r>
  408186:	2800      	cmp	r0, #0
  408188:	f47f ae41 	bne.w	407e0e <_svfprintf_r+0x1f2>
  40818c:	3d10      	subs	r5, #16
  40818e:	2d10      	cmp	r5, #16
  408190:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408192:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408194:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408198:	dce7      	bgt.n	40816a <_svfprintf_r+0x54e>
  40819a:	4614      	mov	r4, r2
  40819c:	3301      	adds	r3, #1
  40819e:	442c      	add	r4, r5
  4081a0:	2b07      	cmp	r3, #7
  4081a2:	9425      	str	r4, [sp, #148]	; 0x94
  4081a4:	9324      	str	r3, [sp, #144]	; 0x90
  4081a6:	f8c9 7000 	str.w	r7, [r9]
  4081aa:	f8c9 5004 	str.w	r5, [r9, #4]
  4081ae:	dd08      	ble.n	4081c2 <_svfprintf_r+0x5a6>
  4081b0:	aa23      	add	r2, sp, #140	; 0x8c
  4081b2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4081b4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4081b6:	f004 fea1 	bl	40cefc <__ssprint_r>
  4081ba:	2800      	cmp	r0, #0
  4081bc:	f47f ae27 	bne.w	407e0e <_svfprintf_r+0x1f2>
  4081c0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4081c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4081c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4081c6:	9908      	ldr	r1, [sp, #32]
  4081c8:	428a      	cmp	r2, r1
  4081ca:	bfac      	ite	ge
  4081cc:	189b      	addge	r3, r3, r2
  4081ce:	185b      	addlt	r3, r3, r1
  4081d0:	930b      	str	r3, [sp, #44]	; 0x2c
  4081d2:	2c00      	cmp	r4, #0
  4081d4:	f040 82d4 	bne.w	408780 <_svfprintf_r+0xb64>
  4081d8:	2300      	movs	r3, #0
  4081da:	9324      	str	r3, [sp, #144]	; 0x90
  4081dc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4081e0:	e542      	b.n	407c68 <_svfprintf_r+0x4c>
  4081e2:	9311      	str	r3, [sp, #68]	; 0x44
  4081e4:	46ab      	mov	fp, r5
  4081e6:	2a00      	cmp	r2, #0
  4081e8:	f041 8059 	bne.w	40929e <_svfprintf_r+0x1682>
  4081ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4081ee:	3707      	adds	r7, #7
  4081f0:	f027 0307 	bic.w	r3, r7, #7
  4081f4:	f103 0208 	add.w	r2, r3, #8
  4081f8:	920e      	str	r2, [sp, #56]	; 0x38
  4081fa:	681a      	ldr	r2, [r3, #0]
  4081fc:	9214      	str	r2, [sp, #80]	; 0x50
  4081fe:	685b      	ldr	r3, [r3, #4]
  408200:	9315      	str	r3, [sp, #84]	; 0x54
  408202:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408204:	9d14      	ldr	r5, [sp, #80]	; 0x50
  408206:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40820a:	4628      	mov	r0, r5
  40820c:	4621      	mov	r1, r4
  40820e:	f04f 32ff 	mov.w	r2, #4294967295
  408212:	4b8d      	ldr	r3, [pc, #564]	; (408448 <_svfprintf_r+0x82c>)
  408214:	f005 fd10 	bl	40dc38 <__aeabi_dcmpun>
  408218:	2800      	cmp	r0, #0
  40821a:	f040 84c1 	bne.w	408ba0 <_svfprintf_r+0xf84>
  40821e:	4628      	mov	r0, r5
  408220:	4621      	mov	r1, r4
  408222:	f04f 32ff 	mov.w	r2, #4294967295
  408226:	4b88      	ldr	r3, [pc, #544]	; (408448 <_svfprintf_r+0x82c>)
  408228:	f005 fce8 	bl	40dbfc <__aeabi_dcmple>
  40822c:	2800      	cmp	r0, #0
  40822e:	f040 84b7 	bne.w	408ba0 <_svfprintf_r+0xf84>
  408232:	9814      	ldr	r0, [sp, #80]	; 0x50
  408234:	9915      	ldr	r1, [sp, #84]	; 0x54
  408236:	2200      	movs	r2, #0
  408238:	2300      	movs	r3, #0
  40823a:	f005 fcd5 	bl	40dbe8 <__aeabi_dcmplt>
  40823e:	2800      	cmp	r0, #0
  408240:	f040 874b 	bne.w	4090da <_svfprintf_r+0x14be>
  408244:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408248:	4e80      	ldr	r6, [pc, #512]	; (40844c <_svfprintf_r+0x830>)
  40824a:	4b81      	ldr	r3, [pc, #516]	; (408450 <_svfprintf_r+0x834>)
  40824c:	9907      	ldr	r1, [sp, #28]
  40824e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  408252:	9107      	str	r1, [sp, #28]
  408254:	9911      	ldr	r1, [sp, #68]	; 0x44
  408256:	2203      	movs	r2, #3
  408258:	f04f 0b00 	mov.w	fp, #0
  40825c:	9208      	str	r2, [sp, #32]
  40825e:	2947      	cmp	r1, #71	; 0x47
  408260:	bfd8      	it	le
  408262:	461e      	movle	r6, r3
  408264:	920d      	str	r2, [sp, #52]	; 0x34
  408266:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40826a:	e69d      	b.n	407fa8 <_svfprintf_r+0x38c>
  40826c:	9b07      	ldr	r3, [sp, #28]
  40826e:	f043 0308 	orr.w	r3, r3, #8
  408272:	9307      	str	r3, [sp, #28]
  408274:	f898 3000 	ldrb.w	r3, [r8]
  408278:	e529      	b.n	407cce <_svfprintf_r+0xb2>
  40827a:	9311      	str	r3, [sp, #68]	; 0x44
  40827c:	46ab      	mov	fp, r5
  40827e:	2a00      	cmp	r2, #0
  408280:	f041 8009 	bne.w	409296 <_svfprintf_r+0x167a>
  408284:	9b07      	ldr	r3, [sp, #28]
  408286:	f043 0310 	orr.w	r3, r3, #16
  40828a:	9307      	str	r3, [sp, #28]
  40828c:	9a07      	ldr	r2, [sp, #28]
  40828e:	f012 0320 	ands.w	r3, r2, #32
  408292:	f47f add2 	bne.w	407e3a <_svfprintf_r+0x21e>
  408296:	9907      	ldr	r1, [sp, #28]
  408298:	f011 0210 	ands.w	r2, r1, #16
  40829c:	f000 8507 	beq.w	408cae <_svfprintf_r+0x1092>
  4082a0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4082a2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4082a6:	f1bb 0f00 	cmp.w	fp, #0
  4082aa:	6804      	ldr	r4, [r0, #0]
  4082ac:	f100 0704 	add.w	r7, r0, #4
  4082b0:	f04f 0500 	mov.w	r5, #0
  4082b4:	f2c0 8521 	blt.w	408cfa <_svfprintf_r+0x10de>
  4082b8:	460a      	mov	r2, r1
  4082ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4082be:	9207      	str	r2, [sp, #28]
  4082c0:	ea54 0205 	orrs.w	r2, r4, r5
  4082c4:	970e      	str	r7, [sp, #56]	; 0x38
  4082c6:	f000 8143 	beq.w	408550 <_svfprintf_r+0x934>
  4082ca:	461f      	mov	r7, r3
  4082cc:	e5cb      	b.n	407e66 <_svfprintf_r+0x24a>
  4082ce:	9311      	str	r3, [sp, #68]	; 0x44
  4082d0:	46ab      	mov	fp, r5
  4082d2:	2a00      	cmp	r2, #0
  4082d4:	f040 87d7 	bne.w	409286 <_svfprintf_r+0x166a>
  4082d8:	9b07      	ldr	r3, [sp, #28]
  4082da:	f043 0310 	orr.w	r3, r3, #16
  4082de:	9307      	str	r3, [sp, #28]
  4082e0:	9a07      	ldr	r2, [sp, #28]
  4082e2:	f012 0320 	ands.w	r3, r2, #32
  4082e6:	f000 8332 	beq.w	40894e <_svfprintf_r+0xd32>
  4082ea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4082ec:	3707      	adds	r7, #7
  4082ee:	f027 0307 	bic.w	r3, r7, #7
  4082f2:	2700      	movs	r7, #0
  4082f4:	f103 0108 	add.w	r1, r3, #8
  4082f8:	45bb      	cmp	fp, r7
  4082fa:	910e      	str	r1, [sp, #56]	; 0x38
  4082fc:	e9d3 4500 	ldrd	r4, r5, [r3]
  408300:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408304:	f2c0 835c 	blt.w	4089c0 <_svfprintf_r+0xda4>
  408308:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40830c:	9307      	str	r3, [sp, #28]
  40830e:	ea54 0305 	orrs.w	r3, r4, r5
  408312:	f47f ae25 	bne.w	407f60 <_svfprintf_r+0x344>
  408316:	f1bb 0f00 	cmp.w	fp, #0
  40831a:	f000 80fe 	beq.w	40851a <_svfprintf_r+0x8fe>
  40831e:	2400      	movs	r4, #0
  408320:	ae40      	add	r6, sp, #256	; 0x100
  408322:	3430      	adds	r4, #48	; 0x30
  408324:	f806 4d41 	strb.w	r4, [r6, #-65]!
  408328:	e634      	b.n	407f94 <_svfprintf_r+0x378>
  40832a:	9311      	str	r3, [sp, #68]	; 0x44
  40832c:	46ab      	mov	fp, r5
  40832e:	2a00      	cmp	r2, #0
  408330:	f040 87a5 	bne.w	40927e <_svfprintf_r+0x1662>
  408334:	9b07      	ldr	r3, [sp, #28]
  408336:	4847      	ldr	r0, [pc, #284]	; (408454 <_svfprintf_r+0x838>)
  408338:	069d      	lsls	r5, r3, #26
  40833a:	f140 8097 	bpl.w	40846c <_svfprintf_r+0x850>
  40833e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408340:	3707      	adds	r7, #7
  408342:	f027 0307 	bic.w	r3, r7, #7
  408346:	e9d3 4500 	ldrd	r4, r5, [r3]
  40834a:	f103 0208 	add.w	r2, r3, #8
  40834e:	920e      	str	r2, [sp, #56]	; 0x38
  408350:	9a07      	ldr	r2, [sp, #28]
  408352:	f012 0701 	ands.w	r7, r2, #1
  408356:	f000 8241 	beq.w	4087dc <_svfprintf_r+0xbc0>
  40835a:	ea54 0305 	orrs.w	r3, r4, r5
  40835e:	f000 84f5 	beq.w	408d4c <_svfprintf_r+0x1130>
  408362:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  408366:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40836a:	2700      	movs	r7, #0
  40836c:	9a07      	ldr	r2, [sp, #28]
  40836e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408372:	2330      	movs	r3, #48	; 0x30
  408374:	45bb      	cmp	fp, r7
  408376:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40837a:	f042 0302 	orr.w	r3, r2, #2
  40837e:	f2c0 86a9 	blt.w	4090d4 <_svfprintf_r+0x14b8>
  408382:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  408386:	f043 0302 	orr.w	r3, r3, #2
  40838a:	9307      	str	r3, [sp, #28]
  40838c:	ae30      	add	r6, sp, #192	; 0xc0
  40838e:	0923      	lsrs	r3, r4, #4
  408390:	f004 010f 	and.w	r1, r4, #15
  408394:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  408398:	092a      	lsrs	r2, r5, #4
  40839a:	461c      	mov	r4, r3
  40839c:	4615      	mov	r5, r2
  40839e:	5c43      	ldrb	r3, [r0, r1]
  4083a0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4083a4:	ea54 0305 	orrs.w	r3, r4, r5
  4083a8:	d1f1      	bne.n	40838e <_svfprintf_r+0x772>
  4083aa:	e5f3      	b.n	407f94 <_svfprintf_r+0x378>
  4083ac:	990e      	ldr	r1, [sp, #56]	; 0x38
  4083ae:	9311      	str	r3, [sp, #68]	; 0x44
  4083b0:	680a      	ldr	r2, [r1, #0]
  4083b2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4083b6:	2300      	movs	r3, #0
  4083b8:	460a      	mov	r2, r1
  4083ba:	461f      	mov	r7, r3
  4083bc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4083c0:	3204      	adds	r2, #4
  4083c2:	2301      	movs	r3, #1
  4083c4:	9308      	str	r3, [sp, #32]
  4083c6:	46bb      	mov	fp, r7
  4083c8:	9713      	str	r7, [sp, #76]	; 0x4c
  4083ca:	920e      	str	r2, [sp, #56]	; 0x38
  4083cc:	930d      	str	r3, [sp, #52]	; 0x34
  4083ce:	ae26      	add	r6, sp, #152	; 0x98
  4083d0:	e5ee      	b.n	407fb0 <_svfprintf_r+0x394>
  4083d2:	9311      	str	r3, [sp, #68]	; 0x44
  4083d4:	46ab      	mov	fp, r5
  4083d6:	2a00      	cmp	r2, #0
  4083d8:	f43f ada0 	beq.w	407f1c <_svfprintf_r+0x300>
  4083dc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4083e0:	e59c      	b.n	407f1c <_svfprintf_r+0x300>
  4083e2:	9b07      	ldr	r3, [sp, #28]
  4083e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4083e8:	9307      	str	r3, [sp, #28]
  4083ea:	f898 3000 	ldrb.w	r3, [r8]
  4083ee:	e46e      	b.n	407cce <_svfprintf_r+0xb2>
  4083f0:	f898 3000 	ldrb.w	r3, [r8]
  4083f4:	2900      	cmp	r1, #0
  4083f6:	f47f ac6a 	bne.w	407cce <_svfprintf_r+0xb2>
  4083fa:	2201      	movs	r2, #1
  4083fc:	2120      	movs	r1, #32
  4083fe:	e466      	b.n	407cce <_svfprintf_r+0xb2>
  408400:	9b07      	ldr	r3, [sp, #28]
  408402:	f043 0301 	orr.w	r3, r3, #1
  408406:	9307      	str	r3, [sp, #28]
  408408:	f898 3000 	ldrb.w	r3, [r8]
  40840c:	e45f      	b.n	407cce <_svfprintf_r+0xb2>
  40840e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408410:	6823      	ldr	r3, [r4, #0]
  408412:	930c      	str	r3, [sp, #48]	; 0x30
  408414:	4618      	mov	r0, r3
  408416:	2800      	cmp	r0, #0
  408418:	4623      	mov	r3, r4
  40841a:	f103 0304 	add.w	r3, r3, #4
  40841e:	f6ff acb8 	blt.w	407d92 <_svfprintf_r+0x176>
  408422:	930e      	str	r3, [sp, #56]	; 0x38
  408424:	f898 3000 	ldrb.w	r3, [r8]
  408428:	e451      	b.n	407cce <_svfprintf_r+0xb2>
  40842a:	f898 3000 	ldrb.w	r3, [r8]
  40842e:	2201      	movs	r2, #1
  408430:	212b      	movs	r1, #43	; 0x2b
  408432:	e44c      	b.n	407cce <_svfprintf_r+0xb2>
  408434:	9311      	str	r3, [sp, #68]	; 0x44
  408436:	46ab      	mov	fp, r5
  408438:	2a00      	cmp	r2, #0
  40843a:	f43f af51 	beq.w	4082e0 <_svfprintf_r+0x6c4>
  40843e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408442:	e74d      	b.n	4082e0 <_svfprintf_r+0x6c4>
  408444:	0040ef5c 	.word	0x0040ef5c
  408448:	7fefffff 	.word	0x7fefffff
  40844c:	0040ef1c 	.word	0x0040ef1c
  408450:	0040ef18 	.word	0x0040ef18
  408454:	0040ef28 	.word	0x0040ef28
  408458:	9311      	str	r3, [sp, #68]	; 0x44
  40845a:	46ab      	mov	fp, r5
  40845c:	2a00      	cmp	r2, #0
  40845e:	f040 8703 	bne.w	409268 <_svfprintf_r+0x164c>
  408462:	9b07      	ldr	r3, [sp, #28]
  408464:	4899      	ldr	r0, [pc, #612]	; (4086cc <_svfprintf_r+0xab0>)
  408466:	069d      	lsls	r5, r3, #26
  408468:	f53f af69 	bmi.w	40833e <_svfprintf_r+0x722>
  40846c:	9b07      	ldr	r3, [sp, #28]
  40846e:	06dc      	lsls	r4, r3, #27
  408470:	f140 845e 	bpl.w	408d30 <_svfprintf_r+0x1114>
  408474:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408476:	4613      	mov	r3, r2
  408478:	3304      	adds	r3, #4
  40847a:	6814      	ldr	r4, [r2, #0]
  40847c:	930e      	str	r3, [sp, #56]	; 0x38
  40847e:	2500      	movs	r5, #0
  408480:	e766      	b.n	408350 <_svfprintf_r+0x734>
  408482:	f898 3000 	ldrb.w	r3, [r8]
  408486:	2b6c      	cmp	r3, #108	; 0x6c
  408488:	f000 84e1 	beq.w	408e4e <_svfprintf_r+0x1232>
  40848c:	9807      	ldr	r0, [sp, #28]
  40848e:	f040 0010 	orr.w	r0, r0, #16
  408492:	9007      	str	r0, [sp, #28]
  408494:	e41b      	b.n	407cce <_svfprintf_r+0xb2>
  408496:	2a00      	cmp	r2, #0
  408498:	f040 86db 	bne.w	409252 <_svfprintf_r+0x1636>
  40849c:	9b07      	ldr	r3, [sp, #28]
  40849e:	069b      	lsls	r3, r3, #26
  4084a0:	f140 842f 	bpl.w	408d02 <_svfprintf_r+0x10e6>
  4084a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4084a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4084a8:	6813      	ldr	r3, [r2, #0]
  4084aa:	17cd      	asrs	r5, r1, #31
  4084ac:	4608      	mov	r0, r1
  4084ae:	3204      	adds	r2, #4
  4084b0:	4629      	mov	r1, r5
  4084b2:	920e      	str	r2, [sp, #56]	; 0x38
  4084b4:	e9c3 0100 	strd	r0, r1, [r3]
  4084b8:	f7ff bbd6 	b.w	407c68 <_svfprintf_r+0x4c>
  4084bc:	9b07      	ldr	r3, [sp, #28]
  4084be:	f043 0320 	orr.w	r3, r3, #32
  4084c2:	9307      	str	r3, [sp, #28]
  4084c4:	f898 3000 	ldrb.w	r3, [r8]
  4084c8:	e401      	b.n	407cce <_svfprintf_r+0xb2>
  4084ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4084cc:	9311      	str	r3, [sp, #68]	; 0x44
  4084ce:	6816      	ldr	r6, [r2, #0]
  4084d0:	2400      	movs	r4, #0
  4084d2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4084d6:	1d17      	adds	r7, r2, #4
  4084d8:	2e00      	cmp	r6, #0
  4084da:	f000 85bd 	beq.w	409058 <_svfprintf_r+0x143c>
  4084de:	2d00      	cmp	r5, #0
  4084e0:	f2c0 850f 	blt.w	408f02 <_svfprintf_r+0x12e6>
  4084e4:	462a      	mov	r2, r5
  4084e6:	4621      	mov	r1, r4
  4084e8:	4630      	mov	r0, r6
  4084ea:	f003 fe61 	bl	40c1b0 <memchr>
  4084ee:	2800      	cmp	r0, #0
  4084f0:	f000 8604 	beq.w	4090fc <_svfprintf_r+0x14e0>
  4084f4:	1b83      	subs	r3, r0, r6
  4084f6:	930d      	str	r3, [sp, #52]	; 0x34
  4084f8:	46a3      	mov	fp, r4
  4084fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4084fe:	970e      	str	r7, [sp, #56]	; 0x38
  408500:	9308      	str	r3, [sp, #32]
  408502:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  408506:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40850a:	e54d      	b.n	407fa8 <_svfprintf_r+0x38c>
  40850c:	486f      	ldr	r0, [pc, #444]	; (4086cc <_svfprintf_r+0xab0>)
  40850e:	9211      	str	r2, [sp, #68]	; 0x44
  408510:	f1bb 0f00 	cmp.w	fp, #0
  408514:	f040 8173 	bne.w	4087fe <_svfprintf_r+0xbe2>
  408518:	465f      	mov	r7, fp
  40851a:	f04f 0b00 	mov.w	fp, #0
  40851e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  408522:	ae30      	add	r6, sp, #192	; 0xc0
  408524:	e539      	b.n	407f9a <_svfprintf_r+0x37e>
  408526:	9311      	str	r3, [sp, #68]	; 0x44
  408528:	2a00      	cmp	r2, #0
  40852a:	f040 86b0 	bne.w	40928e <_svfprintf_r+0x1672>
  40852e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408530:	2a00      	cmp	r2, #0
  408532:	f43f ac65 	beq.w	407e00 <_svfprintf_r+0x1e4>
  408536:	2300      	movs	r3, #0
  408538:	2101      	movs	r1, #1
  40853a:	461f      	mov	r7, r3
  40853c:	9108      	str	r1, [sp, #32]
  40853e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  408542:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408546:	469b      	mov	fp, r3
  408548:	9313      	str	r3, [sp, #76]	; 0x4c
  40854a:	910d      	str	r1, [sp, #52]	; 0x34
  40854c:	ae26      	add	r6, sp, #152	; 0x98
  40854e:	e52f      	b.n	407fb0 <_svfprintf_r+0x394>
  408550:	f1bb 0f00 	cmp.w	fp, #0
  408554:	f000 85dd 	beq.w	409112 <_svfprintf_r+0x14f6>
  408558:	2700      	movs	r7, #0
  40855a:	2400      	movs	r4, #0
  40855c:	2500      	movs	r5, #0
  40855e:	e482      	b.n	407e66 <_svfprintf_r+0x24a>
  408560:	485a      	ldr	r0, [pc, #360]	; (4086cc <_svfprintf_r+0xab0>)
  408562:	9307      	str	r3, [sp, #28]
  408564:	9211      	str	r2, [sp, #68]	; 0x44
  408566:	ea54 0305 	orrs.w	r3, r4, r5
  40856a:	970e      	str	r7, [sp, #56]	; 0x38
  40856c:	f04f 0700 	mov.w	r7, #0
  408570:	f47f af0c 	bne.w	40838c <_svfprintf_r+0x770>
  408574:	2400      	movs	r4, #0
  408576:	2500      	movs	r5, #0
  408578:	e708      	b.n	40838c <_svfprintf_r+0x770>
  40857a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40857c:	e568      	b.n	408050 <_svfprintf_r+0x434>
  40857e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408580:	2b65      	cmp	r3, #101	; 0x65
  408582:	f340 80a9 	ble.w	4086d8 <_svfprintf_r+0xabc>
  408586:	9814      	ldr	r0, [sp, #80]	; 0x50
  408588:	9915      	ldr	r1, [sp, #84]	; 0x54
  40858a:	2200      	movs	r2, #0
  40858c:	2300      	movs	r3, #0
  40858e:	f005 fb21 	bl	40dbd4 <__aeabi_dcmpeq>
  408592:	2800      	cmp	r0, #0
  408594:	f000 8135 	beq.w	408802 <_svfprintf_r+0xbe6>
  408598:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40859a:	4a4d      	ldr	r2, [pc, #308]	; (4086d0 <_svfprintf_r+0xab4>)
  40859c:	f8c9 2000 	str.w	r2, [r9]
  4085a0:	3301      	adds	r3, #1
  4085a2:	3401      	adds	r4, #1
  4085a4:	2201      	movs	r2, #1
  4085a6:	2b07      	cmp	r3, #7
  4085a8:	9425      	str	r4, [sp, #148]	; 0x94
  4085aa:	9324      	str	r3, [sp, #144]	; 0x90
  4085ac:	f8c9 2004 	str.w	r2, [r9, #4]
  4085b0:	f300 83e6 	bgt.w	408d80 <_svfprintf_r+0x1164>
  4085b4:	f109 0908 	add.w	r9, r9, #8
  4085b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4085ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4085bc:	4293      	cmp	r3, r2
  4085be:	db03      	blt.n	4085c8 <_svfprintf_r+0x9ac>
  4085c0:	9b07      	ldr	r3, [sp, #28]
  4085c2:	07db      	lsls	r3, r3, #31
  4085c4:	f57f adba 	bpl.w	40813c <_svfprintf_r+0x520>
  4085c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4085ca:	9916      	ldr	r1, [sp, #88]	; 0x58
  4085cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4085ce:	f8c9 2000 	str.w	r2, [r9]
  4085d2:	3301      	adds	r3, #1
  4085d4:	440c      	add	r4, r1
  4085d6:	2b07      	cmp	r3, #7
  4085d8:	9425      	str	r4, [sp, #148]	; 0x94
  4085da:	f8c9 1004 	str.w	r1, [r9, #4]
  4085de:	9324      	str	r3, [sp, #144]	; 0x90
  4085e0:	f300 843f 	bgt.w	408e62 <_svfprintf_r+0x1246>
  4085e4:	f109 0908 	add.w	r9, r9, #8
  4085e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4085ea:	1e5d      	subs	r5, r3, #1
  4085ec:	2d00      	cmp	r5, #0
  4085ee:	f77f ada5 	ble.w	40813c <_svfprintf_r+0x520>
  4085f2:	4a38      	ldr	r2, [pc, #224]	; (4086d4 <_svfprintf_r+0xab8>)
  4085f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4085f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4085f8:	2d10      	cmp	r5, #16
  4085fa:	f340 81e6 	ble.w	4089ca <_svfprintf_r+0xdae>
  4085fe:	2610      	movs	r6, #16
  408600:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408602:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  408606:	e005      	b.n	408614 <_svfprintf_r+0x9f8>
  408608:	f109 0908 	add.w	r9, r9, #8
  40860c:	3d10      	subs	r5, #16
  40860e:	2d10      	cmp	r5, #16
  408610:	f340 81db 	ble.w	4089ca <_svfprintf_r+0xdae>
  408614:	3301      	adds	r3, #1
  408616:	3410      	adds	r4, #16
  408618:	2b07      	cmp	r3, #7
  40861a:	9425      	str	r4, [sp, #148]	; 0x94
  40861c:	9324      	str	r3, [sp, #144]	; 0x90
  40861e:	f8c9 a000 	str.w	sl, [r9]
  408622:	f8c9 6004 	str.w	r6, [r9, #4]
  408626:	ddef      	ble.n	408608 <_svfprintf_r+0x9ec>
  408628:	aa23      	add	r2, sp, #140	; 0x8c
  40862a:	4659      	mov	r1, fp
  40862c:	4638      	mov	r0, r7
  40862e:	f004 fc65 	bl	40cefc <__ssprint_r>
  408632:	2800      	cmp	r0, #0
  408634:	f47f abeb 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408638:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40863a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40863c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408640:	e7e4      	b.n	40860c <_svfprintf_r+0x9f0>
  408642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408644:	9a08      	ldr	r2, [sp, #32]
  408646:	1a9f      	subs	r7, r3, r2
  408648:	2f00      	cmp	r7, #0
  40864a:	f77f ad25 	ble.w	408098 <_svfprintf_r+0x47c>
  40864e:	4a21      	ldr	r2, [pc, #132]	; (4086d4 <_svfprintf_r+0xab8>)
  408650:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408652:	920f      	str	r2, [sp, #60]	; 0x3c
  408654:	2f10      	cmp	r7, #16
  408656:	dd2b      	ble.n	4086b0 <_svfprintf_r+0xa94>
  408658:	464a      	mov	r2, r9
  40865a:	4621      	mov	r1, r4
  40865c:	46b9      	mov	r9, r7
  40865e:	2510      	movs	r5, #16
  408660:	4637      	mov	r7, r6
  408662:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408664:	9e09      	ldr	r6, [sp, #36]	; 0x24
  408666:	e006      	b.n	408676 <_svfprintf_r+0xa5a>
  408668:	f1a9 0910 	sub.w	r9, r9, #16
  40866c:	f1b9 0f10 	cmp.w	r9, #16
  408670:	f102 0208 	add.w	r2, r2, #8
  408674:	dd18      	ble.n	4086a8 <_svfprintf_r+0xa8c>
  408676:	3301      	adds	r3, #1
  408678:	3110      	adds	r1, #16
  40867a:	2b07      	cmp	r3, #7
  40867c:	9125      	str	r1, [sp, #148]	; 0x94
  40867e:	9324      	str	r3, [sp, #144]	; 0x90
  408680:	f8c2 a000 	str.w	sl, [r2]
  408684:	6055      	str	r5, [r2, #4]
  408686:	ddef      	ble.n	408668 <_svfprintf_r+0xa4c>
  408688:	aa23      	add	r2, sp, #140	; 0x8c
  40868a:	4631      	mov	r1, r6
  40868c:	4620      	mov	r0, r4
  40868e:	f004 fc35 	bl	40cefc <__ssprint_r>
  408692:	2800      	cmp	r0, #0
  408694:	f47f abbb 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408698:	f1a9 0910 	sub.w	r9, r9, #16
  40869c:	f1b9 0f10 	cmp.w	r9, #16
  4086a0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4086a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4086a4:	aa30      	add	r2, sp, #192	; 0xc0
  4086a6:	dce6      	bgt.n	408676 <_svfprintf_r+0xa5a>
  4086a8:	463e      	mov	r6, r7
  4086aa:	460c      	mov	r4, r1
  4086ac:	464f      	mov	r7, r9
  4086ae:	4691      	mov	r9, r2
  4086b0:	3301      	adds	r3, #1
  4086b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4086b4:	9324      	str	r3, [sp, #144]	; 0x90
  4086b6:	443c      	add	r4, r7
  4086b8:	2b07      	cmp	r3, #7
  4086ba:	9425      	str	r4, [sp, #148]	; 0x94
  4086bc:	e889 0084 	stmia.w	r9, {r2, r7}
  4086c0:	f300 8245 	bgt.w	408b4e <_svfprintf_r+0xf32>
  4086c4:	f109 0908 	add.w	r9, r9, #8
  4086c8:	e4e6      	b.n	408098 <_svfprintf_r+0x47c>
  4086ca:	bf00      	nop
  4086cc:	0040ef3c 	.word	0x0040ef3c
  4086d0:	0040ef58 	.word	0x0040ef58
  4086d4:	0040ef08 	.word	0x0040ef08
  4086d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4086da:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4086dc:	2b01      	cmp	r3, #1
  4086de:	f340 8208 	ble.w	408af2 <_svfprintf_r+0xed6>
  4086e2:	3501      	adds	r5, #1
  4086e4:	3401      	adds	r4, #1
  4086e6:	2301      	movs	r3, #1
  4086e8:	2d07      	cmp	r5, #7
  4086ea:	9425      	str	r4, [sp, #148]	; 0x94
  4086ec:	9524      	str	r5, [sp, #144]	; 0x90
  4086ee:	f8c9 6000 	str.w	r6, [r9]
  4086f2:	f8c9 3004 	str.w	r3, [r9, #4]
  4086f6:	f300 820d 	bgt.w	408b14 <_svfprintf_r+0xef8>
  4086fa:	f109 0908 	add.w	r9, r9, #8
  4086fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408702:	f8c9 3000 	str.w	r3, [r9]
  408706:	3501      	adds	r5, #1
  408708:	4414      	add	r4, r2
  40870a:	2d07      	cmp	r5, #7
  40870c:	9425      	str	r4, [sp, #148]	; 0x94
  40870e:	9524      	str	r5, [sp, #144]	; 0x90
  408710:	f8c9 2004 	str.w	r2, [r9, #4]
  408714:	f300 820e 	bgt.w	408b34 <_svfprintf_r+0xf18>
  408718:	f109 0908 	add.w	r9, r9, #8
  40871c:	2300      	movs	r3, #0
  40871e:	9814      	ldr	r0, [sp, #80]	; 0x50
  408720:	9915      	ldr	r1, [sp, #84]	; 0x54
  408722:	2200      	movs	r2, #0
  408724:	f005 fa56 	bl	40dbd4 <__aeabi_dcmpeq>
  408728:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40872a:	2800      	cmp	r0, #0
  40872c:	f040 80c3 	bne.w	4088b6 <_svfprintf_r+0xc9a>
  408730:	3b01      	subs	r3, #1
  408732:	3501      	adds	r5, #1
  408734:	3601      	adds	r6, #1
  408736:	441c      	add	r4, r3
  408738:	2d07      	cmp	r5, #7
  40873a:	9524      	str	r5, [sp, #144]	; 0x90
  40873c:	9425      	str	r4, [sp, #148]	; 0x94
  40873e:	f8c9 6000 	str.w	r6, [r9]
  408742:	f8c9 3004 	str.w	r3, [r9, #4]
  408746:	f300 80f5 	bgt.w	408934 <_svfprintf_r+0xd18>
  40874a:	f109 0908 	add.w	r9, r9, #8
  40874e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408750:	f8c9 2004 	str.w	r2, [r9, #4]
  408754:	3501      	adds	r5, #1
  408756:	4414      	add	r4, r2
  408758:	ab1f      	add	r3, sp, #124	; 0x7c
  40875a:	2d07      	cmp	r5, #7
  40875c:	9425      	str	r4, [sp, #148]	; 0x94
  40875e:	9524      	str	r5, [sp, #144]	; 0x90
  408760:	f8c9 3000 	str.w	r3, [r9]
  408764:	f77f ace8 	ble.w	408138 <_svfprintf_r+0x51c>
  408768:	aa23      	add	r2, sp, #140	; 0x8c
  40876a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40876c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40876e:	f004 fbc5 	bl	40cefc <__ssprint_r>
  408772:	2800      	cmp	r0, #0
  408774:	f47f ab4b 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408778:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40877a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40877e:	e4dd      	b.n	40813c <_svfprintf_r+0x520>
  408780:	aa23      	add	r2, sp, #140	; 0x8c
  408782:	9909      	ldr	r1, [sp, #36]	; 0x24
  408784:	980a      	ldr	r0, [sp, #40]	; 0x28
  408786:	f004 fbb9 	bl	40cefc <__ssprint_r>
  40878a:	2800      	cmp	r0, #0
  40878c:	f43f ad24 	beq.w	4081d8 <_svfprintf_r+0x5bc>
  408790:	f7ff bb3d 	b.w	407e0e <_svfprintf_r+0x1f2>
  408794:	aa23      	add	r2, sp, #140	; 0x8c
  408796:	9909      	ldr	r1, [sp, #36]	; 0x24
  408798:	980a      	ldr	r0, [sp, #40]	; 0x28
  40879a:	f004 fbaf 	bl	40cefc <__ssprint_r>
  40879e:	2800      	cmp	r0, #0
  4087a0:	f47f ab35 	bne.w	407e0e <_svfprintf_r+0x1f2>
  4087a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4087a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4087aa:	e4b4      	b.n	408116 <_svfprintf_r+0x4fa>
  4087ac:	aa23      	add	r2, sp, #140	; 0x8c
  4087ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4087b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4087b2:	f004 fba3 	bl	40cefc <__ssprint_r>
  4087b6:	2800      	cmp	r0, #0
  4087b8:	f47f ab29 	bne.w	407e0e <_svfprintf_r+0x1f2>
  4087bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4087be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4087c2:	e455      	b.n	408070 <_svfprintf_r+0x454>
  4087c4:	aa23      	add	r2, sp, #140	; 0x8c
  4087c6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4087c8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4087ca:	f004 fb97 	bl	40cefc <__ssprint_r>
  4087ce:	2800      	cmp	r0, #0
  4087d0:	f47f ab1d 	bne.w	407e0e <_svfprintf_r+0x1f2>
  4087d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4087d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4087da:	e459      	b.n	408090 <_svfprintf_r+0x474>
  4087dc:	f1bb 0f00 	cmp.w	fp, #0
  4087e0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4087e4:	f2c0 82d8 	blt.w	408d98 <_svfprintf_r+0x117c>
  4087e8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4087ec:	9307      	str	r3, [sp, #28]
  4087ee:	ea54 0305 	orrs.w	r3, r4, r5
  4087f2:	f47f adcb 	bne.w	40838c <_svfprintf_r+0x770>
  4087f6:	f1bb 0f00 	cmp.w	fp, #0
  4087fa:	f43f ae8d 	beq.w	408518 <_svfprintf_r+0x8fc>
  4087fe:	2700      	movs	r7, #0
  408800:	e6b8      	b.n	408574 <_svfprintf_r+0x958>
  408802:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408804:	2d00      	cmp	r5, #0
  408806:	f340 82ca 	ble.w	408d9e <_svfprintf_r+0x1182>
  40880a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40880c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40880e:	4293      	cmp	r3, r2
  408810:	bfa8      	it	ge
  408812:	4613      	movge	r3, r2
  408814:	2b00      	cmp	r3, #0
  408816:	461d      	mov	r5, r3
  408818:	dd0d      	ble.n	408836 <_svfprintf_r+0xc1a>
  40881a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40881c:	f8c9 6000 	str.w	r6, [r9]
  408820:	3301      	adds	r3, #1
  408822:	442c      	add	r4, r5
  408824:	2b07      	cmp	r3, #7
  408826:	9425      	str	r4, [sp, #148]	; 0x94
  408828:	f8c9 5004 	str.w	r5, [r9, #4]
  40882c:	9324      	str	r3, [sp, #144]	; 0x90
  40882e:	f300 839c 	bgt.w	408f6a <_svfprintf_r+0x134e>
  408832:	f109 0908 	add.w	r9, r9, #8
  408836:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408838:	2d00      	cmp	r5, #0
  40883a:	bfa8      	it	ge
  40883c:	1b5b      	subge	r3, r3, r5
  40883e:	2b00      	cmp	r3, #0
  408840:	461d      	mov	r5, r3
  408842:	f340 80f6 	ble.w	408a32 <_svfprintf_r+0xe16>
  408846:	4aba      	ldr	r2, [pc, #744]	; (408b30 <_svfprintf_r+0xf14>)
  408848:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40884a:	920f      	str	r2, [sp, #60]	; 0x3c
  40884c:	2d10      	cmp	r5, #16
  40884e:	f340 828a 	ble.w	408d66 <_svfprintf_r+0x114a>
  408852:	4622      	mov	r2, r4
  408854:	2710      	movs	r7, #16
  408856:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40885a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40885c:	e005      	b.n	40886a <_svfprintf_r+0xc4e>
  40885e:	f109 0908 	add.w	r9, r9, #8
  408862:	3d10      	subs	r5, #16
  408864:	2d10      	cmp	r5, #16
  408866:	f340 827d 	ble.w	408d64 <_svfprintf_r+0x1148>
  40886a:	3301      	adds	r3, #1
  40886c:	3210      	adds	r2, #16
  40886e:	2b07      	cmp	r3, #7
  408870:	9225      	str	r2, [sp, #148]	; 0x94
  408872:	9324      	str	r3, [sp, #144]	; 0x90
  408874:	f8c9 a000 	str.w	sl, [r9]
  408878:	f8c9 7004 	str.w	r7, [r9, #4]
  40887c:	ddef      	ble.n	40885e <_svfprintf_r+0xc42>
  40887e:	aa23      	add	r2, sp, #140	; 0x8c
  408880:	4621      	mov	r1, r4
  408882:	4658      	mov	r0, fp
  408884:	f004 fb3a 	bl	40cefc <__ssprint_r>
  408888:	2800      	cmp	r0, #0
  40888a:	f47f aac0 	bne.w	407e0e <_svfprintf_r+0x1f2>
  40888e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408890:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408892:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408896:	e7e4      	b.n	408862 <_svfprintf_r+0xc46>
  408898:	aa23      	add	r2, sp, #140	; 0x8c
  40889a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40889c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40889e:	f004 fb2d 	bl	40cefc <__ssprint_r>
  4088a2:	2800      	cmp	r0, #0
  4088a4:	f47f aab3 	bne.w	407e0e <_svfprintf_r+0x1f2>
  4088a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4088ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4088ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4088b2:	f7ff bbcd 	b.w	408050 <_svfprintf_r+0x434>
  4088b6:	1e5e      	subs	r6, r3, #1
  4088b8:	2e00      	cmp	r6, #0
  4088ba:	f77f af48 	ble.w	40874e <_svfprintf_r+0xb32>
  4088be:	4b9c      	ldr	r3, [pc, #624]	; (408b30 <_svfprintf_r+0xf14>)
  4088c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4088c2:	2e10      	cmp	r6, #16
  4088c4:	dd2c      	ble.n	408920 <_svfprintf_r+0xd04>
  4088c6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  4088ca:	2710      	movs	r7, #16
  4088cc:	46b0      	mov	r8, r6
  4088ce:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4088d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4088d4:	e006      	b.n	4088e4 <_svfprintf_r+0xcc8>
  4088d6:	f1a8 0810 	sub.w	r8, r8, #16
  4088da:	f1b8 0f10 	cmp.w	r8, #16
  4088de:	f109 0908 	add.w	r9, r9, #8
  4088e2:	dd1a      	ble.n	40891a <_svfprintf_r+0xcfe>
  4088e4:	3501      	adds	r5, #1
  4088e6:	3410      	adds	r4, #16
  4088e8:	2d07      	cmp	r5, #7
  4088ea:	9425      	str	r4, [sp, #148]	; 0x94
  4088ec:	9524      	str	r5, [sp, #144]	; 0x90
  4088ee:	f8c9 a000 	str.w	sl, [r9]
  4088f2:	f8c9 7004 	str.w	r7, [r9, #4]
  4088f6:	ddee      	ble.n	4088d6 <_svfprintf_r+0xcba>
  4088f8:	aa23      	add	r2, sp, #140	; 0x8c
  4088fa:	4631      	mov	r1, r6
  4088fc:	4658      	mov	r0, fp
  4088fe:	f004 fafd 	bl	40cefc <__ssprint_r>
  408902:	2800      	cmp	r0, #0
  408904:	f47f aa83 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408908:	f1a8 0810 	sub.w	r8, r8, #16
  40890c:	f1b8 0f10 	cmp.w	r8, #16
  408910:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408912:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408914:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408918:	dce4      	bgt.n	4088e4 <_svfprintf_r+0xcc8>
  40891a:	4646      	mov	r6, r8
  40891c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  408920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408922:	3501      	adds	r5, #1
  408924:	4434      	add	r4, r6
  408926:	2d07      	cmp	r5, #7
  408928:	9425      	str	r4, [sp, #148]	; 0x94
  40892a:	9524      	str	r5, [sp, #144]	; 0x90
  40892c:	e889 0048 	stmia.w	r9, {r3, r6}
  408930:	f77f af0b 	ble.w	40874a <_svfprintf_r+0xb2e>
  408934:	aa23      	add	r2, sp, #140	; 0x8c
  408936:	9909      	ldr	r1, [sp, #36]	; 0x24
  408938:	980a      	ldr	r0, [sp, #40]	; 0x28
  40893a:	f004 fadf 	bl	40cefc <__ssprint_r>
  40893e:	2800      	cmp	r0, #0
  408940:	f47f aa65 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408944:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408946:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408948:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40894c:	e6ff      	b.n	40874e <_svfprintf_r+0xb32>
  40894e:	9907      	ldr	r1, [sp, #28]
  408950:	f011 0210 	ands.w	r2, r1, #16
  408954:	f000 8108 	beq.w	408b68 <_svfprintf_r+0xf4c>
  408958:	980e      	ldr	r0, [sp, #56]	; 0x38
  40895a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40895e:	f1bb 0f00 	cmp.w	fp, #0
  408962:	6804      	ldr	r4, [r0, #0]
  408964:	f100 0704 	add.w	r7, r0, #4
  408968:	f04f 0500 	mov.w	r5, #0
  40896c:	db26      	blt.n	4089bc <_svfprintf_r+0xda0>
  40896e:	460a      	mov	r2, r1
  408970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  408974:	9207      	str	r2, [sp, #28]
  408976:	ea54 0205 	orrs.w	r2, r4, r5
  40897a:	970e      	str	r7, [sp, #56]	; 0x38
  40897c:	461f      	mov	r7, r3
  40897e:	f47f aaef 	bne.w	407f60 <_svfprintf_r+0x344>
  408982:	e4c8      	b.n	408316 <_svfprintf_r+0x6fa>
  408984:	9b07      	ldr	r3, [sp, #28]
  408986:	06d9      	lsls	r1, r3, #27
  408988:	d42a      	bmi.n	4089e0 <_svfprintf_r+0xdc4>
  40898a:	9b07      	ldr	r3, [sp, #28]
  40898c:	065a      	lsls	r2, r3, #25
  40898e:	d527      	bpl.n	4089e0 <_svfprintf_r+0xdc4>
  408990:	990e      	ldr	r1, [sp, #56]	; 0x38
  408992:	f9b1 4000 	ldrsh.w	r4, [r1]
  408996:	3104      	adds	r1, #4
  408998:	17e5      	asrs	r5, r4, #31
  40899a:	4622      	mov	r2, r4
  40899c:	462b      	mov	r3, r5
  40899e:	910e      	str	r1, [sp, #56]	; 0x38
  4089a0:	f7ff bacb 	b.w	407f3a <_svfprintf_r+0x31e>
  4089a4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4089a6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4089aa:	f1bb 0f00 	cmp.w	fp, #0
  4089ae:	680c      	ldr	r4, [r1, #0]
  4089b0:	f101 0704 	add.w	r7, r1, #4
  4089b4:	f04f 0500 	mov.w	r5, #0
  4089b8:	f280 8247 	bge.w	408e4a <_svfprintf_r+0x122e>
  4089bc:	970e      	str	r7, [sp, #56]	; 0x38
  4089be:	461f      	mov	r7, r3
  4089c0:	ea54 0305 	orrs.w	r3, r4, r5
  4089c4:	f47f aacc 	bne.w	407f60 <_svfprintf_r+0x344>
  4089c8:	e4aa      	b.n	408320 <_svfprintf_r+0x704>
  4089ca:	3301      	adds	r3, #1
  4089cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4089ce:	9324      	str	r3, [sp, #144]	; 0x90
  4089d0:	442c      	add	r4, r5
  4089d2:	2b07      	cmp	r3, #7
  4089d4:	9425      	str	r4, [sp, #148]	; 0x94
  4089d6:	e889 0024 	stmia.w	r9, {r2, r5}
  4089da:	f77f abad 	ble.w	408138 <_svfprintf_r+0x51c>
  4089de:	e6c3      	b.n	408768 <_svfprintf_r+0xb4c>
  4089e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4089e2:	6814      	ldr	r4, [r2, #0]
  4089e4:	4613      	mov	r3, r2
  4089e6:	3304      	adds	r3, #4
  4089e8:	17e5      	asrs	r5, r4, #31
  4089ea:	4622      	mov	r2, r4
  4089ec:	930e      	str	r3, [sp, #56]	; 0x38
  4089ee:	2a00      	cmp	r2, #0
  4089f0:	462b      	mov	r3, r5
  4089f2:	f173 0300 	sbcs.w	r3, r3, #0
  4089f6:	f6bf aaa5 	bge.w	407f44 <_svfprintf_r+0x328>
  4089fa:	4264      	negs	r4, r4
  4089fc:	f04f 072d 	mov.w	r7, #45	; 0x2d
  408a00:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  408a04:	f1bb 0f00 	cmp.w	fp, #0
  408a08:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408a0c:	f6ff aaa8 	blt.w	407f60 <_svfprintf_r+0x344>
  408a10:	9b07      	ldr	r3, [sp, #28]
  408a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408a16:	9307      	str	r3, [sp, #28]
  408a18:	f7ff baa2 	b.w	407f60 <_svfprintf_r+0x344>
  408a1c:	aa23      	add	r2, sp, #140	; 0x8c
  408a1e:	9909      	ldr	r1, [sp, #36]	; 0x24
  408a20:	980a      	ldr	r0, [sp, #40]	; 0x28
  408a22:	f004 fa6b 	bl	40cefc <__ssprint_r>
  408a26:	2800      	cmp	r0, #0
  408a28:	f47f a9f1 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408a2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408a2e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408a32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408a36:	4432      	add	r2, r6
  408a38:	4617      	mov	r7, r2
  408a3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408a3c:	4293      	cmp	r3, r2
  408a3e:	db47      	blt.n	408ad0 <_svfprintf_r+0xeb4>
  408a40:	9a07      	ldr	r2, [sp, #28]
  408a42:	07d5      	lsls	r5, r2, #31
  408a44:	d444      	bmi.n	408ad0 <_svfprintf_r+0xeb4>
  408a46:	9912      	ldr	r1, [sp, #72]	; 0x48
  408a48:	440e      	add	r6, r1
  408a4a:	1bf5      	subs	r5, r6, r7
  408a4c:	1acb      	subs	r3, r1, r3
  408a4e:	429d      	cmp	r5, r3
  408a50:	bfa8      	it	ge
  408a52:	461d      	movge	r5, r3
  408a54:	2d00      	cmp	r5, #0
  408a56:	462e      	mov	r6, r5
  408a58:	dd0d      	ble.n	408a76 <_svfprintf_r+0xe5a>
  408a5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408a5c:	f8c9 7000 	str.w	r7, [r9]
  408a60:	3201      	adds	r2, #1
  408a62:	442c      	add	r4, r5
  408a64:	2a07      	cmp	r2, #7
  408a66:	9425      	str	r4, [sp, #148]	; 0x94
  408a68:	f8c9 5004 	str.w	r5, [r9, #4]
  408a6c:	9224      	str	r2, [sp, #144]	; 0x90
  408a6e:	f300 830b 	bgt.w	409088 <_svfprintf_r+0x146c>
  408a72:	f109 0908 	add.w	r9, r9, #8
  408a76:	2e00      	cmp	r6, #0
  408a78:	bfac      	ite	ge
  408a7a:	1b9d      	subge	r5, r3, r6
  408a7c:	461d      	movlt	r5, r3
  408a7e:	2d00      	cmp	r5, #0
  408a80:	f77f ab5c 	ble.w	40813c <_svfprintf_r+0x520>
  408a84:	4a2a      	ldr	r2, [pc, #168]	; (408b30 <_svfprintf_r+0xf14>)
  408a86:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a88:	920f      	str	r2, [sp, #60]	; 0x3c
  408a8a:	2d10      	cmp	r5, #16
  408a8c:	dd9d      	ble.n	4089ca <_svfprintf_r+0xdae>
  408a8e:	2610      	movs	r6, #16
  408a90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408a92:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  408a96:	e004      	b.n	408aa2 <_svfprintf_r+0xe86>
  408a98:	f109 0908 	add.w	r9, r9, #8
  408a9c:	3d10      	subs	r5, #16
  408a9e:	2d10      	cmp	r5, #16
  408aa0:	dd93      	ble.n	4089ca <_svfprintf_r+0xdae>
  408aa2:	3301      	adds	r3, #1
  408aa4:	3410      	adds	r4, #16
  408aa6:	2b07      	cmp	r3, #7
  408aa8:	9425      	str	r4, [sp, #148]	; 0x94
  408aaa:	9324      	str	r3, [sp, #144]	; 0x90
  408aac:	f8c9 a000 	str.w	sl, [r9]
  408ab0:	f8c9 6004 	str.w	r6, [r9, #4]
  408ab4:	ddf0      	ble.n	408a98 <_svfprintf_r+0xe7c>
  408ab6:	aa23      	add	r2, sp, #140	; 0x8c
  408ab8:	4659      	mov	r1, fp
  408aba:	4638      	mov	r0, r7
  408abc:	f004 fa1e 	bl	40cefc <__ssprint_r>
  408ac0:	2800      	cmp	r0, #0
  408ac2:	f47f a9a4 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408ac6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408ac8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408aca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408ace:	e7e5      	b.n	408a9c <_svfprintf_r+0xe80>
  408ad0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408ad2:	9816      	ldr	r0, [sp, #88]	; 0x58
  408ad4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  408ad6:	f8c9 1000 	str.w	r1, [r9]
  408ada:	3201      	adds	r2, #1
  408adc:	4404      	add	r4, r0
  408ade:	2a07      	cmp	r2, #7
  408ae0:	9425      	str	r4, [sp, #148]	; 0x94
  408ae2:	f8c9 0004 	str.w	r0, [r9, #4]
  408ae6:	9224      	str	r2, [sp, #144]	; 0x90
  408ae8:	f300 82a9 	bgt.w	40903e <_svfprintf_r+0x1422>
  408aec:	f109 0908 	add.w	r9, r9, #8
  408af0:	e7a9      	b.n	408a46 <_svfprintf_r+0xe2a>
  408af2:	9b07      	ldr	r3, [sp, #28]
  408af4:	07d8      	lsls	r0, r3, #31
  408af6:	f53f adf4 	bmi.w	4086e2 <_svfprintf_r+0xac6>
  408afa:	3501      	adds	r5, #1
  408afc:	3401      	adds	r4, #1
  408afe:	2301      	movs	r3, #1
  408b00:	2d07      	cmp	r5, #7
  408b02:	9425      	str	r4, [sp, #148]	; 0x94
  408b04:	9524      	str	r5, [sp, #144]	; 0x90
  408b06:	f8c9 6000 	str.w	r6, [r9]
  408b0a:	f8c9 3004 	str.w	r3, [r9, #4]
  408b0e:	f77f ae1c 	ble.w	40874a <_svfprintf_r+0xb2e>
  408b12:	e70f      	b.n	408934 <_svfprintf_r+0xd18>
  408b14:	aa23      	add	r2, sp, #140	; 0x8c
  408b16:	9909      	ldr	r1, [sp, #36]	; 0x24
  408b18:	980a      	ldr	r0, [sp, #40]	; 0x28
  408b1a:	f004 f9ef 	bl	40cefc <__ssprint_r>
  408b1e:	2800      	cmp	r0, #0
  408b20:	f47f a975 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408b24:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408b26:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408b28:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408b2c:	e5e7      	b.n	4086fe <_svfprintf_r+0xae2>
  408b2e:	bf00      	nop
  408b30:	0040ef08 	.word	0x0040ef08
  408b34:	aa23      	add	r2, sp, #140	; 0x8c
  408b36:	9909      	ldr	r1, [sp, #36]	; 0x24
  408b38:	980a      	ldr	r0, [sp, #40]	; 0x28
  408b3a:	f004 f9df 	bl	40cefc <__ssprint_r>
  408b3e:	2800      	cmp	r0, #0
  408b40:	f47f a965 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408b44:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408b46:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408b48:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408b4c:	e5e6      	b.n	40871c <_svfprintf_r+0xb00>
  408b4e:	aa23      	add	r2, sp, #140	; 0x8c
  408b50:	9909      	ldr	r1, [sp, #36]	; 0x24
  408b52:	980a      	ldr	r0, [sp, #40]	; 0x28
  408b54:	f004 f9d2 	bl	40cefc <__ssprint_r>
  408b58:	2800      	cmp	r0, #0
  408b5a:	f47f a958 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408b5e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408b60:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408b64:	f7ff ba98 	b.w	408098 <_svfprintf_r+0x47c>
  408b68:	9907      	ldr	r1, [sp, #28]
  408b6a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  408b6e:	f43f af19 	beq.w	4089a4 <_svfprintf_r+0xd88>
  408b72:	980e      	ldr	r0, [sp, #56]	; 0x38
  408b74:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408b78:	f1bb 0f00 	cmp.w	fp, #0
  408b7c:	8804      	ldrh	r4, [r0, #0]
  408b7e:	f100 0704 	add.w	r7, r0, #4
  408b82:	f04f 0500 	mov.w	r5, #0
  408b86:	f2c0 81b9 	blt.w	408efc <_svfprintf_r+0x12e0>
  408b8a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  408b8e:	9307      	str	r3, [sp, #28]
  408b90:	ea54 0305 	orrs.w	r3, r4, r5
  408b94:	970e      	str	r7, [sp, #56]	; 0x38
  408b96:	4617      	mov	r7, r2
  408b98:	f47f a9e2 	bne.w	407f60 <_svfprintf_r+0x344>
  408b9c:	f7ff bbbb 	b.w	408316 <_svfprintf_r+0x6fa>
  408ba0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  408ba2:	4622      	mov	r2, r4
  408ba4:	4620      	mov	r0, r4
  408ba6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  408ba8:	4623      	mov	r3, r4
  408baa:	4621      	mov	r1, r4
  408bac:	f005 f844 	bl	40dc38 <__aeabi_dcmpun>
  408bb0:	2800      	cmp	r0, #0
  408bb2:	f040 8317 	bne.w	4091e4 <_svfprintf_r+0x15c8>
  408bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408bb8:	f1bb 3fff 	cmp.w	fp, #4294967295
  408bbc:	f023 0320 	bic.w	r3, r3, #32
  408bc0:	930d      	str	r3, [sp, #52]	; 0x34
  408bc2:	f000 8270 	beq.w	4090a6 <_svfprintf_r+0x148a>
  408bc6:	2b47      	cmp	r3, #71	; 0x47
  408bc8:	f000 8192 	beq.w	408ef0 <_svfprintf_r+0x12d4>
  408bcc:	9b07      	ldr	r3, [sp, #28]
  408bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408bd2:	9310      	str	r3, [sp, #64]	; 0x40
  408bd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408bd6:	1e1f      	subs	r7, r3, #0
  408bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408bda:	9308      	str	r3, [sp, #32]
  408bdc:	bfbb      	ittet	lt
  408bde:	463b      	movlt	r3, r7
  408be0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  408be4:	2300      	movge	r3, #0
  408be6:	232d      	movlt	r3, #45	; 0x2d
  408be8:	930f      	str	r3, [sp, #60]	; 0x3c
  408bea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408bec:	2b66      	cmp	r3, #102	; 0x66
  408bee:	f000 825d 	beq.w	4090ac <_svfprintf_r+0x1490>
  408bf2:	2b46      	cmp	r3, #70	; 0x46
  408bf4:	f000 8151 	beq.w	408e9a <_svfprintf_r+0x127e>
  408bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408bfa:	9a08      	ldr	r2, [sp, #32]
  408bfc:	2b45      	cmp	r3, #69	; 0x45
  408bfe:	a821      	add	r0, sp, #132	; 0x84
  408c00:	a91e      	add	r1, sp, #120	; 0x78
  408c02:	bf0c      	ite	eq
  408c04:	f10b 0501 	addeq.w	r5, fp, #1
  408c08:	465d      	movne	r5, fp
  408c0a:	9004      	str	r0, [sp, #16]
  408c0c:	9103      	str	r1, [sp, #12]
  408c0e:	a81d      	add	r0, sp, #116	; 0x74
  408c10:	2102      	movs	r1, #2
  408c12:	463b      	mov	r3, r7
  408c14:	9002      	str	r0, [sp, #8]
  408c16:	9501      	str	r5, [sp, #4]
  408c18:	9100      	str	r1, [sp, #0]
  408c1a:	980a      	ldr	r0, [sp, #40]	; 0x28
  408c1c:	f001 fbc4 	bl	40a3a8 <_dtoa_r>
  408c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c22:	2b67      	cmp	r3, #103	; 0x67
  408c24:	4606      	mov	r6, r0
  408c26:	f040 8290 	bne.w	40914a <_svfprintf_r+0x152e>
  408c2a:	9b07      	ldr	r3, [sp, #28]
  408c2c:	07da      	lsls	r2, r3, #31
  408c2e:	f140 82af 	bpl.w	409190 <_svfprintf_r+0x1574>
  408c32:	1974      	adds	r4, r6, r5
  408c34:	9808      	ldr	r0, [sp, #32]
  408c36:	4639      	mov	r1, r7
  408c38:	2200      	movs	r2, #0
  408c3a:	2300      	movs	r3, #0
  408c3c:	f004 ffca 	bl	40dbd4 <__aeabi_dcmpeq>
  408c40:	2800      	cmp	r0, #0
  408c42:	f040 8190 	bne.w	408f66 <_svfprintf_r+0x134a>
  408c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408c48:	429c      	cmp	r4, r3
  408c4a:	d906      	bls.n	408c5a <_svfprintf_r+0x103e>
  408c4c:	2130      	movs	r1, #48	; 0x30
  408c4e:	1c5a      	adds	r2, r3, #1
  408c50:	9221      	str	r2, [sp, #132]	; 0x84
  408c52:	7019      	strb	r1, [r3, #0]
  408c54:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408c56:	429c      	cmp	r4, r3
  408c58:	d8f9      	bhi.n	408c4e <_svfprintf_r+0x1032>
  408c5a:	1b9b      	subs	r3, r3, r6
  408c5c:	9312      	str	r3, [sp, #72]	; 0x48
  408c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408c60:	2b47      	cmp	r3, #71	; 0x47
  408c62:	f000 8179 	beq.w	408f58 <_svfprintf_r+0x133c>
  408c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c68:	2b65      	cmp	r3, #101	; 0x65
  408c6a:	f340 827d 	ble.w	409168 <_svfprintf_r+0x154c>
  408c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c70:	2b66      	cmp	r3, #102	; 0x66
  408c72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408c74:	9313      	str	r3, [sp, #76]	; 0x4c
  408c76:	f000 825b 	beq.w	409130 <_svfprintf_r+0x1514>
  408c7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408c7c:	9912      	ldr	r1, [sp, #72]	; 0x48
  408c7e:	428a      	cmp	r2, r1
  408c80:	f2c0 8230 	blt.w	4090e4 <_svfprintf_r+0x14c8>
  408c84:	9b07      	ldr	r3, [sp, #28]
  408c86:	07d9      	lsls	r1, r3, #31
  408c88:	f100 8284 	bmi.w	409194 <_svfprintf_r+0x1578>
  408c8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408c90:	920d      	str	r2, [sp, #52]	; 0x34
  408c92:	2267      	movs	r2, #103	; 0x67
  408c94:	9211      	str	r2, [sp, #68]	; 0x44
  408c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408c98:	2a00      	cmp	r2, #0
  408c9a:	f040 8153 	bne.w	408f44 <_svfprintf_r+0x1328>
  408c9e:	9308      	str	r3, [sp, #32]
  408ca0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408ca2:	9307      	str	r3, [sp, #28]
  408ca4:	4693      	mov	fp, r2
  408ca6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408caa:	f7ff b97d 	b.w	407fa8 <_svfprintf_r+0x38c>
  408cae:	9907      	ldr	r1, [sp, #28]
  408cb0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  408cb4:	d015      	beq.n	408ce2 <_svfprintf_r+0x10c6>
  408cb6:	980e      	ldr	r0, [sp, #56]	; 0x38
  408cb8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408cbc:	f1bb 0f00 	cmp.w	fp, #0
  408cc0:	8804      	ldrh	r4, [r0, #0]
  408cc2:	f100 0704 	add.w	r7, r0, #4
  408cc6:	f04f 0500 	mov.w	r5, #0
  408cca:	db16      	blt.n	408cfa <_svfprintf_r+0x10de>
  408ccc:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  408cd0:	9307      	str	r3, [sp, #28]
  408cd2:	ea54 0305 	orrs.w	r3, r4, r5
  408cd6:	970e      	str	r7, [sp, #56]	; 0x38
  408cd8:	f43f ac3a 	beq.w	408550 <_svfprintf_r+0x934>
  408cdc:	4617      	mov	r7, r2
  408cde:	f7ff b8c2 	b.w	407e66 <_svfprintf_r+0x24a>
  408ce2:	990e      	ldr	r1, [sp, #56]	; 0x38
  408ce4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408ce8:	f1bb 0f00 	cmp.w	fp, #0
  408cec:	680c      	ldr	r4, [r1, #0]
  408cee:	f101 0704 	add.w	r7, r1, #4
  408cf2:	f04f 0500 	mov.w	r5, #0
  408cf6:	f280 80a5 	bge.w	408e44 <_svfprintf_r+0x1228>
  408cfa:	970e      	str	r7, [sp, #56]	; 0x38
  408cfc:	2700      	movs	r7, #0
  408cfe:	f7ff b8b2 	b.w	407e66 <_svfprintf_r+0x24a>
  408d02:	9b07      	ldr	r3, [sp, #28]
  408d04:	06df      	lsls	r7, r3, #27
  408d06:	d40b      	bmi.n	408d20 <_svfprintf_r+0x1104>
  408d08:	9b07      	ldr	r3, [sp, #28]
  408d0a:	065e      	lsls	r6, r3, #25
  408d0c:	d508      	bpl.n	408d20 <_svfprintf_r+0x1104>
  408d0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408d10:	6813      	ldr	r3, [r2, #0]
  408d12:	3204      	adds	r2, #4
  408d14:	920e      	str	r2, [sp, #56]	; 0x38
  408d16:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  408d1a:	801a      	strh	r2, [r3, #0]
  408d1c:	f7fe bfa4 	b.w	407c68 <_svfprintf_r+0x4c>
  408d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408d22:	6813      	ldr	r3, [r2, #0]
  408d24:	3204      	adds	r2, #4
  408d26:	920e      	str	r2, [sp, #56]	; 0x38
  408d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408d2a:	601a      	str	r2, [r3, #0]
  408d2c:	f7fe bf9c 	b.w	407c68 <_svfprintf_r+0x4c>
  408d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408d32:	9b07      	ldr	r3, [sp, #28]
  408d34:	f013 0f40 	tst.w	r3, #64	; 0x40
  408d38:	4613      	mov	r3, r2
  408d3a:	f103 0304 	add.w	r3, r3, #4
  408d3e:	bf0c      	ite	eq
  408d40:	6814      	ldreq	r4, [r2, #0]
  408d42:	8814      	ldrhne	r4, [r2, #0]
  408d44:	930e      	str	r3, [sp, #56]	; 0x38
  408d46:	2500      	movs	r5, #0
  408d48:	f7ff bb02 	b.w	408350 <_svfprintf_r+0x734>
  408d4c:	2700      	movs	r7, #0
  408d4e:	45bb      	cmp	fp, r7
  408d50:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408d54:	f6ff ac0e 	blt.w	408574 <_svfprintf_r+0x958>
  408d58:	9b07      	ldr	r3, [sp, #28]
  408d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408d5e:	9307      	str	r3, [sp, #28]
  408d60:	f7ff bbd6 	b.w	408510 <_svfprintf_r+0x8f4>
  408d64:	4614      	mov	r4, r2
  408d66:	3301      	adds	r3, #1
  408d68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408d6a:	9324      	str	r3, [sp, #144]	; 0x90
  408d6c:	442c      	add	r4, r5
  408d6e:	2b07      	cmp	r3, #7
  408d70:	9425      	str	r4, [sp, #148]	; 0x94
  408d72:	e889 0024 	stmia.w	r9, {r2, r5}
  408d76:	f73f ae51 	bgt.w	408a1c <_svfprintf_r+0xe00>
  408d7a:	f109 0908 	add.w	r9, r9, #8
  408d7e:	e658      	b.n	408a32 <_svfprintf_r+0xe16>
  408d80:	aa23      	add	r2, sp, #140	; 0x8c
  408d82:	9909      	ldr	r1, [sp, #36]	; 0x24
  408d84:	980a      	ldr	r0, [sp, #40]	; 0x28
  408d86:	f004 f8b9 	bl	40cefc <__ssprint_r>
  408d8a:	2800      	cmp	r0, #0
  408d8c:	f47f a83f 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408d90:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408d92:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408d96:	e40f      	b.n	4085b8 <_svfprintf_r+0x99c>
  408d98:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408d9a:	f7ff bbe4 	b.w	408566 <_svfprintf_r+0x94a>
  408d9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408da0:	4ab5      	ldr	r2, [pc, #724]	; (409078 <_svfprintf_r+0x145c>)
  408da2:	f8c9 2000 	str.w	r2, [r9]
  408da6:	3301      	adds	r3, #1
  408da8:	3401      	adds	r4, #1
  408daa:	2201      	movs	r2, #1
  408dac:	2b07      	cmp	r3, #7
  408dae:	9425      	str	r4, [sp, #148]	; 0x94
  408db0:	9324      	str	r3, [sp, #144]	; 0x90
  408db2:	f8c9 2004 	str.w	r2, [r9, #4]
  408db6:	f300 808e 	bgt.w	408ed6 <_svfprintf_r+0x12ba>
  408dba:	f109 0908 	add.w	r9, r9, #8
  408dbe:	b92d      	cbnz	r5, 408dcc <_svfprintf_r+0x11b0>
  408dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408dc2:	b91b      	cbnz	r3, 408dcc <_svfprintf_r+0x11b0>
  408dc4:	9b07      	ldr	r3, [sp, #28]
  408dc6:	07df      	lsls	r7, r3, #31
  408dc8:	f57f a9b8 	bpl.w	40813c <_svfprintf_r+0x520>
  408dcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408dce:	9916      	ldr	r1, [sp, #88]	; 0x58
  408dd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  408dd2:	f8c9 2000 	str.w	r2, [r9]
  408dd6:	3301      	adds	r3, #1
  408dd8:	440c      	add	r4, r1
  408dda:	2b07      	cmp	r3, #7
  408ddc:	9425      	str	r4, [sp, #148]	; 0x94
  408dde:	f8c9 1004 	str.w	r1, [r9, #4]
  408de2:	9324      	str	r3, [sp, #144]	; 0x90
  408de4:	f300 81c2 	bgt.w	40916c <_svfprintf_r+0x1550>
  408de8:	f109 0908 	add.w	r9, r9, #8
  408dec:	426d      	negs	r5, r5
  408dee:	2d00      	cmp	r5, #0
  408df0:	f340 809b 	ble.w	408f2a <_svfprintf_r+0x130e>
  408df4:	4aa1      	ldr	r2, [pc, #644]	; (40907c <_svfprintf_r+0x1460>)
  408df6:	920f      	str	r2, [sp, #60]	; 0x3c
  408df8:	2d10      	cmp	r5, #16
  408dfa:	f340 80c3 	ble.w	408f84 <_svfprintf_r+0x1368>
  408dfe:	4622      	mov	r2, r4
  408e00:	2710      	movs	r7, #16
  408e02:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408e06:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408e08:	e005      	b.n	408e16 <_svfprintf_r+0x11fa>
  408e0a:	f109 0908 	add.w	r9, r9, #8
  408e0e:	3d10      	subs	r5, #16
  408e10:	2d10      	cmp	r5, #16
  408e12:	f340 80b6 	ble.w	408f82 <_svfprintf_r+0x1366>
  408e16:	3301      	adds	r3, #1
  408e18:	3210      	adds	r2, #16
  408e1a:	2b07      	cmp	r3, #7
  408e1c:	9225      	str	r2, [sp, #148]	; 0x94
  408e1e:	9324      	str	r3, [sp, #144]	; 0x90
  408e20:	f8c9 a000 	str.w	sl, [r9]
  408e24:	f8c9 7004 	str.w	r7, [r9, #4]
  408e28:	ddef      	ble.n	408e0a <_svfprintf_r+0x11ee>
  408e2a:	aa23      	add	r2, sp, #140	; 0x8c
  408e2c:	4621      	mov	r1, r4
  408e2e:	4658      	mov	r0, fp
  408e30:	f004 f864 	bl	40cefc <__ssprint_r>
  408e34:	2800      	cmp	r0, #0
  408e36:	f47e afea 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408e3a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408e3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408e3e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408e42:	e7e4      	b.n	408e0e <_svfprintf_r+0x11f2>
  408e44:	9a07      	ldr	r2, [sp, #28]
  408e46:	f7ff ba38 	b.w	4082ba <_svfprintf_r+0x69e>
  408e4a:	9a07      	ldr	r2, [sp, #28]
  408e4c:	e590      	b.n	408970 <_svfprintf_r+0xd54>
  408e4e:	9b07      	ldr	r3, [sp, #28]
  408e50:	f043 0320 	orr.w	r3, r3, #32
  408e54:	9307      	str	r3, [sp, #28]
  408e56:	f108 0801 	add.w	r8, r8, #1
  408e5a:	f898 3000 	ldrb.w	r3, [r8]
  408e5e:	f7fe bf36 	b.w	407cce <_svfprintf_r+0xb2>
  408e62:	aa23      	add	r2, sp, #140	; 0x8c
  408e64:	9909      	ldr	r1, [sp, #36]	; 0x24
  408e66:	980a      	ldr	r0, [sp, #40]	; 0x28
  408e68:	f004 f848 	bl	40cefc <__ssprint_r>
  408e6c:	2800      	cmp	r0, #0
  408e6e:	f47e afce 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408e72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408e74:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408e78:	f7ff bbb6 	b.w	4085e8 <_svfprintf_r+0x9cc>
  408e7c:	2140      	movs	r1, #64	; 0x40
  408e7e:	980a      	ldr	r0, [sp, #40]	; 0x28
  408e80:	f002 fede 	bl	40bc40 <_malloc_r>
  408e84:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408e86:	6010      	str	r0, [r2, #0]
  408e88:	6110      	str	r0, [r2, #16]
  408e8a:	2800      	cmp	r0, #0
  408e8c:	f000 81e5 	beq.w	40925a <_svfprintf_r+0x163e>
  408e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408e92:	2340      	movs	r3, #64	; 0x40
  408e94:	6153      	str	r3, [r2, #20]
  408e96:	f7fe bed8 	b.w	407c4a <_svfprintf_r+0x2e>
  408e9a:	a821      	add	r0, sp, #132	; 0x84
  408e9c:	a91e      	add	r1, sp, #120	; 0x78
  408e9e:	9004      	str	r0, [sp, #16]
  408ea0:	9103      	str	r1, [sp, #12]
  408ea2:	a81d      	add	r0, sp, #116	; 0x74
  408ea4:	2103      	movs	r1, #3
  408ea6:	9002      	str	r0, [sp, #8]
  408ea8:	9a08      	ldr	r2, [sp, #32]
  408eaa:	f8cd b004 	str.w	fp, [sp, #4]
  408eae:	463b      	mov	r3, r7
  408eb0:	9100      	str	r1, [sp, #0]
  408eb2:	980a      	ldr	r0, [sp, #40]	; 0x28
  408eb4:	f001 fa78 	bl	40a3a8 <_dtoa_r>
  408eb8:	465d      	mov	r5, fp
  408eba:	4606      	mov	r6, r0
  408ebc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408ebe:	2b46      	cmp	r3, #70	; 0x46
  408ec0:	eb06 0405 	add.w	r4, r6, r5
  408ec4:	f47f aeb6 	bne.w	408c34 <_svfprintf_r+0x1018>
  408ec8:	7833      	ldrb	r3, [r6, #0]
  408eca:	2b30      	cmp	r3, #48	; 0x30
  408ecc:	f000 817c 	beq.w	4091c8 <_svfprintf_r+0x15ac>
  408ed0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408ed2:	442c      	add	r4, r5
  408ed4:	e6ae      	b.n	408c34 <_svfprintf_r+0x1018>
  408ed6:	aa23      	add	r2, sp, #140	; 0x8c
  408ed8:	9909      	ldr	r1, [sp, #36]	; 0x24
  408eda:	980a      	ldr	r0, [sp, #40]	; 0x28
  408edc:	f004 f80e 	bl	40cefc <__ssprint_r>
  408ee0:	2800      	cmp	r0, #0
  408ee2:	f47e af94 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408ee6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408ee8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408eea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408eee:	e766      	b.n	408dbe <_svfprintf_r+0x11a2>
  408ef0:	f1bb 0f00 	cmp.w	fp, #0
  408ef4:	bf08      	it	eq
  408ef6:	f04f 0b01 	moveq.w	fp, #1
  408efa:	e667      	b.n	408bcc <_svfprintf_r+0xfb0>
  408efc:	970e      	str	r7, [sp, #56]	; 0x38
  408efe:	4617      	mov	r7, r2
  408f00:	e55e      	b.n	4089c0 <_svfprintf_r+0xda4>
  408f02:	4630      	mov	r0, r6
  408f04:	f7fe fe1c 	bl	407b40 <strlen>
  408f08:	46a3      	mov	fp, r4
  408f0a:	4603      	mov	r3, r0
  408f0c:	900d      	str	r0, [sp, #52]	; 0x34
  408f0e:	f7ff baf4 	b.w	4084fa <_svfprintf_r+0x8de>
  408f12:	aa23      	add	r2, sp, #140	; 0x8c
  408f14:	9909      	ldr	r1, [sp, #36]	; 0x24
  408f16:	980a      	ldr	r0, [sp, #40]	; 0x28
  408f18:	f003 fff0 	bl	40cefc <__ssprint_r>
  408f1c:	2800      	cmp	r0, #0
  408f1e:	f47e af76 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408f22:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408f24:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f26:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408f2a:	9912      	ldr	r1, [sp, #72]	; 0x48
  408f2c:	f8c9 6000 	str.w	r6, [r9]
  408f30:	3301      	adds	r3, #1
  408f32:	440c      	add	r4, r1
  408f34:	2b07      	cmp	r3, #7
  408f36:	9425      	str	r4, [sp, #148]	; 0x94
  408f38:	9324      	str	r3, [sp, #144]	; 0x90
  408f3a:	f8c9 1004 	str.w	r1, [r9, #4]
  408f3e:	f77f a8fb 	ble.w	408138 <_svfprintf_r+0x51c>
  408f42:	e411      	b.n	408768 <_svfprintf_r+0xb4c>
  408f44:	272d      	movs	r7, #45	; 0x2d
  408f46:	9308      	str	r3, [sp, #32]
  408f48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408f4a:	9307      	str	r3, [sp, #28]
  408f4c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408f50:	f04f 0b00 	mov.w	fp, #0
  408f54:	f7ff b829 	b.w	407faa <_svfprintf_r+0x38e>
  408f58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408f5a:	1cdd      	adds	r5, r3, #3
  408f5c:	db1e      	blt.n	408f9c <_svfprintf_r+0x1380>
  408f5e:	459b      	cmp	fp, r3
  408f60:	db1c      	blt.n	408f9c <_svfprintf_r+0x1380>
  408f62:	9313      	str	r3, [sp, #76]	; 0x4c
  408f64:	e689      	b.n	408c7a <_svfprintf_r+0x105e>
  408f66:	4623      	mov	r3, r4
  408f68:	e677      	b.n	408c5a <_svfprintf_r+0x103e>
  408f6a:	aa23      	add	r2, sp, #140	; 0x8c
  408f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
  408f6e:	980a      	ldr	r0, [sp, #40]	; 0x28
  408f70:	f003 ffc4 	bl	40cefc <__ssprint_r>
  408f74:	2800      	cmp	r0, #0
  408f76:	f47e af4a 	bne.w	407e0e <_svfprintf_r+0x1f2>
  408f7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408f7c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408f80:	e459      	b.n	408836 <_svfprintf_r+0xc1a>
  408f82:	4614      	mov	r4, r2
  408f84:	3301      	adds	r3, #1
  408f86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408f88:	9324      	str	r3, [sp, #144]	; 0x90
  408f8a:	442c      	add	r4, r5
  408f8c:	2b07      	cmp	r3, #7
  408f8e:	9425      	str	r4, [sp, #148]	; 0x94
  408f90:	e889 0024 	stmia.w	r9, {r2, r5}
  408f94:	dcbd      	bgt.n	408f12 <_svfprintf_r+0x12f6>
  408f96:	f109 0908 	add.w	r9, r9, #8
  408f9a:	e7c6      	b.n	408f2a <_svfprintf_r+0x130e>
  408f9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408f9e:	3a02      	subs	r2, #2
  408fa0:	9211      	str	r2, [sp, #68]	; 0x44
  408fa2:	3b01      	subs	r3, #1
  408fa4:	2b00      	cmp	r3, #0
  408fa6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  408faa:	931d      	str	r3, [sp, #116]	; 0x74
  408fac:	bfb8      	it	lt
  408fae:	425b      	neglt	r3, r3
  408fb0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  408fb4:	bfb4      	ite	lt
  408fb6:	222d      	movlt	r2, #45	; 0x2d
  408fb8:	222b      	movge	r2, #43	; 0x2b
  408fba:	2b09      	cmp	r3, #9
  408fbc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408fc0:	f340 80f1 	ble.w	4091a6 <_svfprintf_r+0x158a>
  408fc4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  408fc8:	4604      	mov	r4, r0
  408fca:	4a2d      	ldr	r2, [pc, #180]	; (409080 <_svfprintf_r+0x1464>)
  408fcc:	fb82 2103 	smull	r2, r1, r2, r3
  408fd0:	17da      	asrs	r2, r3, #31
  408fd2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  408fd6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  408fda:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  408fde:	f103 0130 	add.w	r1, r3, #48	; 0x30
  408fe2:	2a09      	cmp	r2, #9
  408fe4:	4613      	mov	r3, r2
  408fe6:	f804 1d01 	strb.w	r1, [r4, #-1]!
  408fea:	dcee      	bgt.n	408fca <_svfprintf_r+0x13ae>
  408fec:	4621      	mov	r1, r4
  408fee:	3330      	adds	r3, #48	; 0x30
  408ff0:	b2da      	uxtb	r2, r3
  408ff2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  408ff6:	4288      	cmp	r0, r1
  408ff8:	f240 813a 	bls.w	409270 <_svfprintf_r+0x1654>
  408ffc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  409000:	4623      	mov	r3, r4
  409002:	e001      	b.n	409008 <_svfprintf_r+0x13ec>
  409004:	f813 2b01 	ldrb.w	r2, [r3], #1
  409008:	f801 2b01 	strb.w	r2, [r1], #1
  40900c:	4298      	cmp	r0, r3
  40900e:	d1f9      	bne.n	409004 <_svfprintf_r+0x13e8>
  409010:	1c43      	adds	r3, r0, #1
  409012:	1b1b      	subs	r3, r3, r4
  409014:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  409018:	4413      	add	r3, r2
  40901a:	aa1f      	add	r2, sp, #124	; 0x7c
  40901c:	1a9b      	subs	r3, r3, r2
  40901e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409020:	9319      	str	r3, [sp, #100]	; 0x64
  409022:	2a01      	cmp	r2, #1
  409024:	4413      	add	r3, r2
  409026:	930d      	str	r3, [sp, #52]	; 0x34
  409028:	f340 80ea 	ble.w	409200 <_svfprintf_r+0x15e4>
  40902c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40902e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409030:	4413      	add	r3, r2
  409032:	2200      	movs	r2, #0
  409034:	930d      	str	r3, [sp, #52]	; 0x34
  409036:	9213      	str	r2, [sp, #76]	; 0x4c
  409038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40903c:	e62b      	b.n	408c96 <_svfprintf_r+0x107a>
  40903e:	aa23      	add	r2, sp, #140	; 0x8c
  409040:	9909      	ldr	r1, [sp, #36]	; 0x24
  409042:	980a      	ldr	r0, [sp, #40]	; 0x28
  409044:	f003 ff5a 	bl	40cefc <__ssprint_r>
  409048:	2800      	cmp	r0, #0
  40904a:	f47e aee0 	bne.w	407e0e <_svfprintf_r+0x1f2>
  40904e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409050:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409052:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409056:	e4f6      	b.n	408a46 <_svfprintf_r+0xe2a>
  409058:	2d06      	cmp	r5, #6
  40905a:	462b      	mov	r3, r5
  40905c:	bf28      	it	cs
  40905e:	2306      	movcs	r3, #6
  409060:	930d      	str	r3, [sp, #52]	; 0x34
  409062:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409066:	46b3      	mov	fp, r6
  409068:	970e      	str	r7, [sp, #56]	; 0x38
  40906a:	9613      	str	r6, [sp, #76]	; 0x4c
  40906c:	4637      	mov	r7, r6
  40906e:	9308      	str	r3, [sp, #32]
  409070:	4e04      	ldr	r6, [pc, #16]	; (409084 <_svfprintf_r+0x1468>)
  409072:	f7fe bf99 	b.w	407fa8 <_svfprintf_r+0x38c>
  409076:	bf00      	nop
  409078:	0040ef58 	.word	0x0040ef58
  40907c:	0040ef08 	.word	0x0040ef08
  409080:	66666667 	.word	0x66666667
  409084:	0040ef50 	.word	0x0040ef50
  409088:	aa23      	add	r2, sp, #140	; 0x8c
  40908a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40908c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40908e:	f003 ff35 	bl	40cefc <__ssprint_r>
  409092:	2800      	cmp	r0, #0
  409094:	f47e aebb 	bne.w	407e0e <_svfprintf_r+0x1f2>
  409098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40909a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40909c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40909e:	1ad3      	subs	r3, r2, r3
  4090a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4090a4:	e4e7      	b.n	408a76 <_svfprintf_r+0xe5a>
  4090a6:	f04f 0b06 	mov.w	fp, #6
  4090aa:	e58f      	b.n	408bcc <_svfprintf_r+0xfb0>
  4090ac:	a821      	add	r0, sp, #132	; 0x84
  4090ae:	a91e      	add	r1, sp, #120	; 0x78
  4090b0:	9004      	str	r0, [sp, #16]
  4090b2:	9103      	str	r1, [sp, #12]
  4090b4:	a81d      	add	r0, sp, #116	; 0x74
  4090b6:	2103      	movs	r1, #3
  4090b8:	9002      	str	r0, [sp, #8]
  4090ba:	9a08      	ldr	r2, [sp, #32]
  4090bc:	f8cd b004 	str.w	fp, [sp, #4]
  4090c0:	463b      	mov	r3, r7
  4090c2:	9100      	str	r1, [sp, #0]
  4090c4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4090c6:	f001 f96f 	bl	40a3a8 <_dtoa_r>
  4090ca:	465d      	mov	r5, fp
  4090cc:	4606      	mov	r6, r0
  4090ce:	eb00 040b 	add.w	r4, r0, fp
  4090d2:	e6f9      	b.n	408ec8 <_svfprintf_r+0x12ac>
  4090d4:	9307      	str	r3, [sp, #28]
  4090d6:	f7ff b959 	b.w	40838c <_svfprintf_r+0x770>
  4090da:	272d      	movs	r7, #45	; 0x2d
  4090dc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4090e0:	f7ff b8b2 	b.w	408248 <_svfprintf_r+0x62c>
  4090e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4090e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4090e8:	4413      	add	r3, r2
  4090ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4090ec:	930d      	str	r3, [sp, #52]	; 0x34
  4090ee:	2a00      	cmp	r2, #0
  4090f0:	dd7e      	ble.n	4091f0 <_svfprintf_r+0x15d4>
  4090f2:	2267      	movs	r2, #103	; 0x67
  4090f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4090f8:	9211      	str	r2, [sp, #68]	; 0x44
  4090fa:	e5cc      	b.n	408c96 <_svfprintf_r+0x107a>
  4090fc:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  409100:	970e      	str	r7, [sp, #56]	; 0x38
  409102:	9308      	str	r3, [sp, #32]
  409104:	950d      	str	r5, [sp, #52]	; 0x34
  409106:	4683      	mov	fp, r0
  409108:	9013      	str	r0, [sp, #76]	; 0x4c
  40910a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40910e:	f7fe bf4b 	b.w	407fa8 <_svfprintf_r+0x38c>
  409112:	9b07      	ldr	r3, [sp, #28]
  409114:	07db      	lsls	r3, r3, #31
  409116:	465f      	mov	r7, fp
  409118:	d505      	bpl.n	409126 <_svfprintf_r+0x150a>
  40911a:	ae40      	add	r6, sp, #256	; 0x100
  40911c:	2330      	movs	r3, #48	; 0x30
  40911e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  409122:	f7fe bf37 	b.w	407f94 <_svfprintf_r+0x378>
  409126:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40912a:	ae30      	add	r6, sp, #192	; 0xc0
  40912c:	f7fe bf35 	b.w	407f9a <_svfprintf_r+0x37e>
  409130:	2b00      	cmp	r3, #0
  409132:	dd7d      	ble.n	409230 <_svfprintf_r+0x1614>
  409134:	f1bb 0f00 	cmp.w	fp, #0
  409138:	d13d      	bne.n	4091b6 <_svfprintf_r+0x159a>
  40913a:	9a07      	ldr	r2, [sp, #28]
  40913c:	07d4      	lsls	r4, r2, #31
  40913e:	d43a      	bmi.n	4091b6 <_svfprintf_r+0x159a>
  409140:	461a      	mov	r2, r3
  409142:	920d      	str	r2, [sp, #52]	; 0x34
  409144:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409148:	e5a5      	b.n	408c96 <_svfprintf_r+0x107a>
  40914a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40914c:	2b47      	cmp	r3, #71	; 0x47
  40914e:	f47f ad70 	bne.w	408c32 <_svfprintf_r+0x1016>
  409152:	9b07      	ldr	r3, [sp, #28]
  409154:	07db      	lsls	r3, r3, #31
  409156:	f53f aeb1 	bmi.w	408ebc <_svfprintf_r+0x12a0>
  40915a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40915c:	1b9b      	subs	r3, r3, r6
  40915e:	9312      	str	r3, [sp, #72]	; 0x48
  409160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409162:	2b47      	cmp	r3, #71	; 0x47
  409164:	f43f aef8 	beq.w	408f58 <_svfprintf_r+0x133c>
  409168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40916a:	e71a      	b.n	408fa2 <_svfprintf_r+0x1386>
  40916c:	aa23      	add	r2, sp, #140	; 0x8c
  40916e:	9909      	ldr	r1, [sp, #36]	; 0x24
  409170:	980a      	ldr	r0, [sp, #40]	; 0x28
  409172:	f003 fec3 	bl	40cefc <__ssprint_r>
  409176:	2800      	cmp	r0, #0
  409178:	f47e ae49 	bne.w	407e0e <_svfprintf_r+0x1f2>
  40917c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40917e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409180:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409182:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409186:	e631      	b.n	408dec <_svfprintf_r+0x11d0>
  409188:	46a0      	mov	r8, r4
  40918a:	2500      	movs	r5, #0
  40918c:	f7fe bda1 	b.w	407cd2 <_svfprintf_r+0xb6>
  409190:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409192:	e562      	b.n	408c5a <_svfprintf_r+0x103e>
  409194:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409196:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409198:	4413      	add	r3, r2
  40919a:	2267      	movs	r2, #103	; 0x67
  40919c:	930d      	str	r3, [sp, #52]	; 0x34
  40919e:	9211      	str	r2, [sp, #68]	; 0x44
  4091a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4091a4:	e577      	b.n	408c96 <_svfprintf_r+0x107a>
  4091a6:	3330      	adds	r3, #48	; 0x30
  4091a8:	2230      	movs	r2, #48	; 0x30
  4091aa:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4091ae:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4091b2:	ab20      	add	r3, sp, #128	; 0x80
  4091b4:	e731      	b.n	40901a <_svfprintf_r+0x13fe>
  4091b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4091b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4091ba:	189d      	adds	r5, r3, r2
  4091bc:	eb05 030b 	add.w	r3, r5, fp
  4091c0:	930d      	str	r3, [sp, #52]	; 0x34
  4091c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4091c6:	e566      	b.n	408c96 <_svfprintf_r+0x107a>
  4091c8:	9808      	ldr	r0, [sp, #32]
  4091ca:	4639      	mov	r1, r7
  4091cc:	2200      	movs	r2, #0
  4091ce:	2300      	movs	r3, #0
  4091d0:	f004 fd00 	bl	40dbd4 <__aeabi_dcmpeq>
  4091d4:	2800      	cmp	r0, #0
  4091d6:	f47f ae7b 	bne.w	408ed0 <_svfprintf_r+0x12b4>
  4091da:	f1c5 0501 	rsb	r5, r5, #1
  4091de:	951d      	str	r5, [sp, #116]	; 0x74
  4091e0:	442c      	add	r4, r5
  4091e2:	e527      	b.n	408c34 <_svfprintf_r+0x1018>
  4091e4:	4e32      	ldr	r6, [pc, #200]	; (4092b0 <_svfprintf_r+0x1694>)
  4091e6:	4b33      	ldr	r3, [pc, #204]	; (4092b4 <_svfprintf_r+0x1698>)
  4091e8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4091ec:	f7ff b82e 	b.w	40824c <_svfprintf_r+0x630>
  4091f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4091f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4091f4:	f1c3 0301 	rsb	r3, r3, #1
  4091f8:	441a      	add	r2, r3
  4091fa:	4613      	mov	r3, r2
  4091fc:	920d      	str	r2, [sp, #52]	; 0x34
  4091fe:	e778      	b.n	4090f2 <_svfprintf_r+0x14d6>
  409200:	9b07      	ldr	r3, [sp, #28]
  409202:	f013 0301 	ands.w	r3, r3, #1
  409206:	f47f af11 	bne.w	40902c <_svfprintf_r+0x1410>
  40920a:	9313      	str	r3, [sp, #76]	; 0x4c
  40920c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40920e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409212:	e540      	b.n	408c96 <_svfprintf_r+0x107a>
  409214:	980e      	ldr	r0, [sp, #56]	; 0x38
  409216:	f898 3001 	ldrb.w	r3, [r8, #1]
  40921a:	6805      	ldr	r5, [r0, #0]
  40921c:	3004      	adds	r0, #4
  40921e:	2d00      	cmp	r5, #0
  409220:	900e      	str	r0, [sp, #56]	; 0x38
  409222:	46a0      	mov	r8, r4
  409224:	f6be ad53 	bge.w	407cce <_svfprintf_r+0xb2>
  409228:	f04f 35ff 	mov.w	r5, #4294967295
  40922c:	f7fe bd4f 	b.w	407cce <_svfprintf_r+0xb2>
  409230:	f1bb 0f00 	cmp.w	fp, #0
  409234:	d102      	bne.n	40923c <_svfprintf_r+0x1620>
  409236:	9b07      	ldr	r3, [sp, #28]
  409238:	07d8      	lsls	r0, r3, #31
  40923a:	d507      	bpl.n	40924c <_svfprintf_r+0x1630>
  40923c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40923e:	1c5d      	adds	r5, r3, #1
  409240:	eb05 030b 	add.w	r3, r5, fp
  409244:	930d      	str	r3, [sp, #52]	; 0x34
  409246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40924a:	e524      	b.n	408c96 <_svfprintf_r+0x107a>
  40924c:	2301      	movs	r3, #1
  40924e:	930d      	str	r3, [sp, #52]	; 0x34
  409250:	e521      	b.n	408c96 <_svfprintf_r+0x107a>
  409252:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409256:	f7ff b921 	b.w	40849c <_svfprintf_r+0x880>
  40925a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40925c:	230c      	movs	r3, #12
  40925e:	6013      	str	r3, [r2, #0]
  409260:	f04f 30ff 	mov.w	r0, #4294967295
  409264:	f7fe bddc 	b.w	407e20 <_svfprintf_r+0x204>
  409268:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40926c:	f7ff b8f9 	b.w	408462 <_svfprintf_r+0x846>
  409270:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  409274:	e6d1      	b.n	40901a <_svfprintf_r+0x13fe>
  409276:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40927a:	f7fe bdd9 	b.w	407e30 <_svfprintf_r+0x214>
  40927e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409282:	f7ff b857 	b.w	408334 <_svfprintf_r+0x718>
  409286:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40928a:	f7ff b825 	b.w	4082d8 <_svfprintf_r+0x6bc>
  40928e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409292:	f7ff b94c 	b.w	40852e <_svfprintf_r+0x912>
  409296:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40929a:	f7fe bff3 	b.w	408284 <_svfprintf_r+0x668>
  40929e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4092a2:	f7fe bfa3 	b.w	4081ec <_svfprintf_r+0x5d0>
  4092a6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4092aa:	f7fe be33 	b.w	407f14 <_svfprintf_r+0x2f8>
  4092ae:	bf00      	nop
  4092b0:	0040ef24 	.word	0x0040ef24
  4092b4:	0040ef20 	.word	0x0040ef20

004092b8 <__sprint_r.part.0>:
  4092b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4092ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4092be:	049c      	lsls	r4, r3, #18
  4092c0:	4692      	mov	sl, r2
  4092c2:	d52c      	bpl.n	40931e <__sprint_r.part.0+0x66>
  4092c4:	6893      	ldr	r3, [r2, #8]
  4092c6:	6812      	ldr	r2, [r2, #0]
  4092c8:	b33b      	cbz	r3, 40931a <__sprint_r.part.0+0x62>
  4092ca:	460f      	mov	r7, r1
  4092cc:	4680      	mov	r8, r0
  4092ce:	f102 0908 	add.w	r9, r2, #8
  4092d2:	e919 0060 	ldmdb	r9, {r5, r6}
  4092d6:	08b6      	lsrs	r6, r6, #2
  4092d8:	d017      	beq.n	40930a <__sprint_r.part.0+0x52>
  4092da:	3d04      	subs	r5, #4
  4092dc:	2400      	movs	r4, #0
  4092de:	e001      	b.n	4092e4 <__sprint_r.part.0+0x2c>
  4092e0:	42a6      	cmp	r6, r4
  4092e2:	d010      	beq.n	409306 <__sprint_r.part.0+0x4e>
  4092e4:	463a      	mov	r2, r7
  4092e6:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4092ea:	4640      	mov	r0, r8
  4092ec:	f002 f92a 	bl	40b544 <_fputwc_r>
  4092f0:	1c43      	adds	r3, r0, #1
  4092f2:	f104 0401 	add.w	r4, r4, #1
  4092f6:	d1f3      	bne.n	4092e0 <__sprint_r.part.0+0x28>
  4092f8:	2300      	movs	r3, #0
  4092fa:	f8ca 3008 	str.w	r3, [sl, #8]
  4092fe:	f8ca 3004 	str.w	r3, [sl, #4]
  409302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409306:	f8da 3008 	ldr.w	r3, [sl, #8]
  40930a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40930e:	f8ca 3008 	str.w	r3, [sl, #8]
  409312:	f109 0908 	add.w	r9, r9, #8
  409316:	2b00      	cmp	r3, #0
  409318:	d1db      	bne.n	4092d2 <__sprint_r.part.0+0x1a>
  40931a:	2000      	movs	r0, #0
  40931c:	e7ec      	b.n	4092f8 <__sprint_r.part.0+0x40>
  40931e:	f002 fa59 	bl	40b7d4 <__sfvwrite_r>
  409322:	2300      	movs	r3, #0
  409324:	f8ca 3008 	str.w	r3, [sl, #8]
  409328:	f8ca 3004 	str.w	r3, [sl, #4]
  40932c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00409330 <_vfiprintf_r>:
  409330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409334:	b0ab      	sub	sp, #172	; 0xac
  409336:	461c      	mov	r4, r3
  409338:	9100      	str	r1, [sp, #0]
  40933a:	4690      	mov	r8, r2
  40933c:	9304      	str	r3, [sp, #16]
  40933e:	9005      	str	r0, [sp, #20]
  409340:	b118      	cbz	r0, 40934a <_vfiprintf_r+0x1a>
  409342:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409344:	2b00      	cmp	r3, #0
  409346:	f000 80de 	beq.w	409506 <_vfiprintf_r+0x1d6>
  40934a:	9800      	ldr	r0, [sp, #0]
  40934c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  409350:	b28a      	uxth	r2, r1
  409352:	0495      	lsls	r5, r2, #18
  409354:	d407      	bmi.n	409366 <_vfiprintf_r+0x36>
  409356:	6e43      	ldr	r3, [r0, #100]	; 0x64
  409358:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  40935c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  409360:	8182      	strh	r2, [r0, #12]
  409362:	6643      	str	r3, [r0, #100]	; 0x64
  409364:	b292      	uxth	r2, r2
  409366:	0711      	lsls	r1, r2, #28
  409368:	f140 80b1 	bpl.w	4094ce <_vfiprintf_r+0x19e>
  40936c:	9b00      	ldr	r3, [sp, #0]
  40936e:	691b      	ldr	r3, [r3, #16]
  409370:	2b00      	cmp	r3, #0
  409372:	f000 80ac 	beq.w	4094ce <_vfiprintf_r+0x19e>
  409376:	f002 021a 	and.w	r2, r2, #26
  40937a:	2a0a      	cmp	r2, #10
  40937c:	f000 80b5 	beq.w	4094ea <_vfiprintf_r+0x1ba>
  409380:	2300      	movs	r3, #0
  409382:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  409386:	9302      	str	r3, [sp, #8]
  409388:	930f      	str	r3, [sp, #60]	; 0x3c
  40938a:	930e      	str	r3, [sp, #56]	; 0x38
  40938c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  409390:	46da      	mov	sl, fp
  409392:	f898 3000 	ldrb.w	r3, [r8]
  409396:	4644      	mov	r4, r8
  409398:	b1fb      	cbz	r3, 4093da <_vfiprintf_r+0xaa>
  40939a:	2b25      	cmp	r3, #37	; 0x25
  40939c:	d102      	bne.n	4093a4 <_vfiprintf_r+0x74>
  40939e:	e01c      	b.n	4093da <_vfiprintf_r+0xaa>
  4093a0:	2b25      	cmp	r3, #37	; 0x25
  4093a2:	d003      	beq.n	4093ac <_vfiprintf_r+0x7c>
  4093a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4093a8:	2b00      	cmp	r3, #0
  4093aa:	d1f9      	bne.n	4093a0 <_vfiprintf_r+0x70>
  4093ac:	ebc8 0504 	rsb	r5, r8, r4
  4093b0:	b19d      	cbz	r5, 4093da <_vfiprintf_r+0xaa>
  4093b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4093b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4093b6:	f8ca 8000 	str.w	r8, [sl]
  4093ba:	3301      	adds	r3, #1
  4093bc:	442a      	add	r2, r5
  4093be:	2b07      	cmp	r3, #7
  4093c0:	f8ca 5004 	str.w	r5, [sl, #4]
  4093c4:	920f      	str	r2, [sp, #60]	; 0x3c
  4093c6:	930e      	str	r3, [sp, #56]	; 0x38
  4093c8:	dd7b      	ble.n	4094c2 <_vfiprintf_r+0x192>
  4093ca:	2a00      	cmp	r2, #0
  4093cc:	f040 8528 	bne.w	409e20 <_vfiprintf_r+0xaf0>
  4093d0:	9b02      	ldr	r3, [sp, #8]
  4093d2:	920e      	str	r2, [sp, #56]	; 0x38
  4093d4:	442b      	add	r3, r5
  4093d6:	46da      	mov	sl, fp
  4093d8:	9302      	str	r3, [sp, #8]
  4093da:	7823      	ldrb	r3, [r4, #0]
  4093dc:	2b00      	cmp	r3, #0
  4093de:	f000 843e 	beq.w	409c5e <_vfiprintf_r+0x92e>
  4093e2:	2100      	movs	r1, #0
  4093e4:	f04f 0300 	mov.w	r3, #0
  4093e8:	f04f 32ff 	mov.w	r2, #4294967295
  4093ec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4093f0:	f104 0801 	add.w	r8, r4, #1
  4093f4:	7863      	ldrb	r3, [r4, #1]
  4093f6:	9201      	str	r2, [sp, #4]
  4093f8:	4608      	mov	r0, r1
  4093fa:	460e      	mov	r6, r1
  4093fc:	460c      	mov	r4, r1
  4093fe:	f108 0801 	add.w	r8, r8, #1
  409402:	f1a3 0220 	sub.w	r2, r3, #32
  409406:	2a58      	cmp	r2, #88	; 0x58
  409408:	f200 8393 	bhi.w	409b32 <_vfiprintf_r+0x802>
  40940c:	e8df f012 	tbh	[pc, r2, lsl #1]
  409410:	03910346 	.word	0x03910346
  409414:	034e0391 	.word	0x034e0391
  409418:	03910391 	.word	0x03910391
  40941c:	03910391 	.word	0x03910391
  409420:	03910391 	.word	0x03910391
  409424:	02670289 	.word	0x02670289
  409428:	00800391 	.word	0x00800391
  40942c:	0391026c 	.word	0x0391026c
  409430:	025901c6 	.word	0x025901c6
  409434:	02590259 	.word	0x02590259
  409438:	02590259 	.word	0x02590259
  40943c:	02590259 	.word	0x02590259
  409440:	02590259 	.word	0x02590259
  409444:	03910391 	.word	0x03910391
  409448:	03910391 	.word	0x03910391
  40944c:	03910391 	.word	0x03910391
  409450:	03910391 	.word	0x03910391
  409454:	03910391 	.word	0x03910391
  409458:	039101cb 	.word	0x039101cb
  40945c:	03910391 	.word	0x03910391
  409460:	03910391 	.word	0x03910391
  409464:	03910391 	.word	0x03910391
  409468:	03910391 	.word	0x03910391
  40946c:	02140391 	.word	0x02140391
  409470:	03910391 	.word	0x03910391
  409474:	03910391 	.word	0x03910391
  409478:	02ee0391 	.word	0x02ee0391
  40947c:	03910391 	.word	0x03910391
  409480:	03910311 	.word	0x03910311
  409484:	03910391 	.word	0x03910391
  409488:	03910391 	.word	0x03910391
  40948c:	03910391 	.word	0x03910391
  409490:	03910391 	.word	0x03910391
  409494:	03340391 	.word	0x03340391
  409498:	0391038a 	.word	0x0391038a
  40949c:	03910391 	.word	0x03910391
  4094a0:	038a0367 	.word	0x038a0367
  4094a4:	03910391 	.word	0x03910391
  4094a8:	0391036c 	.word	0x0391036c
  4094ac:	02950379 	.word	0x02950379
  4094b0:	02e90085 	.word	0x02e90085
  4094b4:	029b0391 	.word	0x029b0391
  4094b8:	02ba0391 	.word	0x02ba0391
  4094bc:	03910391 	.word	0x03910391
  4094c0:	0353      	.short	0x0353
  4094c2:	f10a 0a08 	add.w	sl, sl, #8
  4094c6:	9b02      	ldr	r3, [sp, #8]
  4094c8:	442b      	add	r3, r5
  4094ca:	9302      	str	r3, [sp, #8]
  4094cc:	e785      	b.n	4093da <_vfiprintf_r+0xaa>
  4094ce:	9900      	ldr	r1, [sp, #0]
  4094d0:	9805      	ldr	r0, [sp, #20]
  4094d2:	f000 fe61 	bl	40a198 <__swsetup_r>
  4094d6:	2800      	cmp	r0, #0
  4094d8:	f040 8558 	bne.w	409f8c <_vfiprintf_r+0xc5c>
  4094dc:	9b00      	ldr	r3, [sp, #0]
  4094de:	899a      	ldrh	r2, [r3, #12]
  4094e0:	f002 021a 	and.w	r2, r2, #26
  4094e4:	2a0a      	cmp	r2, #10
  4094e6:	f47f af4b 	bne.w	409380 <_vfiprintf_r+0x50>
  4094ea:	9900      	ldr	r1, [sp, #0]
  4094ec:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4094f0:	2b00      	cmp	r3, #0
  4094f2:	f6ff af45 	blt.w	409380 <_vfiprintf_r+0x50>
  4094f6:	4623      	mov	r3, r4
  4094f8:	4642      	mov	r2, r8
  4094fa:	9805      	ldr	r0, [sp, #20]
  4094fc:	f000 fe16 	bl	40a12c <__sbprintf>
  409500:	b02b      	add	sp, #172	; 0xac
  409502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409506:	f001 ffb3 	bl	40b470 <__sinit>
  40950a:	e71e      	b.n	40934a <_vfiprintf_r+0x1a>
  40950c:	4264      	negs	r4, r4
  40950e:	9304      	str	r3, [sp, #16]
  409510:	f046 0604 	orr.w	r6, r6, #4
  409514:	f898 3000 	ldrb.w	r3, [r8]
  409518:	e771      	b.n	4093fe <_vfiprintf_r+0xce>
  40951a:	2130      	movs	r1, #48	; 0x30
  40951c:	9804      	ldr	r0, [sp, #16]
  40951e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  409522:	9901      	ldr	r1, [sp, #4]
  409524:	9406      	str	r4, [sp, #24]
  409526:	f04f 0300 	mov.w	r3, #0
  40952a:	2278      	movs	r2, #120	; 0x78
  40952c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409530:	2900      	cmp	r1, #0
  409532:	4603      	mov	r3, r0
  409534:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  409538:	6804      	ldr	r4, [r0, #0]
  40953a:	f103 0304 	add.w	r3, r3, #4
  40953e:	f04f 0500 	mov.w	r5, #0
  409542:	f046 0202 	orr.w	r2, r6, #2
  409546:	f2c0 8525 	blt.w	409f94 <_vfiprintf_r+0xc64>
  40954a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40954e:	ea54 0205 	orrs.w	r2, r4, r5
  409552:	f046 0602 	orr.w	r6, r6, #2
  409556:	9304      	str	r3, [sp, #16]
  409558:	f040 84bf 	bne.w	409eda <_vfiprintf_r+0xbaa>
  40955c:	48b3      	ldr	r0, [pc, #716]	; (40982c <_vfiprintf_r+0x4fc>)
  40955e:	9b01      	ldr	r3, [sp, #4]
  409560:	2b00      	cmp	r3, #0
  409562:	f040 841c 	bne.w	409d9e <_vfiprintf_r+0xa6e>
  409566:	4699      	mov	r9, r3
  409568:	2300      	movs	r3, #0
  40956a:	9301      	str	r3, [sp, #4]
  40956c:	9303      	str	r3, [sp, #12]
  40956e:	465f      	mov	r7, fp
  409570:	9b01      	ldr	r3, [sp, #4]
  409572:	9a03      	ldr	r2, [sp, #12]
  409574:	4293      	cmp	r3, r2
  409576:	bfb8      	it	lt
  409578:	4613      	movlt	r3, r2
  40957a:	461d      	mov	r5, r3
  40957c:	f1b9 0f00 	cmp.w	r9, #0
  409580:	d000      	beq.n	409584 <_vfiprintf_r+0x254>
  409582:	3501      	adds	r5, #1
  409584:	f016 0302 	ands.w	r3, r6, #2
  409588:	9307      	str	r3, [sp, #28]
  40958a:	bf18      	it	ne
  40958c:	3502      	addne	r5, #2
  40958e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  409592:	9308      	str	r3, [sp, #32]
  409594:	f040 82f1 	bne.w	409b7a <_vfiprintf_r+0x84a>
  409598:	9b06      	ldr	r3, [sp, #24]
  40959a:	1b5c      	subs	r4, r3, r5
  40959c:	2c00      	cmp	r4, #0
  40959e:	f340 82ec 	ble.w	409b7a <_vfiprintf_r+0x84a>
  4095a2:	2c10      	cmp	r4, #16
  4095a4:	f340 8556 	ble.w	40a054 <_vfiprintf_r+0xd24>
  4095a8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 409830 <_vfiprintf_r+0x500>
  4095ac:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  4095b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4095b2:	46d4      	mov	ip, sl
  4095b4:	2310      	movs	r3, #16
  4095b6:	46c2      	mov	sl, r8
  4095b8:	4670      	mov	r0, lr
  4095ba:	46a8      	mov	r8, r5
  4095bc:	464d      	mov	r5, r9
  4095be:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4095c2:	e007      	b.n	4095d4 <_vfiprintf_r+0x2a4>
  4095c4:	f100 0e02 	add.w	lr, r0, #2
  4095c8:	f10c 0c08 	add.w	ip, ip, #8
  4095cc:	4608      	mov	r0, r1
  4095ce:	3c10      	subs	r4, #16
  4095d0:	2c10      	cmp	r4, #16
  4095d2:	dd13      	ble.n	4095fc <_vfiprintf_r+0x2cc>
  4095d4:	1c41      	adds	r1, r0, #1
  4095d6:	3210      	adds	r2, #16
  4095d8:	2907      	cmp	r1, #7
  4095da:	920f      	str	r2, [sp, #60]	; 0x3c
  4095dc:	f8cc 5000 	str.w	r5, [ip]
  4095e0:	f8cc 3004 	str.w	r3, [ip, #4]
  4095e4:	910e      	str	r1, [sp, #56]	; 0x38
  4095e6:	dded      	ble.n	4095c4 <_vfiprintf_r+0x294>
  4095e8:	2a00      	cmp	r2, #0
  4095ea:	f040 82b7 	bne.w	409b5c <_vfiprintf_r+0x82c>
  4095ee:	3c10      	subs	r4, #16
  4095f0:	2c10      	cmp	r4, #16
  4095f2:	4610      	mov	r0, r2
  4095f4:	f04f 0e01 	mov.w	lr, #1
  4095f8:	46dc      	mov	ip, fp
  4095fa:	dceb      	bgt.n	4095d4 <_vfiprintf_r+0x2a4>
  4095fc:	46a9      	mov	r9, r5
  4095fe:	4670      	mov	r0, lr
  409600:	4645      	mov	r5, r8
  409602:	46d0      	mov	r8, sl
  409604:	46e2      	mov	sl, ip
  409606:	4422      	add	r2, r4
  409608:	2807      	cmp	r0, #7
  40960a:	920f      	str	r2, [sp, #60]	; 0x3c
  40960c:	f8ca 9000 	str.w	r9, [sl]
  409610:	f8ca 4004 	str.w	r4, [sl, #4]
  409614:	900e      	str	r0, [sp, #56]	; 0x38
  409616:	f300 8375 	bgt.w	409d04 <_vfiprintf_r+0x9d4>
  40961a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40961e:	f10a 0a08 	add.w	sl, sl, #8
  409622:	f100 0e01 	add.w	lr, r0, #1
  409626:	2b00      	cmp	r3, #0
  409628:	f040 82b0 	bne.w	409b8c <_vfiprintf_r+0x85c>
  40962c:	9b07      	ldr	r3, [sp, #28]
  40962e:	2b00      	cmp	r3, #0
  409630:	f000 82c3 	beq.w	409bba <_vfiprintf_r+0x88a>
  409634:	3202      	adds	r2, #2
  409636:	a90c      	add	r1, sp, #48	; 0x30
  409638:	2302      	movs	r3, #2
  40963a:	f1be 0f07 	cmp.w	lr, #7
  40963e:	920f      	str	r2, [sp, #60]	; 0x3c
  409640:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409644:	e88a 000a 	stmia.w	sl, {r1, r3}
  409648:	f340 8378 	ble.w	409d3c <_vfiprintf_r+0xa0c>
  40964c:	2a00      	cmp	r2, #0
  40964e:	f040 840a 	bne.w	409e66 <_vfiprintf_r+0xb36>
  409652:	9b08      	ldr	r3, [sp, #32]
  409654:	2b80      	cmp	r3, #128	; 0x80
  409656:	f04f 0e01 	mov.w	lr, #1
  40965a:	4610      	mov	r0, r2
  40965c:	46da      	mov	sl, fp
  40965e:	f040 82b0 	bne.w	409bc2 <_vfiprintf_r+0x892>
  409662:	9b06      	ldr	r3, [sp, #24]
  409664:	1b5c      	subs	r4, r3, r5
  409666:	2c00      	cmp	r4, #0
  409668:	f340 82ab 	ble.w	409bc2 <_vfiprintf_r+0x892>
  40966c:	2c10      	cmp	r4, #16
  40966e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 409834 <_vfiprintf_r+0x504>
  409672:	f340 850b 	ble.w	40a08c <_vfiprintf_r+0xd5c>
  409676:	46d6      	mov	lr, sl
  409678:	2310      	movs	r3, #16
  40967a:	46c2      	mov	sl, r8
  40967c:	46a8      	mov	r8, r5
  40967e:	464d      	mov	r5, r9
  409680:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409684:	e007      	b.n	409696 <_vfiprintf_r+0x366>
  409686:	f100 0c02 	add.w	ip, r0, #2
  40968a:	f10e 0e08 	add.w	lr, lr, #8
  40968e:	4608      	mov	r0, r1
  409690:	3c10      	subs	r4, #16
  409692:	2c10      	cmp	r4, #16
  409694:	dd13      	ble.n	4096be <_vfiprintf_r+0x38e>
  409696:	1c41      	adds	r1, r0, #1
  409698:	3210      	adds	r2, #16
  40969a:	2907      	cmp	r1, #7
  40969c:	920f      	str	r2, [sp, #60]	; 0x3c
  40969e:	f8ce 5000 	str.w	r5, [lr]
  4096a2:	f8ce 3004 	str.w	r3, [lr, #4]
  4096a6:	910e      	str	r1, [sp, #56]	; 0x38
  4096a8:	dded      	ble.n	409686 <_vfiprintf_r+0x356>
  4096aa:	2a00      	cmp	r2, #0
  4096ac:	f040 8315 	bne.w	409cda <_vfiprintf_r+0x9aa>
  4096b0:	3c10      	subs	r4, #16
  4096b2:	2c10      	cmp	r4, #16
  4096b4:	f04f 0c01 	mov.w	ip, #1
  4096b8:	4610      	mov	r0, r2
  4096ba:	46de      	mov	lr, fp
  4096bc:	dceb      	bgt.n	409696 <_vfiprintf_r+0x366>
  4096be:	46a9      	mov	r9, r5
  4096c0:	4645      	mov	r5, r8
  4096c2:	46d0      	mov	r8, sl
  4096c4:	46f2      	mov	sl, lr
  4096c6:	4422      	add	r2, r4
  4096c8:	f1bc 0f07 	cmp.w	ip, #7
  4096cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4096ce:	f8ca 9000 	str.w	r9, [sl]
  4096d2:	f8ca 4004 	str.w	r4, [sl, #4]
  4096d6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  4096da:	f300 83d2 	bgt.w	409e82 <_vfiprintf_r+0xb52>
  4096de:	9b01      	ldr	r3, [sp, #4]
  4096e0:	9903      	ldr	r1, [sp, #12]
  4096e2:	1a5c      	subs	r4, r3, r1
  4096e4:	2c00      	cmp	r4, #0
  4096e6:	f10a 0a08 	add.w	sl, sl, #8
  4096ea:	f10c 0e01 	add.w	lr, ip, #1
  4096ee:	4660      	mov	r0, ip
  4096f0:	f300 826d 	bgt.w	409bce <_vfiprintf_r+0x89e>
  4096f4:	9903      	ldr	r1, [sp, #12]
  4096f6:	f8ca 7000 	str.w	r7, [sl]
  4096fa:	440a      	add	r2, r1
  4096fc:	f1be 0f07 	cmp.w	lr, #7
  409700:	920f      	str	r2, [sp, #60]	; 0x3c
  409702:	f8ca 1004 	str.w	r1, [sl, #4]
  409706:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40970a:	f340 82ce 	ble.w	409caa <_vfiprintf_r+0x97a>
  40970e:	2a00      	cmp	r2, #0
  409710:	f040 833a 	bne.w	409d88 <_vfiprintf_r+0xa58>
  409714:	0770      	lsls	r0, r6, #29
  409716:	920e      	str	r2, [sp, #56]	; 0x38
  409718:	d538      	bpl.n	40978c <_vfiprintf_r+0x45c>
  40971a:	9b06      	ldr	r3, [sp, #24]
  40971c:	1b5c      	subs	r4, r3, r5
  40971e:	2c00      	cmp	r4, #0
  409720:	dd34      	ble.n	40978c <_vfiprintf_r+0x45c>
  409722:	46da      	mov	sl, fp
  409724:	2c10      	cmp	r4, #16
  409726:	f340 84ab 	ble.w	40a080 <_vfiprintf_r+0xd50>
  40972a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 409830 <_vfiprintf_r+0x500>
  40972e:	990e      	ldr	r1, [sp, #56]	; 0x38
  409730:	464f      	mov	r7, r9
  409732:	2610      	movs	r6, #16
  409734:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409738:	e006      	b.n	409748 <_vfiprintf_r+0x418>
  40973a:	1c88      	adds	r0, r1, #2
  40973c:	f10a 0a08 	add.w	sl, sl, #8
  409740:	4619      	mov	r1, r3
  409742:	3c10      	subs	r4, #16
  409744:	2c10      	cmp	r4, #16
  409746:	dd13      	ble.n	409770 <_vfiprintf_r+0x440>
  409748:	1c4b      	adds	r3, r1, #1
  40974a:	3210      	adds	r2, #16
  40974c:	2b07      	cmp	r3, #7
  40974e:	920f      	str	r2, [sp, #60]	; 0x3c
  409750:	f8ca 7000 	str.w	r7, [sl]
  409754:	f8ca 6004 	str.w	r6, [sl, #4]
  409758:	930e      	str	r3, [sp, #56]	; 0x38
  40975a:	ddee      	ble.n	40973a <_vfiprintf_r+0x40a>
  40975c:	2a00      	cmp	r2, #0
  40975e:	f040 828e 	bne.w	409c7e <_vfiprintf_r+0x94e>
  409762:	3c10      	subs	r4, #16
  409764:	2c10      	cmp	r4, #16
  409766:	f04f 0001 	mov.w	r0, #1
  40976a:	4611      	mov	r1, r2
  40976c:	46da      	mov	sl, fp
  40976e:	dceb      	bgt.n	409748 <_vfiprintf_r+0x418>
  409770:	46b9      	mov	r9, r7
  409772:	4422      	add	r2, r4
  409774:	2807      	cmp	r0, #7
  409776:	920f      	str	r2, [sp, #60]	; 0x3c
  409778:	f8ca 9000 	str.w	r9, [sl]
  40977c:	f8ca 4004 	str.w	r4, [sl, #4]
  409780:	900e      	str	r0, [sp, #56]	; 0x38
  409782:	f340 829b 	ble.w	409cbc <_vfiprintf_r+0x98c>
  409786:	2a00      	cmp	r2, #0
  409788:	f040 8425 	bne.w	409fd6 <_vfiprintf_r+0xca6>
  40978c:	9b02      	ldr	r3, [sp, #8]
  40978e:	9a06      	ldr	r2, [sp, #24]
  409790:	42aa      	cmp	r2, r5
  409792:	bfac      	ite	ge
  409794:	189b      	addge	r3, r3, r2
  409796:	195b      	addlt	r3, r3, r5
  409798:	9302      	str	r3, [sp, #8]
  40979a:	e299      	b.n	409cd0 <_vfiprintf_r+0x9a0>
  40979c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4097a0:	f898 3000 	ldrb.w	r3, [r8]
  4097a4:	e62b      	b.n	4093fe <_vfiprintf_r+0xce>
  4097a6:	9406      	str	r4, [sp, #24]
  4097a8:	2900      	cmp	r1, #0
  4097aa:	f040 84af 	bne.w	40a10c <_vfiprintf_r+0xddc>
  4097ae:	f046 0610 	orr.w	r6, r6, #16
  4097b2:	06b3      	lsls	r3, r6, #26
  4097b4:	f140 8312 	bpl.w	409ddc <_vfiprintf_r+0xaac>
  4097b8:	9904      	ldr	r1, [sp, #16]
  4097ba:	3107      	adds	r1, #7
  4097bc:	f021 0107 	bic.w	r1, r1, #7
  4097c0:	e9d1 2300 	ldrd	r2, r3, [r1]
  4097c4:	3108      	adds	r1, #8
  4097c6:	9104      	str	r1, [sp, #16]
  4097c8:	4614      	mov	r4, r2
  4097ca:	461d      	mov	r5, r3
  4097cc:	2a00      	cmp	r2, #0
  4097ce:	f173 0300 	sbcs.w	r3, r3, #0
  4097d2:	f2c0 8386 	blt.w	409ee2 <_vfiprintf_r+0xbb2>
  4097d6:	9b01      	ldr	r3, [sp, #4]
  4097d8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4097dc:	2b00      	cmp	r3, #0
  4097de:	f2c0 831a 	blt.w	409e16 <_vfiprintf_r+0xae6>
  4097e2:	ea54 0305 	orrs.w	r3, r4, r5
  4097e6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4097ea:	f000 80ed 	beq.w	4099c8 <_vfiprintf_r+0x698>
  4097ee:	2d00      	cmp	r5, #0
  4097f0:	bf08      	it	eq
  4097f2:	2c0a      	cmpeq	r4, #10
  4097f4:	f0c0 80ed 	bcc.w	4099d2 <_vfiprintf_r+0x6a2>
  4097f8:	465f      	mov	r7, fp
  4097fa:	4620      	mov	r0, r4
  4097fc:	4629      	mov	r1, r5
  4097fe:	220a      	movs	r2, #10
  409800:	2300      	movs	r3, #0
  409802:	f7fd fea7 	bl	407554 <__aeabi_uldivmod>
  409806:	3230      	adds	r2, #48	; 0x30
  409808:	f807 2d01 	strb.w	r2, [r7, #-1]!
  40980c:	4620      	mov	r0, r4
  40980e:	4629      	mov	r1, r5
  409810:	2300      	movs	r3, #0
  409812:	220a      	movs	r2, #10
  409814:	f7fd fe9e 	bl	407554 <__aeabi_uldivmod>
  409818:	4604      	mov	r4, r0
  40981a:	460d      	mov	r5, r1
  40981c:	ea54 0305 	orrs.w	r3, r4, r5
  409820:	d1eb      	bne.n	4097fa <_vfiprintf_r+0x4ca>
  409822:	ebc7 030b 	rsb	r3, r7, fp
  409826:	9303      	str	r3, [sp, #12]
  409828:	e6a2      	b.n	409570 <_vfiprintf_r+0x240>
  40982a:	bf00      	nop
  40982c:	0040ef3c 	.word	0x0040ef3c
  409830:	0040ef7c 	.word	0x0040ef7c
  409834:	0040ef6c 	.word	0x0040ef6c
  409838:	9406      	str	r4, [sp, #24]
  40983a:	2900      	cmp	r1, #0
  40983c:	f040 8462 	bne.w	40a104 <_vfiprintf_r+0xdd4>
  409840:	f046 0610 	orr.w	r6, r6, #16
  409844:	f016 0320 	ands.w	r3, r6, #32
  409848:	f000 82ae 	beq.w	409da8 <_vfiprintf_r+0xa78>
  40984c:	9b04      	ldr	r3, [sp, #16]
  40984e:	3307      	adds	r3, #7
  409850:	f023 0307 	bic.w	r3, r3, #7
  409854:	f04f 0200 	mov.w	r2, #0
  409858:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40985c:	e9d3 4500 	ldrd	r4, r5, [r3]
  409860:	f103 0208 	add.w	r2, r3, #8
  409864:	9b01      	ldr	r3, [sp, #4]
  409866:	9204      	str	r2, [sp, #16]
  409868:	2b00      	cmp	r3, #0
  40986a:	f2c0 8174 	blt.w	409b56 <_vfiprintf_r+0x826>
  40986e:	ea54 0305 	orrs.w	r3, r4, r5
  409872:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409876:	f040 816e 	bne.w	409b56 <_vfiprintf_r+0x826>
  40987a:	9b01      	ldr	r3, [sp, #4]
  40987c:	2b00      	cmp	r3, #0
  40987e:	f000 8430 	beq.w	40a0e2 <_vfiprintf_r+0xdb2>
  409882:	f04f 0900 	mov.w	r9, #0
  409886:	2400      	movs	r4, #0
  409888:	2500      	movs	r5, #0
  40988a:	465f      	mov	r7, fp
  40988c:	08e2      	lsrs	r2, r4, #3
  40988e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  409892:	08e9      	lsrs	r1, r5, #3
  409894:	f004 0307 	and.w	r3, r4, #7
  409898:	460d      	mov	r5, r1
  40989a:	4614      	mov	r4, r2
  40989c:	3330      	adds	r3, #48	; 0x30
  40989e:	ea54 0205 	orrs.w	r2, r4, r5
  4098a2:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4098a6:	d1f1      	bne.n	40988c <_vfiprintf_r+0x55c>
  4098a8:	07f4      	lsls	r4, r6, #31
  4098aa:	d5ba      	bpl.n	409822 <_vfiprintf_r+0x4f2>
  4098ac:	2b30      	cmp	r3, #48	; 0x30
  4098ae:	d0b8      	beq.n	409822 <_vfiprintf_r+0x4f2>
  4098b0:	2230      	movs	r2, #48	; 0x30
  4098b2:	1e7b      	subs	r3, r7, #1
  4098b4:	f807 2c01 	strb.w	r2, [r7, #-1]
  4098b8:	ebc3 020b 	rsb	r2, r3, fp
  4098bc:	9203      	str	r2, [sp, #12]
  4098be:	461f      	mov	r7, r3
  4098c0:	e656      	b.n	409570 <_vfiprintf_r+0x240>
  4098c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4098c6:	2400      	movs	r4, #0
  4098c8:	f818 3b01 	ldrb.w	r3, [r8], #1
  4098cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4098d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4098d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4098d8:	2a09      	cmp	r2, #9
  4098da:	d9f5      	bls.n	4098c8 <_vfiprintf_r+0x598>
  4098dc:	e591      	b.n	409402 <_vfiprintf_r+0xd2>
  4098de:	f898 3000 	ldrb.w	r3, [r8]
  4098e2:	2101      	movs	r1, #1
  4098e4:	202b      	movs	r0, #43	; 0x2b
  4098e6:	e58a      	b.n	4093fe <_vfiprintf_r+0xce>
  4098e8:	f898 3000 	ldrb.w	r3, [r8]
  4098ec:	2b2a      	cmp	r3, #42	; 0x2a
  4098ee:	f108 0501 	add.w	r5, r8, #1
  4098f2:	f000 83dd 	beq.w	40a0b0 <_vfiprintf_r+0xd80>
  4098f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4098fa:	2a09      	cmp	r2, #9
  4098fc:	46a8      	mov	r8, r5
  4098fe:	bf98      	it	ls
  409900:	2500      	movls	r5, #0
  409902:	f200 83ce 	bhi.w	40a0a2 <_vfiprintf_r+0xd72>
  409906:	f818 3b01 	ldrb.w	r3, [r8], #1
  40990a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40990e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  409912:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409916:	2a09      	cmp	r2, #9
  409918:	d9f5      	bls.n	409906 <_vfiprintf_r+0x5d6>
  40991a:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  40991e:	9201      	str	r2, [sp, #4]
  409920:	e56f      	b.n	409402 <_vfiprintf_r+0xd2>
  409922:	9a04      	ldr	r2, [sp, #16]
  409924:	6814      	ldr	r4, [r2, #0]
  409926:	4613      	mov	r3, r2
  409928:	2c00      	cmp	r4, #0
  40992a:	f103 0304 	add.w	r3, r3, #4
  40992e:	f6ff aded 	blt.w	40950c <_vfiprintf_r+0x1dc>
  409932:	9304      	str	r3, [sp, #16]
  409934:	f898 3000 	ldrb.w	r3, [r8]
  409938:	e561      	b.n	4093fe <_vfiprintf_r+0xce>
  40993a:	9406      	str	r4, [sp, #24]
  40993c:	2900      	cmp	r1, #0
  40993e:	d081      	beq.n	409844 <_vfiprintf_r+0x514>
  409940:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409944:	e77e      	b.n	409844 <_vfiprintf_r+0x514>
  409946:	9a04      	ldr	r2, [sp, #16]
  409948:	9406      	str	r4, [sp, #24]
  40994a:	6817      	ldr	r7, [r2, #0]
  40994c:	f04f 0300 	mov.w	r3, #0
  409950:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409954:	1d14      	adds	r4, r2, #4
  409956:	9b01      	ldr	r3, [sp, #4]
  409958:	2f00      	cmp	r7, #0
  40995a:	f000 8386 	beq.w	40a06a <_vfiprintf_r+0xd3a>
  40995e:	2b00      	cmp	r3, #0
  409960:	f2c0 835f 	blt.w	40a022 <_vfiprintf_r+0xcf2>
  409964:	461a      	mov	r2, r3
  409966:	2100      	movs	r1, #0
  409968:	4638      	mov	r0, r7
  40996a:	f002 fc21 	bl	40c1b0 <memchr>
  40996e:	2800      	cmp	r0, #0
  409970:	f000 838f 	beq.w	40a092 <_vfiprintf_r+0xd62>
  409974:	1bc3      	subs	r3, r0, r7
  409976:	9303      	str	r3, [sp, #12]
  409978:	2300      	movs	r3, #0
  40997a:	9404      	str	r4, [sp, #16]
  40997c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  409980:	9301      	str	r3, [sp, #4]
  409982:	e5f5      	b.n	409570 <_vfiprintf_r+0x240>
  409984:	9406      	str	r4, [sp, #24]
  409986:	2900      	cmp	r1, #0
  409988:	f040 83b9 	bne.w	40a0fe <_vfiprintf_r+0xdce>
  40998c:	f016 0920 	ands.w	r9, r6, #32
  409990:	d135      	bne.n	4099fe <_vfiprintf_r+0x6ce>
  409992:	f016 0310 	ands.w	r3, r6, #16
  409996:	d103      	bne.n	4099a0 <_vfiprintf_r+0x670>
  409998:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40999c:	f040 832a 	bne.w	409ff4 <_vfiprintf_r+0xcc4>
  4099a0:	9a04      	ldr	r2, [sp, #16]
  4099a2:	4613      	mov	r3, r2
  4099a4:	6814      	ldr	r4, [r2, #0]
  4099a6:	9a01      	ldr	r2, [sp, #4]
  4099a8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4099ac:	2a00      	cmp	r2, #0
  4099ae:	f103 0304 	add.w	r3, r3, #4
  4099b2:	f04f 0500 	mov.w	r5, #0
  4099b6:	f2c0 8332 	blt.w	40a01e <_vfiprintf_r+0xcee>
  4099ba:	ea54 0205 	orrs.w	r2, r4, r5
  4099be:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4099c2:	9304      	str	r3, [sp, #16]
  4099c4:	f47f af13 	bne.w	4097ee <_vfiprintf_r+0x4be>
  4099c8:	9b01      	ldr	r3, [sp, #4]
  4099ca:	2b00      	cmp	r3, #0
  4099cc:	f43f adcc 	beq.w	409568 <_vfiprintf_r+0x238>
  4099d0:	2400      	movs	r4, #0
  4099d2:	af2a      	add	r7, sp, #168	; 0xa8
  4099d4:	3430      	adds	r4, #48	; 0x30
  4099d6:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4099da:	ebc7 030b 	rsb	r3, r7, fp
  4099de:	9303      	str	r3, [sp, #12]
  4099e0:	e5c6      	b.n	409570 <_vfiprintf_r+0x240>
  4099e2:	f046 0620 	orr.w	r6, r6, #32
  4099e6:	f898 3000 	ldrb.w	r3, [r8]
  4099ea:	e508      	b.n	4093fe <_vfiprintf_r+0xce>
  4099ec:	9406      	str	r4, [sp, #24]
  4099ee:	2900      	cmp	r1, #0
  4099f0:	f040 836e 	bne.w	40a0d0 <_vfiprintf_r+0xda0>
  4099f4:	f046 0610 	orr.w	r6, r6, #16
  4099f8:	f016 0920 	ands.w	r9, r6, #32
  4099fc:	d0c9      	beq.n	409992 <_vfiprintf_r+0x662>
  4099fe:	9b04      	ldr	r3, [sp, #16]
  409a00:	3307      	adds	r3, #7
  409a02:	f023 0307 	bic.w	r3, r3, #7
  409a06:	f04f 0200 	mov.w	r2, #0
  409a0a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  409a0e:	e9d3 4500 	ldrd	r4, r5, [r3]
  409a12:	f103 0208 	add.w	r2, r3, #8
  409a16:	9b01      	ldr	r3, [sp, #4]
  409a18:	9204      	str	r2, [sp, #16]
  409a1a:	2b00      	cmp	r3, #0
  409a1c:	f2c0 81f9 	blt.w	409e12 <_vfiprintf_r+0xae2>
  409a20:	ea54 0305 	orrs.w	r3, r4, r5
  409a24:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409a28:	f04f 0900 	mov.w	r9, #0
  409a2c:	f47f aedf 	bne.w	4097ee <_vfiprintf_r+0x4be>
  409a30:	e7ca      	b.n	4099c8 <_vfiprintf_r+0x698>
  409a32:	9406      	str	r4, [sp, #24]
  409a34:	2900      	cmp	r1, #0
  409a36:	f040 8351 	bne.w	40a0dc <_vfiprintf_r+0xdac>
  409a3a:	06b2      	lsls	r2, r6, #26
  409a3c:	48ae      	ldr	r0, [pc, #696]	; (409cf8 <_vfiprintf_r+0x9c8>)
  409a3e:	d541      	bpl.n	409ac4 <_vfiprintf_r+0x794>
  409a40:	9a04      	ldr	r2, [sp, #16]
  409a42:	3207      	adds	r2, #7
  409a44:	f022 0207 	bic.w	r2, r2, #7
  409a48:	e9d2 4500 	ldrd	r4, r5, [r2]
  409a4c:	f102 0108 	add.w	r1, r2, #8
  409a50:	9104      	str	r1, [sp, #16]
  409a52:	f016 0901 	ands.w	r9, r6, #1
  409a56:	f000 8177 	beq.w	409d48 <_vfiprintf_r+0xa18>
  409a5a:	ea54 0205 	orrs.w	r2, r4, r5
  409a5e:	f040 8226 	bne.w	409eae <_vfiprintf_r+0xb7e>
  409a62:	f04f 0300 	mov.w	r3, #0
  409a66:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409a6a:	9b01      	ldr	r3, [sp, #4]
  409a6c:	2b00      	cmp	r3, #0
  409a6e:	f2c0 8196 	blt.w	409d9e <_vfiprintf_r+0xa6e>
  409a72:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409a76:	e572      	b.n	40955e <_vfiprintf_r+0x22e>
  409a78:	9a04      	ldr	r2, [sp, #16]
  409a7a:	9406      	str	r4, [sp, #24]
  409a7c:	6813      	ldr	r3, [r2, #0]
  409a7e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  409a82:	4613      	mov	r3, r2
  409a84:	f04f 0100 	mov.w	r1, #0
  409a88:	2501      	movs	r5, #1
  409a8a:	3304      	adds	r3, #4
  409a8c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  409a90:	9304      	str	r3, [sp, #16]
  409a92:	9503      	str	r5, [sp, #12]
  409a94:	af10      	add	r7, sp, #64	; 0x40
  409a96:	2300      	movs	r3, #0
  409a98:	9301      	str	r3, [sp, #4]
  409a9a:	e573      	b.n	409584 <_vfiprintf_r+0x254>
  409a9c:	f898 3000 	ldrb.w	r3, [r8]
  409aa0:	2800      	cmp	r0, #0
  409aa2:	f47f acac 	bne.w	4093fe <_vfiprintf_r+0xce>
  409aa6:	2101      	movs	r1, #1
  409aa8:	2020      	movs	r0, #32
  409aaa:	e4a8      	b.n	4093fe <_vfiprintf_r+0xce>
  409aac:	f046 0601 	orr.w	r6, r6, #1
  409ab0:	f898 3000 	ldrb.w	r3, [r8]
  409ab4:	e4a3      	b.n	4093fe <_vfiprintf_r+0xce>
  409ab6:	9406      	str	r4, [sp, #24]
  409ab8:	2900      	cmp	r1, #0
  409aba:	f040 830c 	bne.w	40a0d6 <_vfiprintf_r+0xda6>
  409abe:	06b2      	lsls	r2, r6, #26
  409ac0:	488e      	ldr	r0, [pc, #568]	; (409cfc <_vfiprintf_r+0x9cc>)
  409ac2:	d4bd      	bmi.n	409a40 <_vfiprintf_r+0x710>
  409ac4:	9904      	ldr	r1, [sp, #16]
  409ac6:	06f7      	lsls	r7, r6, #27
  409ac8:	460a      	mov	r2, r1
  409aca:	f100 819d 	bmi.w	409e08 <_vfiprintf_r+0xad8>
  409ace:	0675      	lsls	r5, r6, #25
  409ad0:	f140 819a 	bpl.w	409e08 <_vfiprintf_r+0xad8>
  409ad4:	3204      	adds	r2, #4
  409ad6:	880c      	ldrh	r4, [r1, #0]
  409ad8:	9204      	str	r2, [sp, #16]
  409ada:	2500      	movs	r5, #0
  409adc:	e7b9      	b.n	409a52 <_vfiprintf_r+0x722>
  409ade:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  409ae2:	f898 3000 	ldrb.w	r3, [r8]
  409ae6:	e48a      	b.n	4093fe <_vfiprintf_r+0xce>
  409ae8:	f898 3000 	ldrb.w	r3, [r8]
  409aec:	2b6c      	cmp	r3, #108	; 0x6c
  409aee:	bf03      	ittte	eq
  409af0:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  409af4:	f046 0620 	orreq.w	r6, r6, #32
  409af8:	f108 0801 	addeq.w	r8, r8, #1
  409afc:	f046 0610 	orrne.w	r6, r6, #16
  409b00:	e47d      	b.n	4093fe <_vfiprintf_r+0xce>
  409b02:	2900      	cmp	r1, #0
  409b04:	f040 8309 	bne.w	40a11a <_vfiprintf_r+0xdea>
  409b08:	06b4      	lsls	r4, r6, #26
  409b0a:	f140 821c 	bpl.w	409f46 <_vfiprintf_r+0xc16>
  409b0e:	9a04      	ldr	r2, [sp, #16]
  409b10:	9902      	ldr	r1, [sp, #8]
  409b12:	6813      	ldr	r3, [r2, #0]
  409b14:	17cd      	asrs	r5, r1, #31
  409b16:	4608      	mov	r0, r1
  409b18:	3204      	adds	r2, #4
  409b1a:	4629      	mov	r1, r5
  409b1c:	9204      	str	r2, [sp, #16]
  409b1e:	e9c3 0100 	strd	r0, r1, [r3]
  409b22:	e436      	b.n	409392 <_vfiprintf_r+0x62>
  409b24:	9406      	str	r4, [sp, #24]
  409b26:	2900      	cmp	r1, #0
  409b28:	f43f ae43 	beq.w	4097b2 <_vfiprintf_r+0x482>
  409b2c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409b30:	e63f      	b.n	4097b2 <_vfiprintf_r+0x482>
  409b32:	9406      	str	r4, [sp, #24]
  409b34:	2900      	cmp	r1, #0
  409b36:	f040 82ed 	bne.w	40a114 <_vfiprintf_r+0xde4>
  409b3a:	2b00      	cmp	r3, #0
  409b3c:	f000 808f 	beq.w	409c5e <_vfiprintf_r+0x92e>
  409b40:	2501      	movs	r5, #1
  409b42:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  409b46:	f04f 0300 	mov.w	r3, #0
  409b4a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409b4e:	9503      	str	r5, [sp, #12]
  409b50:	af10      	add	r7, sp, #64	; 0x40
  409b52:	e7a0      	b.n	409a96 <_vfiprintf_r+0x766>
  409b54:	9304      	str	r3, [sp, #16]
  409b56:	f04f 0900 	mov.w	r9, #0
  409b5a:	e696      	b.n	40988a <_vfiprintf_r+0x55a>
  409b5c:	aa0d      	add	r2, sp, #52	; 0x34
  409b5e:	9900      	ldr	r1, [sp, #0]
  409b60:	9309      	str	r3, [sp, #36]	; 0x24
  409b62:	4648      	mov	r0, r9
  409b64:	f7ff fba8 	bl	4092b8 <__sprint_r.part.0>
  409b68:	2800      	cmp	r0, #0
  409b6a:	d17f      	bne.n	409c6c <_vfiprintf_r+0x93c>
  409b6c:	980e      	ldr	r0, [sp, #56]	; 0x38
  409b6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409b72:	f100 0e01 	add.w	lr, r0, #1
  409b76:	46dc      	mov	ip, fp
  409b78:	e529      	b.n	4095ce <_vfiprintf_r+0x29e>
  409b7a:	980e      	ldr	r0, [sp, #56]	; 0x38
  409b7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409b7e:	f100 0e01 	add.w	lr, r0, #1
  409b82:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  409b86:	2b00      	cmp	r3, #0
  409b88:	f43f ad50 	beq.w	40962c <_vfiprintf_r+0x2fc>
  409b8c:	3201      	adds	r2, #1
  409b8e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  409b92:	2301      	movs	r3, #1
  409b94:	f1be 0f07 	cmp.w	lr, #7
  409b98:	920f      	str	r2, [sp, #60]	; 0x3c
  409b9a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409b9e:	e88a 000a 	stmia.w	sl, {r1, r3}
  409ba2:	f340 80bf 	ble.w	409d24 <_vfiprintf_r+0x9f4>
  409ba6:	2a00      	cmp	r2, #0
  409ba8:	f040 814e 	bne.w	409e48 <_vfiprintf_r+0xb18>
  409bac:	9907      	ldr	r1, [sp, #28]
  409bae:	2900      	cmp	r1, #0
  409bb0:	f040 80be 	bne.w	409d30 <_vfiprintf_r+0xa00>
  409bb4:	469e      	mov	lr, r3
  409bb6:	4610      	mov	r0, r2
  409bb8:	46da      	mov	sl, fp
  409bba:	9b08      	ldr	r3, [sp, #32]
  409bbc:	2b80      	cmp	r3, #128	; 0x80
  409bbe:	f43f ad50 	beq.w	409662 <_vfiprintf_r+0x332>
  409bc2:	9b01      	ldr	r3, [sp, #4]
  409bc4:	9903      	ldr	r1, [sp, #12]
  409bc6:	1a5c      	subs	r4, r3, r1
  409bc8:	2c00      	cmp	r4, #0
  409bca:	f77f ad93 	ble.w	4096f4 <_vfiprintf_r+0x3c4>
  409bce:	2c10      	cmp	r4, #16
  409bd0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 409d00 <_vfiprintf_r+0x9d0>
  409bd4:	dd25      	ble.n	409c22 <_vfiprintf_r+0x8f2>
  409bd6:	46d4      	mov	ip, sl
  409bd8:	2310      	movs	r3, #16
  409bda:	46c2      	mov	sl, r8
  409bdc:	46a8      	mov	r8, r5
  409bde:	464d      	mov	r5, r9
  409be0:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409be4:	e007      	b.n	409bf6 <_vfiprintf_r+0x8c6>
  409be6:	f100 0e02 	add.w	lr, r0, #2
  409bea:	f10c 0c08 	add.w	ip, ip, #8
  409bee:	4608      	mov	r0, r1
  409bf0:	3c10      	subs	r4, #16
  409bf2:	2c10      	cmp	r4, #16
  409bf4:	dd11      	ble.n	409c1a <_vfiprintf_r+0x8ea>
  409bf6:	1c41      	adds	r1, r0, #1
  409bf8:	3210      	adds	r2, #16
  409bfa:	2907      	cmp	r1, #7
  409bfc:	920f      	str	r2, [sp, #60]	; 0x3c
  409bfe:	f8cc 5000 	str.w	r5, [ip]
  409c02:	f8cc 3004 	str.w	r3, [ip, #4]
  409c06:	910e      	str	r1, [sp, #56]	; 0x38
  409c08:	dded      	ble.n	409be6 <_vfiprintf_r+0x8b6>
  409c0a:	b9d2      	cbnz	r2, 409c42 <_vfiprintf_r+0x912>
  409c0c:	3c10      	subs	r4, #16
  409c0e:	2c10      	cmp	r4, #16
  409c10:	f04f 0e01 	mov.w	lr, #1
  409c14:	4610      	mov	r0, r2
  409c16:	46dc      	mov	ip, fp
  409c18:	dced      	bgt.n	409bf6 <_vfiprintf_r+0x8c6>
  409c1a:	46a9      	mov	r9, r5
  409c1c:	4645      	mov	r5, r8
  409c1e:	46d0      	mov	r8, sl
  409c20:	46e2      	mov	sl, ip
  409c22:	4422      	add	r2, r4
  409c24:	f1be 0f07 	cmp.w	lr, #7
  409c28:	920f      	str	r2, [sp, #60]	; 0x3c
  409c2a:	f8ca 9000 	str.w	r9, [sl]
  409c2e:	f8ca 4004 	str.w	r4, [sl, #4]
  409c32:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409c36:	dc2e      	bgt.n	409c96 <_vfiprintf_r+0x966>
  409c38:	f10a 0a08 	add.w	sl, sl, #8
  409c3c:	f10e 0e01 	add.w	lr, lr, #1
  409c40:	e558      	b.n	4096f4 <_vfiprintf_r+0x3c4>
  409c42:	aa0d      	add	r2, sp, #52	; 0x34
  409c44:	9900      	ldr	r1, [sp, #0]
  409c46:	9301      	str	r3, [sp, #4]
  409c48:	4648      	mov	r0, r9
  409c4a:	f7ff fb35 	bl	4092b8 <__sprint_r.part.0>
  409c4e:	b968      	cbnz	r0, 409c6c <_vfiprintf_r+0x93c>
  409c50:	980e      	ldr	r0, [sp, #56]	; 0x38
  409c52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409c54:	9b01      	ldr	r3, [sp, #4]
  409c56:	f100 0e01 	add.w	lr, r0, #1
  409c5a:	46dc      	mov	ip, fp
  409c5c:	e7c8      	b.n	409bf0 <_vfiprintf_r+0x8c0>
  409c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409c60:	b123      	cbz	r3, 409c6c <_vfiprintf_r+0x93c>
  409c62:	9805      	ldr	r0, [sp, #20]
  409c64:	9900      	ldr	r1, [sp, #0]
  409c66:	aa0d      	add	r2, sp, #52	; 0x34
  409c68:	f7ff fb26 	bl	4092b8 <__sprint_r.part.0>
  409c6c:	9b00      	ldr	r3, [sp, #0]
  409c6e:	899b      	ldrh	r3, [r3, #12]
  409c70:	065a      	lsls	r2, r3, #25
  409c72:	f100 818b 	bmi.w	409f8c <_vfiprintf_r+0xc5c>
  409c76:	9802      	ldr	r0, [sp, #8]
  409c78:	b02b      	add	sp, #172	; 0xac
  409c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c7e:	aa0d      	add	r2, sp, #52	; 0x34
  409c80:	9900      	ldr	r1, [sp, #0]
  409c82:	4648      	mov	r0, r9
  409c84:	f7ff fb18 	bl	4092b8 <__sprint_r.part.0>
  409c88:	2800      	cmp	r0, #0
  409c8a:	d1ef      	bne.n	409c6c <_vfiprintf_r+0x93c>
  409c8c:	990e      	ldr	r1, [sp, #56]	; 0x38
  409c8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409c90:	1c48      	adds	r0, r1, #1
  409c92:	46da      	mov	sl, fp
  409c94:	e555      	b.n	409742 <_vfiprintf_r+0x412>
  409c96:	2a00      	cmp	r2, #0
  409c98:	f040 80fb 	bne.w	409e92 <_vfiprintf_r+0xb62>
  409c9c:	9a03      	ldr	r2, [sp, #12]
  409c9e:	921b      	str	r2, [sp, #108]	; 0x6c
  409ca0:	2301      	movs	r3, #1
  409ca2:	920f      	str	r2, [sp, #60]	; 0x3c
  409ca4:	971a      	str	r7, [sp, #104]	; 0x68
  409ca6:	930e      	str	r3, [sp, #56]	; 0x38
  409ca8:	46da      	mov	sl, fp
  409caa:	f10a 0a08 	add.w	sl, sl, #8
  409cae:	0771      	lsls	r1, r6, #29
  409cb0:	d504      	bpl.n	409cbc <_vfiprintf_r+0x98c>
  409cb2:	9b06      	ldr	r3, [sp, #24]
  409cb4:	1b5c      	subs	r4, r3, r5
  409cb6:	2c00      	cmp	r4, #0
  409cb8:	f73f ad34 	bgt.w	409724 <_vfiprintf_r+0x3f4>
  409cbc:	9b02      	ldr	r3, [sp, #8]
  409cbe:	9906      	ldr	r1, [sp, #24]
  409cc0:	42a9      	cmp	r1, r5
  409cc2:	bfac      	ite	ge
  409cc4:	185b      	addge	r3, r3, r1
  409cc6:	195b      	addlt	r3, r3, r5
  409cc8:	9302      	str	r3, [sp, #8]
  409cca:	2a00      	cmp	r2, #0
  409ccc:	f040 80b3 	bne.w	409e36 <_vfiprintf_r+0xb06>
  409cd0:	2300      	movs	r3, #0
  409cd2:	930e      	str	r3, [sp, #56]	; 0x38
  409cd4:	46da      	mov	sl, fp
  409cd6:	f7ff bb5c 	b.w	409392 <_vfiprintf_r+0x62>
  409cda:	aa0d      	add	r2, sp, #52	; 0x34
  409cdc:	9900      	ldr	r1, [sp, #0]
  409cde:	9307      	str	r3, [sp, #28]
  409ce0:	4648      	mov	r0, r9
  409ce2:	f7ff fae9 	bl	4092b8 <__sprint_r.part.0>
  409ce6:	2800      	cmp	r0, #0
  409ce8:	d1c0      	bne.n	409c6c <_vfiprintf_r+0x93c>
  409cea:	980e      	ldr	r0, [sp, #56]	; 0x38
  409cec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409cee:	9b07      	ldr	r3, [sp, #28]
  409cf0:	f100 0c01 	add.w	ip, r0, #1
  409cf4:	46de      	mov	lr, fp
  409cf6:	e4cb      	b.n	409690 <_vfiprintf_r+0x360>
  409cf8:	0040ef28 	.word	0x0040ef28
  409cfc:	0040ef3c 	.word	0x0040ef3c
  409d00:	0040ef6c 	.word	0x0040ef6c
  409d04:	2a00      	cmp	r2, #0
  409d06:	f040 8133 	bne.w	409f70 <_vfiprintf_r+0xc40>
  409d0a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  409d0e:	2b00      	cmp	r3, #0
  409d10:	f000 80f5 	beq.w	409efe <_vfiprintf_r+0xbce>
  409d14:	2301      	movs	r3, #1
  409d16:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  409d1a:	461a      	mov	r2, r3
  409d1c:	931b      	str	r3, [sp, #108]	; 0x6c
  409d1e:	469e      	mov	lr, r3
  409d20:	911a      	str	r1, [sp, #104]	; 0x68
  409d22:	46da      	mov	sl, fp
  409d24:	4670      	mov	r0, lr
  409d26:	f10a 0a08 	add.w	sl, sl, #8
  409d2a:	f10e 0e01 	add.w	lr, lr, #1
  409d2e:	e47d      	b.n	40962c <_vfiprintf_r+0x2fc>
  409d30:	a90c      	add	r1, sp, #48	; 0x30
  409d32:	2202      	movs	r2, #2
  409d34:	469e      	mov	lr, r3
  409d36:	911a      	str	r1, [sp, #104]	; 0x68
  409d38:	921b      	str	r2, [sp, #108]	; 0x6c
  409d3a:	46da      	mov	sl, fp
  409d3c:	4670      	mov	r0, lr
  409d3e:	f10a 0a08 	add.w	sl, sl, #8
  409d42:	f10e 0e01 	add.w	lr, lr, #1
  409d46:	e738      	b.n	409bba <_vfiprintf_r+0x88a>
  409d48:	9b01      	ldr	r3, [sp, #4]
  409d4a:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409d4e:	2b00      	cmp	r3, #0
  409d50:	f2c0 812a 	blt.w	409fa8 <_vfiprintf_r+0xc78>
  409d54:	ea54 0305 	orrs.w	r3, r4, r5
  409d58:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409d5c:	f43f abff 	beq.w	40955e <_vfiprintf_r+0x22e>
  409d60:	465f      	mov	r7, fp
  409d62:	0923      	lsrs	r3, r4, #4
  409d64:	f004 010f 	and.w	r1, r4, #15
  409d68:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  409d6c:	092a      	lsrs	r2, r5, #4
  409d6e:	461c      	mov	r4, r3
  409d70:	4615      	mov	r5, r2
  409d72:	5c43      	ldrb	r3, [r0, r1]
  409d74:	f807 3d01 	strb.w	r3, [r7, #-1]!
  409d78:	ea54 0305 	orrs.w	r3, r4, r5
  409d7c:	d1f1      	bne.n	409d62 <_vfiprintf_r+0xa32>
  409d7e:	ebc7 030b 	rsb	r3, r7, fp
  409d82:	9303      	str	r3, [sp, #12]
  409d84:	f7ff bbf4 	b.w	409570 <_vfiprintf_r+0x240>
  409d88:	aa0d      	add	r2, sp, #52	; 0x34
  409d8a:	9900      	ldr	r1, [sp, #0]
  409d8c:	9805      	ldr	r0, [sp, #20]
  409d8e:	f7ff fa93 	bl	4092b8 <__sprint_r.part.0>
  409d92:	2800      	cmp	r0, #0
  409d94:	f47f af6a 	bne.w	409c6c <_vfiprintf_r+0x93c>
  409d98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409d9a:	46da      	mov	sl, fp
  409d9c:	e787      	b.n	409cae <_vfiprintf_r+0x97e>
  409d9e:	f04f 0900 	mov.w	r9, #0
  409da2:	2400      	movs	r4, #0
  409da4:	2500      	movs	r5, #0
  409da6:	e7db      	b.n	409d60 <_vfiprintf_r+0xa30>
  409da8:	f016 0210 	ands.w	r2, r6, #16
  409dac:	f000 80b2 	beq.w	409f14 <_vfiprintf_r+0xbe4>
  409db0:	9904      	ldr	r1, [sp, #16]
  409db2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409db6:	460a      	mov	r2, r1
  409db8:	680c      	ldr	r4, [r1, #0]
  409dba:	9901      	ldr	r1, [sp, #4]
  409dbc:	2900      	cmp	r1, #0
  409dbe:	f102 0204 	add.w	r2, r2, #4
  409dc2:	f04f 0500 	mov.w	r5, #0
  409dc6:	f2c0 8159 	blt.w	40a07c <_vfiprintf_r+0xd4c>
  409dca:	ea54 0105 	orrs.w	r1, r4, r5
  409dce:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409dd2:	9204      	str	r2, [sp, #16]
  409dd4:	f43f ad51 	beq.w	40987a <_vfiprintf_r+0x54a>
  409dd8:	4699      	mov	r9, r3
  409dda:	e556      	b.n	40988a <_vfiprintf_r+0x55a>
  409ddc:	06f7      	lsls	r7, r6, #27
  409dde:	d40a      	bmi.n	409df6 <_vfiprintf_r+0xac6>
  409de0:	0675      	lsls	r5, r6, #25
  409de2:	d508      	bpl.n	409df6 <_vfiprintf_r+0xac6>
  409de4:	9904      	ldr	r1, [sp, #16]
  409de6:	f9b1 4000 	ldrsh.w	r4, [r1]
  409dea:	3104      	adds	r1, #4
  409dec:	17e5      	asrs	r5, r4, #31
  409dee:	4622      	mov	r2, r4
  409df0:	462b      	mov	r3, r5
  409df2:	9104      	str	r1, [sp, #16]
  409df4:	e4ea      	b.n	4097cc <_vfiprintf_r+0x49c>
  409df6:	9a04      	ldr	r2, [sp, #16]
  409df8:	6814      	ldr	r4, [r2, #0]
  409dfa:	4613      	mov	r3, r2
  409dfc:	3304      	adds	r3, #4
  409dfe:	17e5      	asrs	r5, r4, #31
  409e00:	9304      	str	r3, [sp, #16]
  409e02:	4622      	mov	r2, r4
  409e04:	462b      	mov	r3, r5
  409e06:	e4e1      	b.n	4097cc <_vfiprintf_r+0x49c>
  409e08:	6814      	ldr	r4, [r2, #0]
  409e0a:	3204      	adds	r2, #4
  409e0c:	9204      	str	r2, [sp, #16]
  409e0e:	2500      	movs	r5, #0
  409e10:	e61f      	b.n	409a52 <_vfiprintf_r+0x722>
  409e12:	f04f 0900 	mov.w	r9, #0
  409e16:	ea54 0305 	orrs.w	r3, r4, r5
  409e1a:	f47f ace8 	bne.w	4097ee <_vfiprintf_r+0x4be>
  409e1e:	e5d8      	b.n	4099d2 <_vfiprintf_r+0x6a2>
  409e20:	aa0d      	add	r2, sp, #52	; 0x34
  409e22:	9900      	ldr	r1, [sp, #0]
  409e24:	9805      	ldr	r0, [sp, #20]
  409e26:	f7ff fa47 	bl	4092b8 <__sprint_r.part.0>
  409e2a:	2800      	cmp	r0, #0
  409e2c:	f47f af1e 	bne.w	409c6c <_vfiprintf_r+0x93c>
  409e30:	46da      	mov	sl, fp
  409e32:	f7ff bb48 	b.w	4094c6 <_vfiprintf_r+0x196>
  409e36:	aa0d      	add	r2, sp, #52	; 0x34
  409e38:	9900      	ldr	r1, [sp, #0]
  409e3a:	9805      	ldr	r0, [sp, #20]
  409e3c:	f7ff fa3c 	bl	4092b8 <__sprint_r.part.0>
  409e40:	2800      	cmp	r0, #0
  409e42:	f43f af45 	beq.w	409cd0 <_vfiprintf_r+0x9a0>
  409e46:	e711      	b.n	409c6c <_vfiprintf_r+0x93c>
  409e48:	aa0d      	add	r2, sp, #52	; 0x34
  409e4a:	9900      	ldr	r1, [sp, #0]
  409e4c:	9805      	ldr	r0, [sp, #20]
  409e4e:	f7ff fa33 	bl	4092b8 <__sprint_r.part.0>
  409e52:	2800      	cmp	r0, #0
  409e54:	f47f af0a 	bne.w	409c6c <_vfiprintf_r+0x93c>
  409e58:	980e      	ldr	r0, [sp, #56]	; 0x38
  409e5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409e5c:	f100 0e01 	add.w	lr, r0, #1
  409e60:	46da      	mov	sl, fp
  409e62:	f7ff bbe3 	b.w	40962c <_vfiprintf_r+0x2fc>
  409e66:	aa0d      	add	r2, sp, #52	; 0x34
  409e68:	9900      	ldr	r1, [sp, #0]
  409e6a:	9805      	ldr	r0, [sp, #20]
  409e6c:	f7ff fa24 	bl	4092b8 <__sprint_r.part.0>
  409e70:	2800      	cmp	r0, #0
  409e72:	f47f aefb 	bne.w	409c6c <_vfiprintf_r+0x93c>
  409e76:	980e      	ldr	r0, [sp, #56]	; 0x38
  409e78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409e7a:	f100 0e01 	add.w	lr, r0, #1
  409e7e:	46da      	mov	sl, fp
  409e80:	e69b      	b.n	409bba <_vfiprintf_r+0x88a>
  409e82:	2a00      	cmp	r2, #0
  409e84:	f040 80d8 	bne.w	40a038 <_vfiprintf_r+0xd08>
  409e88:	f04f 0e01 	mov.w	lr, #1
  409e8c:	4610      	mov	r0, r2
  409e8e:	46da      	mov	sl, fp
  409e90:	e697      	b.n	409bc2 <_vfiprintf_r+0x892>
  409e92:	aa0d      	add	r2, sp, #52	; 0x34
  409e94:	9900      	ldr	r1, [sp, #0]
  409e96:	9805      	ldr	r0, [sp, #20]
  409e98:	f7ff fa0e 	bl	4092b8 <__sprint_r.part.0>
  409e9c:	2800      	cmp	r0, #0
  409e9e:	f47f aee5 	bne.w	409c6c <_vfiprintf_r+0x93c>
  409ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409ea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409ea6:	f103 0e01 	add.w	lr, r3, #1
  409eaa:	46da      	mov	sl, fp
  409eac:	e422      	b.n	4096f4 <_vfiprintf_r+0x3c4>
  409eae:	2230      	movs	r2, #48	; 0x30
  409eb0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  409eb4:	9a01      	ldr	r2, [sp, #4]
  409eb6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  409eba:	2a00      	cmp	r2, #0
  409ebc:	f04f 0300 	mov.w	r3, #0
  409ec0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409ec4:	f046 0302 	orr.w	r3, r6, #2
  409ec8:	f2c0 80cb 	blt.w	40a062 <_vfiprintf_r+0xd32>
  409ecc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409ed0:	f046 0602 	orr.w	r6, r6, #2
  409ed4:	f04f 0900 	mov.w	r9, #0
  409ed8:	e742      	b.n	409d60 <_vfiprintf_r+0xa30>
  409eda:	f04f 0900 	mov.w	r9, #0
  409ede:	4890      	ldr	r0, [pc, #576]	; (40a120 <_vfiprintf_r+0xdf0>)
  409ee0:	e73e      	b.n	409d60 <_vfiprintf_r+0xa30>
  409ee2:	9b01      	ldr	r3, [sp, #4]
  409ee4:	4264      	negs	r4, r4
  409ee6:	f04f 092d 	mov.w	r9, #45	; 0x2d
  409eea:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  409eee:	2b00      	cmp	r3, #0
  409ef0:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409ef4:	f6ff ac7b 	blt.w	4097ee <_vfiprintf_r+0x4be>
  409ef8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409efc:	e477      	b.n	4097ee <_vfiprintf_r+0x4be>
  409efe:	9b07      	ldr	r3, [sp, #28]
  409f00:	2b00      	cmp	r3, #0
  409f02:	d072      	beq.n	409fea <_vfiprintf_r+0xcba>
  409f04:	ab0c      	add	r3, sp, #48	; 0x30
  409f06:	2202      	movs	r2, #2
  409f08:	931a      	str	r3, [sp, #104]	; 0x68
  409f0a:	921b      	str	r2, [sp, #108]	; 0x6c
  409f0c:	f04f 0e01 	mov.w	lr, #1
  409f10:	46da      	mov	sl, fp
  409f12:	e713      	b.n	409d3c <_vfiprintf_r+0xa0c>
  409f14:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  409f18:	d048      	beq.n	409fac <_vfiprintf_r+0xc7c>
  409f1a:	9904      	ldr	r1, [sp, #16]
  409f1c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  409f20:	460b      	mov	r3, r1
  409f22:	880c      	ldrh	r4, [r1, #0]
  409f24:	9901      	ldr	r1, [sp, #4]
  409f26:	2900      	cmp	r1, #0
  409f28:	f103 0304 	add.w	r3, r3, #4
  409f2c:	f04f 0500 	mov.w	r5, #0
  409f30:	f6ff ae10 	blt.w	409b54 <_vfiprintf_r+0x824>
  409f34:	ea54 0105 	orrs.w	r1, r4, r5
  409f38:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409f3c:	9304      	str	r3, [sp, #16]
  409f3e:	f43f ac9c 	beq.w	40987a <_vfiprintf_r+0x54a>
  409f42:	4691      	mov	r9, r2
  409f44:	e4a1      	b.n	40988a <_vfiprintf_r+0x55a>
  409f46:	06f0      	lsls	r0, r6, #27
  409f48:	d40a      	bmi.n	409f60 <_vfiprintf_r+0xc30>
  409f4a:	0671      	lsls	r1, r6, #25
  409f4c:	d508      	bpl.n	409f60 <_vfiprintf_r+0xc30>
  409f4e:	9a04      	ldr	r2, [sp, #16]
  409f50:	6813      	ldr	r3, [r2, #0]
  409f52:	3204      	adds	r2, #4
  409f54:	9204      	str	r2, [sp, #16]
  409f56:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  409f5a:	801a      	strh	r2, [r3, #0]
  409f5c:	f7ff ba19 	b.w	409392 <_vfiprintf_r+0x62>
  409f60:	9a04      	ldr	r2, [sp, #16]
  409f62:	6813      	ldr	r3, [r2, #0]
  409f64:	3204      	adds	r2, #4
  409f66:	9204      	str	r2, [sp, #16]
  409f68:	9a02      	ldr	r2, [sp, #8]
  409f6a:	601a      	str	r2, [r3, #0]
  409f6c:	f7ff ba11 	b.w	409392 <_vfiprintf_r+0x62>
  409f70:	aa0d      	add	r2, sp, #52	; 0x34
  409f72:	9900      	ldr	r1, [sp, #0]
  409f74:	9805      	ldr	r0, [sp, #20]
  409f76:	f7ff f99f 	bl	4092b8 <__sprint_r.part.0>
  409f7a:	2800      	cmp	r0, #0
  409f7c:	f47f ae76 	bne.w	409c6c <_vfiprintf_r+0x93c>
  409f80:	980e      	ldr	r0, [sp, #56]	; 0x38
  409f82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409f84:	f100 0e01 	add.w	lr, r0, #1
  409f88:	46da      	mov	sl, fp
  409f8a:	e5fa      	b.n	409b82 <_vfiprintf_r+0x852>
  409f8c:	f04f 30ff 	mov.w	r0, #4294967295
  409f90:	f7ff bab6 	b.w	409500 <_vfiprintf_r+0x1d0>
  409f94:	4862      	ldr	r0, [pc, #392]	; (40a120 <_vfiprintf_r+0xdf0>)
  409f96:	4616      	mov	r6, r2
  409f98:	ea54 0205 	orrs.w	r2, r4, r5
  409f9c:	9304      	str	r3, [sp, #16]
  409f9e:	f04f 0900 	mov.w	r9, #0
  409fa2:	f47f aedd 	bne.w	409d60 <_vfiprintf_r+0xa30>
  409fa6:	e6fc      	b.n	409da2 <_vfiprintf_r+0xa72>
  409fa8:	9b04      	ldr	r3, [sp, #16]
  409faa:	e7f5      	b.n	409f98 <_vfiprintf_r+0xc68>
  409fac:	9a04      	ldr	r2, [sp, #16]
  409fae:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409fb2:	4613      	mov	r3, r2
  409fb4:	6814      	ldr	r4, [r2, #0]
  409fb6:	9a01      	ldr	r2, [sp, #4]
  409fb8:	2a00      	cmp	r2, #0
  409fba:	f103 0304 	add.w	r3, r3, #4
  409fbe:	f04f 0500 	mov.w	r5, #0
  409fc2:	f6ff adc7 	blt.w	409b54 <_vfiprintf_r+0x824>
  409fc6:	ea54 0205 	orrs.w	r2, r4, r5
  409fca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409fce:	9304      	str	r3, [sp, #16]
  409fd0:	f47f ac5b 	bne.w	40988a <_vfiprintf_r+0x55a>
  409fd4:	e451      	b.n	40987a <_vfiprintf_r+0x54a>
  409fd6:	aa0d      	add	r2, sp, #52	; 0x34
  409fd8:	9900      	ldr	r1, [sp, #0]
  409fda:	9805      	ldr	r0, [sp, #20]
  409fdc:	f7ff f96c 	bl	4092b8 <__sprint_r.part.0>
  409fe0:	2800      	cmp	r0, #0
  409fe2:	f47f ae43 	bne.w	409c6c <_vfiprintf_r+0x93c>
  409fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409fe8:	e668      	b.n	409cbc <_vfiprintf_r+0x98c>
  409fea:	4610      	mov	r0, r2
  409fec:	f04f 0e01 	mov.w	lr, #1
  409ff0:	46da      	mov	sl, fp
  409ff2:	e5e6      	b.n	409bc2 <_vfiprintf_r+0x892>
  409ff4:	9904      	ldr	r1, [sp, #16]
  409ff6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409ffa:	460a      	mov	r2, r1
  409ffc:	880c      	ldrh	r4, [r1, #0]
  409ffe:	9901      	ldr	r1, [sp, #4]
  40a000:	2900      	cmp	r1, #0
  40a002:	f102 0204 	add.w	r2, r2, #4
  40a006:	f04f 0500 	mov.w	r5, #0
  40a00a:	db4e      	blt.n	40a0aa <_vfiprintf_r+0xd7a>
  40a00c:	ea54 0105 	orrs.w	r1, r4, r5
  40a010:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a014:	9204      	str	r2, [sp, #16]
  40a016:	4699      	mov	r9, r3
  40a018:	f47f abe9 	bne.w	4097ee <_vfiprintf_r+0x4be>
  40a01c:	e4d4      	b.n	4099c8 <_vfiprintf_r+0x698>
  40a01e:	9304      	str	r3, [sp, #16]
  40a020:	e6f9      	b.n	409e16 <_vfiprintf_r+0xae6>
  40a022:	4638      	mov	r0, r7
  40a024:	9404      	str	r4, [sp, #16]
  40a026:	f7fd fd8b 	bl	407b40 <strlen>
  40a02a:	2300      	movs	r3, #0
  40a02c:	9003      	str	r0, [sp, #12]
  40a02e:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a032:	9301      	str	r3, [sp, #4]
  40a034:	f7ff ba9c 	b.w	409570 <_vfiprintf_r+0x240>
  40a038:	aa0d      	add	r2, sp, #52	; 0x34
  40a03a:	9900      	ldr	r1, [sp, #0]
  40a03c:	9805      	ldr	r0, [sp, #20]
  40a03e:	f7ff f93b 	bl	4092b8 <__sprint_r.part.0>
  40a042:	2800      	cmp	r0, #0
  40a044:	f47f ae12 	bne.w	409c6c <_vfiprintf_r+0x93c>
  40a048:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a04a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a04c:	f100 0e01 	add.w	lr, r0, #1
  40a050:	46da      	mov	sl, fp
  40a052:	e5b6      	b.n	409bc2 <_vfiprintf_r+0x892>
  40a054:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a058:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40a128 <_vfiprintf_r+0xdf8>
  40a05c:	3001      	adds	r0, #1
  40a05e:	f7ff bad2 	b.w	409606 <_vfiprintf_r+0x2d6>
  40a062:	461e      	mov	r6, r3
  40a064:	f04f 0900 	mov.w	r9, #0
  40a068:	e67a      	b.n	409d60 <_vfiprintf_r+0xa30>
  40a06a:	2b06      	cmp	r3, #6
  40a06c:	bf28      	it	cs
  40a06e:	2306      	movcs	r3, #6
  40a070:	9303      	str	r3, [sp, #12]
  40a072:	9404      	str	r4, [sp, #16]
  40a074:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40a078:	4f2a      	ldr	r7, [pc, #168]	; (40a124 <_vfiprintf_r+0xdf4>)
  40a07a:	e50c      	b.n	409a96 <_vfiprintf_r+0x766>
  40a07c:	9204      	str	r2, [sp, #16]
  40a07e:	e56a      	b.n	409b56 <_vfiprintf_r+0x826>
  40a080:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a082:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40a128 <_vfiprintf_r+0xdf8>
  40a086:	3001      	adds	r0, #1
  40a088:	f7ff bb73 	b.w	409772 <_vfiprintf_r+0x442>
  40a08c:	46f4      	mov	ip, lr
  40a08e:	f7ff bb1a 	b.w	4096c6 <_vfiprintf_r+0x396>
  40a092:	9b01      	ldr	r3, [sp, #4]
  40a094:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a098:	9303      	str	r3, [sp, #12]
  40a09a:	9404      	str	r4, [sp, #16]
  40a09c:	9001      	str	r0, [sp, #4]
  40a09e:	f7ff ba67 	b.w	409570 <_vfiprintf_r+0x240>
  40a0a2:	2200      	movs	r2, #0
  40a0a4:	9201      	str	r2, [sp, #4]
  40a0a6:	f7ff b9ac 	b.w	409402 <_vfiprintf_r+0xd2>
  40a0aa:	9204      	str	r2, [sp, #16]
  40a0ac:	4699      	mov	r9, r3
  40a0ae:	e6b2      	b.n	409e16 <_vfiprintf_r+0xae6>
  40a0b0:	9a04      	ldr	r2, [sp, #16]
  40a0b2:	6813      	ldr	r3, [r2, #0]
  40a0b4:	9301      	str	r3, [sp, #4]
  40a0b6:	3204      	adds	r2, #4
  40a0b8:	2b00      	cmp	r3, #0
  40a0ba:	9204      	str	r2, [sp, #16]
  40a0bc:	f898 3001 	ldrb.w	r3, [r8, #1]
  40a0c0:	46a8      	mov	r8, r5
  40a0c2:	f6bf a99c 	bge.w	4093fe <_vfiprintf_r+0xce>
  40a0c6:	f04f 32ff 	mov.w	r2, #4294967295
  40a0ca:	9201      	str	r2, [sp, #4]
  40a0cc:	f7ff b997 	b.w	4093fe <_vfiprintf_r+0xce>
  40a0d0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a0d4:	e48e      	b.n	4099f4 <_vfiprintf_r+0x6c4>
  40a0d6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a0da:	e4f0      	b.n	409abe <_vfiprintf_r+0x78e>
  40a0dc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a0e0:	e4ab      	b.n	409a3a <_vfiprintf_r+0x70a>
  40a0e2:	4699      	mov	r9, r3
  40a0e4:	07f3      	lsls	r3, r6, #31
  40a0e6:	d505      	bpl.n	40a0f4 <_vfiprintf_r+0xdc4>
  40a0e8:	af2a      	add	r7, sp, #168	; 0xa8
  40a0ea:	2330      	movs	r3, #48	; 0x30
  40a0ec:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40a0f0:	f7ff bb97 	b.w	409822 <_vfiprintf_r+0x4f2>
  40a0f4:	9b01      	ldr	r3, [sp, #4]
  40a0f6:	9303      	str	r3, [sp, #12]
  40a0f8:	465f      	mov	r7, fp
  40a0fa:	f7ff ba39 	b.w	409570 <_vfiprintf_r+0x240>
  40a0fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a102:	e443      	b.n	40998c <_vfiprintf_r+0x65c>
  40a104:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a108:	f7ff bb9a 	b.w	409840 <_vfiprintf_r+0x510>
  40a10c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a110:	f7ff bb4d 	b.w	4097ae <_vfiprintf_r+0x47e>
  40a114:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a118:	e50f      	b.n	409b3a <_vfiprintf_r+0x80a>
  40a11a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a11e:	e4f3      	b.n	409b08 <_vfiprintf_r+0x7d8>
  40a120:	0040ef3c 	.word	0x0040ef3c
  40a124:	0040ef50 	.word	0x0040ef50
  40a128:	0040ef7c 	.word	0x0040ef7c

0040a12c <__sbprintf>:
  40a12c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a12e:	460c      	mov	r4, r1
  40a130:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40a134:	8989      	ldrh	r1, [r1, #12]
  40a136:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a138:	89e5      	ldrh	r5, [r4, #14]
  40a13a:	9619      	str	r6, [sp, #100]	; 0x64
  40a13c:	f021 0102 	bic.w	r1, r1, #2
  40a140:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a142:	f8ad 500e 	strh.w	r5, [sp, #14]
  40a146:	2500      	movs	r5, #0
  40a148:	69e7      	ldr	r7, [r4, #28]
  40a14a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40a14e:	9609      	str	r6, [sp, #36]	; 0x24
  40a150:	9506      	str	r5, [sp, #24]
  40a152:	ae1a      	add	r6, sp, #104	; 0x68
  40a154:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40a158:	4669      	mov	r1, sp
  40a15a:	9600      	str	r6, [sp, #0]
  40a15c:	9604      	str	r6, [sp, #16]
  40a15e:	9502      	str	r5, [sp, #8]
  40a160:	9505      	str	r5, [sp, #20]
  40a162:	9707      	str	r7, [sp, #28]
  40a164:	4606      	mov	r6, r0
  40a166:	f7ff f8e3 	bl	409330 <_vfiprintf_r>
  40a16a:	1e05      	subs	r5, r0, #0
  40a16c:	db07      	blt.n	40a17e <__sbprintf+0x52>
  40a16e:	4630      	mov	r0, r6
  40a170:	4669      	mov	r1, sp
  40a172:	f001 f8e9 	bl	40b348 <_fflush_r>
  40a176:	2800      	cmp	r0, #0
  40a178:	bf18      	it	ne
  40a17a:	f04f 35ff 	movne.w	r5, #4294967295
  40a17e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40a182:	065b      	lsls	r3, r3, #25
  40a184:	d503      	bpl.n	40a18e <__sbprintf+0x62>
  40a186:	89a3      	ldrh	r3, [r4, #12]
  40a188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a18c:	81a3      	strh	r3, [r4, #12]
  40a18e:	4628      	mov	r0, r5
  40a190:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40a194:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a196:	bf00      	nop

0040a198 <__swsetup_r>:
  40a198:	b538      	push	{r3, r4, r5, lr}
  40a19a:	4b30      	ldr	r3, [pc, #192]	; (40a25c <__swsetup_r+0xc4>)
  40a19c:	681b      	ldr	r3, [r3, #0]
  40a19e:	4605      	mov	r5, r0
  40a1a0:	460c      	mov	r4, r1
  40a1a2:	b113      	cbz	r3, 40a1aa <__swsetup_r+0x12>
  40a1a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40a1a6:	2a00      	cmp	r2, #0
  40a1a8:	d038      	beq.n	40a21c <__swsetup_r+0x84>
  40a1aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a1ae:	b293      	uxth	r3, r2
  40a1b0:	0718      	lsls	r0, r3, #28
  40a1b2:	d50c      	bpl.n	40a1ce <__swsetup_r+0x36>
  40a1b4:	6920      	ldr	r0, [r4, #16]
  40a1b6:	b1a8      	cbz	r0, 40a1e4 <__swsetup_r+0x4c>
  40a1b8:	f013 0201 	ands.w	r2, r3, #1
  40a1bc:	d01e      	beq.n	40a1fc <__swsetup_r+0x64>
  40a1be:	6963      	ldr	r3, [r4, #20]
  40a1c0:	2200      	movs	r2, #0
  40a1c2:	425b      	negs	r3, r3
  40a1c4:	61a3      	str	r3, [r4, #24]
  40a1c6:	60a2      	str	r2, [r4, #8]
  40a1c8:	b1f0      	cbz	r0, 40a208 <__swsetup_r+0x70>
  40a1ca:	2000      	movs	r0, #0
  40a1cc:	bd38      	pop	{r3, r4, r5, pc}
  40a1ce:	06d9      	lsls	r1, r3, #27
  40a1d0:	d53c      	bpl.n	40a24c <__swsetup_r+0xb4>
  40a1d2:	0758      	lsls	r0, r3, #29
  40a1d4:	d426      	bmi.n	40a224 <__swsetup_r+0x8c>
  40a1d6:	6920      	ldr	r0, [r4, #16]
  40a1d8:	f042 0308 	orr.w	r3, r2, #8
  40a1dc:	81a3      	strh	r3, [r4, #12]
  40a1de:	b29b      	uxth	r3, r3
  40a1e0:	2800      	cmp	r0, #0
  40a1e2:	d1e9      	bne.n	40a1b8 <__swsetup_r+0x20>
  40a1e4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40a1e8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40a1ec:	d0e4      	beq.n	40a1b8 <__swsetup_r+0x20>
  40a1ee:	4628      	mov	r0, r5
  40a1f0:	4621      	mov	r1, r4
  40a1f2:	f001 fcd9 	bl	40bba8 <__smakebuf_r>
  40a1f6:	89a3      	ldrh	r3, [r4, #12]
  40a1f8:	6920      	ldr	r0, [r4, #16]
  40a1fa:	e7dd      	b.n	40a1b8 <__swsetup_r+0x20>
  40a1fc:	0799      	lsls	r1, r3, #30
  40a1fe:	bf58      	it	pl
  40a200:	6962      	ldrpl	r2, [r4, #20]
  40a202:	60a2      	str	r2, [r4, #8]
  40a204:	2800      	cmp	r0, #0
  40a206:	d1e0      	bne.n	40a1ca <__swsetup_r+0x32>
  40a208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a20c:	061a      	lsls	r2, r3, #24
  40a20e:	d5dd      	bpl.n	40a1cc <__swsetup_r+0x34>
  40a210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a214:	81a3      	strh	r3, [r4, #12]
  40a216:	f04f 30ff 	mov.w	r0, #4294967295
  40a21a:	bd38      	pop	{r3, r4, r5, pc}
  40a21c:	4618      	mov	r0, r3
  40a21e:	f001 f927 	bl	40b470 <__sinit>
  40a222:	e7c2      	b.n	40a1aa <__swsetup_r+0x12>
  40a224:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a226:	b151      	cbz	r1, 40a23e <__swsetup_r+0xa6>
  40a228:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a22c:	4299      	cmp	r1, r3
  40a22e:	d004      	beq.n	40a23a <__swsetup_r+0xa2>
  40a230:	4628      	mov	r0, r5
  40a232:	f001 f9e7 	bl	40b604 <_free_r>
  40a236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a23a:	2300      	movs	r3, #0
  40a23c:	6323      	str	r3, [r4, #48]	; 0x30
  40a23e:	2300      	movs	r3, #0
  40a240:	6920      	ldr	r0, [r4, #16]
  40a242:	6063      	str	r3, [r4, #4]
  40a244:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40a248:	6020      	str	r0, [r4, #0]
  40a24a:	e7c5      	b.n	40a1d8 <__swsetup_r+0x40>
  40a24c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40a250:	2309      	movs	r3, #9
  40a252:	602b      	str	r3, [r5, #0]
  40a254:	f04f 30ff 	mov.w	r0, #4294967295
  40a258:	81a2      	strh	r2, [r4, #12]
  40a25a:	bd38      	pop	{r3, r4, r5, pc}
  40a25c:	204004d0 	.word	0x204004d0

0040a260 <register_fini>:
  40a260:	4b02      	ldr	r3, [pc, #8]	; (40a26c <register_fini+0xc>)
  40a262:	b113      	cbz	r3, 40a26a <register_fini+0xa>
  40a264:	4802      	ldr	r0, [pc, #8]	; (40a270 <register_fini+0x10>)
  40a266:	f000 b805 	b.w	40a274 <atexit>
  40a26a:	4770      	bx	lr
  40a26c:	00000000 	.word	0x00000000
  40a270:	0040b485 	.word	0x0040b485

0040a274 <atexit>:
  40a274:	2300      	movs	r3, #0
  40a276:	4601      	mov	r1, r0
  40a278:	461a      	mov	r2, r3
  40a27a:	4618      	mov	r0, r3
  40a27c:	f002 bf62 	b.w	40d144 <__register_exitproc>

0040a280 <quorem>:
  40a280:	6902      	ldr	r2, [r0, #16]
  40a282:	690b      	ldr	r3, [r1, #16]
  40a284:	4293      	cmp	r3, r2
  40a286:	f300 808d 	bgt.w	40a3a4 <quorem+0x124>
  40a28a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a28e:	f103 38ff 	add.w	r8, r3, #4294967295
  40a292:	f101 0714 	add.w	r7, r1, #20
  40a296:	f100 0b14 	add.w	fp, r0, #20
  40a29a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40a29e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40a2a2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40a2a6:	b083      	sub	sp, #12
  40a2a8:	3201      	adds	r2, #1
  40a2aa:	fbb3 f9f2 	udiv	r9, r3, r2
  40a2ae:	eb0b 0304 	add.w	r3, fp, r4
  40a2b2:	9400      	str	r4, [sp, #0]
  40a2b4:	eb07 0a04 	add.w	sl, r7, r4
  40a2b8:	9301      	str	r3, [sp, #4]
  40a2ba:	f1b9 0f00 	cmp.w	r9, #0
  40a2be:	d039      	beq.n	40a334 <quorem+0xb4>
  40a2c0:	2500      	movs	r5, #0
  40a2c2:	46bc      	mov	ip, r7
  40a2c4:	46de      	mov	lr, fp
  40a2c6:	462b      	mov	r3, r5
  40a2c8:	f85c 6b04 	ldr.w	r6, [ip], #4
  40a2cc:	f8de 2000 	ldr.w	r2, [lr]
  40a2d0:	b2b4      	uxth	r4, r6
  40a2d2:	fb09 5504 	mla	r5, r9, r4, r5
  40a2d6:	0c36      	lsrs	r6, r6, #16
  40a2d8:	0c2c      	lsrs	r4, r5, #16
  40a2da:	fb09 4406 	mla	r4, r9, r6, r4
  40a2de:	b2ad      	uxth	r5, r5
  40a2e0:	1b5b      	subs	r3, r3, r5
  40a2e2:	b2a6      	uxth	r6, r4
  40a2e4:	fa13 f382 	uxtah	r3, r3, r2
  40a2e8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  40a2ec:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40a2f0:	b29b      	uxth	r3, r3
  40a2f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40a2f6:	45e2      	cmp	sl, ip
  40a2f8:	f84e 3b04 	str.w	r3, [lr], #4
  40a2fc:	ea4f 4514 	mov.w	r5, r4, lsr #16
  40a300:	ea4f 4326 	mov.w	r3, r6, asr #16
  40a304:	d2e0      	bcs.n	40a2c8 <quorem+0x48>
  40a306:	9b00      	ldr	r3, [sp, #0]
  40a308:	f85b 3003 	ldr.w	r3, [fp, r3]
  40a30c:	b993      	cbnz	r3, 40a334 <quorem+0xb4>
  40a30e:	9c01      	ldr	r4, [sp, #4]
  40a310:	1f23      	subs	r3, r4, #4
  40a312:	459b      	cmp	fp, r3
  40a314:	d20c      	bcs.n	40a330 <quorem+0xb0>
  40a316:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40a31a:	b94b      	cbnz	r3, 40a330 <quorem+0xb0>
  40a31c:	f1a4 0308 	sub.w	r3, r4, #8
  40a320:	e002      	b.n	40a328 <quorem+0xa8>
  40a322:	681a      	ldr	r2, [r3, #0]
  40a324:	3b04      	subs	r3, #4
  40a326:	b91a      	cbnz	r2, 40a330 <quorem+0xb0>
  40a328:	459b      	cmp	fp, r3
  40a32a:	f108 38ff 	add.w	r8, r8, #4294967295
  40a32e:	d3f8      	bcc.n	40a322 <quorem+0xa2>
  40a330:	f8c0 8010 	str.w	r8, [r0, #16]
  40a334:	4604      	mov	r4, r0
  40a336:	f002 fa95 	bl	40c864 <__mcmp>
  40a33a:	2800      	cmp	r0, #0
  40a33c:	db2e      	blt.n	40a39c <quorem+0x11c>
  40a33e:	f109 0901 	add.w	r9, r9, #1
  40a342:	465d      	mov	r5, fp
  40a344:	2300      	movs	r3, #0
  40a346:	f857 1b04 	ldr.w	r1, [r7], #4
  40a34a:	6828      	ldr	r0, [r5, #0]
  40a34c:	b28a      	uxth	r2, r1
  40a34e:	1a9a      	subs	r2, r3, r2
  40a350:	0c09      	lsrs	r1, r1, #16
  40a352:	fa12 f280 	uxtah	r2, r2, r0
  40a356:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40a35a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40a35e:	b291      	uxth	r1, r2
  40a360:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40a364:	45ba      	cmp	sl, r7
  40a366:	f845 1b04 	str.w	r1, [r5], #4
  40a36a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a36e:	d2ea      	bcs.n	40a346 <quorem+0xc6>
  40a370:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40a374:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40a378:	b982      	cbnz	r2, 40a39c <quorem+0x11c>
  40a37a:	1f1a      	subs	r2, r3, #4
  40a37c:	4593      	cmp	fp, r2
  40a37e:	d20b      	bcs.n	40a398 <quorem+0x118>
  40a380:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40a384:	b942      	cbnz	r2, 40a398 <quorem+0x118>
  40a386:	3b08      	subs	r3, #8
  40a388:	e002      	b.n	40a390 <quorem+0x110>
  40a38a:	681a      	ldr	r2, [r3, #0]
  40a38c:	3b04      	subs	r3, #4
  40a38e:	b91a      	cbnz	r2, 40a398 <quorem+0x118>
  40a390:	459b      	cmp	fp, r3
  40a392:	f108 38ff 	add.w	r8, r8, #4294967295
  40a396:	d3f8      	bcc.n	40a38a <quorem+0x10a>
  40a398:	f8c4 8010 	str.w	r8, [r4, #16]
  40a39c:	4648      	mov	r0, r9
  40a39e:	b003      	add	sp, #12
  40a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a3a4:	2000      	movs	r0, #0
  40a3a6:	4770      	bx	lr

0040a3a8 <_dtoa_r>:
  40a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a3ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40a3ae:	b097      	sub	sp, #92	; 0x5c
  40a3b0:	4681      	mov	r9, r0
  40a3b2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40a3b4:	4692      	mov	sl, r2
  40a3b6:	469b      	mov	fp, r3
  40a3b8:	b149      	cbz	r1, 40a3ce <_dtoa_r+0x26>
  40a3ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40a3bc:	604a      	str	r2, [r1, #4]
  40a3be:	2301      	movs	r3, #1
  40a3c0:	4093      	lsls	r3, r2
  40a3c2:	608b      	str	r3, [r1, #8]
  40a3c4:	f002 f86c 	bl	40c4a0 <_Bfree>
  40a3c8:	2300      	movs	r3, #0
  40a3ca:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  40a3ce:	f1bb 0f00 	cmp.w	fp, #0
  40a3d2:	46d8      	mov	r8, fp
  40a3d4:	db33      	blt.n	40a43e <_dtoa_r+0x96>
  40a3d6:	2300      	movs	r3, #0
  40a3d8:	6023      	str	r3, [r4, #0]
  40a3da:	4ba5      	ldr	r3, [pc, #660]	; (40a670 <_dtoa_r+0x2c8>)
  40a3dc:	461a      	mov	r2, r3
  40a3de:	ea08 0303 	and.w	r3, r8, r3
  40a3e2:	4293      	cmp	r3, r2
  40a3e4:	d014      	beq.n	40a410 <_dtoa_r+0x68>
  40a3e6:	4650      	mov	r0, sl
  40a3e8:	4659      	mov	r1, fp
  40a3ea:	2200      	movs	r2, #0
  40a3ec:	2300      	movs	r3, #0
  40a3ee:	f003 fbf1 	bl	40dbd4 <__aeabi_dcmpeq>
  40a3f2:	4605      	mov	r5, r0
  40a3f4:	b348      	cbz	r0, 40a44a <_dtoa_r+0xa2>
  40a3f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a3f8:	2301      	movs	r3, #1
  40a3fa:	6013      	str	r3, [r2, #0]
  40a3fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a3fe:	2b00      	cmp	r3, #0
  40a400:	f000 80c5 	beq.w	40a58e <_dtoa_r+0x1e6>
  40a404:	489b      	ldr	r0, [pc, #620]	; (40a674 <_dtoa_r+0x2cc>)
  40a406:	6018      	str	r0, [r3, #0]
  40a408:	3801      	subs	r0, #1
  40a40a:	b017      	add	sp, #92	; 0x5c
  40a40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a410:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a412:	f242 730f 	movw	r3, #9999	; 0x270f
  40a416:	6013      	str	r3, [r2, #0]
  40a418:	f1ba 0f00 	cmp.w	sl, #0
  40a41c:	f000 80a2 	beq.w	40a564 <_dtoa_r+0x1bc>
  40a420:	4895      	ldr	r0, [pc, #596]	; (40a678 <_dtoa_r+0x2d0>)
  40a422:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a424:	2b00      	cmp	r3, #0
  40a426:	d0f0      	beq.n	40a40a <_dtoa_r+0x62>
  40a428:	78c3      	ldrb	r3, [r0, #3]
  40a42a:	2b00      	cmp	r3, #0
  40a42c:	f000 80b1 	beq.w	40a592 <_dtoa_r+0x1ea>
  40a430:	f100 0308 	add.w	r3, r0, #8
  40a434:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a436:	6013      	str	r3, [r2, #0]
  40a438:	b017      	add	sp, #92	; 0x5c
  40a43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a43e:	2301      	movs	r3, #1
  40a440:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40a444:	6023      	str	r3, [r4, #0]
  40a446:	46c3      	mov	fp, r8
  40a448:	e7c7      	b.n	40a3da <_dtoa_r+0x32>
  40a44a:	aa14      	add	r2, sp, #80	; 0x50
  40a44c:	ab15      	add	r3, sp, #84	; 0x54
  40a44e:	9201      	str	r2, [sp, #4]
  40a450:	9300      	str	r3, [sp, #0]
  40a452:	4652      	mov	r2, sl
  40a454:	465b      	mov	r3, fp
  40a456:	4648      	mov	r0, r9
  40a458:	f002 faae 	bl	40c9b8 <__d2b>
  40a45c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  40a460:	9008      	str	r0, [sp, #32]
  40a462:	f040 8088 	bne.w	40a576 <_dtoa_r+0x1ce>
  40a466:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40a468:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40a46a:	442c      	add	r4, r5
  40a46c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  40a470:	2b20      	cmp	r3, #32
  40a472:	f340 8291 	ble.w	40a998 <_dtoa_r+0x5f0>
  40a476:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40a47a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  40a47e:	fa08 f803 	lsl.w	r8, r8, r3
  40a482:	fa2a f000 	lsr.w	r0, sl, r0
  40a486:	ea40 0008 	orr.w	r0, r0, r8
  40a48a:	f003 f8c5 	bl	40d618 <__aeabi_ui2d>
  40a48e:	2301      	movs	r3, #1
  40a490:	3c01      	subs	r4, #1
  40a492:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40a496:	9310      	str	r3, [sp, #64]	; 0x40
  40a498:	2200      	movs	r2, #0
  40a49a:	4b78      	ldr	r3, [pc, #480]	; (40a67c <_dtoa_r+0x2d4>)
  40a49c:	f002 ff7e 	bl	40d39c <__aeabi_dsub>
  40a4a0:	a36d      	add	r3, pc, #436	; (adr r3, 40a658 <_dtoa_r+0x2b0>)
  40a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a4a6:	f003 f92d 	bl	40d704 <__aeabi_dmul>
  40a4aa:	a36d      	add	r3, pc, #436	; (adr r3, 40a660 <_dtoa_r+0x2b8>)
  40a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a4b0:	f002 ff76 	bl	40d3a0 <__adddf3>
  40a4b4:	4606      	mov	r6, r0
  40a4b6:	4620      	mov	r0, r4
  40a4b8:	460f      	mov	r7, r1
  40a4ba:	f003 f8bd 	bl	40d638 <__aeabi_i2d>
  40a4be:	a36a      	add	r3, pc, #424	; (adr r3, 40a668 <_dtoa_r+0x2c0>)
  40a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a4c4:	f003 f91e 	bl	40d704 <__aeabi_dmul>
  40a4c8:	4602      	mov	r2, r0
  40a4ca:	460b      	mov	r3, r1
  40a4cc:	4630      	mov	r0, r6
  40a4ce:	4639      	mov	r1, r7
  40a4d0:	f002 ff66 	bl	40d3a0 <__adddf3>
  40a4d4:	4606      	mov	r6, r0
  40a4d6:	460f      	mov	r7, r1
  40a4d8:	f003 fbc4 	bl	40dc64 <__aeabi_d2iz>
  40a4dc:	2200      	movs	r2, #0
  40a4de:	9004      	str	r0, [sp, #16]
  40a4e0:	2300      	movs	r3, #0
  40a4e2:	4630      	mov	r0, r6
  40a4e4:	4639      	mov	r1, r7
  40a4e6:	f003 fb7f 	bl	40dbe8 <__aeabi_dcmplt>
  40a4ea:	2800      	cmp	r0, #0
  40a4ec:	f040 8230 	bne.w	40a950 <_dtoa_r+0x5a8>
  40a4f0:	9e04      	ldr	r6, [sp, #16]
  40a4f2:	2e16      	cmp	r6, #22
  40a4f4:	f200 8229 	bhi.w	40a94a <_dtoa_r+0x5a2>
  40a4f8:	4b61      	ldr	r3, [pc, #388]	; (40a680 <_dtoa_r+0x2d8>)
  40a4fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40a4fe:	e9d3 0100 	ldrd	r0, r1, [r3]
  40a502:	4652      	mov	r2, sl
  40a504:	465b      	mov	r3, fp
  40a506:	f003 fb8d 	bl	40dc24 <__aeabi_dcmpgt>
  40a50a:	2800      	cmp	r0, #0
  40a50c:	f000 8249 	beq.w	40a9a2 <_dtoa_r+0x5fa>
  40a510:	1e73      	subs	r3, r6, #1
  40a512:	9304      	str	r3, [sp, #16]
  40a514:	2300      	movs	r3, #0
  40a516:	930c      	str	r3, [sp, #48]	; 0x30
  40a518:	1b2c      	subs	r4, r5, r4
  40a51a:	1e63      	subs	r3, r4, #1
  40a51c:	9302      	str	r3, [sp, #8]
  40a51e:	f100 8232 	bmi.w	40a986 <_dtoa_r+0x5de>
  40a522:	2300      	movs	r3, #0
  40a524:	9305      	str	r3, [sp, #20]
  40a526:	9b04      	ldr	r3, [sp, #16]
  40a528:	2b00      	cmp	r3, #0
  40a52a:	f2c0 8223 	blt.w	40a974 <_dtoa_r+0x5cc>
  40a52e:	9a02      	ldr	r2, [sp, #8]
  40a530:	930b      	str	r3, [sp, #44]	; 0x2c
  40a532:	4611      	mov	r1, r2
  40a534:	4419      	add	r1, r3
  40a536:	2300      	movs	r3, #0
  40a538:	9102      	str	r1, [sp, #8]
  40a53a:	930a      	str	r3, [sp, #40]	; 0x28
  40a53c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40a53e:	2b09      	cmp	r3, #9
  40a540:	d829      	bhi.n	40a596 <_dtoa_r+0x1ee>
  40a542:	2b05      	cmp	r3, #5
  40a544:	f340 8658 	ble.w	40b1f8 <_dtoa_r+0xe50>
  40a548:	3b04      	subs	r3, #4
  40a54a:	9320      	str	r3, [sp, #128]	; 0x80
  40a54c:	2500      	movs	r5, #0
  40a54e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40a550:	3b02      	subs	r3, #2
  40a552:	2b03      	cmp	r3, #3
  40a554:	f200 8635 	bhi.w	40b1c2 <_dtoa_r+0xe1a>
  40a558:	e8df f013 	tbh	[pc, r3, lsl #1]
  40a55c:	0228032c 	.word	0x0228032c
  40a560:	04590337 	.word	0x04590337
  40a564:	4b44      	ldr	r3, [pc, #272]	; (40a678 <_dtoa_r+0x2d0>)
  40a566:	4a47      	ldr	r2, [pc, #284]	; (40a684 <_dtoa_r+0x2dc>)
  40a568:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40a56c:	2800      	cmp	r0, #0
  40a56e:	bf14      	ite	ne
  40a570:	4618      	movne	r0, r3
  40a572:	4610      	moveq	r0, r2
  40a574:	e755      	b.n	40a422 <_dtoa_r+0x7a>
  40a576:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40a57a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40a57e:	9510      	str	r5, [sp, #64]	; 0x40
  40a580:	4650      	mov	r0, sl
  40a582:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40a586:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40a58a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40a58c:	e784      	b.n	40a498 <_dtoa_r+0xf0>
  40a58e:	483e      	ldr	r0, [pc, #248]	; (40a688 <_dtoa_r+0x2e0>)
  40a590:	e73b      	b.n	40a40a <_dtoa_r+0x62>
  40a592:	1cc3      	adds	r3, r0, #3
  40a594:	e74e      	b.n	40a434 <_dtoa_r+0x8c>
  40a596:	2100      	movs	r1, #0
  40a598:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40a59c:	4648      	mov	r0, r9
  40a59e:	9120      	str	r1, [sp, #128]	; 0x80
  40a5a0:	f001 ff58 	bl	40c454 <_Balloc>
  40a5a4:	f04f 33ff 	mov.w	r3, #4294967295
  40a5a8:	9306      	str	r3, [sp, #24]
  40a5aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40a5ac:	930d      	str	r3, [sp, #52]	; 0x34
  40a5ae:	2301      	movs	r3, #1
  40a5b0:	9007      	str	r0, [sp, #28]
  40a5b2:	9221      	str	r2, [sp, #132]	; 0x84
  40a5b4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40a5b8:	9309      	str	r3, [sp, #36]	; 0x24
  40a5ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a5bc:	2b00      	cmp	r3, #0
  40a5be:	f2c0 80d1 	blt.w	40a764 <_dtoa_r+0x3bc>
  40a5c2:	9a04      	ldr	r2, [sp, #16]
  40a5c4:	2a0e      	cmp	r2, #14
  40a5c6:	f300 80cd 	bgt.w	40a764 <_dtoa_r+0x3bc>
  40a5ca:	4b2d      	ldr	r3, [pc, #180]	; (40a680 <_dtoa_r+0x2d8>)
  40a5cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a5d0:	e9d3 3400 	ldrd	r3, r4, [r3]
  40a5d4:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40a5d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a5da:	2b00      	cmp	r3, #0
  40a5dc:	f2c0 8300 	blt.w	40abe0 <_dtoa_r+0x838>
  40a5e0:	4656      	mov	r6, sl
  40a5e2:	465f      	mov	r7, fp
  40a5e4:	4650      	mov	r0, sl
  40a5e6:	4659      	mov	r1, fp
  40a5e8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40a5ec:	4652      	mov	r2, sl
  40a5ee:	465b      	mov	r3, fp
  40a5f0:	f003 f9b2 	bl	40d958 <__aeabi_ddiv>
  40a5f4:	f003 fb36 	bl	40dc64 <__aeabi_d2iz>
  40a5f8:	4604      	mov	r4, r0
  40a5fa:	f003 f81d 	bl	40d638 <__aeabi_i2d>
  40a5fe:	4652      	mov	r2, sl
  40a600:	465b      	mov	r3, fp
  40a602:	f003 f87f 	bl	40d704 <__aeabi_dmul>
  40a606:	460b      	mov	r3, r1
  40a608:	4602      	mov	r2, r0
  40a60a:	4639      	mov	r1, r7
  40a60c:	4630      	mov	r0, r6
  40a60e:	f002 fec5 	bl	40d39c <__aeabi_dsub>
  40a612:	9d07      	ldr	r5, [sp, #28]
  40a614:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40a618:	702b      	strb	r3, [r5, #0]
  40a61a:	9b06      	ldr	r3, [sp, #24]
  40a61c:	2b01      	cmp	r3, #1
  40a61e:	4606      	mov	r6, r0
  40a620:	460f      	mov	r7, r1
  40a622:	f105 0501 	add.w	r5, r5, #1
  40a626:	d062      	beq.n	40a6ee <_dtoa_r+0x346>
  40a628:	2200      	movs	r2, #0
  40a62a:	4b18      	ldr	r3, [pc, #96]	; (40a68c <_dtoa_r+0x2e4>)
  40a62c:	f003 f86a 	bl	40d704 <__aeabi_dmul>
  40a630:	2200      	movs	r2, #0
  40a632:	2300      	movs	r3, #0
  40a634:	4606      	mov	r6, r0
  40a636:	460f      	mov	r7, r1
  40a638:	f003 facc 	bl	40dbd4 <__aeabi_dcmpeq>
  40a63c:	2800      	cmp	r0, #0
  40a63e:	d17e      	bne.n	40a73e <_dtoa_r+0x396>
  40a640:	f8cd 9014 	str.w	r9, [sp, #20]
  40a644:	f8dd a018 	ldr.w	sl, [sp, #24]
  40a648:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40a64c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40a650:	e029      	b.n	40a6a6 <_dtoa_r+0x2fe>
  40a652:	bf00      	nop
  40a654:	f3af 8000 	nop.w
  40a658:	636f4361 	.word	0x636f4361
  40a65c:	3fd287a7 	.word	0x3fd287a7
  40a660:	8b60c8b3 	.word	0x8b60c8b3
  40a664:	3fc68a28 	.word	0x3fc68a28
  40a668:	509f79fb 	.word	0x509f79fb
  40a66c:	3fd34413 	.word	0x3fd34413
  40a670:	7ff00000 	.word	0x7ff00000
  40a674:	0040ef59 	.word	0x0040ef59
  40a678:	0040ef98 	.word	0x0040ef98
  40a67c:	3ff80000 	.word	0x3ff80000
  40a680:	0040efa8 	.word	0x0040efa8
  40a684:	0040ef8c 	.word	0x0040ef8c
  40a688:	0040ef58 	.word	0x0040ef58
  40a68c:	40240000 	.word	0x40240000
  40a690:	f003 f838 	bl	40d704 <__aeabi_dmul>
  40a694:	2200      	movs	r2, #0
  40a696:	2300      	movs	r3, #0
  40a698:	4606      	mov	r6, r0
  40a69a:	460f      	mov	r7, r1
  40a69c:	f003 fa9a 	bl	40dbd4 <__aeabi_dcmpeq>
  40a6a0:	2800      	cmp	r0, #0
  40a6a2:	f040 83b7 	bne.w	40ae14 <_dtoa_r+0xa6c>
  40a6a6:	4642      	mov	r2, r8
  40a6a8:	464b      	mov	r3, r9
  40a6aa:	4630      	mov	r0, r6
  40a6ac:	4639      	mov	r1, r7
  40a6ae:	f003 f953 	bl	40d958 <__aeabi_ddiv>
  40a6b2:	f003 fad7 	bl	40dc64 <__aeabi_d2iz>
  40a6b6:	4604      	mov	r4, r0
  40a6b8:	f002 ffbe 	bl	40d638 <__aeabi_i2d>
  40a6bc:	4642      	mov	r2, r8
  40a6be:	464b      	mov	r3, r9
  40a6c0:	f003 f820 	bl	40d704 <__aeabi_dmul>
  40a6c4:	4602      	mov	r2, r0
  40a6c6:	460b      	mov	r3, r1
  40a6c8:	4630      	mov	r0, r6
  40a6ca:	4639      	mov	r1, r7
  40a6cc:	f002 fe66 	bl	40d39c <__aeabi_dsub>
  40a6d0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40a6d4:	f805 eb01 	strb.w	lr, [r5], #1
  40a6d8:	ebcb 0e05 	rsb	lr, fp, r5
  40a6dc:	45d6      	cmp	lr, sl
  40a6de:	4606      	mov	r6, r0
  40a6e0:	460f      	mov	r7, r1
  40a6e2:	f04f 0200 	mov.w	r2, #0
  40a6e6:	4bb0      	ldr	r3, [pc, #704]	; (40a9a8 <_dtoa_r+0x600>)
  40a6e8:	d1d2      	bne.n	40a690 <_dtoa_r+0x2e8>
  40a6ea:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40a6ee:	4632      	mov	r2, r6
  40a6f0:	463b      	mov	r3, r7
  40a6f2:	4630      	mov	r0, r6
  40a6f4:	4639      	mov	r1, r7
  40a6f6:	f002 fe53 	bl	40d3a0 <__adddf3>
  40a6fa:	4606      	mov	r6, r0
  40a6fc:	460f      	mov	r7, r1
  40a6fe:	4602      	mov	r2, r0
  40a700:	460b      	mov	r3, r1
  40a702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a706:	f003 fa6f 	bl	40dbe8 <__aeabi_dcmplt>
  40a70a:	b940      	cbnz	r0, 40a71e <_dtoa_r+0x376>
  40a70c:	4632      	mov	r2, r6
  40a70e:	463b      	mov	r3, r7
  40a710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a714:	f003 fa5e 	bl	40dbd4 <__aeabi_dcmpeq>
  40a718:	b188      	cbz	r0, 40a73e <_dtoa_r+0x396>
  40a71a:	07e3      	lsls	r3, r4, #31
  40a71c:	d50f      	bpl.n	40a73e <_dtoa_r+0x396>
  40a71e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40a722:	9a07      	ldr	r2, [sp, #28]
  40a724:	1e6b      	subs	r3, r5, #1
  40a726:	e004      	b.n	40a732 <_dtoa_r+0x38a>
  40a728:	429a      	cmp	r2, r3
  40a72a:	f000 842c 	beq.w	40af86 <_dtoa_r+0xbde>
  40a72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a732:	2c39      	cmp	r4, #57	; 0x39
  40a734:	f103 0501 	add.w	r5, r3, #1
  40a738:	d0f6      	beq.n	40a728 <_dtoa_r+0x380>
  40a73a:	3401      	adds	r4, #1
  40a73c:	701c      	strb	r4, [r3, #0]
  40a73e:	9908      	ldr	r1, [sp, #32]
  40a740:	4648      	mov	r0, r9
  40a742:	f001 fead 	bl	40c4a0 <_Bfree>
  40a746:	2200      	movs	r2, #0
  40a748:	9b04      	ldr	r3, [sp, #16]
  40a74a:	702a      	strb	r2, [r5, #0]
  40a74c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a74e:	3301      	adds	r3, #1
  40a750:	6013      	str	r3, [r2, #0]
  40a752:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a754:	2b00      	cmp	r3, #0
  40a756:	f000 83a7 	beq.w	40aea8 <_dtoa_r+0xb00>
  40a75a:	9807      	ldr	r0, [sp, #28]
  40a75c:	601d      	str	r5, [r3, #0]
  40a75e:	b017      	add	sp, #92	; 0x5c
  40a760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a764:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a766:	2a00      	cmp	r2, #0
  40a768:	f000 8112 	beq.w	40a990 <_dtoa_r+0x5e8>
  40a76c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40a76e:	2a01      	cmp	r2, #1
  40a770:	f340 8258 	ble.w	40ac24 <_dtoa_r+0x87c>
  40a774:	9b06      	ldr	r3, [sp, #24]
  40a776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a778:	1e5f      	subs	r7, r3, #1
  40a77a:	42ba      	cmp	r2, r7
  40a77c:	f2c0 8397 	blt.w	40aeae <_dtoa_r+0xb06>
  40a780:	1bd7      	subs	r7, r2, r7
  40a782:	9b06      	ldr	r3, [sp, #24]
  40a784:	2b00      	cmp	r3, #0
  40a786:	f2c0 848a 	blt.w	40b09e <_dtoa_r+0xcf6>
  40a78a:	9d05      	ldr	r5, [sp, #20]
  40a78c:	9b06      	ldr	r3, [sp, #24]
  40a78e:	9a05      	ldr	r2, [sp, #20]
  40a790:	441a      	add	r2, r3
  40a792:	9205      	str	r2, [sp, #20]
  40a794:	9a02      	ldr	r2, [sp, #8]
  40a796:	2101      	movs	r1, #1
  40a798:	441a      	add	r2, r3
  40a79a:	4648      	mov	r0, r9
  40a79c:	9202      	str	r2, [sp, #8]
  40a79e:	f001 ff17 	bl	40c5d0 <__i2b>
  40a7a2:	4606      	mov	r6, r0
  40a7a4:	b165      	cbz	r5, 40a7c0 <_dtoa_r+0x418>
  40a7a6:	9902      	ldr	r1, [sp, #8]
  40a7a8:	2900      	cmp	r1, #0
  40a7aa:	460b      	mov	r3, r1
  40a7ac:	dd08      	ble.n	40a7c0 <_dtoa_r+0x418>
  40a7ae:	42a9      	cmp	r1, r5
  40a7b0:	9a05      	ldr	r2, [sp, #20]
  40a7b2:	bfa8      	it	ge
  40a7b4:	462b      	movge	r3, r5
  40a7b6:	1ad2      	subs	r2, r2, r3
  40a7b8:	1aed      	subs	r5, r5, r3
  40a7ba:	1acb      	subs	r3, r1, r3
  40a7bc:	9205      	str	r2, [sp, #20]
  40a7be:	9302      	str	r3, [sp, #8]
  40a7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a7c2:	2b00      	cmp	r3, #0
  40a7c4:	f340 82fc 	ble.w	40adc0 <_dtoa_r+0xa18>
  40a7c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a7ca:	2a00      	cmp	r2, #0
  40a7cc:	f000 8201 	beq.w	40abd2 <_dtoa_r+0x82a>
  40a7d0:	2f00      	cmp	r7, #0
  40a7d2:	f000 81fe 	beq.w	40abd2 <_dtoa_r+0x82a>
  40a7d6:	4631      	mov	r1, r6
  40a7d8:	463a      	mov	r2, r7
  40a7da:	4648      	mov	r0, r9
  40a7dc:	f001 ff9a 	bl	40c714 <__pow5mult>
  40a7e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40a7e4:	4601      	mov	r1, r0
  40a7e6:	4642      	mov	r2, r8
  40a7e8:	4606      	mov	r6, r0
  40a7ea:	4648      	mov	r0, r9
  40a7ec:	f001 fefa 	bl	40c5e4 <__multiply>
  40a7f0:	4641      	mov	r1, r8
  40a7f2:	4604      	mov	r4, r0
  40a7f4:	4648      	mov	r0, r9
  40a7f6:	f001 fe53 	bl	40c4a0 <_Bfree>
  40a7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a7fc:	1bdb      	subs	r3, r3, r7
  40a7fe:	930a      	str	r3, [sp, #40]	; 0x28
  40a800:	f040 81e6 	bne.w	40abd0 <_dtoa_r+0x828>
  40a804:	2101      	movs	r1, #1
  40a806:	4648      	mov	r0, r9
  40a808:	f001 fee2 	bl	40c5d0 <__i2b>
  40a80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a80e:	4680      	mov	r8, r0
  40a810:	2b00      	cmp	r3, #0
  40a812:	f000 8219 	beq.w	40ac48 <_dtoa_r+0x8a0>
  40a816:	4601      	mov	r1, r0
  40a818:	461a      	mov	r2, r3
  40a81a:	4648      	mov	r0, r9
  40a81c:	f001 ff7a 	bl	40c714 <__pow5mult>
  40a820:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40a822:	2b01      	cmp	r3, #1
  40a824:	4680      	mov	r8, r0
  40a826:	f340 82f8 	ble.w	40ae1a <_dtoa_r+0xa72>
  40a82a:	2700      	movs	r7, #0
  40a82c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40a830:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40a834:	6918      	ldr	r0, [r3, #16]
  40a836:	f001 fe7d 	bl	40c534 <__hi0bits>
  40a83a:	f1c0 0020 	rsb	r0, r0, #32
  40a83e:	9a02      	ldr	r2, [sp, #8]
  40a840:	4410      	add	r0, r2
  40a842:	f010 001f 	ands.w	r0, r0, #31
  40a846:	f000 81f6 	beq.w	40ac36 <_dtoa_r+0x88e>
  40a84a:	f1c0 0320 	rsb	r3, r0, #32
  40a84e:	2b04      	cmp	r3, #4
  40a850:	f340 84ca 	ble.w	40b1e8 <_dtoa_r+0xe40>
  40a854:	9b05      	ldr	r3, [sp, #20]
  40a856:	f1c0 001c 	rsb	r0, r0, #28
  40a85a:	4403      	add	r3, r0
  40a85c:	9305      	str	r3, [sp, #20]
  40a85e:	4613      	mov	r3, r2
  40a860:	4403      	add	r3, r0
  40a862:	4405      	add	r5, r0
  40a864:	9302      	str	r3, [sp, #8]
  40a866:	9b05      	ldr	r3, [sp, #20]
  40a868:	2b00      	cmp	r3, #0
  40a86a:	dd05      	ble.n	40a878 <_dtoa_r+0x4d0>
  40a86c:	4621      	mov	r1, r4
  40a86e:	461a      	mov	r2, r3
  40a870:	4648      	mov	r0, r9
  40a872:	f001 ff9f 	bl	40c7b4 <__lshift>
  40a876:	4604      	mov	r4, r0
  40a878:	9b02      	ldr	r3, [sp, #8]
  40a87a:	2b00      	cmp	r3, #0
  40a87c:	dd05      	ble.n	40a88a <_dtoa_r+0x4e2>
  40a87e:	4641      	mov	r1, r8
  40a880:	461a      	mov	r2, r3
  40a882:	4648      	mov	r0, r9
  40a884:	f001 ff96 	bl	40c7b4 <__lshift>
  40a888:	4680      	mov	r8, r0
  40a88a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a88c:	2b00      	cmp	r3, #0
  40a88e:	f040 827c 	bne.w	40ad8a <_dtoa_r+0x9e2>
  40a892:	9b06      	ldr	r3, [sp, #24]
  40a894:	2b00      	cmp	r3, #0
  40a896:	f340 8295 	ble.w	40adc4 <_dtoa_r+0xa1c>
  40a89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a89c:	2b00      	cmp	r3, #0
  40a89e:	f040 81f5 	bne.w	40ac8c <_dtoa_r+0x8e4>
  40a8a2:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40a8a6:	9f06      	ldr	r7, [sp, #24]
  40a8a8:	465d      	mov	r5, fp
  40a8aa:	e002      	b.n	40a8b2 <_dtoa_r+0x50a>
  40a8ac:	f001 fe02 	bl	40c4b4 <__multadd>
  40a8b0:	4604      	mov	r4, r0
  40a8b2:	4641      	mov	r1, r8
  40a8b4:	4620      	mov	r0, r4
  40a8b6:	f7ff fce3 	bl	40a280 <quorem>
  40a8ba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40a8be:	f805 ab01 	strb.w	sl, [r5], #1
  40a8c2:	ebcb 0305 	rsb	r3, fp, r5
  40a8c6:	42bb      	cmp	r3, r7
  40a8c8:	f04f 020a 	mov.w	r2, #10
  40a8cc:	f04f 0300 	mov.w	r3, #0
  40a8d0:	4621      	mov	r1, r4
  40a8d2:	4648      	mov	r0, r9
  40a8d4:	dbea      	blt.n	40a8ac <_dtoa_r+0x504>
  40a8d6:	9b07      	ldr	r3, [sp, #28]
  40a8d8:	9a06      	ldr	r2, [sp, #24]
  40a8da:	2a01      	cmp	r2, #1
  40a8dc:	bfac      	ite	ge
  40a8de:	189b      	addge	r3, r3, r2
  40a8e0:	3301      	addlt	r3, #1
  40a8e2:	461d      	mov	r5, r3
  40a8e4:	f04f 0b00 	mov.w	fp, #0
  40a8e8:	4621      	mov	r1, r4
  40a8ea:	2201      	movs	r2, #1
  40a8ec:	4648      	mov	r0, r9
  40a8ee:	f001 ff61 	bl	40c7b4 <__lshift>
  40a8f2:	4641      	mov	r1, r8
  40a8f4:	9008      	str	r0, [sp, #32]
  40a8f6:	f001 ffb5 	bl	40c864 <__mcmp>
  40a8fa:	2800      	cmp	r0, #0
  40a8fc:	f340 830d 	ble.w	40af1a <_dtoa_r+0xb72>
  40a900:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40a904:	9907      	ldr	r1, [sp, #28]
  40a906:	1e6b      	subs	r3, r5, #1
  40a908:	e004      	b.n	40a914 <_dtoa_r+0x56c>
  40a90a:	428b      	cmp	r3, r1
  40a90c:	f000 8278 	beq.w	40ae00 <_dtoa_r+0xa58>
  40a910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40a914:	2a39      	cmp	r2, #57	; 0x39
  40a916:	f103 0501 	add.w	r5, r3, #1
  40a91a:	d0f6      	beq.n	40a90a <_dtoa_r+0x562>
  40a91c:	3201      	adds	r2, #1
  40a91e:	701a      	strb	r2, [r3, #0]
  40a920:	4641      	mov	r1, r8
  40a922:	4648      	mov	r0, r9
  40a924:	f001 fdbc 	bl	40c4a0 <_Bfree>
  40a928:	2e00      	cmp	r6, #0
  40a92a:	f43f af08 	beq.w	40a73e <_dtoa_r+0x396>
  40a92e:	f1bb 0f00 	cmp.w	fp, #0
  40a932:	d005      	beq.n	40a940 <_dtoa_r+0x598>
  40a934:	45b3      	cmp	fp, r6
  40a936:	d003      	beq.n	40a940 <_dtoa_r+0x598>
  40a938:	4659      	mov	r1, fp
  40a93a:	4648      	mov	r0, r9
  40a93c:	f001 fdb0 	bl	40c4a0 <_Bfree>
  40a940:	4631      	mov	r1, r6
  40a942:	4648      	mov	r0, r9
  40a944:	f001 fdac 	bl	40c4a0 <_Bfree>
  40a948:	e6f9      	b.n	40a73e <_dtoa_r+0x396>
  40a94a:	2301      	movs	r3, #1
  40a94c:	930c      	str	r3, [sp, #48]	; 0x30
  40a94e:	e5e3      	b.n	40a518 <_dtoa_r+0x170>
  40a950:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40a954:	4640      	mov	r0, r8
  40a956:	f002 fe6f 	bl	40d638 <__aeabi_i2d>
  40a95a:	4602      	mov	r2, r0
  40a95c:	460b      	mov	r3, r1
  40a95e:	4630      	mov	r0, r6
  40a960:	4639      	mov	r1, r7
  40a962:	f003 f937 	bl	40dbd4 <__aeabi_dcmpeq>
  40a966:	2800      	cmp	r0, #0
  40a968:	f47f adc2 	bne.w	40a4f0 <_dtoa_r+0x148>
  40a96c:	f108 33ff 	add.w	r3, r8, #4294967295
  40a970:	9304      	str	r3, [sp, #16]
  40a972:	e5bd      	b.n	40a4f0 <_dtoa_r+0x148>
  40a974:	9a05      	ldr	r2, [sp, #20]
  40a976:	9b04      	ldr	r3, [sp, #16]
  40a978:	1ad2      	subs	r2, r2, r3
  40a97a:	425b      	negs	r3, r3
  40a97c:	930a      	str	r3, [sp, #40]	; 0x28
  40a97e:	2300      	movs	r3, #0
  40a980:	9205      	str	r2, [sp, #20]
  40a982:	930b      	str	r3, [sp, #44]	; 0x2c
  40a984:	e5da      	b.n	40a53c <_dtoa_r+0x194>
  40a986:	425b      	negs	r3, r3
  40a988:	9305      	str	r3, [sp, #20]
  40a98a:	2300      	movs	r3, #0
  40a98c:	9302      	str	r3, [sp, #8]
  40a98e:	e5ca      	b.n	40a526 <_dtoa_r+0x17e>
  40a990:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40a992:	9d05      	ldr	r5, [sp, #20]
  40a994:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40a996:	e705      	b.n	40a7a4 <_dtoa_r+0x3fc>
  40a998:	f1c3 0820 	rsb	r8, r3, #32
  40a99c:	fa0a f008 	lsl.w	r0, sl, r8
  40a9a0:	e573      	b.n	40a48a <_dtoa_r+0xe2>
  40a9a2:	900c      	str	r0, [sp, #48]	; 0x30
  40a9a4:	e5b8      	b.n	40a518 <_dtoa_r+0x170>
  40a9a6:	bf00      	nop
  40a9a8:	40240000 	.word	0x40240000
  40a9ac:	2300      	movs	r3, #0
  40a9ae:	9309      	str	r3, [sp, #36]	; 0x24
  40a9b0:	9b04      	ldr	r3, [sp, #16]
  40a9b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40a9b4:	4413      	add	r3, r2
  40a9b6:	930d      	str	r3, [sp, #52]	; 0x34
  40a9b8:	3301      	adds	r3, #1
  40a9ba:	2b00      	cmp	r3, #0
  40a9bc:	9306      	str	r3, [sp, #24]
  40a9be:	f340 8283 	ble.w	40aec8 <_dtoa_r+0xb20>
  40a9c2:	9c06      	ldr	r4, [sp, #24]
  40a9c4:	4626      	mov	r6, r4
  40a9c6:	2100      	movs	r1, #0
  40a9c8:	2e17      	cmp	r6, #23
  40a9ca:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40a9ce:	d90b      	bls.n	40a9e8 <_dtoa_r+0x640>
  40a9d0:	2201      	movs	r2, #1
  40a9d2:	2304      	movs	r3, #4
  40a9d4:	005b      	lsls	r3, r3, #1
  40a9d6:	f103 0014 	add.w	r0, r3, #20
  40a9da:	42b0      	cmp	r0, r6
  40a9dc:	4611      	mov	r1, r2
  40a9de:	f102 0201 	add.w	r2, r2, #1
  40a9e2:	d9f7      	bls.n	40a9d4 <_dtoa_r+0x62c>
  40a9e4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40a9e8:	4648      	mov	r0, r9
  40a9ea:	f001 fd33 	bl	40c454 <_Balloc>
  40a9ee:	2c0e      	cmp	r4, #14
  40a9f0:	9007      	str	r0, [sp, #28]
  40a9f2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40a9f6:	f63f ade0 	bhi.w	40a5ba <_dtoa_r+0x212>
  40a9fa:	2d00      	cmp	r5, #0
  40a9fc:	f43f addd 	beq.w	40a5ba <_dtoa_r+0x212>
  40aa00:	9904      	ldr	r1, [sp, #16]
  40aa02:	4657      	mov	r7, sl
  40aa04:	46d8      	mov	r8, fp
  40aa06:	2900      	cmp	r1, #0
  40aa08:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40aa0c:	f340 8292 	ble.w	40af34 <_dtoa_r+0xb8c>
  40aa10:	4b91      	ldr	r3, [pc, #580]	; (40ac58 <_dtoa_r+0x8b0>)
  40aa12:	f001 020f 	and.w	r2, r1, #15
  40aa16:	110e      	asrs	r6, r1, #4
  40aa18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40aa1c:	06f0      	lsls	r0, r6, #27
  40aa1e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40aa22:	f140 824c 	bpl.w	40aebe <_dtoa_r+0xb16>
  40aa26:	4b8d      	ldr	r3, [pc, #564]	; (40ac5c <_dtoa_r+0x8b4>)
  40aa28:	4650      	mov	r0, sl
  40aa2a:	4659      	mov	r1, fp
  40aa2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40aa30:	f002 ff92 	bl	40d958 <__aeabi_ddiv>
  40aa34:	f006 060f 	and.w	r6, r6, #15
  40aa38:	4682      	mov	sl, r0
  40aa3a:	468b      	mov	fp, r1
  40aa3c:	f04f 0803 	mov.w	r8, #3
  40aa40:	b186      	cbz	r6, 40aa64 <_dtoa_r+0x6bc>
  40aa42:	4f86      	ldr	r7, [pc, #536]	; (40ac5c <_dtoa_r+0x8b4>)
  40aa44:	07f1      	lsls	r1, r6, #31
  40aa46:	d509      	bpl.n	40aa5c <_dtoa_r+0x6b4>
  40aa48:	4620      	mov	r0, r4
  40aa4a:	4629      	mov	r1, r5
  40aa4c:	e9d7 2300 	ldrd	r2, r3, [r7]
  40aa50:	f002 fe58 	bl	40d704 <__aeabi_dmul>
  40aa54:	f108 0801 	add.w	r8, r8, #1
  40aa58:	4604      	mov	r4, r0
  40aa5a:	460d      	mov	r5, r1
  40aa5c:	1076      	asrs	r6, r6, #1
  40aa5e:	f107 0708 	add.w	r7, r7, #8
  40aa62:	d1ef      	bne.n	40aa44 <_dtoa_r+0x69c>
  40aa64:	4622      	mov	r2, r4
  40aa66:	462b      	mov	r3, r5
  40aa68:	4650      	mov	r0, sl
  40aa6a:	4659      	mov	r1, fp
  40aa6c:	f002 ff74 	bl	40d958 <__aeabi_ddiv>
  40aa70:	4606      	mov	r6, r0
  40aa72:	460f      	mov	r7, r1
  40aa74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40aa76:	b143      	cbz	r3, 40aa8a <_dtoa_r+0x6e2>
  40aa78:	2200      	movs	r2, #0
  40aa7a:	4b79      	ldr	r3, [pc, #484]	; (40ac60 <_dtoa_r+0x8b8>)
  40aa7c:	4630      	mov	r0, r6
  40aa7e:	4639      	mov	r1, r7
  40aa80:	f003 f8b2 	bl	40dbe8 <__aeabi_dcmplt>
  40aa84:	2800      	cmp	r0, #0
  40aa86:	f040 8320 	bne.w	40b0ca <_dtoa_r+0xd22>
  40aa8a:	4640      	mov	r0, r8
  40aa8c:	f002 fdd4 	bl	40d638 <__aeabi_i2d>
  40aa90:	4632      	mov	r2, r6
  40aa92:	463b      	mov	r3, r7
  40aa94:	f002 fe36 	bl	40d704 <__aeabi_dmul>
  40aa98:	4b72      	ldr	r3, [pc, #456]	; (40ac64 <_dtoa_r+0x8bc>)
  40aa9a:	2200      	movs	r2, #0
  40aa9c:	f002 fc80 	bl	40d3a0 <__adddf3>
  40aaa0:	9b06      	ldr	r3, [sp, #24]
  40aaa2:	4604      	mov	r4, r0
  40aaa4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40aaa8:	2b00      	cmp	r3, #0
  40aaaa:	f000 81df 	beq.w	40ae6c <_dtoa_r+0xac4>
  40aaae:	9b04      	ldr	r3, [sp, #16]
  40aab0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40aab4:	9311      	str	r3, [sp, #68]	; 0x44
  40aab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aab8:	2b00      	cmp	r3, #0
  40aaba:	f000 8297 	beq.w	40afec <_dtoa_r+0xc44>
  40aabe:	4b66      	ldr	r3, [pc, #408]	; (40ac58 <_dtoa_r+0x8b0>)
  40aac0:	4969      	ldr	r1, [pc, #420]	; (40ac68 <_dtoa_r+0x8c0>)
  40aac2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40aac6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40aaca:	2000      	movs	r0, #0
  40aacc:	f002 ff44 	bl	40d958 <__aeabi_ddiv>
  40aad0:	4622      	mov	r2, r4
  40aad2:	462b      	mov	r3, r5
  40aad4:	f002 fc62 	bl	40d39c <__aeabi_dsub>
  40aad8:	4682      	mov	sl, r0
  40aada:	468b      	mov	fp, r1
  40aadc:	4630      	mov	r0, r6
  40aade:	4639      	mov	r1, r7
  40aae0:	f003 f8c0 	bl	40dc64 <__aeabi_d2iz>
  40aae4:	4604      	mov	r4, r0
  40aae6:	f002 fda7 	bl	40d638 <__aeabi_i2d>
  40aaea:	4602      	mov	r2, r0
  40aaec:	460b      	mov	r3, r1
  40aaee:	4630      	mov	r0, r6
  40aaf0:	4639      	mov	r1, r7
  40aaf2:	f002 fc53 	bl	40d39c <__aeabi_dsub>
  40aaf6:	3430      	adds	r4, #48	; 0x30
  40aaf8:	9d07      	ldr	r5, [sp, #28]
  40aafa:	b2e4      	uxtb	r4, r4
  40aafc:	4606      	mov	r6, r0
  40aafe:	460f      	mov	r7, r1
  40ab00:	702c      	strb	r4, [r5, #0]
  40ab02:	4602      	mov	r2, r0
  40ab04:	460b      	mov	r3, r1
  40ab06:	4650      	mov	r0, sl
  40ab08:	4659      	mov	r1, fp
  40ab0a:	3501      	adds	r5, #1
  40ab0c:	f003 f88a 	bl	40dc24 <__aeabi_dcmpgt>
  40ab10:	2800      	cmp	r0, #0
  40ab12:	d14c      	bne.n	40abae <_dtoa_r+0x806>
  40ab14:	4632      	mov	r2, r6
  40ab16:	463b      	mov	r3, r7
  40ab18:	2000      	movs	r0, #0
  40ab1a:	4951      	ldr	r1, [pc, #324]	; (40ac60 <_dtoa_r+0x8b8>)
  40ab1c:	f002 fc3e 	bl	40d39c <__aeabi_dsub>
  40ab20:	4602      	mov	r2, r0
  40ab22:	460b      	mov	r3, r1
  40ab24:	4650      	mov	r0, sl
  40ab26:	4659      	mov	r1, fp
  40ab28:	f003 f87c 	bl	40dc24 <__aeabi_dcmpgt>
  40ab2c:	2800      	cmp	r0, #0
  40ab2e:	f040 830d 	bne.w	40b14c <_dtoa_r+0xda4>
  40ab32:	f1b8 0f01 	cmp.w	r8, #1
  40ab36:	f340 81b3 	ble.w	40aea0 <_dtoa_r+0xaf8>
  40ab3a:	9b07      	ldr	r3, [sp, #28]
  40ab3c:	4498      	add	r8, r3
  40ab3e:	e00d      	b.n	40ab5c <_dtoa_r+0x7b4>
  40ab40:	2000      	movs	r0, #0
  40ab42:	4947      	ldr	r1, [pc, #284]	; (40ac60 <_dtoa_r+0x8b8>)
  40ab44:	f002 fc2a 	bl	40d39c <__aeabi_dsub>
  40ab48:	4652      	mov	r2, sl
  40ab4a:	465b      	mov	r3, fp
  40ab4c:	f003 f84c 	bl	40dbe8 <__aeabi_dcmplt>
  40ab50:	2800      	cmp	r0, #0
  40ab52:	f040 82fb 	bne.w	40b14c <_dtoa_r+0xda4>
  40ab56:	4545      	cmp	r5, r8
  40ab58:	f000 81a2 	beq.w	40aea0 <_dtoa_r+0xaf8>
  40ab5c:	4650      	mov	r0, sl
  40ab5e:	4659      	mov	r1, fp
  40ab60:	2200      	movs	r2, #0
  40ab62:	4b42      	ldr	r3, [pc, #264]	; (40ac6c <_dtoa_r+0x8c4>)
  40ab64:	f002 fdce 	bl	40d704 <__aeabi_dmul>
  40ab68:	2200      	movs	r2, #0
  40ab6a:	4b40      	ldr	r3, [pc, #256]	; (40ac6c <_dtoa_r+0x8c4>)
  40ab6c:	4682      	mov	sl, r0
  40ab6e:	468b      	mov	fp, r1
  40ab70:	4630      	mov	r0, r6
  40ab72:	4639      	mov	r1, r7
  40ab74:	f002 fdc6 	bl	40d704 <__aeabi_dmul>
  40ab78:	460f      	mov	r7, r1
  40ab7a:	4606      	mov	r6, r0
  40ab7c:	f003 f872 	bl	40dc64 <__aeabi_d2iz>
  40ab80:	4604      	mov	r4, r0
  40ab82:	f002 fd59 	bl	40d638 <__aeabi_i2d>
  40ab86:	4602      	mov	r2, r0
  40ab88:	460b      	mov	r3, r1
  40ab8a:	4630      	mov	r0, r6
  40ab8c:	4639      	mov	r1, r7
  40ab8e:	f002 fc05 	bl	40d39c <__aeabi_dsub>
  40ab92:	3430      	adds	r4, #48	; 0x30
  40ab94:	b2e4      	uxtb	r4, r4
  40ab96:	4652      	mov	r2, sl
  40ab98:	465b      	mov	r3, fp
  40ab9a:	f805 4b01 	strb.w	r4, [r5], #1
  40ab9e:	4606      	mov	r6, r0
  40aba0:	460f      	mov	r7, r1
  40aba2:	f003 f821 	bl	40dbe8 <__aeabi_dcmplt>
  40aba6:	4632      	mov	r2, r6
  40aba8:	463b      	mov	r3, r7
  40abaa:	2800      	cmp	r0, #0
  40abac:	d0c8      	beq.n	40ab40 <_dtoa_r+0x798>
  40abae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40abb0:	9304      	str	r3, [sp, #16]
  40abb2:	e5c4      	b.n	40a73e <_dtoa_r+0x396>
  40abb4:	2300      	movs	r3, #0
  40abb6:	9309      	str	r3, [sp, #36]	; 0x24
  40abb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40abba:	2b00      	cmp	r3, #0
  40abbc:	f340 8189 	ble.w	40aed2 <_dtoa_r+0xb2a>
  40abc0:	461e      	mov	r6, r3
  40abc2:	461c      	mov	r4, r3
  40abc4:	930d      	str	r3, [sp, #52]	; 0x34
  40abc6:	9306      	str	r3, [sp, #24]
  40abc8:	e6fd      	b.n	40a9c6 <_dtoa_r+0x61e>
  40abca:	2301      	movs	r3, #1
  40abcc:	9309      	str	r3, [sp, #36]	; 0x24
  40abce:	e7f3      	b.n	40abb8 <_dtoa_r+0x810>
  40abd0:	9408      	str	r4, [sp, #32]
  40abd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40abd4:	9908      	ldr	r1, [sp, #32]
  40abd6:	4648      	mov	r0, r9
  40abd8:	f001 fd9c 	bl	40c714 <__pow5mult>
  40abdc:	4604      	mov	r4, r0
  40abde:	e611      	b.n	40a804 <_dtoa_r+0x45c>
  40abe0:	9b06      	ldr	r3, [sp, #24]
  40abe2:	2b00      	cmp	r3, #0
  40abe4:	f73f acfc 	bgt.w	40a5e0 <_dtoa_r+0x238>
  40abe8:	f040 82da 	bne.w	40b1a0 <_dtoa_r+0xdf8>
  40abec:	2200      	movs	r2, #0
  40abee:	4b20      	ldr	r3, [pc, #128]	; (40ac70 <_dtoa_r+0x8c8>)
  40abf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40abf4:	f002 fd86 	bl	40d704 <__aeabi_dmul>
  40abf8:	4652      	mov	r2, sl
  40abfa:	465b      	mov	r3, fp
  40abfc:	f003 f808 	bl	40dc10 <__aeabi_dcmpge>
  40ac00:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40ac04:	4646      	mov	r6, r8
  40ac06:	2800      	cmp	r0, #0
  40ac08:	f000 80f2 	beq.w	40adf0 <_dtoa_r+0xa48>
  40ac0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ac0e:	9d07      	ldr	r5, [sp, #28]
  40ac10:	43db      	mvns	r3, r3
  40ac12:	9304      	str	r3, [sp, #16]
  40ac14:	4641      	mov	r1, r8
  40ac16:	4648      	mov	r0, r9
  40ac18:	f001 fc42 	bl	40c4a0 <_Bfree>
  40ac1c:	2e00      	cmp	r6, #0
  40ac1e:	f43f ad8e 	beq.w	40a73e <_dtoa_r+0x396>
  40ac22:	e68d      	b.n	40a940 <_dtoa_r+0x598>
  40ac24:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40ac26:	2a00      	cmp	r2, #0
  40ac28:	f000 8241 	beq.w	40b0ae <_dtoa_r+0xd06>
  40ac2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40ac30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40ac32:	9d05      	ldr	r5, [sp, #20]
  40ac34:	e5ab      	b.n	40a78e <_dtoa_r+0x3e6>
  40ac36:	201c      	movs	r0, #28
  40ac38:	9b05      	ldr	r3, [sp, #20]
  40ac3a:	4403      	add	r3, r0
  40ac3c:	9305      	str	r3, [sp, #20]
  40ac3e:	9b02      	ldr	r3, [sp, #8]
  40ac40:	4403      	add	r3, r0
  40ac42:	4405      	add	r5, r0
  40ac44:	9302      	str	r3, [sp, #8]
  40ac46:	e60e      	b.n	40a866 <_dtoa_r+0x4be>
  40ac48:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40ac4a:	2b01      	cmp	r3, #1
  40ac4c:	f340 8282 	ble.w	40b154 <_dtoa_r+0xdac>
  40ac50:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40ac52:	2001      	movs	r0, #1
  40ac54:	e5f3      	b.n	40a83e <_dtoa_r+0x496>
  40ac56:	bf00      	nop
  40ac58:	0040efa8 	.word	0x0040efa8
  40ac5c:	0040f070 	.word	0x0040f070
  40ac60:	3ff00000 	.word	0x3ff00000
  40ac64:	401c0000 	.word	0x401c0000
  40ac68:	3fe00000 	.word	0x3fe00000
  40ac6c:	40240000 	.word	0x40240000
  40ac70:	40140000 	.word	0x40140000
  40ac74:	4631      	mov	r1, r6
  40ac76:	2300      	movs	r3, #0
  40ac78:	220a      	movs	r2, #10
  40ac7a:	4648      	mov	r0, r9
  40ac7c:	f001 fc1a 	bl	40c4b4 <__multadd>
  40ac80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ac82:	2b00      	cmp	r3, #0
  40ac84:	4606      	mov	r6, r0
  40ac86:	f340 8297 	ble.w	40b1b8 <_dtoa_r+0xe10>
  40ac8a:	9306      	str	r3, [sp, #24]
  40ac8c:	2d00      	cmp	r5, #0
  40ac8e:	dd05      	ble.n	40ac9c <_dtoa_r+0x8f4>
  40ac90:	4631      	mov	r1, r6
  40ac92:	462a      	mov	r2, r5
  40ac94:	4648      	mov	r0, r9
  40ac96:	f001 fd8d 	bl	40c7b4 <__lshift>
  40ac9a:	4606      	mov	r6, r0
  40ac9c:	2f00      	cmp	r7, #0
  40ac9e:	f040 817c 	bne.w	40af9a <_dtoa_r+0xbf2>
  40aca2:	9605      	str	r6, [sp, #20]
  40aca4:	9b06      	ldr	r3, [sp, #24]
  40aca6:	9a07      	ldr	r2, [sp, #28]
  40aca8:	f8dd b014 	ldr.w	fp, [sp, #20]
  40acac:	3b01      	subs	r3, #1
  40acae:	18d3      	adds	r3, r2, r3
  40acb0:	9308      	str	r3, [sp, #32]
  40acb2:	f00a 0301 	and.w	r3, sl, #1
  40acb6:	9309      	str	r3, [sp, #36]	; 0x24
  40acb8:	4617      	mov	r7, r2
  40acba:	46c2      	mov	sl, r8
  40acbc:	4651      	mov	r1, sl
  40acbe:	4620      	mov	r0, r4
  40acc0:	f7ff fade 	bl	40a280 <quorem>
  40acc4:	4631      	mov	r1, r6
  40acc6:	4605      	mov	r5, r0
  40acc8:	4620      	mov	r0, r4
  40acca:	f001 fdcb 	bl	40c864 <__mcmp>
  40acce:	465a      	mov	r2, fp
  40acd0:	9002      	str	r0, [sp, #8]
  40acd2:	4651      	mov	r1, sl
  40acd4:	4648      	mov	r0, r9
  40acd6:	f001 fde5 	bl	40c8a4 <__mdiff>
  40acda:	68c2      	ldr	r2, [r0, #12]
  40acdc:	4680      	mov	r8, r0
  40acde:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40ace2:	2a00      	cmp	r2, #0
  40ace4:	d149      	bne.n	40ad7a <_dtoa_r+0x9d2>
  40ace6:	4601      	mov	r1, r0
  40ace8:	4620      	mov	r0, r4
  40acea:	9306      	str	r3, [sp, #24]
  40acec:	f001 fdba 	bl	40c864 <__mcmp>
  40acf0:	4641      	mov	r1, r8
  40acf2:	9005      	str	r0, [sp, #20]
  40acf4:	4648      	mov	r0, r9
  40acf6:	f001 fbd3 	bl	40c4a0 <_Bfree>
  40acfa:	9a05      	ldr	r2, [sp, #20]
  40acfc:	9b06      	ldr	r3, [sp, #24]
  40acfe:	b92a      	cbnz	r2, 40ad0c <_dtoa_r+0x964>
  40ad00:	9920      	ldr	r1, [sp, #128]	; 0x80
  40ad02:	b919      	cbnz	r1, 40ad0c <_dtoa_r+0x964>
  40ad04:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ad06:	2900      	cmp	r1, #0
  40ad08:	f000 8236 	beq.w	40b178 <_dtoa_r+0xdd0>
  40ad0c:	9902      	ldr	r1, [sp, #8]
  40ad0e:	2900      	cmp	r1, #0
  40ad10:	f2c0 80e4 	blt.w	40aedc <_dtoa_r+0xb34>
  40ad14:	d105      	bne.n	40ad22 <_dtoa_r+0x97a>
  40ad16:	9920      	ldr	r1, [sp, #128]	; 0x80
  40ad18:	b919      	cbnz	r1, 40ad22 <_dtoa_r+0x97a>
  40ad1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ad1c:	2900      	cmp	r1, #0
  40ad1e:	f000 80dd 	beq.w	40aedc <_dtoa_r+0xb34>
  40ad22:	2a00      	cmp	r2, #0
  40ad24:	f300 814d 	bgt.w	40afc2 <_dtoa_r+0xc1a>
  40ad28:	9a08      	ldr	r2, [sp, #32]
  40ad2a:	703b      	strb	r3, [r7, #0]
  40ad2c:	f107 0801 	add.w	r8, r7, #1
  40ad30:	4297      	cmp	r7, r2
  40ad32:	4645      	mov	r5, r8
  40ad34:	f000 8154 	beq.w	40afe0 <_dtoa_r+0xc38>
  40ad38:	4621      	mov	r1, r4
  40ad3a:	2300      	movs	r3, #0
  40ad3c:	220a      	movs	r2, #10
  40ad3e:	4648      	mov	r0, r9
  40ad40:	f001 fbb8 	bl	40c4b4 <__multadd>
  40ad44:	455e      	cmp	r6, fp
  40ad46:	4604      	mov	r4, r0
  40ad48:	4631      	mov	r1, r6
  40ad4a:	f04f 0300 	mov.w	r3, #0
  40ad4e:	f04f 020a 	mov.w	r2, #10
  40ad52:	4648      	mov	r0, r9
  40ad54:	d00b      	beq.n	40ad6e <_dtoa_r+0x9c6>
  40ad56:	f001 fbad 	bl	40c4b4 <__multadd>
  40ad5a:	4659      	mov	r1, fp
  40ad5c:	4606      	mov	r6, r0
  40ad5e:	2300      	movs	r3, #0
  40ad60:	220a      	movs	r2, #10
  40ad62:	4648      	mov	r0, r9
  40ad64:	f001 fba6 	bl	40c4b4 <__multadd>
  40ad68:	4647      	mov	r7, r8
  40ad6a:	4683      	mov	fp, r0
  40ad6c:	e7a6      	b.n	40acbc <_dtoa_r+0x914>
  40ad6e:	f001 fba1 	bl	40c4b4 <__multadd>
  40ad72:	4647      	mov	r7, r8
  40ad74:	4606      	mov	r6, r0
  40ad76:	4683      	mov	fp, r0
  40ad78:	e7a0      	b.n	40acbc <_dtoa_r+0x914>
  40ad7a:	4601      	mov	r1, r0
  40ad7c:	4648      	mov	r0, r9
  40ad7e:	9305      	str	r3, [sp, #20]
  40ad80:	f001 fb8e 	bl	40c4a0 <_Bfree>
  40ad84:	2201      	movs	r2, #1
  40ad86:	9b05      	ldr	r3, [sp, #20]
  40ad88:	e7c0      	b.n	40ad0c <_dtoa_r+0x964>
  40ad8a:	4641      	mov	r1, r8
  40ad8c:	4620      	mov	r0, r4
  40ad8e:	f001 fd69 	bl	40c864 <__mcmp>
  40ad92:	2800      	cmp	r0, #0
  40ad94:	f6bf ad7d 	bge.w	40a892 <_dtoa_r+0x4ea>
  40ad98:	4621      	mov	r1, r4
  40ad9a:	9c04      	ldr	r4, [sp, #16]
  40ad9c:	2300      	movs	r3, #0
  40ad9e:	3c01      	subs	r4, #1
  40ada0:	220a      	movs	r2, #10
  40ada2:	4648      	mov	r0, r9
  40ada4:	9404      	str	r4, [sp, #16]
  40ada6:	f001 fb85 	bl	40c4b4 <__multadd>
  40adaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40adac:	4604      	mov	r4, r0
  40adae:	2b00      	cmp	r3, #0
  40adb0:	f47f af60 	bne.w	40ac74 <_dtoa_r+0x8cc>
  40adb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40adb6:	2b00      	cmp	r3, #0
  40adb8:	f340 81f6 	ble.w	40b1a8 <_dtoa_r+0xe00>
  40adbc:	9306      	str	r3, [sp, #24]
  40adbe:	e570      	b.n	40a8a2 <_dtoa_r+0x4fa>
  40adc0:	9c08      	ldr	r4, [sp, #32]
  40adc2:	e51f      	b.n	40a804 <_dtoa_r+0x45c>
  40adc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40adc6:	2b02      	cmp	r3, #2
  40adc8:	f77f ad67 	ble.w	40a89a <_dtoa_r+0x4f2>
  40adcc:	9b06      	ldr	r3, [sp, #24]
  40adce:	2b00      	cmp	r3, #0
  40add0:	f040 8179 	bne.w	40b0c6 <_dtoa_r+0xd1e>
  40add4:	4641      	mov	r1, r8
  40add6:	2205      	movs	r2, #5
  40add8:	4648      	mov	r0, r9
  40adda:	f001 fb6b 	bl	40c4b4 <__multadd>
  40adde:	4601      	mov	r1, r0
  40ade0:	4680      	mov	r8, r0
  40ade2:	4620      	mov	r0, r4
  40ade4:	f001 fd3e 	bl	40c864 <__mcmp>
  40ade8:	2800      	cmp	r0, #0
  40adea:	9408      	str	r4, [sp, #32]
  40adec:	f77f af0e 	ble.w	40ac0c <_dtoa_r+0x864>
  40adf0:	9a04      	ldr	r2, [sp, #16]
  40adf2:	9907      	ldr	r1, [sp, #28]
  40adf4:	2331      	movs	r3, #49	; 0x31
  40adf6:	3201      	adds	r2, #1
  40adf8:	9204      	str	r2, [sp, #16]
  40adfa:	700b      	strb	r3, [r1, #0]
  40adfc:	1c4d      	adds	r5, r1, #1
  40adfe:	e709      	b.n	40ac14 <_dtoa_r+0x86c>
  40ae00:	9a04      	ldr	r2, [sp, #16]
  40ae02:	3201      	adds	r2, #1
  40ae04:	9204      	str	r2, [sp, #16]
  40ae06:	9a07      	ldr	r2, [sp, #28]
  40ae08:	2331      	movs	r3, #49	; 0x31
  40ae0a:	7013      	strb	r3, [r2, #0]
  40ae0c:	e588      	b.n	40a920 <_dtoa_r+0x578>
  40ae0e:	2301      	movs	r3, #1
  40ae10:	9309      	str	r3, [sp, #36]	; 0x24
  40ae12:	e5cd      	b.n	40a9b0 <_dtoa_r+0x608>
  40ae14:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40ae18:	e491      	b.n	40a73e <_dtoa_r+0x396>
  40ae1a:	f1ba 0f00 	cmp.w	sl, #0
  40ae1e:	f47f ad04 	bne.w	40a82a <_dtoa_r+0x482>
  40ae22:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40ae26:	2b00      	cmp	r3, #0
  40ae28:	f040 813f 	bne.w	40b0aa <_dtoa_r+0xd02>
  40ae2c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40ae30:	0d3f      	lsrs	r7, r7, #20
  40ae32:	053f      	lsls	r7, r7, #20
  40ae34:	b137      	cbz	r7, 40ae44 <_dtoa_r+0xa9c>
  40ae36:	9b05      	ldr	r3, [sp, #20]
  40ae38:	3301      	adds	r3, #1
  40ae3a:	9305      	str	r3, [sp, #20]
  40ae3c:	9b02      	ldr	r3, [sp, #8]
  40ae3e:	3301      	adds	r3, #1
  40ae40:	9302      	str	r3, [sp, #8]
  40ae42:	2701      	movs	r7, #1
  40ae44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ae46:	2001      	movs	r0, #1
  40ae48:	2b00      	cmp	r3, #0
  40ae4a:	f43f acf8 	beq.w	40a83e <_dtoa_r+0x496>
  40ae4e:	e4ed      	b.n	40a82c <_dtoa_r+0x484>
  40ae50:	4640      	mov	r0, r8
  40ae52:	f002 fbf1 	bl	40d638 <__aeabi_i2d>
  40ae56:	4632      	mov	r2, r6
  40ae58:	463b      	mov	r3, r7
  40ae5a:	f002 fc53 	bl	40d704 <__aeabi_dmul>
  40ae5e:	2200      	movs	r2, #0
  40ae60:	4bbf      	ldr	r3, [pc, #764]	; (40b160 <_dtoa_r+0xdb8>)
  40ae62:	f002 fa9d 	bl	40d3a0 <__adddf3>
  40ae66:	4604      	mov	r4, r0
  40ae68:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40ae6c:	4630      	mov	r0, r6
  40ae6e:	4639      	mov	r1, r7
  40ae70:	2200      	movs	r2, #0
  40ae72:	4bbc      	ldr	r3, [pc, #752]	; (40b164 <_dtoa_r+0xdbc>)
  40ae74:	f002 fa92 	bl	40d39c <__aeabi_dsub>
  40ae78:	4622      	mov	r2, r4
  40ae7a:	462b      	mov	r3, r5
  40ae7c:	4606      	mov	r6, r0
  40ae7e:	460f      	mov	r7, r1
  40ae80:	f002 fed0 	bl	40dc24 <__aeabi_dcmpgt>
  40ae84:	4680      	mov	r8, r0
  40ae86:	2800      	cmp	r0, #0
  40ae88:	f040 8105 	bne.w	40b096 <_dtoa_r+0xcee>
  40ae8c:	4622      	mov	r2, r4
  40ae8e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40ae92:	4630      	mov	r0, r6
  40ae94:	4639      	mov	r1, r7
  40ae96:	f002 fea7 	bl	40dbe8 <__aeabi_dcmplt>
  40ae9a:	b108      	cbz	r0, 40aea0 <_dtoa_r+0xaf8>
  40ae9c:	4646      	mov	r6, r8
  40ae9e:	e6b5      	b.n	40ac0c <_dtoa_r+0x864>
  40aea0:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40aea4:	f7ff bb89 	b.w	40a5ba <_dtoa_r+0x212>
  40aea8:	9807      	ldr	r0, [sp, #28]
  40aeaa:	f7ff baae 	b.w	40a40a <_dtoa_r+0x62>
  40aeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40aeb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40aeb2:	970a      	str	r7, [sp, #40]	; 0x28
  40aeb4:	1afb      	subs	r3, r7, r3
  40aeb6:	441a      	add	r2, r3
  40aeb8:	920b      	str	r2, [sp, #44]	; 0x2c
  40aeba:	2700      	movs	r7, #0
  40aebc:	e461      	b.n	40a782 <_dtoa_r+0x3da>
  40aebe:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40aec2:	f04f 0802 	mov.w	r8, #2
  40aec6:	e5bb      	b.n	40aa40 <_dtoa_r+0x698>
  40aec8:	461c      	mov	r4, r3
  40aeca:	2100      	movs	r1, #0
  40aecc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40aed0:	e58a      	b.n	40a9e8 <_dtoa_r+0x640>
  40aed2:	2401      	movs	r4, #1
  40aed4:	9421      	str	r4, [sp, #132]	; 0x84
  40aed6:	940d      	str	r4, [sp, #52]	; 0x34
  40aed8:	9406      	str	r4, [sp, #24]
  40aeda:	e7f6      	b.n	40aeca <_dtoa_r+0xb22>
  40aedc:	2a00      	cmp	r2, #0
  40aede:	46d0      	mov	r8, sl
  40aee0:	f8cd b014 	str.w	fp, [sp, #20]
  40aee4:	469a      	mov	sl, r3
  40aee6:	dd11      	ble.n	40af0c <_dtoa_r+0xb64>
  40aee8:	4621      	mov	r1, r4
  40aeea:	2201      	movs	r2, #1
  40aeec:	4648      	mov	r0, r9
  40aeee:	f001 fc61 	bl	40c7b4 <__lshift>
  40aef2:	4641      	mov	r1, r8
  40aef4:	4604      	mov	r4, r0
  40aef6:	f001 fcb5 	bl	40c864 <__mcmp>
  40aefa:	2800      	cmp	r0, #0
  40aefc:	f340 8149 	ble.w	40b192 <_dtoa_r+0xdea>
  40af00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40af04:	f000 8106 	beq.w	40b114 <_dtoa_r+0xd6c>
  40af08:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40af0c:	46b3      	mov	fp, r6
  40af0e:	f887 a000 	strb.w	sl, [r7]
  40af12:	1c7d      	adds	r5, r7, #1
  40af14:	9e05      	ldr	r6, [sp, #20]
  40af16:	9408      	str	r4, [sp, #32]
  40af18:	e502      	b.n	40a920 <_dtoa_r+0x578>
  40af1a:	d104      	bne.n	40af26 <_dtoa_r+0xb7e>
  40af1c:	f01a 0f01 	tst.w	sl, #1
  40af20:	d001      	beq.n	40af26 <_dtoa_r+0xb7e>
  40af22:	e4ed      	b.n	40a900 <_dtoa_r+0x558>
  40af24:	4615      	mov	r5, r2
  40af26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40af2a:	2b30      	cmp	r3, #48	; 0x30
  40af2c:	f105 32ff 	add.w	r2, r5, #4294967295
  40af30:	d0f8      	beq.n	40af24 <_dtoa_r+0xb7c>
  40af32:	e4f5      	b.n	40a920 <_dtoa_r+0x578>
  40af34:	9b04      	ldr	r3, [sp, #16]
  40af36:	425c      	negs	r4, r3
  40af38:	2c00      	cmp	r4, #0
  40af3a:	f000 80bf 	beq.w	40b0bc <_dtoa_r+0xd14>
  40af3e:	4b8a      	ldr	r3, [pc, #552]	; (40b168 <_dtoa_r+0xdc0>)
  40af40:	f004 020f 	and.w	r2, r4, #15
  40af44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40af48:	e9d3 2300 	ldrd	r2, r3, [r3]
  40af4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40af50:	f002 fbd8 	bl	40d704 <__aeabi_dmul>
  40af54:	1124      	asrs	r4, r4, #4
  40af56:	4606      	mov	r6, r0
  40af58:	460f      	mov	r7, r1
  40af5a:	f000 812a 	beq.w	40b1b2 <_dtoa_r+0xe0a>
  40af5e:	4d83      	ldr	r5, [pc, #524]	; (40b16c <_dtoa_r+0xdc4>)
  40af60:	f04f 0802 	mov.w	r8, #2
  40af64:	07e2      	lsls	r2, r4, #31
  40af66:	d509      	bpl.n	40af7c <_dtoa_r+0xbd4>
  40af68:	4630      	mov	r0, r6
  40af6a:	4639      	mov	r1, r7
  40af6c:	e9d5 2300 	ldrd	r2, r3, [r5]
  40af70:	f002 fbc8 	bl	40d704 <__aeabi_dmul>
  40af74:	f108 0801 	add.w	r8, r8, #1
  40af78:	4606      	mov	r6, r0
  40af7a:	460f      	mov	r7, r1
  40af7c:	1064      	asrs	r4, r4, #1
  40af7e:	f105 0508 	add.w	r5, r5, #8
  40af82:	d1ef      	bne.n	40af64 <_dtoa_r+0xbbc>
  40af84:	e576      	b.n	40aa74 <_dtoa_r+0x6cc>
  40af86:	9907      	ldr	r1, [sp, #28]
  40af88:	2230      	movs	r2, #48	; 0x30
  40af8a:	700a      	strb	r2, [r1, #0]
  40af8c:	9a04      	ldr	r2, [sp, #16]
  40af8e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40af92:	3201      	adds	r2, #1
  40af94:	9204      	str	r2, [sp, #16]
  40af96:	f7ff bbd0 	b.w	40a73a <_dtoa_r+0x392>
  40af9a:	6871      	ldr	r1, [r6, #4]
  40af9c:	4648      	mov	r0, r9
  40af9e:	f001 fa59 	bl	40c454 <_Balloc>
  40afa2:	6933      	ldr	r3, [r6, #16]
  40afa4:	1c9a      	adds	r2, r3, #2
  40afa6:	4605      	mov	r5, r0
  40afa8:	0092      	lsls	r2, r2, #2
  40afaa:	f106 010c 	add.w	r1, r6, #12
  40afae:	300c      	adds	r0, #12
  40afb0:	f001 f94e 	bl	40c250 <memcpy>
  40afb4:	4629      	mov	r1, r5
  40afb6:	2201      	movs	r2, #1
  40afb8:	4648      	mov	r0, r9
  40afba:	f001 fbfb 	bl	40c7b4 <__lshift>
  40afbe:	9005      	str	r0, [sp, #20]
  40afc0:	e670      	b.n	40aca4 <_dtoa_r+0x8fc>
  40afc2:	2b39      	cmp	r3, #57	; 0x39
  40afc4:	f8cd b014 	str.w	fp, [sp, #20]
  40afc8:	46d0      	mov	r8, sl
  40afca:	f000 80a3 	beq.w	40b114 <_dtoa_r+0xd6c>
  40afce:	f103 0a01 	add.w	sl, r3, #1
  40afd2:	46b3      	mov	fp, r6
  40afd4:	f887 a000 	strb.w	sl, [r7]
  40afd8:	1c7d      	adds	r5, r7, #1
  40afda:	9e05      	ldr	r6, [sp, #20]
  40afdc:	9408      	str	r4, [sp, #32]
  40afde:	e49f      	b.n	40a920 <_dtoa_r+0x578>
  40afe0:	465a      	mov	r2, fp
  40afe2:	46d0      	mov	r8, sl
  40afe4:	46b3      	mov	fp, r6
  40afe6:	469a      	mov	sl, r3
  40afe8:	4616      	mov	r6, r2
  40afea:	e47d      	b.n	40a8e8 <_dtoa_r+0x540>
  40afec:	495e      	ldr	r1, [pc, #376]	; (40b168 <_dtoa_r+0xdc0>)
  40afee:	f108 3aff 	add.w	sl, r8, #4294967295
  40aff2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40aff6:	4622      	mov	r2, r4
  40aff8:	462b      	mov	r3, r5
  40affa:	e9d1 0100 	ldrd	r0, r1, [r1]
  40affe:	f002 fb81 	bl	40d704 <__aeabi_dmul>
  40b002:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40b006:	4639      	mov	r1, r7
  40b008:	4630      	mov	r0, r6
  40b00a:	f002 fe2b 	bl	40dc64 <__aeabi_d2iz>
  40b00e:	4604      	mov	r4, r0
  40b010:	f002 fb12 	bl	40d638 <__aeabi_i2d>
  40b014:	4602      	mov	r2, r0
  40b016:	460b      	mov	r3, r1
  40b018:	4630      	mov	r0, r6
  40b01a:	4639      	mov	r1, r7
  40b01c:	f002 f9be 	bl	40d39c <__aeabi_dsub>
  40b020:	9a07      	ldr	r2, [sp, #28]
  40b022:	3430      	adds	r4, #48	; 0x30
  40b024:	f1b8 0f01 	cmp.w	r8, #1
  40b028:	4606      	mov	r6, r0
  40b02a:	460f      	mov	r7, r1
  40b02c:	7014      	strb	r4, [r2, #0]
  40b02e:	f102 0501 	add.w	r5, r2, #1
  40b032:	d01e      	beq.n	40b072 <_dtoa_r+0xcca>
  40b034:	9b07      	ldr	r3, [sp, #28]
  40b036:	eb03 0b08 	add.w	fp, r3, r8
  40b03a:	46a8      	mov	r8, r5
  40b03c:	2200      	movs	r2, #0
  40b03e:	4b4c      	ldr	r3, [pc, #304]	; (40b170 <_dtoa_r+0xdc8>)
  40b040:	4630      	mov	r0, r6
  40b042:	4639      	mov	r1, r7
  40b044:	f002 fb5e 	bl	40d704 <__aeabi_dmul>
  40b048:	460f      	mov	r7, r1
  40b04a:	4606      	mov	r6, r0
  40b04c:	f002 fe0a 	bl	40dc64 <__aeabi_d2iz>
  40b050:	4604      	mov	r4, r0
  40b052:	f002 faf1 	bl	40d638 <__aeabi_i2d>
  40b056:	3430      	adds	r4, #48	; 0x30
  40b058:	4602      	mov	r2, r0
  40b05a:	460b      	mov	r3, r1
  40b05c:	4630      	mov	r0, r6
  40b05e:	4639      	mov	r1, r7
  40b060:	f002 f99c 	bl	40d39c <__aeabi_dsub>
  40b064:	f808 4b01 	strb.w	r4, [r8], #1
  40b068:	45c3      	cmp	fp, r8
  40b06a:	4606      	mov	r6, r0
  40b06c:	460f      	mov	r7, r1
  40b06e:	d1e5      	bne.n	40b03c <_dtoa_r+0xc94>
  40b070:	4455      	add	r5, sl
  40b072:	2200      	movs	r2, #0
  40b074:	4b3f      	ldr	r3, [pc, #252]	; (40b174 <_dtoa_r+0xdcc>)
  40b076:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40b07a:	f002 f991 	bl	40d3a0 <__adddf3>
  40b07e:	4632      	mov	r2, r6
  40b080:	463b      	mov	r3, r7
  40b082:	f002 fdb1 	bl	40dbe8 <__aeabi_dcmplt>
  40b086:	2800      	cmp	r0, #0
  40b088:	d04c      	beq.n	40b124 <_dtoa_r+0xd7c>
  40b08a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b08c:	9304      	str	r3, [sp, #16]
  40b08e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40b092:	f7ff bb46 	b.w	40a722 <_dtoa_r+0x37a>
  40b096:	f04f 0800 	mov.w	r8, #0
  40b09a:	4646      	mov	r6, r8
  40b09c:	e6a8      	b.n	40adf0 <_dtoa_r+0xa48>
  40b09e:	9b05      	ldr	r3, [sp, #20]
  40b0a0:	9a06      	ldr	r2, [sp, #24]
  40b0a2:	1a9d      	subs	r5, r3, r2
  40b0a4:	2300      	movs	r3, #0
  40b0a6:	f7ff bb72 	b.w	40a78e <_dtoa_r+0x3e6>
  40b0aa:	2700      	movs	r7, #0
  40b0ac:	e6ca      	b.n	40ae44 <_dtoa_r+0xa9c>
  40b0ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b0b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b0b2:	9d05      	ldr	r5, [sp, #20]
  40b0b4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40b0b8:	f7ff bb69 	b.w	40a78e <_dtoa_r+0x3e6>
  40b0bc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  40b0c0:	f04f 0802 	mov.w	r8, #2
  40b0c4:	e4d6      	b.n	40aa74 <_dtoa_r+0x6cc>
  40b0c6:	9408      	str	r4, [sp, #32]
  40b0c8:	e5a0      	b.n	40ac0c <_dtoa_r+0x864>
  40b0ca:	9b06      	ldr	r3, [sp, #24]
  40b0cc:	2b00      	cmp	r3, #0
  40b0ce:	f43f aebf 	beq.w	40ae50 <_dtoa_r+0xaa8>
  40b0d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b0d4:	2b00      	cmp	r3, #0
  40b0d6:	f77f aee3 	ble.w	40aea0 <_dtoa_r+0xaf8>
  40b0da:	2200      	movs	r2, #0
  40b0dc:	4b24      	ldr	r3, [pc, #144]	; (40b170 <_dtoa_r+0xdc8>)
  40b0de:	4630      	mov	r0, r6
  40b0e0:	4639      	mov	r1, r7
  40b0e2:	f002 fb0f 	bl	40d704 <__aeabi_dmul>
  40b0e6:	4606      	mov	r6, r0
  40b0e8:	460f      	mov	r7, r1
  40b0ea:	f108 0001 	add.w	r0, r8, #1
  40b0ee:	f002 faa3 	bl	40d638 <__aeabi_i2d>
  40b0f2:	4632      	mov	r2, r6
  40b0f4:	463b      	mov	r3, r7
  40b0f6:	f002 fb05 	bl	40d704 <__aeabi_dmul>
  40b0fa:	2200      	movs	r2, #0
  40b0fc:	4b18      	ldr	r3, [pc, #96]	; (40b160 <_dtoa_r+0xdb8>)
  40b0fe:	f002 f94f 	bl	40d3a0 <__adddf3>
  40b102:	9a04      	ldr	r2, [sp, #16]
  40b104:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b108:	3a01      	subs	r2, #1
  40b10a:	4604      	mov	r4, r0
  40b10c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40b110:	9211      	str	r2, [sp, #68]	; 0x44
  40b112:	e4d0      	b.n	40aab6 <_dtoa_r+0x70e>
  40b114:	2239      	movs	r2, #57	; 0x39
  40b116:	46b3      	mov	fp, r6
  40b118:	9408      	str	r4, [sp, #32]
  40b11a:	9e05      	ldr	r6, [sp, #20]
  40b11c:	703a      	strb	r2, [r7, #0]
  40b11e:	1c7d      	adds	r5, r7, #1
  40b120:	f7ff bbf0 	b.w	40a904 <_dtoa_r+0x55c>
  40b124:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40b128:	2000      	movs	r0, #0
  40b12a:	4912      	ldr	r1, [pc, #72]	; (40b174 <_dtoa_r+0xdcc>)
  40b12c:	f002 f936 	bl	40d39c <__aeabi_dsub>
  40b130:	4632      	mov	r2, r6
  40b132:	463b      	mov	r3, r7
  40b134:	f002 fd76 	bl	40dc24 <__aeabi_dcmpgt>
  40b138:	b908      	cbnz	r0, 40b13e <_dtoa_r+0xd96>
  40b13a:	e6b1      	b.n	40aea0 <_dtoa_r+0xaf8>
  40b13c:	4615      	mov	r5, r2
  40b13e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b142:	2b30      	cmp	r3, #48	; 0x30
  40b144:	f105 32ff 	add.w	r2, r5, #4294967295
  40b148:	d0f8      	beq.n	40b13c <_dtoa_r+0xd94>
  40b14a:	e530      	b.n	40abae <_dtoa_r+0x806>
  40b14c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b14e:	9304      	str	r3, [sp, #16]
  40b150:	f7ff bae7 	b.w	40a722 <_dtoa_r+0x37a>
  40b154:	f1ba 0f00 	cmp.w	sl, #0
  40b158:	f47f ad7a 	bne.w	40ac50 <_dtoa_r+0x8a8>
  40b15c:	e661      	b.n	40ae22 <_dtoa_r+0xa7a>
  40b15e:	bf00      	nop
  40b160:	401c0000 	.word	0x401c0000
  40b164:	40140000 	.word	0x40140000
  40b168:	0040efa8 	.word	0x0040efa8
  40b16c:	0040f070 	.word	0x0040f070
  40b170:	40240000 	.word	0x40240000
  40b174:	3fe00000 	.word	0x3fe00000
  40b178:	2b39      	cmp	r3, #57	; 0x39
  40b17a:	f8cd b014 	str.w	fp, [sp, #20]
  40b17e:	46d0      	mov	r8, sl
  40b180:	f8dd b008 	ldr.w	fp, [sp, #8]
  40b184:	469a      	mov	sl, r3
  40b186:	d0c5      	beq.n	40b114 <_dtoa_r+0xd6c>
  40b188:	f1bb 0f00 	cmp.w	fp, #0
  40b18c:	f73f aebc 	bgt.w	40af08 <_dtoa_r+0xb60>
  40b190:	e6bc      	b.n	40af0c <_dtoa_r+0xb64>
  40b192:	f47f aebb 	bne.w	40af0c <_dtoa_r+0xb64>
  40b196:	f01a 0f01 	tst.w	sl, #1
  40b19a:	f43f aeb7 	beq.w	40af0c <_dtoa_r+0xb64>
  40b19e:	e6af      	b.n	40af00 <_dtoa_r+0xb58>
  40b1a0:	f04f 0800 	mov.w	r8, #0
  40b1a4:	4646      	mov	r6, r8
  40b1a6:	e531      	b.n	40ac0c <_dtoa_r+0x864>
  40b1a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b1aa:	2b02      	cmp	r3, #2
  40b1ac:	dc21      	bgt.n	40b1f2 <_dtoa_r+0xe4a>
  40b1ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b1b0:	e604      	b.n	40adbc <_dtoa_r+0xa14>
  40b1b2:	f04f 0802 	mov.w	r8, #2
  40b1b6:	e45d      	b.n	40aa74 <_dtoa_r+0x6cc>
  40b1b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b1ba:	2b02      	cmp	r3, #2
  40b1bc:	dc19      	bgt.n	40b1f2 <_dtoa_r+0xe4a>
  40b1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b1c0:	e563      	b.n	40ac8a <_dtoa_r+0x8e2>
  40b1c2:	2400      	movs	r4, #0
  40b1c4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  40b1c8:	4621      	mov	r1, r4
  40b1ca:	4648      	mov	r0, r9
  40b1cc:	f001 f942 	bl	40c454 <_Balloc>
  40b1d0:	f04f 33ff 	mov.w	r3, #4294967295
  40b1d4:	9306      	str	r3, [sp, #24]
  40b1d6:	930d      	str	r3, [sp, #52]	; 0x34
  40b1d8:	2301      	movs	r3, #1
  40b1da:	9007      	str	r0, [sp, #28]
  40b1dc:	9421      	str	r4, [sp, #132]	; 0x84
  40b1de:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40b1e2:	9309      	str	r3, [sp, #36]	; 0x24
  40b1e4:	f7ff b9e9 	b.w	40a5ba <_dtoa_r+0x212>
  40b1e8:	f43f ab3d 	beq.w	40a866 <_dtoa_r+0x4be>
  40b1ec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40b1f0:	e522      	b.n	40ac38 <_dtoa_r+0x890>
  40b1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b1f4:	9306      	str	r3, [sp, #24]
  40b1f6:	e5e9      	b.n	40adcc <_dtoa_r+0xa24>
  40b1f8:	2501      	movs	r5, #1
  40b1fa:	f7ff b9a8 	b.w	40a54e <_dtoa_r+0x1a6>
  40b1fe:	bf00      	nop

0040b200 <__sflush_r>:
  40b200:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40b204:	b29a      	uxth	r2, r3
  40b206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b20a:	460d      	mov	r5, r1
  40b20c:	0711      	lsls	r1, r2, #28
  40b20e:	4680      	mov	r8, r0
  40b210:	d43c      	bmi.n	40b28c <__sflush_r+0x8c>
  40b212:	686a      	ldr	r2, [r5, #4]
  40b214:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40b218:	2a00      	cmp	r2, #0
  40b21a:	81ab      	strh	r3, [r5, #12]
  40b21c:	dd73      	ble.n	40b306 <__sflush_r+0x106>
  40b21e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40b220:	2c00      	cmp	r4, #0
  40b222:	d04b      	beq.n	40b2bc <__sflush_r+0xbc>
  40b224:	b29b      	uxth	r3, r3
  40b226:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40b22a:	2100      	movs	r1, #0
  40b22c:	b292      	uxth	r2, r2
  40b22e:	f8d8 6000 	ldr.w	r6, [r8]
  40b232:	f8c8 1000 	str.w	r1, [r8]
  40b236:	2a00      	cmp	r2, #0
  40b238:	d069      	beq.n	40b30e <__sflush_r+0x10e>
  40b23a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40b23c:	075f      	lsls	r7, r3, #29
  40b23e:	d505      	bpl.n	40b24c <__sflush_r+0x4c>
  40b240:	6869      	ldr	r1, [r5, #4]
  40b242:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40b244:	1a52      	subs	r2, r2, r1
  40b246:	b10b      	cbz	r3, 40b24c <__sflush_r+0x4c>
  40b248:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40b24a:	1ad2      	subs	r2, r2, r3
  40b24c:	2300      	movs	r3, #0
  40b24e:	69e9      	ldr	r1, [r5, #28]
  40b250:	4640      	mov	r0, r8
  40b252:	47a0      	blx	r4
  40b254:	1c44      	adds	r4, r0, #1
  40b256:	d03c      	beq.n	40b2d2 <__sflush_r+0xd2>
  40b258:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40b25c:	692a      	ldr	r2, [r5, #16]
  40b25e:	602a      	str	r2, [r5, #0]
  40b260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b264:	2200      	movs	r2, #0
  40b266:	81ab      	strh	r3, [r5, #12]
  40b268:	04db      	lsls	r3, r3, #19
  40b26a:	606a      	str	r2, [r5, #4]
  40b26c:	d449      	bmi.n	40b302 <__sflush_r+0x102>
  40b26e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40b270:	f8c8 6000 	str.w	r6, [r8]
  40b274:	b311      	cbz	r1, 40b2bc <__sflush_r+0xbc>
  40b276:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40b27a:	4299      	cmp	r1, r3
  40b27c:	d002      	beq.n	40b284 <__sflush_r+0x84>
  40b27e:	4640      	mov	r0, r8
  40b280:	f000 f9c0 	bl	40b604 <_free_r>
  40b284:	2000      	movs	r0, #0
  40b286:	6328      	str	r0, [r5, #48]	; 0x30
  40b288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b28c:	692e      	ldr	r6, [r5, #16]
  40b28e:	b1ae      	cbz	r6, 40b2bc <__sflush_r+0xbc>
  40b290:	682c      	ldr	r4, [r5, #0]
  40b292:	602e      	str	r6, [r5, #0]
  40b294:	0790      	lsls	r0, r2, #30
  40b296:	bf0c      	ite	eq
  40b298:	696b      	ldreq	r3, [r5, #20]
  40b29a:	2300      	movne	r3, #0
  40b29c:	1ba4      	subs	r4, r4, r6
  40b29e:	60ab      	str	r3, [r5, #8]
  40b2a0:	e00a      	b.n	40b2b8 <__sflush_r+0xb8>
  40b2a2:	4623      	mov	r3, r4
  40b2a4:	4632      	mov	r2, r6
  40b2a6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40b2a8:	69e9      	ldr	r1, [r5, #28]
  40b2aa:	4640      	mov	r0, r8
  40b2ac:	47b8      	blx	r7
  40b2ae:	2800      	cmp	r0, #0
  40b2b0:	eba4 0400 	sub.w	r4, r4, r0
  40b2b4:	4406      	add	r6, r0
  40b2b6:	dd04      	ble.n	40b2c2 <__sflush_r+0xc2>
  40b2b8:	2c00      	cmp	r4, #0
  40b2ba:	dcf2      	bgt.n	40b2a2 <__sflush_r+0xa2>
  40b2bc:	2000      	movs	r0, #0
  40b2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b2c2:	89ab      	ldrh	r3, [r5, #12]
  40b2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b2c8:	81ab      	strh	r3, [r5, #12]
  40b2ca:	f04f 30ff 	mov.w	r0, #4294967295
  40b2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b2d2:	f8d8 2000 	ldr.w	r2, [r8]
  40b2d6:	2a1d      	cmp	r2, #29
  40b2d8:	d8f3      	bhi.n	40b2c2 <__sflush_r+0xc2>
  40b2da:	4b1a      	ldr	r3, [pc, #104]	; (40b344 <__sflush_r+0x144>)
  40b2dc:	40d3      	lsrs	r3, r2
  40b2de:	f003 0301 	and.w	r3, r3, #1
  40b2e2:	f083 0401 	eor.w	r4, r3, #1
  40b2e6:	2b00      	cmp	r3, #0
  40b2e8:	d0eb      	beq.n	40b2c2 <__sflush_r+0xc2>
  40b2ea:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40b2ee:	6929      	ldr	r1, [r5, #16]
  40b2f0:	6029      	str	r1, [r5, #0]
  40b2f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b2f6:	04d9      	lsls	r1, r3, #19
  40b2f8:	606c      	str	r4, [r5, #4]
  40b2fa:	81ab      	strh	r3, [r5, #12]
  40b2fc:	d5b7      	bpl.n	40b26e <__sflush_r+0x6e>
  40b2fe:	2a00      	cmp	r2, #0
  40b300:	d1b5      	bne.n	40b26e <__sflush_r+0x6e>
  40b302:	6528      	str	r0, [r5, #80]	; 0x50
  40b304:	e7b3      	b.n	40b26e <__sflush_r+0x6e>
  40b306:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40b308:	2a00      	cmp	r2, #0
  40b30a:	dc88      	bgt.n	40b21e <__sflush_r+0x1e>
  40b30c:	e7d6      	b.n	40b2bc <__sflush_r+0xbc>
  40b30e:	2301      	movs	r3, #1
  40b310:	69e9      	ldr	r1, [r5, #28]
  40b312:	4640      	mov	r0, r8
  40b314:	47a0      	blx	r4
  40b316:	1c43      	adds	r3, r0, #1
  40b318:	4602      	mov	r2, r0
  40b31a:	d002      	beq.n	40b322 <__sflush_r+0x122>
  40b31c:	89ab      	ldrh	r3, [r5, #12]
  40b31e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40b320:	e78c      	b.n	40b23c <__sflush_r+0x3c>
  40b322:	f8d8 3000 	ldr.w	r3, [r8]
  40b326:	2b00      	cmp	r3, #0
  40b328:	d0f8      	beq.n	40b31c <__sflush_r+0x11c>
  40b32a:	2b1d      	cmp	r3, #29
  40b32c:	d001      	beq.n	40b332 <__sflush_r+0x132>
  40b32e:	2b16      	cmp	r3, #22
  40b330:	d102      	bne.n	40b338 <__sflush_r+0x138>
  40b332:	f8c8 6000 	str.w	r6, [r8]
  40b336:	e7c1      	b.n	40b2bc <__sflush_r+0xbc>
  40b338:	89ab      	ldrh	r3, [r5, #12]
  40b33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b33e:	81ab      	strh	r3, [r5, #12]
  40b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b344:	20400001 	.word	0x20400001

0040b348 <_fflush_r>:
  40b348:	b510      	push	{r4, lr}
  40b34a:	4604      	mov	r4, r0
  40b34c:	b082      	sub	sp, #8
  40b34e:	b108      	cbz	r0, 40b354 <_fflush_r+0xc>
  40b350:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b352:	b153      	cbz	r3, 40b36a <_fflush_r+0x22>
  40b354:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40b358:	b908      	cbnz	r0, 40b35e <_fflush_r+0x16>
  40b35a:	b002      	add	sp, #8
  40b35c:	bd10      	pop	{r4, pc}
  40b35e:	4620      	mov	r0, r4
  40b360:	b002      	add	sp, #8
  40b362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40b366:	f7ff bf4b 	b.w	40b200 <__sflush_r>
  40b36a:	9101      	str	r1, [sp, #4]
  40b36c:	f000 f880 	bl	40b470 <__sinit>
  40b370:	9901      	ldr	r1, [sp, #4]
  40b372:	e7ef      	b.n	40b354 <_fflush_r+0xc>

0040b374 <_cleanup_r>:
  40b374:	4901      	ldr	r1, [pc, #4]	; (40b37c <_cleanup_r+0x8>)
  40b376:	f000 bbaf 	b.w	40bad8 <_fwalk_reent>
  40b37a:	bf00      	nop
  40b37c:	0040d26d 	.word	0x0040d26d

0040b380 <__sinit.part.1>:
  40b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b384:	4b35      	ldr	r3, [pc, #212]	; (40b45c <__sinit.part.1+0xdc>)
  40b386:	6845      	ldr	r5, [r0, #4]
  40b388:	63c3      	str	r3, [r0, #60]	; 0x3c
  40b38a:	2400      	movs	r4, #0
  40b38c:	4607      	mov	r7, r0
  40b38e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40b392:	2304      	movs	r3, #4
  40b394:	2103      	movs	r1, #3
  40b396:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40b39a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40b39e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40b3a2:	b083      	sub	sp, #12
  40b3a4:	602c      	str	r4, [r5, #0]
  40b3a6:	606c      	str	r4, [r5, #4]
  40b3a8:	60ac      	str	r4, [r5, #8]
  40b3aa:	666c      	str	r4, [r5, #100]	; 0x64
  40b3ac:	81ec      	strh	r4, [r5, #14]
  40b3ae:	612c      	str	r4, [r5, #16]
  40b3b0:	616c      	str	r4, [r5, #20]
  40b3b2:	61ac      	str	r4, [r5, #24]
  40b3b4:	81ab      	strh	r3, [r5, #12]
  40b3b6:	4621      	mov	r1, r4
  40b3b8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b3bc:	2208      	movs	r2, #8
  40b3be:	f7fc fa91 	bl	4078e4 <memset>
  40b3c2:	68be      	ldr	r6, [r7, #8]
  40b3c4:	f8df b098 	ldr.w	fp, [pc, #152]	; 40b460 <__sinit.part.1+0xe0>
  40b3c8:	f8df a098 	ldr.w	sl, [pc, #152]	; 40b464 <__sinit.part.1+0xe4>
  40b3cc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40b468 <__sinit.part.1+0xe8>
  40b3d0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40b46c <__sinit.part.1+0xec>
  40b3d4:	f8c5 b020 	str.w	fp, [r5, #32]
  40b3d8:	2301      	movs	r3, #1
  40b3da:	2209      	movs	r2, #9
  40b3dc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b3e0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b3e4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b3e8:	61ed      	str	r5, [r5, #28]
  40b3ea:	4621      	mov	r1, r4
  40b3ec:	81f3      	strh	r3, [r6, #14]
  40b3ee:	81b2      	strh	r2, [r6, #12]
  40b3f0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40b3f4:	6034      	str	r4, [r6, #0]
  40b3f6:	6074      	str	r4, [r6, #4]
  40b3f8:	60b4      	str	r4, [r6, #8]
  40b3fa:	6674      	str	r4, [r6, #100]	; 0x64
  40b3fc:	6134      	str	r4, [r6, #16]
  40b3fe:	6174      	str	r4, [r6, #20]
  40b400:	61b4      	str	r4, [r6, #24]
  40b402:	2208      	movs	r2, #8
  40b404:	9301      	str	r3, [sp, #4]
  40b406:	f7fc fa6d 	bl	4078e4 <memset>
  40b40a:	68fd      	ldr	r5, [r7, #12]
  40b40c:	61f6      	str	r6, [r6, #28]
  40b40e:	2012      	movs	r0, #18
  40b410:	2202      	movs	r2, #2
  40b412:	f8c6 b020 	str.w	fp, [r6, #32]
  40b416:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40b41a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40b41e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40b422:	4621      	mov	r1, r4
  40b424:	81a8      	strh	r0, [r5, #12]
  40b426:	81ea      	strh	r2, [r5, #14]
  40b428:	602c      	str	r4, [r5, #0]
  40b42a:	606c      	str	r4, [r5, #4]
  40b42c:	60ac      	str	r4, [r5, #8]
  40b42e:	666c      	str	r4, [r5, #100]	; 0x64
  40b430:	612c      	str	r4, [r5, #16]
  40b432:	616c      	str	r4, [r5, #20]
  40b434:	61ac      	str	r4, [r5, #24]
  40b436:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b43a:	2208      	movs	r2, #8
  40b43c:	f7fc fa52 	bl	4078e4 <memset>
  40b440:	9b01      	ldr	r3, [sp, #4]
  40b442:	61ed      	str	r5, [r5, #28]
  40b444:	f8c5 b020 	str.w	fp, [r5, #32]
  40b448:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b44c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b450:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b454:	63bb      	str	r3, [r7, #56]	; 0x38
  40b456:	b003      	add	sp, #12
  40b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b45c:	0040b375 	.word	0x0040b375
  40b460:	0040ce75 	.word	0x0040ce75
  40b464:	0040ce99 	.word	0x0040ce99
  40b468:	0040ced5 	.word	0x0040ced5
  40b46c:	0040cef5 	.word	0x0040cef5

0040b470 <__sinit>:
  40b470:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b472:	b103      	cbz	r3, 40b476 <__sinit+0x6>
  40b474:	4770      	bx	lr
  40b476:	f7ff bf83 	b.w	40b380 <__sinit.part.1>
  40b47a:	bf00      	nop

0040b47c <__sfp_lock_acquire>:
  40b47c:	4770      	bx	lr
  40b47e:	bf00      	nop

0040b480 <__sfp_lock_release>:
  40b480:	4770      	bx	lr
  40b482:	bf00      	nop

0040b484 <__libc_fini_array>:
  40b484:	b538      	push	{r3, r4, r5, lr}
  40b486:	4d07      	ldr	r5, [pc, #28]	; (40b4a4 <__libc_fini_array+0x20>)
  40b488:	4c07      	ldr	r4, [pc, #28]	; (40b4a8 <__libc_fini_array+0x24>)
  40b48a:	1b2c      	subs	r4, r5, r4
  40b48c:	10a4      	asrs	r4, r4, #2
  40b48e:	d005      	beq.n	40b49c <__libc_fini_array+0x18>
  40b490:	3c01      	subs	r4, #1
  40b492:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40b496:	4798      	blx	r3
  40b498:	2c00      	cmp	r4, #0
  40b49a:	d1f9      	bne.n	40b490 <__libc_fini_array+0xc>
  40b49c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40b4a0:	f003 be0a 	b.w	40f0b8 <_fini>
  40b4a4:	0040f0c8 	.word	0x0040f0c8
  40b4a8:	0040f0c4 	.word	0x0040f0c4

0040b4ac <__fputwc>:
  40b4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b4b0:	b082      	sub	sp, #8
  40b4b2:	4680      	mov	r8, r0
  40b4b4:	4689      	mov	r9, r1
  40b4b6:	4614      	mov	r4, r2
  40b4b8:	f000 fb3c 	bl	40bb34 <__locale_mb_cur_max>
  40b4bc:	2801      	cmp	r0, #1
  40b4be:	d033      	beq.n	40b528 <__fputwc+0x7c>
  40b4c0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40b4c4:	464a      	mov	r2, r9
  40b4c6:	a901      	add	r1, sp, #4
  40b4c8:	4640      	mov	r0, r8
  40b4ca:	f001 fded 	bl	40d0a8 <_wcrtomb_r>
  40b4ce:	f1b0 3fff 	cmp.w	r0, #4294967295
  40b4d2:	4682      	mov	sl, r0
  40b4d4:	d021      	beq.n	40b51a <__fputwc+0x6e>
  40b4d6:	b388      	cbz	r0, 40b53c <__fputwc+0x90>
  40b4d8:	f89d 6004 	ldrb.w	r6, [sp, #4]
  40b4dc:	2500      	movs	r5, #0
  40b4de:	e008      	b.n	40b4f2 <__fputwc+0x46>
  40b4e0:	6823      	ldr	r3, [r4, #0]
  40b4e2:	1c5a      	adds	r2, r3, #1
  40b4e4:	6022      	str	r2, [r4, #0]
  40b4e6:	701e      	strb	r6, [r3, #0]
  40b4e8:	3501      	adds	r5, #1
  40b4ea:	4555      	cmp	r5, sl
  40b4ec:	d226      	bcs.n	40b53c <__fputwc+0x90>
  40b4ee:	ab01      	add	r3, sp, #4
  40b4f0:	5d5e      	ldrb	r6, [r3, r5]
  40b4f2:	68a3      	ldr	r3, [r4, #8]
  40b4f4:	3b01      	subs	r3, #1
  40b4f6:	2b00      	cmp	r3, #0
  40b4f8:	60a3      	str	r3, [r4, #8]
  40b4fa:	daf1      	bge.n	40b4e0 <__fputwc+0x34>
  40b4fc:	69a7      	ldr	r7, [r4, #24]
  40b4fe:	42bb      	cmp	r3, r7
  40b500:	4631      	mov	r1, r6
  40b502:	4622      	mov	r2, r4
  40b504:	4640      	mov	r0, r8
  40b506:	db01      	blt.n	40b50c <__fputwc+0x60>
  40b508:	2e0a      	cmp	r6, #10
  40b50a:	d1e9      	bne.n	40b4e0 <__fputwc+0x34>
  40b50c:	f001 fd76 	bl	40cffc <__swbuf_r>
  40b510:	1c43      	adds	r3, r0, #1
  40b512:	d1e9      	bne.n	40b4e8 <__fputwc+0x3c>
  40b514:	b002      	add	sp, #8
  40b516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b51a:	89a3      	ldrh	r3, [r4, #12]
  40b51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b520:	81a3      	strh	r3, [r4, #12]
  40b522:	b002      	add	sp, #8
  40b524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b528:	f109 33ff 	add.w	r3, r9, #4294967295
  40b52c:	2bfe      	cmp	r3, #254	; 0xfe
  40b52e:	d8c7      	bhi.n	40b4c0 <__fputwc+0x14>
  40b530:	fa5f f689 	uxtb.w	r6, r9
  40b534:	4682      	mov	sl, r0
  40b536:	f88d 6004 	strb.w	r6, [sp, #4]
  40b53a:	e7cf      	b.n	40b4dc <__fputwc+0x30>
  40b53c:	4648      	mov	r0, r9
  40b53e:	b002      	add	sp, #8
  40b540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040b544 <_fputwc_r>:
  40b544:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40b548:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40b54c:	d10a      	bne.n	40b564 <_fputwc_r+0x20>
  40b54e:	b410      	push	{r4}
  40b550:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40b552:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40b556:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40b55a:	6654      	str	r4, [r2, #100]	; 0x64
  40b55c:	8193      	strh	r3, [r2, #12]
  40b55e:	bc10      	pop	{r4}
  40b560:	f7ff bfa4 	b.w	40b4ac <__fputwc>
  40b564:	f7ff bfa2 	b.w	40b4ac <__fputwc>

0040b568 <_malloc_trim_r>:
  40b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b56a:	4f23      	ldr	r7, [pc, #140]	; (40b5f8 <_malloc_trim_r+0x90>)
  40b56c:	460c      	mov	r4, r1
  40b56e:	4606      	mov	r6, r0
  40b570:	f000 ff6c 	bl	40c44c <__malloc_lock>
  40b574:	68bb      	ldr	r3, [r7, #8]
  40b576:	685d      	ldr	r5, [r3, #4]
  40b578:	f025 0503 	bic.w	r5, r5, #3
  40b57c:	1b29      	subs	r1, r5, r4
  40b57e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40b582:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40b586:	f021 010f 	bic.w	r1, r1, #15
  40b58a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40b58e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40b592:	db07      	blt.n	40b5a4 <_malloc_trim_r+0x3c>
  40b594:	2100      	movs	r1, #0
  40b596:	4630      	mov	r0, r6
  40b598:	f001 fc5a 	bl	40ce50 <_sbrk_r>
  40b59c:	68bb      	ldr	r3, [r7, #8]
  40b59e:	442b      	add	r3, r5
  40b5a0:	4298      	cmp	r0, r3
  40b5a2:	d004      	beq.n	40b5ae <_malloc_trim_r+0x46>
  40b5a4:	4630      	mov	r0, r6
  40b5a6:	f000 ff53 	bl	40c450 <__malloc_unlock>
  40b5aa:	2000      	movs	r0, #0
  40b5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b5ae:	4261      	negs	r1, r4
  40b5b0:	4630      	mov	r0, r6
  40b5b2:	f001 fc4d 	bl	40ce50 <_sbrk_r>
  40b5b6:	3001      	adds	r0, #1
  40b5b8:	d00d      	beq.n	40b5d6 <_malloc_trim_r+0x6e>
  40b5ba:	4b10      	ldr	r3, [pc, #64]	; (40b5fc <_malloc_trim_r+0x94>)
  40b5bc:	68ba      	ldr	r2, [r7, #8]
  40b5be:	6819      	ldr	r1, [r3, #0]
  40b5c0:	1b2d      	subs	r5, r5, r4
  40b5c2:	f045 0501 	orr.w	r5, r5, #1
  40b5c6:	4630      	mov	r0, r6
  40b5c8:	1b09      	subs	r1, r1, r4
  40b5ca:	6055      	str	r5, [r2, #4]
  40b5cc:	6019      	str	r1, [r3, #0]
  40b5ce:	f000 ff3f 	bl	40c450 <__malloc_unlock>
  40b5d2:	2001      	movs	r0, #1
  40b5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b5d6:	2100      	movs	r1, #0
  40b5d8:	4630      	mov	r0, r6
  40b5da:	f001 fc39 	bl	40ce50 <_sbrk_r>
  40b5de:	68ba      	ldr	r2, [r7, #8]
  40b5e0:	1a83      	subs	r3, r0, r2
  40b5e2:	2b0f      	cmp	r3, #15
  40b5e4:	ddde      	ble.n	40b5a4 <_malloc_trim_r+0x3c>
  40b5e6:	4c06      	ldr	r4, [pc, #24]	; (40b600 <_malloc_trim_r+0x98>)
  40b5e8:	4904      	ldr	r1, [pc, #16]	; (40b5fc <_malloc_trim_r+0x94>)
  40b5ea:	6824      	ldr	r4, [r4, #0]
  40b5ec:	f043 0301 	orr.w	r3, r3, #1
  40b5f0:	1b00      	subs	r0, r0, r4
  40b5f2:	6053      	str	r3, [r2, #4]
  40b5f4:	6008      	str	r0, [r1, #0]
  40b5f6:	e7d5      	b.n	40b5a4 <_malloc_trim_r+0x3c>
  40b5f8:	20400530 	.word	0x20400530
  40b5fc:	20400fa0 	.word	0x20400fa0
  40b600:	2040093c 	.word	0x2040093c

0040b604 <_free_r>:
  40b604:	2900      	cmp	r1, #0
  40b606:	d045      	beq.n	40b694 <_free_r+0x90>
  40b608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b60c:	460d      	mov	r5, r1
  40b60e:	4680      	mov	r8, r0
  40b610:	f000 ff1c 	bl	40c44c <__malloc_lock>
  40b614:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40b618:	496a      	ldr	r1, [pc, #424]	; (40b7c4 <_free_r+0x1c0>)
  40b61a:	f027 0301 	bic.w	r3, r7, #1
  40b61e:	f1a5 0408 	sub.w	r4, r5, #8
  40b622:	18e2      	adds	r2, r4, r3
  40b624:	688e      	ldr	r6, [r1, #8]
  40b626:	6850      	ldr	r0, [r2, #4]
  40b628:	42b2      	cmp	r2, r6
  40b62a:	f020 0003 	bic.w	r0, r0, #3
  40b62e:	d062      	beq.n	40b6f6 <_free_r+0xf2>
  40b630:	07fe      	lsls	r6, r7, #31
  40b632:	6050      	str	r0, [r2, #4]
  40b634:	d40b      	bmi.n	40b64e <_free_r+0x4a>
  40b636:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40b63a:	1be4      	subs	r4, r4, r7
  40b63c:	f101 0e08 	add.w	lr, r1, #8
  40b640:	68a5      	ldr	r5, [r4, #8]
  40b642:	4575      	cmp	r5, lr
  40b644:	443b      	add	r3, r7
  40b646:	d06f      	beq.n	40b728 <_free_r+0x124>
  40b648:	68e7      	ldr	r7, [r4, #12]
  40b64a:	60ef      	str	r7, [r5, #12]
  40b64c:	60bd      	str	r5, [r7, #8]
  40b64e:	1815      	adds	r5, r2, r0
  40b650:	686d      	ldr	r5, [r5, #4]
  40b652:	07ed      	lsls	r5, r5, #31
  40b654:	d542      	bpl.n	40b6dc <_free_r+0xd8>
  40b656:	f043 0201 	orr.w	r2, r3, #1
  40b65a:	6062      	str	r2, [r4, #4]
  40b65c:	50e3      	str	r3, [r4, r3]
  40b65e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b662:	d218      	bcs.n	40b696 <_free_r+0x92>
  40b664:	08db      	lsrs	r3, r3, #3
  40b666:	1c5a      	adds	r2, r3, #1
  40b668:	684d      	ldr	r5, [r1, #4]
  40b66a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40b66e:	60a7      	str	r7, [r4, #8]
  40b670:	2001      	movs	r0, #1
  40b672:	109b      	asrs	r3, r3, #2
  40b674:	fa00 f303 	lsl.w	r3, r0, r3
  40b678:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40b67c:	431d      	orrs	r5, r3
  40b67e:	3808      	subs	r0, #8
  40b680:	60e0      	str	r0, [r4, #12]
  40b682:	604d      	str	r5, [r1, #4]
  40b684:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  40b688:	60fc      	str	r4, [r7, #12]
  40b68a:	4640      	mov	r0, r8
  40b68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b690:	f000 bede 	b.w	40c450 <__malloc_unlock>
  40b694:	4770      	bx	lr
  40b696:	0a5a      	lsrs	r2, r3, #9
  40b698:	2a04      	cmp	r2, #4
  40b69a:	d853      	bhi.n	40b744 <_free_r+0x140>
  40b69c:	099a      	lsrs	r2, r3, #6
  40b69e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40b6a2:	007f      	lsls	r7, r7, #1
  40b6a4:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40b6a8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40b6ac:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40b6b0:	4944      	ldr	r1, [pc, #272]	; (40b7c4 <_free_r+0x1c0>)
  40b6b2:	3808      	subs	r0, #8
  40b6b4:	4290      	cmp	r0, r2
  40b6b6:	d04d      	beq.n	40b754 <_free_r+0x150>
  40b6b8:	6851      	ldr	r1, [r2, #4]
  40b6ba:	f021 0103 	bic.w	r1, r1, #3
  40b6be:	428b      	cmp	r3, r1
  40b6c0:	d202      	bcs.n	40b6c8 <_free_r+0xc4>
  40b6c2:	6892      	ldr	r2, [r2, #8]
  40b6c4:	4290      	cmp	r0, r2
  40b6c6:	d1f7      	bne.n	40b6b8 <_free_r+0xb4>
  40b6c8:	68d0      	ldr	r0, [r2, #12]
  40b6ca:	60e0      	str	r0, [r4, #12]
  40b6cc:	60a2      	str	r2, [r4, #8]
  40b6ce:	6084      	str	r4, [r0, #8]
  40b6d0:	60d4      	str	r4, [r2, #12]
  40b6d2:	4640      	mov	r0, r8
  40b6d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b6d8:	f000 beba 	b.w	40c450 <__malloc_unlock>
  40b6dc:	6895      	ldr	r5, [r2, #8]
  40b6de:	4f3a      	ldr	r7, [pc, #232]	; (40b7c8 <_free_r+0x1c4>)
  40b6e0:	42bd      	cmp	r5, r7
  40b6e2:	4403      	add	r3, r0
  40b6e4:	d03f      	beq.n	40b766 <_free_r+0x162>
  40b6e6:	68d0      	ldr	r0, [r2, #12]
  40b6e8:	60e8      	str	r0, [r5, #12]
  40b6ea:	f043 0201 	orr.w	r2, r3, #1
  40b6ee:	6085      	str	r5, [r0, #8]
  40b6f0:	6062      	str	r2, [r4, #4]
  40b6f2:	50e3      	str	r3, [r4, r3]
  40b6f4:	e7b3      	b.n	40b65e <_free_r+0x5a>
  40b6f6:	07ff      	lsls	r7, r7, #31
  40b6f8:	4403      	add	r3, r0
  40b6fa:	d407      	bmi.n	40b70c <_free_r+0x108>
  40b6fc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40b700:	1aa4      	subs	r4, r4, r2
  40b702:	4413      	add	r3, r2
  40b704:	68a0      	ldr	r0, [r4, #8]
  40b706:	68e2      	ldr	r2, [r4, #12]
  40b708:	60c2      	str	r2, [r0, #12]
  40b70a:	6090      	str	r0, [r2, #8]
  40b70c:	4a2f      	ldr	r2, [pc, #188]	; (40b7cc <_free_r+0x1c8>)
  40b70e:	6812      	ldr	r2, [r2, #0]
  40b710:	f043 0001 	orr.w	r0, r3, #1
  40b714:	4293      	cmp	r3, r2
  40b716:	6060      	str	r0, [r4, #4]
  40b718:	608c      	str	r4, [r1, #8]
  40b71a:	d3b6      	bcc.n	40b68a <_free_r+0x86>
  40b71c:	4b2c      	ldr	r3, [pc, #176]	; (40b7d0 <_free_r+0x1cc>)
  40b71e:	4640      	mov	r0, r8
  40b720:	6819      	ldr	r1, [r3, #0]
  40b722:	f7ff ff21 	bl	40b568 <_malloc_trim_r>
  40b726:	e7b0      	b.n	40b68a <_free_r+0x86>
  40b728:	1811      	adds	r1, r2, r0
  40b72a:	6849      	ldr	r1, [r1, #4]
  40b72c:	07c9      	lsls	r1, r1, #31
  40b72e:	d444      	bmi.n	40b7ba <_free_r+0x1b6>
  40b730:	6891      	ldr	r1, [r2, #8]
  40b732:	68d2      	ldr	r2, [r2, #12]
  40b734:	60ca      	str	r2, [r1, #12]
  40b736:	4403      	add	r3, r0
  40b738:	f043 0001 	orr.w	r0, r3, #1
  40b73c:	6091      	str	r1, [r2, #8]
  40b73e:	6060      	str	r0, [r4, #4]
  40b740:	50e3      	str	r3, [r4, r3]
  40b742:	e7a2      	b.n	40b68a <_free_r+0x86>
  40b744:	2a14      	cmp	r2, #20
  40b746:	d817      	bhi.n	40b778 <_free_r+0x174>
  40b748:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40b74c:	007f      	lsls	r7, r7, #1
  40b74e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40b752:	e7a9      	b.n	40b6a8 <_free_r+0xa4>
  40b754:	10aa      	asrs	r2, r5, #2
  40b756:	684b      	ldr	r3, [r1, #4]
  40b758:	2501      	movs	r5, #1
  40b75a:	fa05 f202 	lsl.w	r2, r5, r2
  40b75e:	4313      	orrs	r3, r2
  40b760:	604b      	str	r3, [r1, #4]
  40b762:	4602      	mov	r2, r0
  40b764:	e7b1      	b.n	40b6ca <_free_r+0xc6>
  40b766:	f043 0201 	orr.w	r2, r3, #1
  40b76a:	614c      	str	r4, [r1, #20]
  40b76c:	610c      	str	r4, [r1, #16]
  40b76e:	60e5      	str	r5, [r4, #12]
  40b770:	60a5      	str	r5, [r4, #8]
  40b772:	6062      	str	r2, [r4, #4]
  40b774:	50e3      	str	r3, [r4, r3]
  40b776:	e788      	b.n	40b68a <_free_r+0x86>
  40b778:	2a54      	cmp	r2, #84	; 0x54
  40b77a:	d806      	bhi.n	40b78a <_free_r+0x186>
  40b77c:	0b1a      	lsrs	r2, r3, #12
  40b77e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40b782:	007f      	lsls	r7, r7, #1
  40b784:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40b788:	e78e      	b.n	40b6a8 <_free_r+0xa4>
  40b78a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b78e:	d806      	bhi.n	40b79e <_free_r+0x19a>
  40b790:	0bda      	lsrs	r2, r3, #15
  40b792:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40b796:	007f      	lsls	r7, r7, #1
  40b798:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40b79c:	e784      	b.n	40b6a8 <_free_r+0xa4>
  40b79e:	f240 5054 	movw	r0, #1364	; 0x554
  40b7a2:	4282      	cmp	r2, r0
  40b7a4:	d806      	bhi.n	40b7b4 <_free_r+0x1b0>
  40b7a6:	0c9a      	lsrs	r2, r3, #18
  40b7a8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40b7ac:	007f      	lsls	r7, r7, #1
  40b7ae:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40b7b2:	e779      	b.n	40b6a8 <_free_r+0xa4>
  40b7b4:	27fe      	movs	r7, #254	; 0xfe
  40b7b6:	257e      	movs	r5, #126	; 0x7e
  40b7b8:	e776      	b.n	40b6a8 <_free_r+0xa4>
  40b7ba:	f043 0201 	orr.w	r2, r3, #1
  40b7be:	6062      	str	r2, [r4, #4]
  40b7c0:	50e3      	str	r3, [r4, r3]
  40b7c2:	e762      	b.n	40b68a <_free_r+0x86>
  40b7c4:	20400530 	.word	0x20400530
  40b7c8:	20400538 	.word	0x20400538
  40b7cc:	20400938 	.word	0x20400938
  40b7d0:	20400f9c 	.word	0x20400f9c

0040b7d4 <__sfvwrite_r>:
  40b7d4:	6893      	ldr	r3, [r2, #8]
  40b7d6:	2b00      	cmp	r3, #0
  40b7d8:	d076      	beq.n	40b8c8 <__sfvwrite_r+0xf4>
  40b7da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b7de:	898b      	ldrh	r3, [r1, #12]
  40b7e0:	b085      	sub	sp, #20
  40b7e2:	460c      	mov	r4, r1
  40b7e4:	0719      	lsls	r1, r3, #28
  40b7e6:	9001      	str	r0, [sp, #4]
  40b7e8:	4616      	mov	r6, r2
  40b7ea:	d529      	bpl.n	40b840 <__sfvwrite_r+0x6c>
  40b7ec:	6922      	ldr	r2, [r4, #16]
  40b7ee:	b33a      	cbz	r2, 40b840 <__sfvwrite_r+0x6c>
  40b7f0:	f003 0802 	and.w	r8, r3, #2
  40b7f4:	fa1f f088 	uxth.w	r0, r8
  40b7f8:	6835      	ldr	r5, [r6, #0]
  40b7fa:	2800      	cmp	r0, #0
  40b7fc:	d02f      	beq.n	40b85e <__sfvwrite_r+0x8a>
  40b7fe:	f04f 0900 	mov.w	r9, #0
  40b802:	4fb4      	ldr	r7, [pc, #720]	; (40bad4 <__sfvwrite_r+0x300>)
  40b804:	46c8      	mov	r8, r9
  40b806:	46b2      	mov	sl, r6
  40b808:	45b8      	cmp	r8, r7
  40b80a:	4643      	mov	r3, r8
  40b80c:	464a      	mov	r2, r9
  40b80e:	bf28      	it	cs
  40b810:	463b      	movcs	r3, r7
  40b812:	9801      	ldr	r0, [sp, #4]
  40b814:	f1b8 0f00 	cmp.w	r8, #0
  40b818:	d050      	beq.n	40b8bc <__sfvwrite_r+0xe8>
  40b81a:	69e1      	ldr	r1, [r4, #28]
  40b81c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40b81e:	47b0      	blx	r6
  40b820:	2800      	cmp	r0, #0
  40b822:	dd71      	ble.n	40b908 <__sfvwrite_r+0x134>
  40b824:	f8da 3008 	ldr.w	r3, [sl, #8]
  40b828:	1a1b      	subs	r3, r3, r0
  40b82a:	4481      	add	r9, r0
  40b82c:	ebc0 0808 	rsb	r8, r0, r8
  40b830:	f8ca 3008 	str.w	r3, [sl, #8]
  40b834:	2b00      	cmp	r3, #0
  40b836:	d1e7      	bne.n	40b808 <__sfvwrite_r+0x34>
  40b838:	2000      	movs	r0, #0
  40b83a:	b005      	add	sp, #20
  40b83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b840:	4621      	mov	r1, r4
  40b842:	9801      	ldr	r0, [sp, #4]
  40b844:	f7fe fca8 	bl	40a198 <__swsetup_r>
  40b848:	2800      	cmp	r0, #0
  40b84a:	f040 813a 	bne.w	40bac2 <__sfvwrite_r+0x2ee>
  40b84e:	89a3      	ldrh	r3, [r4, #12]
  40b850:	6835      	ldr	r5, [r6, #0]
  40b852:	f003 0802 	and.w	r8, r3, #2
  40b856:	fa1f f088 	uxth.w	r0, r8
  40b85a:	2800      	cmp	r0, #0
  40b85c:	d1cf      	bne.n	40b7fe <__sfvwrite_r+0x2a>
  40b85e:	f013 0901 	ands.w	r9, r3, #1
  40b862:	d15b      	bne.n	40b91c <__sfvwrite_r+0x148>
  40b864:	464f      	mov	r7, r9
  40b866:	9602      	str	r6, [sp, #8]
  40b868:	b31f      	cbz	r7, 40b8b2 <__sfvwrite_r+0xde>
  40b86a:	059a      	lsls	r2, r3, #22
  40b86c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40b870:	d52c      	bpl.n	40b8cc <__sfvwrite_r+0xf8>
  40b872:	4547      	cmp	r7, r8
  40b874:	46c2      	mov	sl, r8
  40b876:	f0c0 80a4 	bcc.w	40b9c2 <__sfvwrite_r+0x1ee>
  40b87a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40b87e:	f040 80b1 	bne.w	40b9e4 <__sfvwrite_r+0x210>
  40b882:	6820      	ldr	r0, [r4, #0]
  40b884:	4652      	mov	r2, sl
  40b886:	4649      	mov	r1, r9
  40b888:	f000 fd7c 	bl	40c384 <memmove>
  40b88c:	68a0      	ldr	r0, [r4, #8]
  40b88e:	6823      	ldr	r3, [r4, #0]
  40b890:	ebc8 0000 	rsb	r0, r8, r0
  40b894:	4453      	add	r3, sl
  40b896:	60a0      	str	r0, [r4, #8]
  40b898:	6023      	str	r3, [r4, #0]
  40b89a:	4638      	mov	r0, r7
  40b89c:	9a02      	ldr	r2, [sp, #8]
  40b89e:	6893      	ldr	r3, [r2, #8]
  40b8a0:	1a1b      	subs	r3, r3, r0
  40b8a2:	4481      	add	r9, r0
  40b8a4:	1a3f      	subs	r7, r7, r0
  40b8a6:	6093      	str	r3, [r2, #8]
  40b8a8:	2b00      	cmp	r3, #0
  40b8aa:	d0c5      	beq.n	40b838 <__sfvwrite_r+0x64>
  40b8ac:	89a3      	ldrh	r3, [r4, #12]
  40b8ae:	2f00      	cmp	r7, #0
  40b8b0:	d1db      	bne.n	40b86a <__sfvwrite_r+0x96>
  40b8b2:	f8d5 9000 	ldr.w	r9, [r5]
  40b8b6:	686f      	ldr	r7, [r5, #4]
  40b8b8:	3508      	adds	r5, #8
  40b8ba:	e7d5      	b.n	40b868 <__sfvwrite_r+0x94>
  40b8bc:	f8d5 9000 	ldr.w	r9, [r5]
  40b8c0:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40b8c4:	3508      	adds	r5, #8
  40b8c6:	e79f      	b.n	40b808 <__sfvwrite_r+0x34>
  40b8c8:	2000      	movs	r0, #0
  40b8ca:	4770      	bx	lr
  40b8cc:	6820      	ldr	r0, [r4, #0]
  40b8ce:	6923      	ldr	r3, [r4, #16]
  40b8d0:	4298      	cmp	r0, r3
  40b8d2:	d803      	bhi.n	40b8dc <__sfvwrite_r+0x108>
  40b8d4:	6961      	ldr	r1, [r4, #20]
  40b8d6:	428f      	cmp	r7, r1
  40b8d8:	f080 80b7 	bcs.w	40ba4a <__sfvwrite_r+0x276>
  40b8dc:	45b8      	cmp	r8, r7
  40b8de:	bf28      	it	cs
  40b8e0:	46b8      	movcs	r8, r7
  40b8e2:	4642      	mov	r2, r8
  40b8e4:	4649      	mov	r1, r9
  40b8e6:	f000 fd4d 	bl	40c384 <memmove>
  40b8ea:	68a3      	ldr	r3, [r4, #8]
  40b8ec:	6822      	ldr	r2, [r4, #0]
  40b8ee:	ebc8 0303 	rsb	r3, r8, r3
  40b8f2:	4442      	add	r2, r8
  40b8f4:	60a3      	str	r3, [r4, #8]
  40b8f6:	6022      	str	r2, [r4, #0]
  40b8f8:	2b00      	cmp	r3, #0
  40b8fa:	d149      	bne.n	40b990 <__sfvwrite_r+0x1bc>
  40b8fc:	4621      	mov	r1, r4
  40b8fe:	9801      	ldr	r0, [sp, #4]
  40b900:	f7ff fd22 	bl	40b348 <_fflush_r>
  40b904:	2800      	cmp	r0, #0
  40b906:	d043      	beq.n	40b990 <__sfvwrite_r+0x1bc>
  40b908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b910:	f04f 30ff 	mov.w	r0, #4294967295
  40b914:	81a3      	strh	r3, [r4, #12]
  40b916:	b005      	add	sp, #20
  40b918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b91c:	4680      	mov	r8, r0
  40b91e:	9002      	str	r0, [sp, #8]
  40b920:	4682      	mov	sl, r0
  40b922:	4681      	mov	r9, r0
  40b924:	f1b9 0f00 	cmp.w	r9, #0
  40b928:	d02a      	beq.n	40b980 <__sfvwrite_r+0x1ac>
  40b92a:	9b02      	ldr	r3, [sp, #8]
  40b92c:	2b00      	cmp	r3, #0
  40b92e:	d04c      	beq.n	40b9ca <__sfvwrite_r+0x1f6>
  40b930:	6820      	ldr	r0, [r4, #0]
  40b932:	6923      	ldr	r3, [r4, #16]
  40b934:	6962      	ldr	r2, [r4, #20]
  40b936:	45c8      	cmp	r8, r9
  40b938:	46c3      	mov	fp, r8
  40b93a:	bf28      	it	cs
  40b93c:	46cb      	movcs	fp, r9
  40b93e:	4298      	cmp	r0, r3
  40b940:	465f      	mov	r7, fp
  40b942:	d904      	bls.n	40b94e <__sfvwrite_r+0x17a>
  40b944:	68a3      	ldr	r3, [r4, #8]
  40b946:	4413      	add	r3, r2
  40b948:	459b      	cmp	fp, r3
  40b94a:	f300 8090 	bgt.w	40ba6e <__sfvwrite_r+0x29a>
  40b94e:	4593      	cmp	fp, r2
  40b950:	db20      	blt.n	40b994 <__sfvwrite_r+0x1c0>
  40b952:	4613      	mov	r3, r2
  40b954:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40b956:	69e1      	ldr	r1, [r4, #28]
  40b958:	9801      	ldr	r0, [sp, #4]
  40b95a:	4652      	mov	r2, sl
  40b95c:	47b8      	blx	r7
  40b95e:	1e07      	subs	r7, r0, #0
  40b960:	ddd2      	ble.n	40b908 <__sfvwrite_r+0x134>
  40b962:	ebb8 0807 	subs.w	r8, r8, r7
  40b966:	d023      	beq.n	40b9b0 <__sfvwrite_r+0x1dc>
  40b968:	68b3      	ldr	r3, [r6, #8]
  40b96a:	1bdb      	subs	r3, r3, r7
  40b96c:	44ba      	add	sl, r7
  40b96e:	ebc7 0909 	rsb	r9, r7, r9
  40b972:	60b3      	str	r3, [r6, #8]
  40b974:	2b00      	cmp	r3, #0
  40b976:	f43f af5f 	beq.w	40b838 <__sfvwrite_r+0x64>
  40b97a:	f1b9 0f00 	cmp.w	r9, #0
  40b97e:	d1d4      	bne.n	40b92a <__sfvwrite_r+0x156>
  40b980:	2300      	movs	r3, #0
  40b982:	f8d5 a000 	ldr.w	sl, [r5]
  40b986:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40b98a:	9302      	str	r3, [sp, #8]
  40b98c:	3508      	adds	r5, #8
  40b98e:	e7c9      	b.n	40b924 <__sfvwrite_r+0x150>
  40b990:	4640      	mov	r0, r8
  40b992:	e783      	b.n	40b89c <__sfvwrite_r+0xc8>
  40b994:	465a      	mov	r2, fp
  40b996:	4651      	mov	r1, sl
  40b998:	f000 fcf4 	bl	40c384 <memmove>
  40b99c:	68a2      	ldr	r2, [r4, #8]
  40b99e:	6823      	ldr	r3, [r4, #0]
  40b9a0:	ebcb 0202 	rsb	r2, fp, r2
  40b9a4:	445b      	add	r3, fp
  40b9a6:	ebb8 0807 	subs.w	r8, r8, r7
  40b9aa:	60a2      	str	r2, [r4, #8]
  40b9ac:	6023      	str	r3, [r4, #0]
  40b9ae:	d1db      	bne.n	40b968 <__sfvwrite_r+0x194>
  40b9b0:	4621      	mov	r1, r4
  40b9b2:	9801      	ldr	r0, [sp, #4]
  40b9b4:	f7ff fcc8 	bl	40b348 <_fflush_r>
  40b9b8:	2800      	cmp	r0, #0
  40b9ba:	d1a5      	bne.n	40b908 <__sfvwrite_r+0x134>
  40b9bc:	f8cd 8008 	str.w	r8, [sp, #8]
  40b9c0:	e7d2      	b.n	40b968 <__sfvwrite_r+0x194>
  40b9c2:	6820      	ldr	r0, [r4, #0]
  40b9c4:	46b8      	mov	r8, r7
  40b9c6:	46ba      	mov	sl, r7
  40b9c8:	e75c      	b.n	40b884 <__sfvwrite_r+0xb0>
  40b9ca:	464a      	mov	r2, r9
  40b9cc:	210a      	movs	r1, #10
  40b9ce:	4650      	mov	r0, sl
  40b9d0:	f000 fbee 	bl	40c1b0 <memchr>
  40b9d4:	2800      	cmp	r0, #0
  40b9d6:	d06f      	beq.n	40bab8 <__sfvwrite_r+0x2e4>
  40b9d8:	3001      	adds	r0, #1
  40b9da:	2301      	movs	r3, #1
  40b9dc:	ebca 0800 	rsb	r8, sl, r0
  40b9e0:	9302      	str	r3, [sp, #8]
  40b9e2:	e7a5      	b.n	40b930 <__sfvwrite_r+0x15c>
  40b9e4:	6962      	ldr	r2, [r4, #20]
  40b9e6:	6820      	ldr	r0, [r4, #0]
  40b9e8:	6921      	ldr	r1, [r4, #16]
  40b9ea:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40b9ee:	ebc1 0a00 	rsb	sl, r1, r0
  40b9f2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40b9f6:	f10a 0001 	add.w	r0, sl, #1
  40b9fa:	ea4f 0868 	mov.w	r8, r8, asr #1
  40b9fe:	4438      	add	r0, r7
  40ba00:	4540      	cmp	r0, r8
  40ba02:	4642      	mov	r2, r8
  40ba04:	bf84      	itt	hi
  40ba06:	4680      	movhi	r8, r0
  40ba08:	4642      	movhi	r2, r8
  40ba0a:	055b      	lsls	r3, r3, #21
  40ba0c:	d542      	bpl.n	40ba94 <__sfvwrite_r+0x2c0>
  40ba0e:	4611      	mov	r1, r2
  40ba10:	9801      	ldr	r0, [sp, #4]
  40ba12:	f000 f915 	bl	40bc40 <_malloc_r>
  40ba16:	4683      	mov	fp, r0
  40ba18:	2800      	cmp	r0, #0
  40ba1a:	d055      	beq.n	40bac8 <__sfvwrite_r+0x2f4>
  40ba1c:	4652      	mov	r2, sl
  40ba1e:	6921      	ldr	r1, [r4, #16]
  40ba20:	f000 fc16 	bl	40c250 <memcpy>
  40ba24:	89a3      	ldrh	r3, [r4, #12]
  40ba26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40ba2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40ba2e:	81a3      	strh	r3, [r4, #12]
  40ba30:	ebca 0308 	rsb	r3, sl, r8
  40ba34:	eb0b 000a 	add.w	r0, fp, sl
  40ba38:	f8c4 8014 	str.w	r8, [r4, #20]
  40ba3c:	f8c4 b010 	str.w	fp, [r4, #16]
  40ba40:	6020      	str	r0, [r4, #0]
  40ba42:	60a3      	str	r3, [r4, #8]
  40ba44:	46b8      	mov	r8, r7
  40ba46:	46ba      	mov	sl, r7
  40ba48:	e71c      	b.n	40b884 <__sfvwrite_r+0xb0>
  40ba4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40ba4e:	42bb      	cmp	r3, r7
  40ba50:	bf28      	it	cs
  40ba52:	463b      	movcs	r3, r7
  40ba54:	464a      	mov	r2, r9
  40ba56:	fb93 f3f1 	sdiv	r3, r3, r1
  40ba5a:	9801      	ldr	r0, [sp, #4]
  40ba5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40ba5e:	fb01 f303 	mul.w	r3, r1, r3
  40ba62:	69e1      	ldr	r1, [r4, #28]
  40ba64:	47b0      	blx	r6
  40ba66:	2800      	cmp	r0, #0
  40ba68:	f73f af18 	bgt.w	40b89c <__sfvwrite_r+0xc8>
  40ba6c:	e74c      	b.n	40b908 <__sfvwrite_r+0x134>
  40ba6e:	461a      	mov	r2, r3
  40ba70:	4651      	mov	r1, sl
  40ba72:	9303      	str	r3, [sp, #12]
  40ba74:	f000 fc86 	bl	40c384 <memmove>
  40ba78:	6822      	ldr	r2, [r4, #0]
  40ba7a:	9b03      	ldr	r3, [sp, #12]
  40ba7c:	9801      	ldr	r0, [sp, #4]
  40ba7e:	441a      	add	r2, r3
  40ba80:	6022      	str	r2, [r4, #0]
  40ba82:	4621      	mov	r1, r4
  40ba84:	f7ff fc60 	bl	40b348 <_fflush_r>
  40ba88:	9b03      	ldr	r3, [sp, #12]
  40ba8a:	2800      	cmp	r0, #0
  40ba8c:	f47f af3c 	bne.w	40b908 <__sfvwrite_r+0x134>
  40ba90:	461f      	mov	r7, r3
  40ba92:	e766      	b.n	40b962 <__sfvwrite_r+0x18e>
  40ba94:	9801      	ldr	r0, [sp, #4]
  40ba96:	f000 ffeb 	bl	40ca70 <_realloc_r>
  40ba9a:	4683      	mov	fp, r0
  40ba9c:	2800      	cmp	r0, #0
  40ba9e:	d1c7      	bne.n	40ba30 <__sfvwrite_r+0x25c>
  40baa0:	9d01      	ldr	r5, [sp, #4]
  40baa2:	6921      	ldr	r1, [r4, #16]
  40baa4:	4628      	mov	r0, r5
  40baa6:	f7ff fdad 	bl	40b604 <_free_r>
  40baaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40baae:	220c      	movs	r2, #12
  40bab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40bab4:	602a      	str	r2, [r5, #0]
  40bab6:	e729      	b.n	40b90c <__sfvwrite_r+0x138>
  40bab8:	2301      	movs	r3, #1
  40baba:	f109 0801 	add.w	r8, r9, #1
  40babe:	9302      	str	r3, [sp, #8]
  40bac0:	e736      	b.n	40b930 <__sfvwrite_r+0x15c>
  40bac2:	f04f 30ff 	mov.w	r0, #4294967295
  40bac6:	e6b8      	b.n	40b83a <__sfvwrite_r+0x66>
  40bac8:	9a01      	ldr	r2, [sp, #4]
  40baca:	230c      	movs	r3, #12
  40bacc:	6013      	str	r3, [r2, #0]
  40bace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bad2:	e71b      	b.n	40b90c <__sfvwrite_r+0x138>
  40bad4:	7ffffc00 	.word	0x7ffffc00

0040bad8 <_fwalk_reent>:
  40bad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40badc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40bae0:	d01f      	beq.n	40bb22 <_fwalk_reent+0x4a>
  40bae2:	4688      	mov	r8, r1
  40bae4:	4606      	mov	r6, r0
  40bae6:	f04f 0900 	mov.w	r9, #0
  40baea:	687d      	ldr	r5, [r7, #4]
  40baec:	68bc      	ldr	r4, [r7, #8]
  40baee:	3d01      	subs	r5, #1
  40baf0:	d411      	bmi.n	40bb16 <_fwalk_reent+0x3e>
  40baf2:	89a3      	ldrh	r3, [r4, #12]
  40baf4:	2b01      	cmp	r3, #1
  40baf6:	f105 35ff 	add.w	r5, r5, #4294967295
  40bafa:	d908      	bls.n	40bb0e <_fwalk_reent+0x36>
  40bafc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40bb00:	3301      	adds	r3, #1
  40bb02:	4621      	mov	r1, r4
  40bb04:	4630      	mov	r0, r6
  40bb06:	d002      	beq.n	40bb0e <_fwalk_reent+0x36>
  40bb08:	47c0      	blx	r8
  40bb0a:	ea49 0900 	orr.w	r9, r9, r0
  40bb0e:	1c6b      	adds	r3, r5, #1
  40bb10:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40bb14:	d1ed      	bne.n	40baf2 <_fwalk_reent+0x1a>
  40bb16:	683f      	ldr	r7, [r7, #0]
  40bb18:	2f00      	cmp	r7, #0
  40bb1a:	d1e6      	bne.n	40baea <_fwalk_reent+0x12>
  40bb1c:	4648      	mov	r0, r9
  40bb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bb22:	46b9      	mov	r9, r7
  40bb24:	4648      	mov	r0, r9
  40bb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bb2a:	bf00      	nop

0040bb2c <__locale_charset>:
  40bb2c:	4800      	ldr	r0, [pc, #0]	; (40bb30 <__locale_charset+0x4>)
  40bb2e:	4770      	bx	lr
  40bb30:	2040050c 	.word	0x2040050c

0040bb34 <__locale_mb_cur_max>:
  40bb34:	4b01      	ldr	r3, [pc, #4]	; (40bb3c <__locale_mb_cur_max+0x8>)
  40bb36:	6818      	ldr	r0, [r3, #0]
  40bb38:	4770      	bx	lr
  40bb3a:	bf00      	nop
  40bb3c:	2040052c 	.word	0x2040052c

0040bb40 <_localeconv_r>:
  40bb40:	4800      	ldr	r0, [pc, #0]	; (40bb44 <_localeconv_r+0x4>)
  40bb42:	4770      	bx	lr
  40bb44:	204004d4 	.word	0x204004d4

0040bb48 <__swhatbuf_r>:
  40bb48:	b570      	push	{r4, r5, r6, lr}
  40bb4a:	460d      	mov	r5, r1
  40bb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bb50:	2900      	cmp	r1, #0
  40bb52:	b090      	sub	sp, #64	; 0x40
  40bb54:	4614      	mov	r4, r2
  40bb56:	461e      	mov	r6, r3
  40bb58:	db14      	blt.n	40bb84 <__swhatbuf_r+0x3c>
  40bb5a:	aa01      	add	r2, sp, #4
  40bb5c:	f001 fbc8 	bl	40d2f0 <_fstat_r>
  40bb60:	2800      	cmp	r0, #0
  40bb62:	db0f      	blt.n	40bb84 <__swhatbuf_r+0x3c>
  40bb64:	9a02      	ldr	r2, [sp, #8]
  40bb66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40bb6a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40bb6e:	fab2 f282 	clz	r2, r2
  40bb72:	0952      	lsrs	r2, r2, #5
  40bb74:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40bb78:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40bb7c:	6032      	str	r2, [r6, #0]
  40bb7e:	6023      	str	r3, [r4, #0]
  40bb80:	b010      	add	sp, #64	; 0x40
  40bb82:	bd70      	pop	{r4, r5, r6, pc}
  40bb84:	89a8      	ldrh	r0, [r5, #12]
  40bb86:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40bb8a:	b282      	uxth	r2, r0
  40bb8c:	2000      	movs	r0, #0
  40bb8e:	6030      	str	r0, [r6, #0]
  40bb90:	b11a      	cbz	r2, 40bb9a <__swhatbuf_r+0x52>
  40bb92:	2340      	movs	r3, #64	; 0x40
  40bb94:	6023      	str	r3, [r4, #0]
  40bb96:	b010      	add	sp, #64	; 0x40
  40bb98:	bd70      	pop	{r4, r5, r6, pc}
  40bb9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40bb9e:	4610      	mov	r0, r2
  40bba0:	6023      	str	r3, [r4, #0]
  40bba2:	b010      	add	sp, #64	; 0x40
  40bba4:	bd70      	pop	{r4, r5, r6, pc}
  40bba6:	bf00      	nop

0040bba8 <__smakebuf_r>:
  40bba8:	898a      	ldrh	r2, [r1, #12]
  40bbaa:	0792      	lsls	r2, r2, #30
  40bbac:	460b      	mov	r3, r1
  40bbae:	d506      	bpl.n	40bbbe <__smakebuf_r+0x16>
  40bbb0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40bbb4:	2101      	movs	r1, #1
  40bbb6:	601a      	str	r2, [r3, #0]
  40bbb8:	611a      	str	r2, [r3, #16]
  40bbba:	6159      	str	r1, [r3, #20]
  40bbbc:	4770      	bx	lr
  40bbbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bbc0:	b083      	sub	sp, #12
  40bbc2:	ab01      	add	r3, sp, #4
  40bbc4:	466a      	mov	r2, sp
  40bbc6:	460c      	mov	r4, r1
  40bbc8:	4605      	mov	r5, r0
  40bbca:	f7ff ffbd 	bl	40bb48 <__swhatbuf_r>
  40bbce:	9900      	ldr	r1, [sp, #0]
  40bbd0:	4606      	mov	r6, r0
  40bbd2:	4628      	mov	r0, r5
  40bbd4:	f000 f834 	bl	40bc40 <_malloc_r>
  40bbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bbdc:	b1d0      	cbz	r0, 40bc14 <__smakebuf_r+0x6c>
  40bbde:	9a01      	ldr	r2, [sp, #4]
  40bbe0:	4f12      	ldr	r7, [pc, #72]	; (40bc2c <__smakebuf_r+0x84>)
  40bbe2:	9900      	ldr	r1, [sp, #0]
  40bbe4:	63ef      	str	r7, [r5, #60]	; 0x3c
  40bbe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40bbea:	81a3      	strh	r3, [r4, #12]
  40bbec:	6020      	str	r0, [r4, #0]
  40bbee:	6120      	str	r0, [r4, #16]
  40bbf0:	6161      	str	r1, [r4, #20]
  40bbf2:	b91a      	cbnz	r2, 40bbfc <__smakebuf_r+0x54>
  40bbf4:	4333      	orrs	r3, r6
  40bbf6:	81a3      	strh	r3, [r4, #12]
  40bbf8:	b003      	add	sp, #12
  40bbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bbfc:	4628      	mov	r0, r5
  40bbfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40bc02:	f001 fb89 	bl	40d318 <_isatty_r>
  40bc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bc0a:	2800      	cmp	r0, #0
  40bc0c:	d0f2      	beq.n	40bbf4 <__smakebuf_r+0x4c>
  40bc0e:	f043 0301 	orr.w	r3, r3, #1
  40bc12:	e7ef      	b.n	40bbf4 <__smakebuf_r+0x4c>
  40bc14:	059a      	lsls	r2, r3, #22
  40bc16:	d4ef      	bmi.n	40bbf8 <__smakebuf_r+0x50>
  40bc18:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40bc1c:	f043 0302 	orr.w	r3, r3, #2
  40bc20:	2101      	movs	r1, #1
  40bc22:	81a3      	strh	r3, [r4, #12]
  40bc24:	6022      	str	r2, [r4, #0]
  40bc26:	6122      	str	r2, [r4, #16]
  40bc28:	6161      	str	r1, [r4, #20]
  40bc2a:	e7e5      	b.n	40bbf8 <__smakebuf_r+0x50>
  40bc2c:	0040b375 	.word	0x0040b375

0040bc30 <malloc>:
  40bc30:	4b02      	ldr	r3, [pc, #8]	; (40bc3c <malloc+0xc>)
  40bc32:	4601      	mov	r1, r0
  40bc34:	6818      	ldr	r0, [r3, #0]
  40bc36:	f000 b803 	b.w	40bc40 <_malloc_r>
  40bc3a:	bf00      	nop
  40bc3c:	204004d0 	.word	0x204004d0

0040bc40 <_malloc_r>:
  40bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bc44:	f101 050b 	add.w	r5, r1, #11
  40bc48:	2d16      	cmp	r5, #22
  40bc4a:	b083      	sub	sp, #12
  40bc4c:	4606      	mov	r6, r0
  40bc4e:	f240 809f 	bls.w	40bd90 <_malloc_r+0x150>
  40bc52:	f035 0507 	bics.w	r5, r5, #7
  40bc56:	f100 80bf 	bmi.w	40bdd8 <_malloc_r+0x198>
  40bc5a:	42a9      	cmp	r1, r5
  40bc5c:	f200 80bc 	bhi.w	40bdd8 <_malloc_r+0x198>
  40bc60:	f000 fbf4 	bl	40c44c <__malloc_lock>
  40bc64:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40bc68:	f0c0 829c 	bcc.w	40c1a4 <_malloc_r+0x564>
  40bc6c:	0a6b      	lsrs	r3, r5, #9
  40bc6e:	f000 80ba 	beq.w	40bde6 <_malloc_r+0x1a6>
  40bc72:	2b04      	cmp	r3, #4
  40bc74:	f200 8183 	bhi.w	40bf7e <_malloc_r+0x33e>
  40bc78:	09a8      	lsrs	r0, r5, #6
  40bc7a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40bc7e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40bc82:	3038      	adds	r0, #56	; 0x38
  40bc84:	4fc4      	ldr	r7, [pc, #784]	; (40bf98 <_malloc_r+0x358>)
  40bc86:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40bc8a:	f1a3 0108 	sub.w	r1, r3, #8
  40bc8e:	685c      	ldr	r4, [r3, #4]
  40bc90:	42a1      	cmp	r1, r4
  40bc92:	d107      	bne.n	40bca4 <_malloc_r+0x64>
  40bc94:	e0ac      	b.n	40bdf0 <_malloc_r+0x1b0>
  40bc96:	2a00      	cmp	r2, #0
  40bc98:	f280 80ac 	bge.w	40bdf4 <_malloc_r+0x1b4>
  40bc9c:	68e4      	ldr	r4, [r4, #12]
  40bc9e:	42a1      	cmp	r1, r4
  40bca0:	f000 80a6 	beq.w	40bdf0 <_malloc_r+0x1b0>
  40bca4:	6863      	ldr	r3, [r4, #4]
  40bca6:	f023 0303 	bic.w	r3, r3, #3
  40bcaa:	1b5a      	subs	r2, r3, r5
  40bcac:	2a0f      	cmp	r2, #15
  40bcae:	ddf2      	ble.n	40bc96 <_malloc_r+0x56>
  40bcb0:	49b9      	ldr	r1, [pc, #740]	; (40bf98 <_malloc_r+0x358>)
  40bcb2:	693c      	ldr	r4, [r7, #16]
  40bcb4:	f101 0e08 	add.w	lr, r1, #8
  40bcb8:	4574      	cmp	r4, lr
  40bcba:	f000 81b3 	beq.w	40c024 <_malloc_r+0x3e4>
  40bcbe:	6863      	ldr	r3, [r4, #4]
  40bcc0:	f023 0303 	bic.w	r3, r3, #3
  40bcc4:	1b5a      	subs	r2, r3, r5
  40bcc6:	2a0f      	cmp	r2, #15
  40bcc8:	f300 8199 	bgt.w	40bffe <_malloc_r+0x3be>
  40bccc:	2a00      	cmp	r2, #0
  40bcce:	f8c1 e014 	str.w	lr, [r1, #20]
  40bcd2:	f8c1 e010 	str.w	lr, [r1, #16]
  40bcd6:	f280 809e 	bge.w	40be16 <_malloc_r+0x1d6>
  40bcda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bcde:	f080 8167 	bcs.w	40bfb0 <_malloc_r+0x370>
  40bce2:	08db      	lsrs	r3, r3, #3
  40bce4:	f103 0c01 	add.w	ip, r3, #1
  40bce8:	2201      	movs	r2, #1
  40bcea:	109b      	asrs	r3, r3, #2
  40bcec:	fa02 f303 	lsl.w	r3, r2, r3
  40bcf0:	684a      	ldr	r2, [r1, #4]
  40bcf2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40bcf6:	f8c4 8008 	str.w	r8, [r4, #8]
  40bcfa:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40bcfe:	431a      	orrs	r2, r3
  40bd00:	f1a9 0308 	sub.w	r3, r9, #8
  40bd04:	60e3      	str	r3, [r4, #12]
  40bd06:	604a      	str	r2, [r1, #4]
  40bd08:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  40bd0c:	f8c8 400c 	str.w	r4, [r8, #12]
  40bd10:	1083      	asrs	r3, r0, #2
  40bd12:	2401      	movs	r4, #1
  40bd14:	409c      	lsls	r4, r3
  40bd16:	4294      	cmp	r4, r2
  40bd18:	f200 808a 	bhi.w	40be30 <_malloc_r+0x1f0>
  40bd1c:	4214      	tst	r4, r2
  40bd1e:	d106      	bne.n	40bd2e <_malloc_r+0xee>
  40bd20:	f020 0003 	bic.w	r0, r0, #3
  40bd24:	0064      	lsls	r4, r4, #1
  40bd26:	4214      	tst	r4, r2
  40bd28:	f100 0004 	add.w	r0, r0, #4
  40bd2c:	d0fa      	beq.n	40bd24 <_malloc_r+0xe4>
  40bd2e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40bd32:	46cc      	mov	ip, r9
  40bd34:	4680      	mov	r8, r0
  40bd36:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40bd3a:	458c      	cmp	ip, r1
  40bd3c:	d107      	bne.n	40bd4e <_malloc_r+0x10e>
  40bd3e:	e173      	b.n	40c028 <_malloc_r+0x3e8>
  40bd40:	2a00      	cmp	r2, #0
  40bd42:	f280 8181 	bge.w	40c048 <_malloc_r+0x408>
  40bd46:	68c9      	ldr	r1, [r1, #12]
  40bd48:	458c      	cmp	ip, r1
  40bd4a:	f000 816d 	beq.w	40c028 <_malloc_r+0x3e8>
  40bd4e:	684b      	ldr	r3, [r1, #4]
  40bd50:	f023 0303 	bic.w	r3, r3, #3
  40bd54:	1b5a      	subs	r2, r3, r5
  40bd56:	2a0f      	cmp	r2, #15
  40bd58:	ddf2      	ble.n	40bd40 <_malloc_r+0x100>
  40bd5a:	460c      	mov	r4, r1
  40bd5c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40bd60:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40bd64:	194b      	adds	r3, r1, r5
  40bd66:	f045 0501 	orr.w	r5, r5, #1
  40bd6a:	604d      	str	r5, [r1, #4]
  40bd6c:	f042 0101 	orr.w	r1, r2, #1
  40bd70:	f8c8 c00c 	str.w	ip, [r8, #12]
  40bd74:	4630      	mov	r0, r6
  40bd76:	f8cc 8008 	str.w	r8, [ip, #8]
  40bd7a:	617b      	str	r3, [r7, #20]
  40bd7c:	613b      	str	r3, [r7, #16]
  40bd7e:	f8c3 e00c 	str.w	lr, [r3, #12]
  40bd82:	f8c3 e008 	str.w	lr, [r3, #8]
  40bd86:	6059      	str	r1, [r3, #4]
  40bd88:	509a      	str	r2, [r3, r2]
  40bd8a:	f000 fb61 	bl	40c450 <__malloc_unlock>
  40bd8e:	e01f      	b.n	40bdd0 <_malloc_r+0x190>
  40bd90:	2910      	cmp	r1, #16
  40bd92:	d821      	bhi.n	40bdd8 <_malloc_r+0x198>
  40bd94:	f000 fb5a 	bl	40c44c <__malloc_lock>
  40bd98:	2510      	movs	r5, #16
  40bd9a:	2306      	movs	r3, #6
  40bd9c:	2002      	movs	r0, #2
  40bd9e:	4f7e      	ldr	r7, [pc, #504]	; (40bf98 <_malloc_r+0x358>)
  40bda0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40bda4:	f1a3 0208 	sub.w	r2, r3, #8
  40bda8:	685c      	ldr	r4, [r3, #4]
  40bdaa:	4294      	cmp	r4, r2
  40bdac:	f000 8145 	beq.w	40c03a <_malloc_r+0x3fa>
  40bdb0:	6863      	ldr	r3, [r4, #4]
  40bdb2:	68e1      	ldr	r1, [r4, #12]
  40bdb4:	68a5      	ldr	r5, [r4, #8]
  40bdb6:	f023 0303 	bic.w	r3, r3, #3
  40bdba:	4423      	add	r3, r4
  40bdbc:	4630      	mov	r0, r6
  40bdbe:	685a      	ldr	r2, [r3, #4]
  40bdc0:	60e9      	str	r1, [r5, #12]
  40bdc2:	f042 0201 	orr.w	r2, r2, #1
  40bdc6:	608d      	str	r5, [r1, #8]
  40bdc8:	605a      	str	r2, [r3, #4]
  40bdca:	f000 fb41 	bl	40c450 <__malloc_unlock>
  40bdce:	3408      	adds	r4, #8
  40bdd0:	4620      	mov	r0, r4
  40bdd2:	b003      	add	sp, #12
  40bdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bdd8:	2400      	movs	r4, #0
  40bdda:	230c      	movs	r3, #12
  40bddc:	4620      	mov	r0, r4
  40bdde:	6033      	str	r3, [r6, #0]
  40bde0:	b003      	add	sp, #12
  40bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bde6:	2380      	movs	r3, #128	; 0x80
  40bde8:	f04f 0e40 	mov.w	lr, #64	; 0x40
  40bdec:	203f      	movs	r0, #63	; 0x3f
  40bdee:	e749      	b.n	40bc84 <_malloc_r+0x44>
  40bdf0:	4670      	mov	r0, lr
  40bdf2:	e75d      	b.n	40bcb0 <_malloc_r+0x70>
  40bdf4:	4423      	add	r3, r4
  40bdf6:	68e1      	ldr	r1, [r4, #12]
  40bdf8:	685a      	ldr	r2, [r3, #4]
  40bdfa:	68a5      	ldr	r5, [r4, #8]
  40bdfc:	f042 0201 	orr.w	r2, r2, #1
  40be00:	60e9      	str	r1, [r5, #12]
  40be02:	4630      	mov	r0, r6
  40be04:	608d      	str	r5, [r1, #8]
  40be06:	605a      	str	r2, [r3, #4]
  40be08:	f000 fb22 	bl	40c450 <__malloc_unlock>
  40be0c:	3408      	adds	r4, #8
  40be0e:	4620      	mov	r0, r4
  40be10:	b003      	add	sp, #12
  40be12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40be16:	4423      	add	r3, r4
  40be18:	4630      	mov	r0, r6
  40be1a:	685a      	ldr	r2, [r3, #4]
  40be1c:	f042 0201 	orr.w	r2, r2, #1
  40be20:	605a      	str	r2, [r3, #4]
  40be22:	f000 fb15 	bl	40c450 <__malloc_unlock>
  40be26:	3408      	adds	r4, #8
  40be28:	4620      	mov	r0, r4
  40be2a:	b003      	add	sp, #12
  40be2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40be30:	68bc      	ldr	r4, [r7, #8]
  40be32:	6863      	ldr	r3, [r4, #4]
  40be34:	f023 0803 	bic.w	r8, r3, #3
  40be38:	45a8      	cmp	r8, r5
  40be3a:	d304      	bcc.n	40be46 <_malloc_r+0x206>
  40be3c:	ebc5 0308 	rsb	r3, r5, r8
  40be40:	2b0f      	cmp	r3, #15
  40be42:	f300 808c 	bgt.w	40bf5e <_malloc_r+0x31e>
  40be46:	4b55      	ldr	r3, [pc, #340]	; (40bf9c <_malloc_r+0x35c>)
  40be48:	f8df 9160 	ldr.w	r9, [pc, #352]	; 40bfac <_malloc_r+0x36c>
  40be4c:	681a      	ldr	r2, [r3, #0]
  40be4e:	f8d9 3000 	ldr.w	r3, [r9]
  40be52:	3301      	adds	r3, #1
  40be54:	442a      	add	r2, r5
  40be56:	eb04 0a08 	add.w	sl, r4, r8
  40be5a:	f000 8160 	beq.w	40c11e <_malloc_r+0x4de>
  40be5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40be62:	320f      	adds	r2, #15
  40be64:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40be68:	f022 020f 	bic.w	r2, r2, #15
  40be6c:	4611      	mov	r1, r2
  40be6e:	4630      	mov	r0, r6
  40be70:	9201      	str	r2, [sp, #4]
  40be72:	f000 ffed 	bl	40ce50 <_sbrk_r>
  40be76:	f1b0 3fff 	cmp.w	r0, #4294967295
  40be7a:	4683      	mov	fp, r0
  40be7c:	9a01      	ldr	r2, [sp, #4]
  40be7e:	f000 8158 	beq.w	40c132 <_malloc_r+0x4f2>
  40be82:	4582      	cmp	sl, r0
  40be84:	f200 80fc 	bhi.w	40c080 <_malloc_r+0x440>
  40be88:	4b45      	ldr	r3, [pc, #276]	; (40bfa0 <_malloc_r+0x360>)
  40be8a:	6819      	ldr	r1, [r3, #0]
  40be8c:	45da      	cmp	sl, fp
  40be8e:	4411      	add	r1, r2
  40be90:	6019      	str	r1, [r3, #0]
  40be92:	f000 8153 	beq.w	40c13c <_malloc_r+0x4fc>
  40be96:	f8d9 0000 	ldr.w	r0, [r9]
  40be9a:	f8df e110 	ldr.w	lr, [pc, #272]	; 40bfac <_malloc_r+0x36c>
  40be9e:	3001      	adds	r0, #1
  40bea0:	bf1b      	ittet	ne
  40bea2:	ebca 0a0b 	rsbne	sl, sl, fp
  40bea6:	4451      	addne	r1, sl
  40bea8:	f8ce b000 	streq.w	fp, [lr]
  40beac:	6019      	strne	r1, [r3, #0]
  40beae:	f01b 0107 	ands.w	r1, fp, #7
  40beb2:	f000 8117 	beq.w	40c0e4 <_malloc_r+0x4a4>
  40beb6:	f1c1 0008 	rsb	r0, r1, #8
  40beba:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40bebe:	4483      	add	fp, r0
  40bec0:	3108      	adds	r1, #8
  40bec2:	445a      	add	r2, fp
  40bec4:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40bec8:	ebc2 0901 	rsb	r9, r2, r1
  40becc:	4649      	mov	r1, r9
  40bece:	4630      	mov	r0, r6
  40bed0:	9301      	str	r3, [sp, #4]
  40bed2:	f000 ffbd 	bl	40ce50 <_sbrk_r>
  40bed6:	1c43      	adds	r3, r0, #1
  40bed8:	9b01      	ldr	r3, [sp, #4]
  40beda:	f000 813f 	beq.w	40c15c <_malloc_r+0x51c>
  40bede:	ebcb 0200 	rsb	r2, fp, r0
  40bee2:	444a      	add	r2, r9
  40bee4:	f042 0201 	orr.w	r2, r2, #1
  40bee8:	6819      	ldr	r1, [r3, #0]
  40beea:	f8c7 b008 	str.w	fp, [r7, #8]
  40beee:	4449      	add	r1, r9
  40bef0:	42bc      	cmp	r4, r7
  40bef2:	f8cb 2004 	str.w	r2, [fp, #4]
  40bef6:	6019      	str	r1, [r3, #0]
  40bef8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40bfa0 <_malloc_r+0x360>
  40befc:	d016      	beq.n	40bf2c <_malloc_r+0x2ec>
  40befe:	f1b8 0f0f 	cmp.w	r8, #15
  40bf02:	f240 80fd 	bls.w	40c100 <_malloc_r+0x4c0>
  40bf06:	6862      	ldr	r2, [r4, #4]
  40bf08:	f1a8 030c 	sub.w	r3, r8, #12
  40bf0c:	f023 0307 	bic.w	r3, r3, #7
  40bf10:	18e0      	adds	r0, r4, r3
  40bf12:	f002 0201 	and.w	r2, r2, #1
  40bf16:	f04f 0e05 	mov.w	lr, #5
  40bf1a:	431a      	orrs	r2, r3
  40bf1c:	2b0f      	cmp	r3, #15
  40bf1e:	6062      	str	r2, [r4, #4]
  40bf20:	f8c0 e004 	str.w	lr, [r0, #4]
  40bf24:	f8c0 e008 	str.w	lr, [r0, #8]
  40bf28:	f200 811c 	bhi.w	40c164 <_malloc_r+0x524>
  40bf2c:	4b1d      	ldr	r3, [pc, #116]	; (40bfa4 <_malloc_r+0x364>)
  40bf2e:	68bc      	ldr	r4, [r7, #8]
  40bf30:	681a      	ldr	r2, [r3, #0]
  40bf32:	4291      	cmp	r1, r2
  40bf34:	bf88      	it	hi
  40bf36:	6019      	strhi	r1, [r3, #0]
  40bf38:	4b1b      	ldr	r3, [pc, #108]	; (40bfa8 <_malloc_r+0x368>)
  40bf3a:	681a      	ldr	r2, [r3, #0]
  40bf3c:	4291      	cmp	r1, r2
  40bf3e:	6862      	ldr	r2, [r4, #4]
  40bf40:	bf88      	it	hi
  40bf42:	6019      	strhi	r1, [r3, #0]
  40bf44:	f022 0203 	bic.w	r2, r2, #3
  40bf48:	4295      	cmp	r5, r2
  40bf4a:	eba2 0305 	sub.w	r3, r2, r5
  40bf4e:	d801      	bhi.n	40bf54 <_malloc_r+0x314>
  40bf50:	2b0f      	cmp	r3, #15
  40bf52:	dc04      	bgt.n	40bf5e <_malloc_r+0x31e>
  40bf54:	4630      	mov	r0, r6
  40bf56:	f000 fa7b 	bl	40c450 <__malloc_unlock>
  40bf5a:	2400      	movs	r4, #0
  40bf5c:	e738      	b.n	40bdd0 <_malloc_r+0x190>
  40bf5e:	1962      	adds	r2, r4, r5
  40bf60:	f043 0301 	orr.w	r3, r3, #1
  40bf64:	f045 0501 	orr.w	r5, r5, #1
  40bf68:	6065      	str	r5, [r4, #4]
  40bf6a:	4630      	mov	r0, r6
  40bf6c:	60ba      	str	r2, [r7, #8]
  40bf6e:	6053      	str	r3, [r2, #4]
  40bf70:	f000 fa6e 	bl	40c450 <__malloc_unlock>
  40bf74:	3408      	adds	r4, #8
  40bf76:	4620      	mov	r0, r4
  40bf78:	b003      	add	sp, #12
  40bf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bf7e:	2b14      	cmp	r3, #20
  40bf80:	d971      	bls.n	40c066 <_malloc_r+0x426>
  40bf82:	2b54      	cmp	r3, #84	; 0x54
  40bf84:	f200 80a4 	bhi.w	40c0d0 <_malloc_r+0x490>
  40bf88:	0b28      	lsrs	r0, r5, #12
  40bf8a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40bf8e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40bf92:	306e      	adds	r0, #110	; 0x6e
  40bf94:	e676      	b.n	40bc84 <_malloc_r+0x44>
  40bf96:	bf00      	nop
  40bf98:	20400530 	.word	0x20400530
  40bf9c:	20400f9c 	.word	0x20400f9c
  40bfa0:	20400fa0 	.word	0x20400fa0
  40bfa4:	20400f98 	.word	0x20400f98
  40bfa8:	20400f94 	.word	0x20400f94
  40bfac:	2040093c 	.word	0x2040093c
  40bfb0:	0a5a      	lsrs	r2, r3, #9
  40bfb2:	2a04      	cmp	r2, #4
  40bfb4:	d95e      	bls.n	40c074 <_malloc_r+0x434>
  40bfb6:	2a14      	cmp	r2, #20
  40bfb8:	f200 80b3 	bhi.w	40c122 <_malloc_r+0x4e2>
  40bfbc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40bfc0:	0049      	lsls	r1, r1, #1
  40bfc2:	325b      	adds	r2, #91	; 0x5b
  40bfc4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40bfc8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  40bfcc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 40c1ac <_malloc_r+0x56c>
  40bfd0:	f1ac 0c08 	sub.w	ip, ip, #8
  40bfd4:	458c      	cmp	ip, r1
  40bfd6:	f000 8088 	beq.w	40c0ea <_malloc_r+0x4aa>
  40bfda:	684a      	ldr	r2, [r1, #4]
  40bfdc:	f022 0203 	bic.w	r2, r2, #3
  40bfe0:	4293      	cmp	r3, r2
  40bfe2:	d202      	bcs.n	40bfea <_malloc_r+0x3aa>
  40bfe4:	6889      	ldr	r1, [r1, #8]
  40bfe6:	458c      	cmp	ip, r1
  40bfe8:	d1f7      	bne.n	40bfda <_malloc_r+0x39a>
  40bfea:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40bfee:	687a      	ldr	r2, [r7, #4]
  40bff0:	f8c4 c00c 	str.w	ip, [r4, #12]
  40bff4:	60a1      	str	r1, [r4, #8]
  40bff6:	f8cc 4008 	str.w	r4, [ip, #8]
  40bffa:	60cc      	str	r4, [r1, #12]
  40bffc:	e688      	b.n	40bd10 <_malloc_r+0xd0>
  40bffe:	1963      	adds	r3, r4, r5
  40c000:	f042 0701 	orr.w	r7, r2, #1
  40c004:	f045 0501 	orr.w	r5, r5, #1
  40c008:	6065      	str	r5, [r4, #4]
  40c00a:	4630      	mov	r0, r6
  40c00c:	614b      	str	r3, [r1, #20]
  40c00e:	610b      	str	r3, [r1, #16]
  40c010:	f8c3 e00c 	str.w	lr, [r3, #12]
  40c014:	f8c3 e008 	str.w	lr, [r3, #8]
  40c018:	605f      	str	r7, [r3, #4]
  40c01a:	509a      	str	r2, [r3, r2]
  40c01c:	3408      	adds	r4, #8
  40c01e:	f000 fa17 	bl	40c450 <__malloc_unlock>
  40c022:	e6d5      	b.n	40bdd0 <_malloc_r+0x190>
  40c024:	684a      	ldr	r2, [r1, #4]
  40c026:	e673      	b.n	40bd10 <_malloc_r+0xd0>
  40c028:	f108 0801 	add.w	r8, r8, #1
  40c02c:	f018 0f03 	tst.w	r8, #3
  40c030:	f10c 0c08 	add.w	ip, ip, #8
  40c034:	f47f ae7f 	bne.w	40bd36 <_malloc_r+0xf6>
  40c038:	e030      	b.n	40c09c <_malloc_r+0x45c>
  40c03a:	68dc      	ldr	r4, [r3, #12]
  40c03c:	42a3      	cmp	r3, r4
  40c03e:	bf08      	it	eq
  40c040:	3002      	addeq	r0, #2
  40c042:	f43f ae35 	beq.w	40bcb0 <_malloc_r+0x70>
  40c046:	e6b3      	b.n	40bdb0 <_malloc_r+0x170>
  40c048:	440b      	add	r3, r1
  40c04a:	460c      	mov	r4, r1
  40c04c:	685a      	ldr	r2, [r3, #4]
  40c04e:	68c9      	ldr	r1, [r1, #12]
  40c050:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40c054:	f042 0201 	orr.w	r2, r2, #1
  40c058:	605a      	str	r2, [r3, #4]
  40c05a:	4630      	mov	r0, r6
  40c05c:	60e9      	str	r1, [r5, #12]
  40c05e:	608d      	str	r5, [r1, #8]
  40c060:	f000 f9f6 	bl	40c450 <__malloc_unlock>
  40c064:	e6b4      	b.n	40bdd0 <_malloc_r+0x190>
  40c066:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40c06a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40c06e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c072:	e607      	b.n	40bc84 <_malloc_r+0x44>
  40c074:	099a      	lsrs	r2, r3, #6
  40c076:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40c07a:	0049      	lsls	r1, r1, #1
  40c07c:	3238      	adds	r2, #56	; 0x38
  40c07e:	e7a1      	b.n	40bfc4 <_malloc_r+0x384>
  40c080:	42bc      	cmp	r4, r7
  40c082:	4b4a      	ldr	r3, [pc, #296]	; (40c1ac <_malloc_r+0x56c>)
  40c084:	f43f af00 	beq.w	40be88 <_malloc_r+0x248>
  40c088:	689c      	ldr	r4, [r3, #8]
  40c08a:	6862      	ldr	r2, [r4, #4]
  40c08c:	f022 0203 	bic.w	r2, r2, #3
  40c090:	e75a      	b.n	40bf48 <_malloc_r+0x308>
  40c092:	f859 3908 	ldr.w	r3, [r9], #-8
  40c096:	4599      	cmp	r9, r3
  40c098:	f040 8082 	bne.w	40c1a0 <_malloc_r+0x560>
  40c09c:	f010 0f03 	tst.w	r0, #3
  40c0a0:	f100 30ff 	add.w	r0, r0, #4294967295
  40c0a4:	d1f5      	bne.n	40c092 <_malloc_r+0x452>
  40c0a6:	687b      	ldr	r3, [r7, #4]
  40c0a8:	ea23 0304 	bic.w	r3, r3, r4
  40c0ac:	607b      	str	r3, [r7, #4]
  40c0ae:	0064      	lsls	r4, r4, #1
  40c0b0:	429c      	cmp	r4, r3
  40c0b2:	f63f aebd 	bhi.w	40be30 <_malloc_r+0x1f0>
  40c0b6:	2c00      	cmp	r4, #0
  40c0b8:	f43f aeba 	beq.w	40be30 <_malloc_r+0x1f0>
  40c0bc:	421c      	tst	r4, r3
  40c0be:	4640      	mov	r0, r8
  40c0c0:	f47f ae35 	bne.w	40bd2e <_malloc_r+0xee>
  40c0c4:	0064      	lsls	r4, r4, #1
  40c0c6:	421c      	tst	r4, r3
  40c0c8:	f100 0004 	add.w	r0, r0, #4
  40c0cc:	d0fa      	beq.n	40c0c4 <_malloc_r+0x484>
  40c0ce:	e62e      	b.n	40bd2e <_malloc_r+0xee>
  40c0d0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40c0d4:	d818      	bhi.n	40c108 <_malloc_r+0x4c8>
  40c0d6:	0be8      	lsrs	r0, r5, #15
  40c0d8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  40c0dc:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c0e0:	3077      	adds	r0, #119	; 0x77
  40c0e2:	e5cf      	b.n	40bc84 <_malloc_r+0x44>
  40c0e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40c0e8:	e6eb      	b.n	40bec2 <_malloc_r+0x282>
  40c0ea:	2101      	movs	r1, #1
  40c0ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40c0f0:	1092      	asrs	r2, r2, #2
  40c0f2:	fa01 f202 	lsl.w	r2, r1, r2
  40c0f6:	431a      	orrs	r2, r3
  40c0f8:	f8c8 2004 	str.w	r2, [r8, #4]
  40c0fc:	4661      	mov	r1, ip
  40c0fe:	e777      	b.n	40bff0 <_malloc_r+0x3b0>
  40c100:	2301      	movs	r3, #1
  40c102:	f8cb 3004 	str.w	r3, [fp, #4]
  40c106:	e725      	b.n	40bf54 <_malloc_r+0x314>
  40c108:	f240 5254 	movw	r2, #1364	; 0x554
  40c10c:	4293      	cmp	r3, r2
  40c10e:	d820      	bhi.n	40c152 <_malloc_r+0x512>
  40c110:	0ca8      	lsrs	r0, r5, #18
  40c112:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40c116:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c11a:	307c      	adds	r0, #124	; 0x7c
  40c11c:	e5b2      	b.n	40bc84 <_malloc_r+0x44>
  40c11e:	3210      	adds	r2, #16
  40c120:	e6a4      	b.n	40be6c <_malloc_r+0x22c>
  40c122:	2a54      	cmp	r2, #84	; 0x54
  40c124:	d826      	bhi.n	40c174 <_malloc_r+0x534>
  40c126:	0b1a      	lsrs	r2, r3, #12
  40c128:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40c12c:	0049      	lsls	r1, r1, #1
  40c12e:	326e      	adds	r2, #110	; 0x6e
  40c130:	e748      	b.n	40bfc4 <_malloc_r+0x384>
  40c132:	68bc      	ldr	r4, [r7, #8]
  40c134:	6862      	ldr	r2, [r4, #4]
  40c136:	f022 0203 	bic.w	r2, r2, #3
  40c13a:	e705      	b.n	40bf48 <_malloc_r+0x308>
  40c13c:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40c140:	2800      	cmp	r0, #0
  40c142:	f47f aea8 	bne.w	40be96 <_malloc_r+0x256>
  40c146:	4442      	add	r2, r8
  40c148:	68bb      	ldr	r3, [r7, #8]
  40c14a:	f042 0201 	orr.w	r2, r2, #1
  40c14e:	605a      	str	r2, [r3, #4]
  40c150:	e6ec      	b.n	40bf2c <_malloc_r+0x2ec>
  40c152:	23fe      	movs	r3, #254	; 0xfe
  40c154:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40c158:	207e      	movs	r0, #126	; 0x7e
  40c15a:	e593      	b.n	40bc84 <_malloc_r+0x44>
  40c15c:	2201      	movs	r2, #1
  40c15e:	f04f 0900 	mov.w	r9, #0
  40c162:	e6c1      	b.n	40bee8 <_malloc_r+0x2a8>
  40c164:	f104 0108 	add.w	r1, r4, #8
  40c168:	4630      	mov	r0, r6
  40c16a:	f7ff fa4b 	bl	40b604 <_free_r>
  40c16e:	f8d9 1000 	ldr.w	r1, [r9]
  40c172:	e6db      	b.n	40bf2c <_malloc_r+0x2ec>
  40c174:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40c178:	d805      	bhi.n	40c186 <_malloc_r+0x546>
  40c17a:	0bda      	lsrs	r2, r3, #15
  40c17c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40c180:	0049      	lsls	r1, r1, #1
  40c182:	3277      	adds	r2, #119	; 0x77
  40c184:	e71e      	b.n	40bfc4 <_malloc_r+0x384>
  40c186:	f240 5154 	movw	r1, #1364	; 0x554
  40c18a:	428a      	cmp	r2, r1
  40c18c:	d805      	bhi.n	40c19a <_malloc_r+0x55a>
  40c18e:	0c9a      	lsrs	r2, r3, #18
  40c190:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40c194:	0049      	lsls	r1, r1, #1
  40c196:	327c      	adds	r2, #124	; 0x7c
  40c198:	e714      	b.n	40bfc4 <_malloc_r+0x384>
  40c19a:	21fe      	movs	r1, #254	; 0xfe
  40c19c:	227e      	movs	r2, #126	; 0x7e
  40c19e:	e711      	b.n	40bfc4 <_malloc_r+0x384>
  40c1a0:	687b      	ldr	r3, [r7, #4]
  40c1a2:	e784      	b.n	40c0ae <_malloc_r+0x46e>
  40c1a4:	08e8      	lsrs	r0, r5, #3
  40c1a6:	1c43      	adds	r3, r0, #1
  40c1a8:	005b      	lsls	r3, r3, #1
  40c1aa:	e5f8      	b.n	40bd9e <_malloc_r+0x15e>
  40c1ac:	20400530 	.word	0x20400530

0040c1b0 <memchr>:
  40c1b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c1b4:	2a10      	cmp	r2, #16
  40c1b6:	db2b      	blt.n	40c210 <memchr+0x60>
  40c1b8:	f010 0f07 	tst.w	r0, #7
  40c1bc:	d008      	beq.n	40c1d0 <memchr+0x20>
  40c1be:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c1c2:	3a01      	subs	r2, #1
  40c1c4:	428b      	cmp	r3, r1
  40c1c6:	d02d      	beq.n	40c224 <memchr+0x74>
  40c1c8:	f010 0f07 	tst.w	r0, #7
  40c1cc:	b342      	cbz	r2, 40c220 <memchr+0x70>
  40c1ce:	d1f6      	bne.n	40c1be <memchr+0xe>
  40c1d0:	b4f0      	push	{r4, r5, r6, r7}
  40c1d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40c1d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40c1da:	f022 0407 	bic.w	r4, r2, #7
  40c1de:	f07f 0700 	mvns.w	r7, #0
  40c1e2:	2300      	movs	r3, #0
  40c1e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40c1e8:	3c08      	subs	r4, #8
  40c1ea:	ea85 0501 	eor.w	r5, r5, r1
  40c1ee:	ea86 0601 	eor.w	r6, r6, r1
  40c1f2:	fa85 f547 	uadd8	r5, r5, r7
  40c1f6:	faa3 f587 	sel	r5, r3, r7
  40c1fa:	fa86 f647 	uadd8	r6, r6, r7
  40c1fe:	faa5 f687 	sel	r6, r5, r7
  40c202:	b98e      	cbnz	r6, 40c228 <memchr+0x78>
  40c204:	d1ee      	bne.n	40c1e4 <memchr+0x34>
  40c206:	bcf0      	pop	{r4, r5, r6, r7}
  40c208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c20c:	f002 0207 	and.w	r2, r2, #7
  40c210:	b132      	cbz	r2, 40c220 <memchr+0x70>
  40c212:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c216:	3a01      	subs	r2, #1
  40c218:	ea83 0301 	eor.w	r3, r3, r1
  40c21c:	b113      	cbz	r3, 40c224 <memchr+0x74>
  40c21e:	d1f8      	bne.n	40c212 <memchr+0x62>
  40c220:	2000      	movs	r0, #0
  40c222:	4770      	bx	lr
  40c224:	3801      	subs	r0, #1
  40c226:	4770      	bx	lr
  40c228:	2d00      	cmp	r5, #0
  40c22a:	bf06      	itte	eq
  40c22c:	4635      	moveq	r5, r6
  40c22e:	3803      	subeq	r0, #3
  40c230:	3807      	subne	r0, #7
  40c232:	f015 0f01 	tst.w	r5, #1
  40c236:	d107      	bne.n	40c248 <memchr+0x98>
  40c238:	3001      	adds	r0, #1
  40c23a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40c23e:	bf02      	ittt	eq
  40c240:	3001      	addeq	r0, #1
  40c242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40c246:	3001      	addeq	r0, #1
  40c248:	bcf0      	pop	{r4, r5, r6, r7}
  40c24a:	3801      	subs	r0, #1
  40c24c:	4770      	bx	lr
  40c24e:	bf00      	nop

0040c250 <memcpy>:
  40c250:	4684      	mov	ip, r0
  40c252:	ea41 0300 	orr.w	r3, r1, r0
  40c256:	f013 0303 	ands.w	r3, r3, #3
  40c25a:	d16d      	bne.n	40c338 <memcpy+0xe8>
  40c25c:	3a40      	subs	r2, #64	; 0x40
  40c25e:	d341      	bcc.n	40c2e4 <memcpy+0x94>
  40c260:	f851 3b04 	ldr.w	r3, [r1], #4
  40c264:	f840 3b04 	str.w	r3, [r0], #4
  40c268:	f851 3b04 	ldr.w	r3, [r1], #4
  40c26c:	f840 3b04 	str.w	r3, [r0], #4
  40c270:	f851 3b04 	ldr.w	r3, [r1], #4
  40c274:	f840 3b04 	str.w	r3, [r0], #4
  40c278:	f851 3b04 	ldr.w	r3, [r1], #4
  40c27c:	f840 3b04 	str.w	r3, [r0], #4
  40c280:	f851 3b04 	ldr.w	r3, [r1], #4
  40c284:	f840 3b04 	str.w	r3, [r0], #4
  40c288:	f851 3b04 	ldr.w	r3, [r1], #4
  40c28c:	f840 3b04 	str.w	r3, [r0], #4
  40c290:	f851 3b04 	ldr.w	r3, [r1], #4
  40c294:	f840 3b04 	str.w	r3, [r0], #4
  40c298:	f851 3b04 	ldr.w	r3, [r1], #4
  40c29c:	f840 3b04 	str.w	r3, [r0], #4
  40c2a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2a4:	f840 3b04 	str.w	r3, [r0], #4
  40c2a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2ac:	f840 3b04 	str.w	r3, [r0], #4
  40c2b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2b4:	f840 3b04 	str.w	r3, [r0], #4
  40c2b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2bc:	f840 3b04 	str.w	r3, [r0], #4
  40c2c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2c4:	f840 3b04 	str.w	r3, [r0], #4
  40c2c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2cc:	f840 3b04 	str.w	r3, [r0], #4
  40c2d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2d4:	f840 3b04 	str.w	r3, [r0], #4
  40c2d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2dc:	f840 3b04 	str.w	r3, [r0], #4
  40c2e0:	3a40      	subs	r2, #64	; 0x40
  40c2e2:	d2bd      	bcs.n	40c260 <memcpy+0x10>
  40c2e4:	3230      	adds	r2, #48	; 0x30
  40c2e6:	d311      	bcc.n	40c30c <memcpy+0xbc>
  40c2e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2ec:	f840 3b04 	str.w	r3, [r0], #4
  40c2f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2f4:	f840 3b04 	str.w	r3, [r0], #4
  40c2f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c2fc:	f840 3b04 	str.w	r3, [r0], #4
  40c300:	f851 3b04 	ldr.w	r3, [r1], #4
  40c304:	f840 3b04 	str.w	r3, [r0], #4
  40c308:	3a10      	subs	r2, #16
  40c30a:	d2ed      	bcs.n	40c2e8 <memcpy+0x98>
  40c30c:	320c      	adds	r2, #12
  40c30e:	d305      	bcc.n	40c31c <memcpy+0xcc>
  40c310:	f851 3b04 	ldr.w	r3, [r1], #4
  40c314:	f840 3b04 	str.w	r3, [r0], #4
  40c318:	3a04      	subs	r2, #4
  40c31a:	d2f9      	bcs.n	40c310 <memcpy+0xc0>
  40c31c:	3204      	adds	r2, #4
  40c31e:	d008      	beq.n	40c332 <memcpy+0xe2>
  40c320:	07d2      	lsls	r2, r2, #31
  40c322:	bf1c      	itt	ne
  40c324:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c328:	f800 3b01 	strbne.w	r3, [r0], #1
  40c32c:	d301      	bcc.n	40c332 <memcpy+0xe2>
  40c32e:	880b      	ldrh	r3, [r1, #0]
  40c330:	8003      	strh	r3, [r0, #0]
  40c332:	4660      	mov	r0, ip
  40c334:	4770      	bx	lr
  40c336:	bf00      	nop
  40c338:	2a08      	cmp	r2, #8
  40c33a:	d313      	bcc.n	40c364 <memcpy+0x114>
  40c33c:	078b      	lsls	r3, r1, #30
  40c33e:	d08d      	beq.n	40c25c <memcpy+0xc>
  40c340:	f010 0303 	ands.w	r3, r0, #3
  40c344:	d08a      	beq.n	40c25c <memcpy+0xc>
  40c346:	f1c3 0304 	rsb	r3, r3, #4
  40c34a:	1ad2      	subs	r2, r2, r3
  40c34c:	07db      	lsls	r3, r3, #31
  40c34e:	bf1c      	itt	ne
  40c350:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c354:	f800 3b01 	strbne.w	r3, [r0], #1
  40c358:	d380      	bcc.n	40c25c <memcpy+0xc>
  40c35a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40c35e:	f820 3b02 	strh.w	r3, [r0], #2
  40c362:	e77b      	b.n	40c25c <memcpy+0xc>
  40c364:	3a04      	subs	r2, #4
  40c366:	d3d9      	bcc.n	40c31c <memcpy+0xcc>
  40c368:	3a01      	subs	r2, #1
  40c36a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40c36e:	f800 3b01 	strb.w	r3, [r0], #1
  40c372:	d2f9      	bcs.n	40c368 <memcpy+0x118>
  40c374:	780b      	ldrb	r3, [r1, #0]
  40c376:	7003      	strb	r3, [r0, #0]
  40c378:	784b      	ldrb	r3, [r1, #1]
  40c37a:	7043      	strb	r3, [r0, #1]
  40c37c:	788b      	ldrb	r3, [r1, #2]
  40c37e:	7083      	strb	r3, [r0, #2]
  40c380:	4660      	mov	r0, ip
  40c382:	4770      	bx	lr

0040c384 <memmove>:
  40c384:	4288      	cmp	r0, r1
  40c386:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c388:	d90d      	bls.n	40c3a6 <memmove+0x22>
  40c38a:	188b      	adds	r3, r1, r2
  40c38c:	4298      	cmp	r0, r3
  40c38e:	d20a      	bcs.n	40c3a6 <memmove+0x22>
  40c390:	1881      	adds	r1, r0, r2
  40c392:	2a00      	cmp	r2, #0
  40c394:	d051      	beq.n	40c43a <memmove+0xb6>
  40c396:	1a9a      	subs	r2, r3, r2
  40c398:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40c39c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40c3a0:	4293      	cmp	r3, r2
  40c3a2:	d1f9      	bne.n	40c398 <memmove+0x14>
  40c3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c3a6:	2a0f      	cmp	r2, #15
  40c3a8:	d948      	bls.n	40c43c <memmove+0xb8>
  40c3aa:	ea41 0300 	orr.w	r3, r1, r0
  40c3ae:	079b      	lsls	r3, r3, #30
  40c3b0:	d146      	bne.n	40c440 <memmove+0xbc>
  40c3b2:	f100 0410 	add.w	r4, r0, #16
  40c3b6:	f101 0310 	add.w	r3, r1, #16
  40c3ba:	4615      	mov	r5, r2
  40c3bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40c3c0:	f844 6c10 	str.w	r6, [r4, #-16]
  40c3c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40c3c8:	f844 6c0c 	str.w	r6, [r4, #-12]
  40c3cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40c3d0:	f844 6c08 	str.w	r6, [r4, #-8]
  40c3d4:	3d10      	subs	r5, #16
  40c3d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40c3da:	f844 6c04 	str.w	r6, [r4, #-4]
  40c3de:	2d0f      	cmp	r5, #15
  40c3e0:	f103 0310 	add.w	r3, r3, #16
  40c3e4:	f104 0410 	add.w	r4, r4, #16
  40c3e8:	d8e8      	bhi.n	40c3bc <memmove+0x38>
  40c3ea:	f1a2 0310 	sub.w	r3, r2, #16
  40c3ee:	f023 030f 	bic.w	r3, r3, #15
  40c3f2:	f002 0e0f 	and.w	lr, r2, #15
  40c3f6:	3310      	adds	r3, #16
  40c3f8:	f1be 0f03 	cmp.w	lr, #3
  40c3fc:	4419      	add	r1, r3
  40c3fe:	4403      	add	r3, r0
  40c400:	d921      	bls.n	40c446 <memmove+0xc2>
  40c402:	1f1e      	subs	r6, r3, #4
  40c404:	460d      	mov	r5, r1
  40c406:	4674      	mov	r4, lr
  40c408:	3c04      	subs	r4, #4
  40c40a:	f855 7b04 	ldr.w	r7, [r5], #4
  40c40e:	f846 7f04 	str.w	r7, [r6, #4]!
  40c412:	2c03      	cmp	r4, #3
  40c414:	d8f8      	bhi.n	40c408 <memmove+0x84>
  40c416:	f1ae 0404 	sub.w	r4, lr, #4
  40c41a:	f024 0403 	bic.w	r4, r4, #3
  40c41e:	3404      	adds	r4, #4
  40c420:	4423      	add	r3, r4
  40c422:	4421      	add	r1, r4
  40c424:	f002 0203 	and.w	r2, r2, #3
  40c428:	b162      	cbz	r2, 40c444 <memmove+0xc0>
  40c42a:	3b01      	subs	r3, #1
  40c42c:	440a      	add	r2, r1
  40c42e:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c432:	f803 4f01 	strb.w	r4, [r3, #1]!
  40c436:	428a      	cmp	r2, r1
  40c438:	d1f9      	bne.n	40c42e <memmove+0xaa>
  40c43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c43c:	4603      	mov	r3, r0
  40c43e:	e7f3      	b.n	40c428 <memmove+0xa4>
  40c440:	4603      	mov	r3, r0
  40c442:	e7f2      	b.n	40c42a <memmove+0xa6>
  40c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c446:	4672      	mov	r2, lr
  40c448:	e7ee      	b.n	40c428 <memmove+0xa4>
  40c44a:	bf00      	nop

0040c44c <__malloc_lock>:
  40c44c:	4770      	bx	lr
  40c44e:	bf00      	nop

0040c450 <__malloc_unlock>:
  40c450:	4770      	bx	lr
  40c452:	bf00      	nop

0040c454 <_Balloc>:
  40c454:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c456:	b570      	push	{r4, r5, r6, lr}
  40c458:	4605      	mov	r5, r0
  40c45a:	460c      	mov	r4, r1
  40c45c:	b14b      	cbz	r3, 40c472 <_Balloc+0x1e>
  40c45e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40c462:	b180      	cbz	r0, 40c486 <_Balloc+0x32>
  40c464:	6802      	ldr	r2, [r0, #0]
  40c466:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40c46a:	2300      	movs	r3, #0
  40c46c:	6103      	str	r3, [r0, #16]
  40c46e:	60c3      	str	r3, [r0, #12]
  40c470:	bd70      	pop	{r4, r5, r6, pc}
  40c472:	2221      	movs	r2, #33	; 0x21
  40c474:	2104      	movs	r1, #4
  40c476:	f000 feb7 	bl	40d1e8 <_calloc_r>
  40c47a:	64e8      	str	r0, [r5, #76]	; 0x4c
  40c47c:	4603      	mov	r3, r0
  40c47e:	2800      	cmp	r0, #0
  40c480:	d1ed      	bne.n	40c45e <_Balloc+0xa>
  40c482:	2000      	movs	r0, #0
  40c484:	bd70      	pop	{r4, r5, r6, pc}
  40c486:	2101      	movs	r1, #1
  40c488:	fa01 f604 	lsl.w	r6, r1, r4
  40c48c:	1d72      	adds	r2, r6, #5
  40c48e:	4628      	mov	r0, r5
  40c490:	0092      	lsls	r2, r2, #2
  40c492:	f000 fea9 	bl	40d1e8 <_calloc_r>
  40c496:	2800      	cmp	r0, #0
  40c498:	d0f3      	beq.n	40c482 <_Balloc+0x2e>
  40c49a:	6044      	str	r4, [r0, #4]
  40c49c:	6086      	str	r6, [r0, #8]
  40c49e:	e7e4      	b.n	40c46a <_Balloc+0x16>

0040c4a0 <_Bfree>:
  40c4a0:	b131      	cbz	r1, 40c4b0 <_Bfree+0x10>
  40c4a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c4a4:	684a      	ldr	r2, [r1, #4]
  40c4a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40c4aa:	6008      	str	r0, [r1, #0]
  40c4ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40c4b0:	4770      	bx	lr
  40c4b2:	bf00      	nop

0040c4b4 <__multadd>:
  40c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c4b6:	690c      	ldr	r4, [r1, #16]
  40c4b8:	b083      	sub	sp, #12
  40c4ba:	460d      	mov	r5, r1
  40c4bc:	4606      	mov	r6, r0
  40c4be:	f101 0e14 	add.w	lr, r1, #20
  40c4c2:	2700      	movs	r7, #0
  40c4c4:	f8de 0000 	ldr.w	r0, [lr]
  40c4c8:	b281      	uxth	r1, r0
  40c4ca:	fb02 3101 	mla	r1, r2, r1, r3
  40c4ce:	0c0b      	lsrs	r3, r1, #16
  40c4d0:	0c00      	lsrs	r0, r0, #16
  40c4d2:	fb02 3300 	mla	r3, r2, r0, r3
  40c4d6:	b289      	uxth	r1, r1
  40c4d8:	3701      	adds	r7, #1
  40c4da:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  40c4de:	42bc      	cmp	r4, r7
  40c4e0:	f84e 1b04 	str.w	r1, [lr], #4
  40c4e4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40c4e8:	dcec      	bgt.n	40c4c4 <__multadd+0x10>
  40c4ea:	b13b      	cbz	r3, 40c4fc <__multadd+0x48>
  40c4ec:	68aa      	ldr	r2, [r5, #8]
  40c4ee:	4294      	cmp	r4, r2
  40c4f0:	da07      	bge.n	40c502 <__multadd+0x4e>
  40c4f2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40c4f6:	3401      	adds	r4, #1
  40c4f8:	6153      	str	r3, [r2, #20]
  40c4fa:	612c      	str	r4, [r5, #16]
  40c4fc:	4628      	mov	r0, r5
  40c4fe:	b003      	add	sp, #12
  40c500:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c502:	6869      	ldr	r1, [r5, #4]
  40c504:	9301      	str	r3, [sp, #4]
  40c506:	3101      	adds	r1, #1
  40c508:	4630      	mov	r0, r6
  40c50a:	f7ff ffa3 	bl	40c454 <_Balloc>
  40c50e:	692a      	ldr	r2, [r5, #16]
  40c510:	3202      	adds	r2, #2
  40c512:	f105 010c 	add.w	r1, r5, #12
  40c516:	4607      	mov	r7, r0
  40c518:	0092      	lsls	r2, r2, #2
  40c51a:	300c      	adds	r0, #12
  40c51c:	f7ff fe98 	bl	40c250 <memcpy>
  40c520:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40c522:	6869      	ldr	r1, [r5, #4]
  40c524:	9b01      	ldr	r3, [sp, #4]
  40c526:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40c52a:	6028      	str	r0, [r5, #0]
  40c52c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40c530:	463d      	mov	r5, r7
  40c532:	e7de      	b.n	40c4f2 <__multadd+0x3e>

0040c534 <__hi0bits>:
  40c534:	0c03      	lsrs	r3, r0, #16
  40c536:	041b      	lsls	r3, r3, #16
  40c538:	b9b3      	cbnz	r3, 40c568 <__hi0bits+0x34>
  40c53a:	0400      	lsls	r0, r0, #16
  40c53c:	2310      	movs	r3, #16
  40c53e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40c542:	bf04      	itt	eq
  40c544:	0200      	lsleq	r0, r0, #8
  40c546:	3308      	addeq	r3, #8
  40c548:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40c54c:	bf04      	itt	eq
  40c54e:	0100      	lsleq	r0, r0, #4
  40c550:	3304      	addeq	r3, #4
  40c552:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40c556:	bf04      	itt	eq
  40c558:	0080      	lsleq	r0, r0, #2
  40c55a:	3302      	addeq	r3, #2
  40c55c:	2800      	cmp	r0, #0
  40c55e:	db07      	blt.n	40c570 <__hi0bits+0x3c>
  40c560:	0042      	lsls	r2, r0, #1
  40c562:	d403      	bmi.n	40c56c <__hi0bits+0x38>
  40c564:	2020      	movs	r0, #32
  40c566:	4770      	bx	lr
  40c568:	2300      	movs	r3, #0
  40c56a:	e7e8      	b.n	40c53e <__hi0bits+0xa>
  40c56c:	1c58      	adds	r0, r3, #1
  40c56e:	4770      	bx	lr
  40c570:	4618      	mov	r0, r3
  40c572:	4770      	bx	lr

0040c574 <__lo0bits>:
  40c574:	6803      	ldr	r3, [r0, #0]
  40c576:	f013 0207 	ands.w	r2, r3, #7
  40c57a:	d007      	beq.n	40c58c <__lo0bits+0x18>
  40c57c:	07d9      	lsls	r1, r3, #31
  40c57e:	d420      	bmi.n	40c5c2 <__lo0bits+0x4e>
  40c580:	079a      	lsls	r2, r3, #30
  40c582:	d420      	bmi.n	40c5c6 <__lo0bits+0x52>
  40c584:	089b      	lsrs	r3, r3, #2
  40c586:	6003      	str	r3, [r0, #0]
  40c588:	2002      	movs	r0, #2
  40c58a:	4770      	bx	lr
  40c58c:	b299      	uxth	r1, r3
  40c58e:	b909      	cbnz	r1, 40c594 <__lo0bits+0x20>
  40c590:	0c1b      	lsrs	r3, r3, #16
  40c592:	2210      	movs	r2, #16
  40c594:	f013 0fff 	tst.w	r3, #255	; 0xff
  40c598:	bf04      	itt	eq
  40c59a:	0a1b      	lsreq	r3, r3, #8
  40c59c:	3208      	addeq	r2, #8
  40c59e:	0719      	lsls	r1, r3, #28
  40c5a0:	bf04      	itt	eq
  40c5a2:	091b      	lsreq	r3, r3, #4
  40c5a4:	3204      	addeq	r2, #4
  40c5a6:	0799      	lsls	r1, r3, #30
  40c5a8:	bf04      	itt	eq
  40c5aa:	089b      	lsreq	r3, r3, #2
  40c5ac:	3202      	addeq	r2, #2
  40c5ae:	07d9      	lsls	r1, r3, #31
  40c5b0:	d404      	bmi.n	40c5bc <__lo0bits+0x48>
  40c5b2:	085b      	lsrs	r3, r3, #1
  40c5b4:	d101      	bne.n	40c5ba <__lo0bits+0x46>
  40c5b6:	2020      	movs	r0, #32
  40c5b8:	4770      	bx	lr
  40c5ba:	3201      	adds	r2, #1
  40c5bc:	6003      	str	r3, [r0, #0]
  40c5be:	4610      	mov	r0, r2
  40c5c0:	4770      	bx	lr
  40c5c2:	2000      	movs	r0, #0
  40c5c4:	4770      	bx	lr
  40c5c6:	085b      	lsrs	r3, r3, #1
  40c5c8:	6003      	str	r3, [r0, #0]
  40c5ca:	2001      	movs	r0, #1
  40c5cc:	4770      	bx	lr
  40c5ce:	bf00      	nop

0040c5d0 <__i2b>:
  40c5d0:	b510      	push	{r4, lr}
  40c5d2:	460c      	mov	r4, r1
  40c5d4:	2101      	movs	r1, #1
  40c5d6:	f7ff ff3d 	bl	40c454 <_Balloc>
  40c5da:	2201      	movs	r2, #1
  40c5dc:	6144      	str	r4, [r0, #20]
  40c5de:	6102      	str	r2, [r0, #16]
  40c5e0:	bd10      	pop	{r4, pc}
  40c5e2:	bf00      	nop

0040c5e4 <__multiply>:
  40c5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c5e8:	690d      	ldr	r5, [r1, #16]
  40c5ea:	6917      	ldr	r7, [r2, #16]
  40c5ec:	42bd      	cmp	r5, r7
  40c5ee:	b083      	sub	sp, #12
  40c5f0:	460c      	mov	r4, r1
  40c5f2:	4616      	mov	r6, r2
  40c5f4:	da04      	bge.n	40c600 <__multiply+0x1c>
  40c5f6:	462a      	mov	r2, r5
  40c5f8:	4634      	mov	r4, r6
  40c5fa:	463d      	mov	r5, r7
  40c5fc:	460e      	mov	r6, r1
  40c5fe:	4617      	mov	r7, r2
  40c600:	68a3      	ldr	r3, [r4, #8]
  40c602:	6861      	ldr	r1, [r4, #4]
  40c604:	eb05 0807 	add.w	r8, r5, r7
  40c608:	4598      	cmp	r8, r3
  40c60a:	bfc8      	it	gt
  40c60c:	3101      	addgt	r1, #1
  40c60e:	f7ff ff21 	bl	40c454 <_Balloc>
  40c612:	f100 0c14 	add.w	ip, r0, #20
  40c616:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40c61a:	45cc      	cmp	ip, r9
  40c61c:	9000      	str	r0, [sp, #0]
  40c61e:	d205      	bcs.n	40c62c <__multiply+0x48>
  40c620:	4663      	mov	r3, ip
  40c622:	2100      	movs	r1, #0
  40c624:	f843 1b04 	str.w	r1, [r3], #4
  40c628:	4599      	cmp	r9, r3
  40c62a:	d8fb      	bhi.n	40c624 <__multiply+0x40>
  40c62c:	f106 0214 	add.w	r2, r6, #20
  40c630:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40c634:	f104 0314 	add.w	r3, r4, #20
  40c638:	4552      	cmp	r2, sl
  40c63a:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  40c63e:	d254      	bcs.n	40c6ea <__multiply+0x106>
  40c640:	f8cd 9004 	str.w	r9, [sp, #4]
  40c644:	4699      	mov	r9, r3
  40c646:	f852 3b04 	ldr.w	r3, [r2], #4
  40c64a:	fa1f fb83 	uxth.w	fp, r3
  40c64e:	f1bb 0f00 	cmp.w	fp, #0
  40c652:	d020      	beq.n	40c696 <__multiply+0xb2>
  40c654:	2000      	movs	r0, #0
  40c656:	464f      	mov	r7, r9
  40c658:	4666      	mov	r6, ip
  40c65a:	4605      	mov	r5, r0
  40c65c:	e000      	b.n	40c660 <__multiply+0x7c>
  40c65e:	461e      	mov	r6, r3
  40c660:	f857 4b04 	ldr.w	r4, [r7], #4
  40c664:	6830      	ldr	r0, [r6, #0]
  40c666:	b2a1      	uxth	r1, r4
  40c668:	b283      	uxth	r3, r0
  40c66a:	fb0b 3101 	mla	r1, fp, r1, r3
  40c66e:	0c24      	lsrs	r4, r4, #16
  40c670:	0c00      	lsrs	r0, r0, #16
  40c672:	194b      	adds	r3, r1, r5
  40c674:	fb0b 0004 	mla	r0, fp, r4, r0
  40c678:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40c67c:	b299      	uxth	r1, r3
  40c67e:	4633      	mov	r3, r6
  40c680:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40c684:	45be      	cmp	lr, r7
  40c686:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40c68a:	f843 1b04 	str.w	r1, [r3], #4
  40c68e:	d8e6      	bhi.n	40c65e <__multiply+0x7a>
  40c690:	6075      	str	r5, [r6, #4]
  40c692:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40c696:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40c69a:	d020      	beq.n	40c6de <__multiply+0xfa>
  40c69c:	f8dc 3000 	ldr.w	r3, [ip]
  40c6a0:	4667      	mov	r7, ip
  40c6a2:	4618      	mov	r0, r3
  40c6a4:	464d      	mov	r5, r9
  40c6a6:	2100      	movs	r1, #0
  40c6a8:	e000      	b.n	40c6ac <__multiply+0xc8>
  40c6aa:	4637      	mov	r7, r6
  40c6ac:	882c      	ldrh	r4, [r5, #0]
  40c6ae:	0c00      	lsrs	r0, r0, #16
  40c6b0:	fb0b 0004 	mla	r0, fp, r4, r0
  40c6b4:	4401      	add	r1, r0
  40c6b6:	b29c      	uxth	r4, r3
  40c6b8:	463e      	mov	r6, r7
  40c6ba:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40c6be:	f846 3b04 	str.w	r3, [r6], #4
  40c6c2:	6878      	ldr	r0, [r7, #4]
  40c6c4:	f855 4b04 	ldr.w	r4, [r5], #4
  40c6c8:	b283      	uxth	r3, r0
  40c6ca:	0c24      	lsrs	r4, r4, #16
  40c6cc:	fb0b 3404 	mla	r4, fp, r4, r3
  40c6d0:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40c6d4:	45ae      	cmp	lr, r5
  40c6d6:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40c6da:	d8e6      	bhi.n	40c6aa <__multiply+0xc6>
  40c6dc:	607b      	str	r3, [r7, #4]
  40c6de:	4592      	cmp	sl, r2
  40c6e0:	f10c 0c04 	add.w	ip, ip, #4
  40c6e4:	d8af      	bhi.n	40c646 <__multiply+0x62>
  40c6e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40c6ea:	f1b8 0f00 	cmp.w	r8, #0
  40c6ee:	dd0b      	ble.n	40c708 <__multiply+0x124>
  40c6f0:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40c6f4:	f1a9 0904 	sub.w	r9, r9, #4
  40c6f8:	b11b      	cbz	r3, 40c702 <__multiply+0x11e>
  40c6fa:	e005      	b.n	40c708 <__multiply+0x124>
  40c6fc:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40c700:	b913      	cbnz	r3, 40c708 <__multiply+0x124>
  40c702:	f1b8 0801 	subs.w	r8, r8, #1
  40c706:	d1f9      	bne.n	40c6fc <__multiply+0x118>
  40c708:	9800      	ldr	r0, [sp, #0]
  40c70a:	f8c0 8010 	str.w	r8, [r0, #16]
  40c70e:	b003      	add	sp, #12
  40c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040c714 <__pow5mult>:
  40c714:	f012 0303 	ands.w	r3, r2, #3
  40c718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c71c:	4614      	mov	r4, r2
  40c71e:	4607      	mov	r7, r0
  40c720:	d12e      	bne.n	40c780 <__pow5mult+0x6c>
  40c722:	460e      	mov	r6, r1
  40c724:	10a4      	asrs	r4, r4, #2
  40c726:	d01c      	beq.n	40c762 <__pow5mult+0x4e>
  40c728:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40c72a:	b395      	cbz	r5, 40c792 <__pow5mult+0x7e>
  40c72c:	07e3      	lsls	r3, r4, #31
  40c72e:	f04f 0800 	mov.w	r8, #0
  40c732:	d406      	bmi.n	40c742 <__pow5mult+0x2e>
  40c734:	1064      	asrs	r4, r4, #1
  40c736:	d014      	beq.n	40c762 <__pow5mult+0x4e>
  40c738:	6828      	ldr	r0, [r5, #0]
  40c73a:	b1a8      	cbz	r0, 40c768 <__pow5mult+0x54>
  40c73c:	4605      	mov	r5, r0
  40c73e:	07e3      	lsls	r3, r4, #31
  40c740:	d5f8      	bpl.n	40c734 <__pow5mult+0x20>
  40c742:	462a      	mov	r2, r5
  40c744:	4631      	mov	r1, r6
  40c746:	4638      	mov	r0, r7
  40c748:	f7ff ff4c 	bl	40c5e4 <__multiply>
  40c74c:	b1b6      	cbz	r6, 40c77c <__pow5mult+0x68>
  40c74e:	6872      	ldr	r2, [r6, #4]
  40c750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40c752:	1064      	asrs	r4, r4, #1
  40c754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c758:	6031      	str	r1, [r6, #0]
  40c75a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c75e:	4606      	mov	r6, r0
  40c760:	d1ea      	bne.n	40c738 <__pow5mult+0x24>
  40c762:	4630      	mov	r0, r6
  40c764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c768:	462a      	mov	r2, r5
  40c76a:	4629      	mov	r1, r5
  40c76c:	4638      	mov	r0, r7
  40c76e:	f7ff ff39 	bl	40c5e4 <__multiply>
  40c772:	6028      	str	r0, [r5, #0]
  40c774:	f8c0 8000 	str.w	r8, [r0]
  40c778:	4605      	mov	r5, r0
  40c77a:	e7e0      	b.n	40c73e <__pow5mult+0x2a>
  40c77c:	4606      	mov	r6, r0
  40c77e:	e7d9      	b.n	40c734 <__pow5mult+0x20>
  40c780:	1e5a      	subs	r2, r3, #1
  40c782:	4d0b      	ldr	r5, [pc, #44]	; (40c7b0 <__pow5mult+0x9c>)
  40c784:	2300      	movs	r3, #0
  40c786:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40c78a:	f7ff fe93 	bl	40c4b4 <__multadd>
  40c78e:	4606      	mov	r6, r0
  40c790:	e7c8      	b.n	40c724 <__pow5mult+0x10>
  40c792:	2101      	movs	r1, #1
  40c794:	4638      	mov	r0, r7
  40c796:	f7ff fe5d 	bl	40c454 <_Balloc>
  40c79a:	f240 2171 	movw	r1, #625	; 0x271
  40c79e:	2201      	movs	r2, #1
  40c7a0:	2300      	movs	r3, #0
  40c7a2:	6141      	str	r1, [r0, #20]
  40c7a4:	6102      	str	r2, [r0, #16]
  40c7a6:	4605      	mov	r5, r0
  40c7a8:	64b8      	str	r0, [r7, #72]	; 0x48
  40c7aa:	6003      	str	r3, [r0, #0]
  40c7ac:	e7be      	b.n	40c72c <__pow5mult+0x18>
  40c7ae:	bf00      	nop
  40c7b0:	0040f098 	.word	0x0040f098

0040c7b4 <__lshift>:
  40c7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c7b8:	4691      	mov	r9, r2
  40c7ba:	690a      	ldr	r2, [r1, #16]
  40c7bc:	688b      	ldr	r3, [r1, #8]
  40c7be:	ea4f 1469 	mov.w	r4, r9, asr #5
  40c7c2:	eb04 0802 	add.w	r8, r4, r2
  40c7c6:	f108 0501 	add.w	r5, r8, #1
  40c7ca:	429d      	cmp	r5, r3
  40c7cc:	460e      	mov	r6, r1
  40c7ce:	4682      	mov	sl, r0
  40c7d0:	6849      	ldr	r1, [r1, #4]
  40c7d2:	dd04      	ble.n	40c7de <__lshift+0x2a>
  40c7d4:	005b      	lsls	r3, r3, #1
  40c7d6:	429d      	cmp	r5, r3
  40c7d8:	f101 0101 	add.w	r1, r1, #1
  40c7dc:	dcfa      	bgt.n	40c7d4 <__lshift+0x20>
  40c7de:	4650      	mov	r0, sl
  40c7e0:	f7ff fe38 	bl	40c454 <_Balloc>
  40c7e4:	2c00      	cmp	r4, #0
  40c7e6:	f100 0214 	add.w	r2, r0, #20
  40c7ea:	dd38      	ble.n	40c85e <__lshift+0xaa>
  40c7ec:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40c7f0:	2100      	movs	r1, #0
  40c7f2:	f842 1b04 	str.w	r1, [r2], #4
  40c7f6:	4293      	cmp	r3, r2
  40c7f8:	d1fb      	bne.n	40c7f2 <__lshift+0x3e>
  40c7fa:	6934      	ldr	r4, [r6, #16]
  40c7fc:	f106 0114 	add.w	r1, r6, #20
  40c800:	f019 091f 	ands.w	r9, r9, #31
  40c804:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40c808:	d021      	beq.n	40c84e <__lshift+0x9a>
  40c80a:	f1c9 0220 	rsb	r2, r9, #32
  40c80e:	2400      	movs	r4, #0
  40c810:	680f      	ldr	r7, [r1, #0]
  40c812:	fa07 fc09 	lsl.w	ip, r7, r9
  40c816:	ea4c 0404 	orr.w	r4, ip, r4
  40c81a:	469c      	mov	ip, r3
  40c81c:	f843 4b04 	str.w	r4, [r3], #4
  40c820:	f851 4b04 	ldr.w	r4, [r1], #4
  40c824:	458e      	cmp	lr, r1
  40c826:	fa24 f402 	lsr.w	r4, r4, r2
  40c82a:	d8f1      	bhi.n	40c810 <__lshift+0x5c>
  40c82c:	f8cc 4004 	str.w	r4, [ip, #4]
  40c830:	b10c      	cbz	r4, 40c836 <__lshift+0x82>
  40c832:	f108 0502 	add.w	r5, r8, #2
  40c836:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  40c83a:	6872      	ldr	r2, [r6, #4]
  40c83c:	3d01      	subs	r5, #1
  40c83e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c842:	6105      	str	r5, [r0, #16]
  40c844:	6031      	str	r1, [r6, #0]
  40c846:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c84e:	3b04      	subs	r3, #4
  40c850:	f851 2b04 	ldr.w	r2, [r1], #4
  40c854:	f843 2f04 	str.w	r2, [r3, #4]!
  40c858:	458e      	cmp	lr, r1
  40c85a:	d8f9      	bhi.n	40c850 <__lshift+0x9c>
  40c85c:	e7eb      	b.n	40c836 <__lshift+0x82>
  40c85e:	4613      	mov	r3, r2
  40c860:	e7cb      	b.n	40c7fa <__lshift+0x46>
  40c862:	bf00      	nop

0040c864 <__mcmp>:
  40c864:	6902      	ldr	r2, [r0, #16]
  40c866:	690b      	ldr	r3, [r1, #16]
  40c868:	1ad2      	subs	r2, r2, r3
  40c86a:	d112      	bne.n	40c892 <__mcmp+0x2e>
  40c86c:	009b      	lsls	r3, r3, #2
  40c86e:	3014      	adds	r0, #20
  40c870:	3114      	adds	r1, #20
  40c872:	4419      	add	r1, r3
  40c874:	b410      	push	{r4}
  40c876:	4403      	add	r3, r0
  40c878:	e001      	b.n	40c87e <__mcmp+0x1a>
  40c87a:	4298      	cmp	r0, r3
  40c87c:	d20b      	bcs.n	40c896 <__mcmp+0x32>
  40c87e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40c882:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40c886:	4294      	cmp	r4, r2
  40c888:	d0f7      	beq.n	40c87a <__mcmp+0x16>
  40c88a:	d307      	bcc.n	40c89c <__mcmp+0x38>
  40c88c:	2001      	movs	r0, #1
  40c88e:	bc10      	pop	{r4}
  40c890:	4770      	bx	lr
  40c892:	4610      	mov	r0, r2
  40c894:	4770      	bx	lr
  40c896:	2000      	movs	r0, #0
  40c898:	bc10      	pop	{r4}
  40c89a:	4770      	bx	lr
  40c89c:	f04f 30ff 	mov.w	r0, #4294967295
  40c8a0:	e7f5      	b.n	40c88e <__mcmp+0x2a>
  40c8a2:	bf00      	nop

0040c8a4 <__mdiff>:
  40c8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c8a8:	690b      	ldr	r3, [r1, #16]
  40c8aa:	460f      	mov	r7, r1
  40c8ac:	6911      	ldr	r1, [r2, #16]
  40c8ae:	1a5b      	subs	r3, r3, r1
  40c8b0:	2b00      	cmp	r3, #0
  40c8b2:	4690      	mov	r8, r2
  40c8b4:	d117      	bne.n	40c8e6 <__mdiff+0x42>
  40c8b6:	0089      	lsls	r1, r1, #2
  40c8b8:	f107 0214 	add.w	r2, r7, #20
  40c8bc:	f108 0514 	add.w	r5, r8, #20
  40c8c0:	1853      	adds	r3, r2, r1
  40c8c2:	4429      	add	r1, r5
  40c8c4:	e001      	b.n	40c8ca <__mdiff+0x26>
  40c8c6:	429a      	cmp	r2, r3
  40c8c8:	d25e      	bcs.n	40c988 <__mdiff+0xe4>
  40c8ca:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40c8ce:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40c8d2:	42a6      	cmp	r6, r4
  40c8d4:	d0f7      	beq.n	40c8c6 <__mdiff+0x22>
  40c8d6:	d260      	bcs.n	40c99a <__mdiff+0xf6>
  40c8d8:	463b      	mov	r3, r7
  40c8da:	4614      	mov	r4, r2
  40c8dc:	4647      	mov	r7, r8
  40c8de:	f04f 0901 	mov.w	r9, #1
  40c8e2:	4698      	mov	r8, r3
  40c8e4:	e006      	b.n	40c8f4 <__mdiff+0x50>
  40c8e6:	db5d      	blt.n	40c9a4 <__mdiff+0x100>
  40c8e8:	f107 0514 	add.w	r5, r7, #20
  40c8ec:	f102 0414 	add.w	r4, r2, #20
  40c8f0:	f04f 0900 	mov.w	r9, #0
  40c8f4:	6879      	ldr	r1, [r7, #4]
  40c8f6:	f7ff fdad 	bl	40c454 <_Balloc>
  40c8fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40c8fe:	693e      	ldr	r6, [r7, #16]
  40c900:	f8c0 900c 	str.w	r9, [r0, #12]
  40c904:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40c908:	46a6      	mov	lr, r4
  40c90a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40c90e:	f100 0414 	add.w	r4, r0, #20
  40c912:	2300      	movs	r3, #0
  40c914:	f85e 1b04 	ldr.w	r1, [lr], #4
  40c918:	f855 8b04 	ldr.w	r8, [r5], #4
  40c91c:	b28a      	uxth	r2, r1
  40c91e:	fa13 f388 	uxtah	r3, r3, r8
  40c922:	0c09      	lsrs	r1, r1, #16
  40c924:	1a9a      	subs	r2, r3, r2
  40c926:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40c92a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40c92e:	b292      	uxth	r2, r2
  40c930:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40c934:	45f4      	cmp	ip, lr
  40c936:	f844 2b04 	str.w	r2, [r4], #4
  40c93a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40c93e:	d8e9      	bhi.n	40c914 <__mdiff+0x70>
  40c940:	42af      	cmp	r7, r5
  40c942:	d917      	bls.n	40c974 <__mdiff+0xd0>
  40c944:	46a4      	mov	ip, r4
  40c946:	4629      	mov	r1, r5
  40c948:	f851 eb04 	ldr.w	lr, [r1], #4
  40c94c:	fa13 f28e 	uxtah	r2, r3, lr
  40c950:	1413      	asrs	r3, r2, #16
  40c952:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40c956:	b292      	uxth	r2, r2
  40c958:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40c95c:	428f      	cmp	r7, r1
  40c95e:	f84c 2b04 	str.w	r2, [ip], #4
  40c962:	ea4f 4323 	mov.w	r3, r3, asr #16
  40c966:	d8ef      	bhi.n	40c948 <__mdiff+0xa4>
  40c968:	43ed      	mvns	r5, r5
  40c96a:	443d      	add	r5, r7
  40c96c:	f025 0503 	bic.w	r5, r5, #3
  40c970:	3504      	adds	r5, #4
  40c972:	442c      	add	r4, r5
  40c974:	3c04      	subs	r4, #4
  40c976:	b922      	cbnz	r2, 40c982 <__mdiff+0xde>
  40c978:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40c97c:	3e01      	subs	r6, #1
  40c97e:	2b00      	cmp	r3, #0
  40c980:	d0fa      	beq.n	40c978 <__mdiff+0xd4>
  40c982:	6106      	str	r6, [r0, #16]
  40c984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c988:	2100      	movs	r1, #0
  40c98a:	f7ff fd63 	bl	40c454 <_Balloc>
  40c98e:	2201      	movs	r2, #1
  40c990:	2300      	movs	r3, #0
  40c992:	6102      	str	r2, [r0, #16]
  40c994:	6143      	str	r3, [r0, #20]
  40c996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c99a:	462c      	mov	r4, r5
  40c99c:	f04f 0900 	mov.w	r9, #0
  40c9a0:	4615      	mov	r5, r2
  40c9a2:	e7a7      	b.n	40c8f4 <__mdiff+0x50>
  40c9a4:	463b      	mov	r3, r7
  40c9a6:	f107 0414 	add.w	r4, r7, #20
  40c9aa:	f108 0514 	add.w	r5, r8, #20
  40c9ae:	4647      	mov	r7, r8
  40c9b0:	f04f 0901 	mov.w	r9, #1
  40c9b4:	4698      	mov	r8, r3
  40c9b6:	e79d      	b.n	40c8f4 <__mdiff+0x50>

0040c9b8 <__d2b>:
  40c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c9bc:	b082      	sub	sp, #8
  40c9be:	2101      	movs	r1, #1
  40c9c0:	461c      	mov	r4, r3
  40c9c2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40c9c6:	4615      	mov	r5, r2
  40c9c8:	9e08      	ldr	r6, [sp, #32]
  40c9ca:	f7ff fd43 	bl	40c454 <_Balloc>
  40c9ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40c9d2:	4680      	mov	r8, r0
  40c9d4:	b10f      	cbz	r7, 40c9da <__d2b+0x22>
  40c9d6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40c9da:	9401      	str	r4, [sp, #4]
  40c9dc:	b31d      	cbz	r5, 40ca26 <__d2b+0x6e>
  40c9de:	a802      	add	r0, sp, #8
  40c9e0:	f840 5d08 	str.w	r5, [r0, #-8]!
  40c9e4:	f7ff fdc6 	bl	40c574 <__lo0bits>
  40c9e8:	2800      	cmp	r0, #0
  40c9ea:	d134      	bne.n	40ca56 <__d2b+0x9e>
  40c9ec:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40c9f0:	f8c8 2014 	str.w	r2, [r8, #20]
  40c9f4:	2b00      	cmp	r3, #0
  40c9f6:	bf0c      	ite	eq
  40c9f8:	2101      	moveq	r1, #1
  40c9fa:	2102      	movne	r1, #2
  40c9fc:	f8c8 3018 	str.w	r3, [r8, #24]
  40ca00:	f8c8 1010 	str.w	r1, [r8, #16]
  40ca04:	b9df      	cbnz	r7, 40ca3e <__d2b+0x86>
  40ca06:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40ca0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40ca0e:	6030      	str	r0, [r6, #0]
  40ca10:	6918      	ldr	r0, [r3, #16]
  40ca12:	f7ff fd8f 	bl	40c534 <__hi0bits>
  40ca16:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ca18:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40ca1c:	6018      	str	r0, [r3, #0]
  40ca1e:	4640      	mov	r0, r8
  40ca20:	b002      	add	sp, #8
  40ca22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ca26:	a801      	add	r0, sp, #4
  40ca28:	f7ff fda4 	bl	40c574 <__lo0bits>
  40ca2c:	9b01      	ldr	r3, [sp, #4]
  40ca2e:	f8c8 3014 	str.w	r3, [r8, #20]
  40ca32:	2101      	movs	r1, #1
  40ca34:	3020      	adds	r0, #32
  40ca36:	f8c8 1010 	str.w	r1, [r8, #16]
  40ca3a:	2f00      	cmp	r7, #0
  40ca3c:	d0e3      	beq.n	40ca06 <__d2b+0x4e>
  40ca3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ca40:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40ca44:	4407      	add	r7, r0
  40ca46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40ca4a:	6037      	str	r7, [r6, #0]
  40ca4c:	6018      	str	r0, [r3, #0]
  40ca4e:	4640      	mov	r0, r8
  40ca50:	b002      	add	sp, #8
  40ca52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ca56:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ca5a:	f1c0 0120 	rsb	r1, r0, #32
  40ca5e:	fa03 f101 	lsl.w	r1, r3, r1
  40ca62:	430a      	orrs	r2, r1
  40ca64:	40c3      	lsrs	r3, r0
  40ca66:	9301      	str	r3, [sp, #4]
  40ca68:	f8c8 2014 	str.w	r2, [r8, #20]
  40ca6c:	e7c2      	b.n	40c9f4 <__d2b+0x3c>
  40ca6e:	bf00      	nop

0040ca70 <_realloc_r>:
  40ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ca74:	4617      	mov	r7, r2
  40ca76:	b083      	sub	sp, #12
  40ca78:	2900      	cmp	r1, #0
  40ca7a:	f000 80c1 	beq.w	40cc00 <_realloc_r+0x190>
  40ca7e:	460e      	mov	r6, r1
  40ca80:	4681      	mov	r9, r0
  40ca82:	f107 050b 	add.w	r5, r7, #11
  40ca86:	f7ff fce1 	bl	40c44c <__malloc_lock>
  40ca8a:	f856 ec04 	ldr.w	lr, [r6, #-4]
  40ca8e:	2d16      	cmp	r5, #22
  40ca90:	f02e 0403 	bic.w	r4, lr, #3
  40ca94:	f1a6 0808 	sub.w	r8, r6, #8
  40ca98:	d840      	bhi.n	40cb1c <_realloc_r+0xac>
  40ca9a:	2210      	movs	r2, #16
  40ca9c:	4615      	mov	r5, r2
  40ca9e:	42af      	cmp	r7, r5
  40caa0:	d841      	bhi.n	40cb26 <_realloc_r+0xb6>
  40caa2:	4294      	cmp	r4, r2
  40caa4:	da75      	bge.n	40cb92 <_realloc_r+0x122>
  40caa6:	4bc9      	ldr	r3, [pc, #804]	; (40cdcc <_realloc_r+0x35c>)
  40caa8:	6899      	ldr	r1, [r3, #8]
  40caaa:	eb08 0004 	add.w	r0, r8, r4
  40caae:	4288      	cmp	r0, r1
  40cab0:	6841      	ldr	r1, [r0, #4]
  40cab2:	f000 80d9 	beq.w	40cc68 <_realloc_r+0x1f8>
  40cab6:	f021 0301 	bic.w	r3, r1, #1
  40caba:	4403      	add	r3, r0
  40cabc:	685b      	ldr	r3, [r3, #4]
  40cabe:	07db      	lsls	r3, r3, #31
  40cac0:	d57d      	bpl.n	40cbbe <_realloc_r+0x14e>
  40cac2:	f01e 0f01 	tst.w	lr, #1
  40cac6:	d035      	beq.n	40cb34 <_realloc_r+0xc4>
  40cac8:	4639      	mov	r1, r7
  40caca:	4648      	mov	r0, r9
  40cacc:	f7ff f8b8 	bl	40bc40 <_malloc_r>
  40cad0:	4607      	mov	r7, r0
  40cad2:	b1e0      	cbz	r0, 40cb0e <_realloc_r+0x9e>
  40cad4:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40cad8:	f023 0301 	bic.w	r3, r3, #1
  40cadc:	4443      	add	r3, r8
  40cade:	f1a0 0208 	sub.w	r2, r0, #8
  40cae2:	429a      	cmp	r2, r3
  40cae4:	f000 8144 	beq.w	40cd70 <_realloc_r+0x300>
  40cae8:	1f22      	subs	r2, r4, #4
  40caea:	2a24      	cmp	r2, #36	; 0x24
  40caec:	f200 8131 	bhi.w	40cd52 <_realloc_r+0x2e2>
  40caf0:	2a13      	cmp	r2, #19
  40caf2:	f200 8104 	bhi.w	40ccfe <_realloc_r+0x28e>
  40caf6:	4603      	mov	r3, r0
  40caf8:	4632      	mov	r2, r6
  40cafa:	6811      	ldr	r1, [r2, #0]
  40cafc:	6019      	str	r1, [r3, #0]
  40cafe:	6851      	ldr	r1, [r2, #4]
  40cb00:	6059      	str	r1, [r3, #4]
  40cb02:	6892      	ldr	r2, [r2, #8]
  40cb04:	609a      	str	r2, [r3, #8]
  40cb06:	4631      	mov	r1, r6
  40cb08:	4648      	mov	r0, r9
  40cb0a:	f7fe fd7b 	bl	40b604 <_free_r>
  40cb0e:	4648      	mov	r0, r9
  40cb10:	f7ff fc9e 	bl	40c450 <__malloc_unlock>
  40cb14:	4638      	mov	r0, r7
  40cb16:	b003      	add	sp, #12
  40cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb1c:	f025 0507 	bic.w	r5, r5, #7
  40cb20:	2d00      	cmp	r5, #0
  40cb22:	462a      	mov	r2, r5
  40cb24:	dabb      	bge.n	40ca9e <_realloc_r+0x2e>
  40cb26:	230c      	movs	r3, #12
  40cb28:	2000      	movs	r0, #0
  40cb2a:	f8c9 3000 	str.w	r3, [r9]
  40cb2e:	b003      	add	sp, #12
  40cb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb34:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40cb38:	ebc3 0a08 	rsb	sl, r3, r8
  40cb3c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cb40:	f023 0c03 	bic.w	ip, r3, #3
  40cb44:	eb04 030c 	add.w	r3, r4, ip
  40cb48:	4293      	cmp	r3, r2
  40cb4a:	dbbd      	blt.n	40cac8 <_realloc_r+0x58>
  40cb4c:	4657      	mov	r7, sl
  40cb4e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40cb52:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40cb56:	1f22      	subs	r2, r4, #4
  40cb58:	2a24      	cmp	r2, #36	; 0x24
  40cb5a:	60c1      	str	r1, [r0, #12]
  40cb5c:	6088      	str	r0, [r1, #8]
  40cb5e:	f200 8117 	bhi.w	40cd90 <_realloc_r+0x320>
  40cb62:	2a13      	cmp	r2, #19
  40cb64:	f240 8112 	bls.w	40cd8c <_realloc_r+0x31c>
  40cb68:	6831      	ldr	r1, [r6, #0]
  40cb6a:	f8ca 1008 	str.w	r1, [sl, #8]
  40cb6e:	6871      	ldr	r1, [r6, #4]
  40cb70:	f8ca 100c 	str.w	r1, [sl, #12]
  40cb74:	2a1b      	cmp	r2, #27
  40cb76:	f200 812b 	bhi.w	40cdd0 <_realloc_r+0x360>
  40cb7a:	3608      	adds	r6, #8
  40cb7c:	f10a 0210 	add.w	r2, sl, #16
  40cb80:	6831      	ldr	r1, [r6, #0]
  40cb82:	6011      	str	r1, [r2, #0]
  40cb84:	6871      	ldr	r1, [r6, #4]
  40cb86:	6051      	str	r1, [r2, #4]
  40cb88:	68b1      	ldr	r1, [r6, #8]
  40cb8a:	6091      	str	r1, [r2, #8]
  40cb8c:	463e      	mov	r6, r7
  40cb8e:	461c      	mov	r4, r3
  40cb90:	46d0      	mov	r8, sl
  40cb92:	1b63      	subs	r3, r4, r5
  40cb94:	2b0f      	cmp	r3, #15
  40cb96:	d81d      	bhi.n	40cbd4 <_realloc_r+0x164>
  40cb98:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40cb9c:	f003 0301 	and.w	r3, r3, #1
  40cba0:	4323      	orrs	r3, r4
  40cba2:	4444      	add	r4, r8
  40cba4:	f8c8 3004 	str.w	r3, [r8, #4]
  40cba8:	6863      	ldr	r3, [r4, #4]
  40cbaa:	f043 0301 	orr.w	r3, r3, #1
  40cbae:	6063      	str	r3, [r4, #4]
  40cbb0:	4648      	mov	r0, r9
  40cbb2:	f7ff fc4d 	bl	40c450 <__malloc_unlock>
  40cbb6:	4630      	mov	r0, r6
  40cbb8:	b003      	add	sp, #12
  40cbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cbbe:	f021 0103 	bic.w	r1, r1, #3
  40cbc2:	4421      	add	r1, r4
  40cbc4:	4291      	cmp	r1, r2
  40cbc6:	db21      	blt.n	40cc0c <_realloc_r+0x19c>
  40cbc8:	68c3      	ldr	r3, [r0, #12]
  40cbca:	6882      	ldr	r2, [r0, #8]
  40cbcc:	460c      	mov	r4, r1
  40cbce:	60d3      	str	r3, [r2, #12]
  40cbd0:	609a      	str	r2, [r3, #8]
  40cbd2:	e7de      	b.n	40cb92 <_realloc_r+0x122>
  40cbd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40cbd8:	eb08 0105 	add.w	r1, r8, r5
  40cbdc:	f002 0201 	and.w	r2, r2, #1
  40cbe0:	4315      	orrs	r5, r2
  40cbe2:	f043 0201 	orr.w	r2, r3, #1
  40cbe6:	440b      	add	r3, r1
  40cbe8:	f8c8 5004 	str.w	r5, [r8, #4]
  40cbec:	604a      	str	r2, [r1, #4]
  40cbee:	685a      	ldr	r2, [r3, #4]
  40cbf0:	f042 0201 	orr.w	r2, r2, #1
  40cbf4:	3108      	adds	r1, #8
  40cbf6:	605a      	str	r2, [r3, #4]
  40cbf8:	4648      	mov	r0, r9
  40cbfa:	f7fe fd03 	bl	40b604 <_free_r>
  40cbfe:	e7d7      	b.n	40cbb0 <_realloc_r+0x140>
  40cc00:	4611      	mov	r1, r2
  40cc02:	b003      	add	sp, #12
  40cc04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cc08:	f7ff b81a 	b.w	40bc40 <_malloc_r>
  40cc0c:	f01e 0f01 	tst.w	lr, #1
  40cc10:	f47f af5a 	bne.w	40cac8 <_realloc_r+0x58>
  40cc14:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40cc18:	ebc3 0a08 	rsb	sl, r3, r8
  40cc1c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cc20:	f023 0c03 	bic.w	ip, r3, #3
  40cc24:	eb01 0e0c 	add.w	lr, r1, ip
  40cc28:	4596      	cmp	lr, r2
  40cc2a:	db8b      	blt.n	40cb44 <_realloc_r+0xd4>
  40cc2c:	68c3      	ldr	r3, [r0, #12]
  40cc2e:	6882      	ldr	r2, [r0, #8]
  40cc30:	4657      	mov	r7, sl
  40cc32:	60d3      	str	r3, [r2, #12]
  40cc34:	609a      	str	r2, [r3, #8]
  40cc36:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40cc3a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40cc3e:	60cb      	str	r3, [r1, #12]
  40cc40:	1f22      	subs	r2, r4, #4
  40cc42:	2a24      	cmp	r2, #36	; 0x24
  40cc44:	6099      	str	r1, [r3, #8]
  40cc46:	f200 8099 	bhi.w	40cd7c <_realloc_r+0x30c>
  40cc4a:	2a13      	cmp	r2, #19
  40cc4c:	d962      	bls.n	40cd14 <_realloc_r+0x2a4>
  40cc4e:	6833      	ldr	r3, [r6, #0]
  40cc50:	f8ca 3008 	str.w	r3, [sl, #8]
  40cc54:	6873      	ldr	r3, [r6, #4]
  40cc56:	f8ca 300c 	str.w	r3, [sl, #12]
  40cc5a:	2a1b      	cmp	r2, #27
  40cc5c:	f200 80a0 	bhi.w	40cda0 <_realloc_r+0x330>
  40cc60:	3608      	adds	r6, #8
  40cc62:	f10a 0310 	add.w	r3, sl, #16
  40cc66:	e056      	b.n	40cd16 <_realloc_r+0x2a6>
  40cc68:	f021 0b03 	bic.w	fp, r1, #3
  40cc6c:	44a3      	add	fp, r4
  40cc6e:	f105 0010 	add.w	r0, r5, #16
  40cc72:	4583      	cmp	fp, r0
  40cc74:	da59      	bge.n	40cd2a <_realloc_r+0x2ba>
  40cc76:	f01e 0f01 	tst.w	lr, #1
  40cc7a:	f47f af25 	bne.w	40cac8 <_realloc_r+0x58>
  40cc7e:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40cc82:	ebc1 0a08 	rsb	sl, r1, r8
  40cc86:	f8da 1004 	ldr.w	r1, [sl, #4]
  40cc8a:	f021 0c03 	bic.w	ip, r1, #3
  40cc8e:	44e3      	add	fp, ip
  40cc90:	4558      	cmp	r0, fp
  40cc92:	f73f af57 	bgt.w	40cb44 <_realloc_r+0xd4>
  40cc96:	4657      	mov	r7, sl
  40cc98:	f8da 100c 	ldr.w	r1, [sl, #12]
  40cc9c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40cca0:	1f22      	subs	r2, r4, #4
  40cca2:	2a24      	cmp	r2, #36	; 0x24
  40cca4:	60c1      	str	r1, [r0, #12]
  40cca6:	6088      	str	r0, [r1, #8]
  40cca8:	f200 80b4 	bhi.w	40ce14 <_realloc_r+0x3a4>
  40ccac:	2a13      	cmp	r2, #19
  40ccae:	f240 80a5 	bls.w	40cdfc <_realloc_r+0x38c>
  40ccb2:	6831      	ldr	r1, [r6, #0]
  40ccb4:	f8ca 1008 	str.w	r1, [sl, #8]
  40ccb8:	6871      	ldr	r1, [r6, #4]
  40ccba:	f8ca 100c 	str.w	r1, [sl, #12]
  40ccbe:	2a1b      	cmp	r2, #27
  40ccc0:	f200 80af 	bhi.w	40ce22 <_realloc_r+0x3b2>
  40ccc4:	3608      	adds	r6, #8
  40ccc6:	f10a 0210 	add.w	r2, sl, #16
  40ccca:	6831      	ldr	r1, [r6, #0]
  40cccc:	6011      	str	r1, [r2, #0]
  40ccce:	6871      	ldr	r1, [r6, #4]
  40ccd0:	6051      	str	r1, [r2, #4]
  40ccd2:	68b1      	ldr	r1, [r6, #8]
  40ccd4:	6091      	str	r1, [r2, #8]
  40ccd6:	eb0a 0105 	add.w	r1, sl, r5
  40ccda:	ebc5 020b 	rsb	r2, r5, fp
  40ccde:	f042 0201 	orr.w	r2, r2, #1
  40cce2:	6099      	str	r1, [r3, #8]
  40cce4:	604a      	str	r2, [r1, #4]
  40cce6:	f8da 3004 	ldr.w	r3, [sl, #4]
  40ccea:	f003 0301 	and.w	r3, r3, #1
  40ccee:	431d      	orrs	r5, r3
  40ccf0:	4648      	mov	r0, r9
  40ccf2:	f8ca 5004 	str.w	r5, [sl, #4]
  40ccf6:	f7ff fbab 	bl	40c450 <__malloc_unlock>
  40ccfa:	4638      	mov	r0, r7
  40ccfc:	e75c      	b.n	40cbb8 <_realloc_r+0x148>
  40ccfe:	6833      	ldr	r3, [r6, #0]
  40cd00:	6003      	str	r3, [r0, #0]
  40cd02:	6873      	ldr	r3, [r6, #4]
  40cd04:	6043      	str	r3, [r0, #4]
  40cd06:	2a1b      	cmp	r2, #27
  40cd08:	d827      	bhi.n	40cd5a <_realloc_r+0x2ea>
  40cd0a:	f100 0308 	add.w	r3, r0, #8
  40cd0e:	f106 0208 	add.w	r2, r6, #8
  40cd12:	e6f2      	b.n	40cafa <_realloc_r+0x8a>
  40cd14:	463b      	mov	r3, r7
  40cd16:	6832      	ldr	r2, [r6, #0]
  40cd18:	601a      	str	r2, [r3, #0]
  40cd1a:	6872      	ldr	r2, [r6, #4]
  40cd1c:	605a      	str	r2, [r3, #4]
  40cd1e:	68b2      	ldr	r2, [r6, #8]
  40cd20:	609a      	str	r2, [r3, #8]
  40cd22:	463e      	mov	r6, r7
  40cd24:	4674      	mov	r4, lr
  40cd26:	46d0      	mov	r8, sl
  40cd28:	e733      	b.n	40cb92 <_realloc_r+0x122>
  40cd2a:	eb08 0105 	add.w	r1, r8, r5
  40cd2e:	ebc5 0b0b 	rsb	fp, r5, fp
  40cd32:	f04b 0201 	orr.w	r2, fp, #1
  40cd36:	6099      	str	r1, [r3, #8]
  40cd38:	604a      	str	r2, [r1, #4]
  40cd3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40cd3e:	f003 0301 	and.w	r3, r3, #1
  40cd42:	431d      	orrs	r5, r3
  40cd44:	4648      	mov	r0, r9
  40cd46:	f846 5c04 	str.w	r5, [r6, #-4]
  40cd4a:	f7ff fb81 	bl	40c450 <__malloc_unlock>
  40cd4e:	4630      	mov	r0, r6
  40cd50:	e732      	b.n	40cbb8 <_realloc_r+0x148>
  40cd52:	4631      	mov	r1, r6
  40cd54:	f7ff fb16 	bl	40c384 <memmove>
  40cd58:	e6d5      	b.n	40cb06 <_realloc_r+0x96>
  40cd5a:	68b3      	ldr	r3, [r6, #8]
  40cd5c:	6083      	str	r3, [r0, #8]
  40cd5e:	68f3      	ldr	r3, [r6, #12]
  40cd60:	60c3      	str	r3, [r0, #12]
  40cd62:	2a24      	cmp	r2, #36	; 0x24
  40cd64:	d028      	beq.n	40cdb8 <_realloc_r+0x348>
  40cd66:	f100 0310 	add.w	r3, r0, #16
  40cd6a:	f106 0210 	add.w	r2, r6, #16
  40cd6e:	e6c4      	b.n	40cafa <_realloc_r+0x8a>
  40cd70:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40cd74:	f023 0303 	bic.w	r3, r3, #3
  40cd78:	441c      	add	r4, r3
  40cd7a:	e70a      	b.n	40cb92 <_realloc_r+0x122>
  40cd7c:	4631      	mov	r1, r6
  40cd7e:	4638      	mov	r0, r7
  40cd80:	4674      	mov	r4, lr
  40cd82:	46d0      	mov	r8, sl
  40cd84:	f7ff fafe 	bl	40c384 <memmove>
  40cd88:	463e      	mov	r6, r7
  40cd8a:	e702      	b.n	40cb92 <_realloc_r+0x122>
  40cd8c:	463a      	mov	r2, r7
  40cd8e:	e6f7      	b.n	40cb80 <_realloc_r+0x110>
  40cd90:	4631      	mov	r1, r6
  40cd92:	4638      	mov	r0, r7
  40cd94:	461c      	mov	r4, r3
  40cd96:	46d0      	mov	r8, sl
  40cd98:	f7ff faf4 	bl	40c384 <memmove>
  40cd9c:	463e      	mov	r6, r7
  40cd9e:	e6f8      	b.n	40cb92 <_realloc_r+0x122>
  40cda0:	68b3      	ldr	r3, [r6, #8]
  40cda2:	f8ca 3010 	str.w	r3, [sl, #16]
  40cda6:	68f3      	ldr	r3, [r6, #12]
  40cda8:	f8ca 3014 	str.w	r3, [sl, #20]
  40cdac:	2a24      	cmp	r2, #36	; 0x24
  40cdae:	d01b      	beq.n	40cde8 <_realloc_r+0x378>
  40cdb0:	3610      	adds	r6, #16
  40cdb2:	f10a 0318 	add.w	r3, sl, #24
  40cdb6:	e7ae      	b.n	40cd16 <_realloc_r+0x2a6>
  40cdb8:	6933      	ldr	r3, [r6, #16]
  40cdba:	6103      	str	r3, [r0, #16]
  40cdbc:	6973      	ldr	r3, [r6, #20]
  40cdbe:	6143      	str	r3, [r0, #20]
  40cdc0:	f106 0218 	add.w	r2, r6, #24
  40cdc4:	f100 0318 	add.w	r3, r0, #24
  40cdc8:	e697      	b.n	40cafa <_realloc_r+0x8a>
  40cdca:	bf00      	nop
  40cdcc:	20400530 	.word	0x20400530
  40cdd0:	68b1      	ldr	r1, [r6, #8]
  40cdd2:	f8ca 1010 	str.w	r1, [sl, #16]
  40cdd6:	68f1      	ldr	r1, [r6, #12]
  40cdd8:	f8ca 1014 	str.w	r1, [sl, #20]
  40cddc:	2a24      	cmp	r2, #36	; 0x24
  40cdde:	d00f      	beq.n	40ce00 <_realloc_r+0x390>
  40cde0:	3610      	adds	r6, #16
  40cde2:	f10a 0218 	add.w	r2, sl, #24
  40cde6:	e6cb      	b.n	40cb80 <_realloc_r+0x110>
  40cde8:	6933      	ldr	r3, [r6, #16]
  40cdea:	f8ca 3018 	str.w	r3, [sl, #24]
  40cdee:	6973      	ldr	r3, [r6, #20]
  40cdf0:	f8ca 301c 	str.w	r3, [sl, #28]
  40cdf4:	3618      	adds	r6, #24
  40cdf6:	f10a 0320 	add.w	r3, sl, #32
  40cdfa:	e78c      	b.n	40cd16 <_realloc_r+0x2a6>
  40cdfc:	463a      	mov	r2, r7
  40cdfe:	e764      	b.n	40ccca <_realloc_r+0x25a>
  40ce00:	6932      	ldr	r2, [r6, #16]
  40ce02:	f8ca 2018 	str.w	r2, [sl, #24]
  40ce06:	6972      	ldr	r2, [r6, #20]
  40ce08:	f8ca 201c 	str.w	r2, [sl, #28]
  40ce0c:	3618      	adds	r6, #24
  40ce0e:	f10a 0220 	add.w	r2, sl, #32
  40ce12:	e6b5      	b.n	40cb80 <_realloc_r+0x110>
  40ce14:	4631      	mov	r1, r6
  40ce16:	4638      	mov	r0, r7
  40ce18:	9301      	str	r3, [sp, #4]
  40ce1a:	f7ff fab3 	bl	40c384 <memmove>
  40ce1e:	9b01      	ldr	r3, [sp, #4]
  40ce20:	e759      	b.n	40ccd6 <_realloc_r+0x266>
  40ce22:	68b1      	ldr	r1, [r6, #8]
  40ce24:	f8ca 1010 	str.w	r1, [sl, #16]
  40ce28:	68f1      	ldr	r1, [r6, #12]
  40ce2a:	f8ca 1014 	str.w	r1, [sl, #20]
  40ce2e:	2a24      	cmp	r2, #36	; 0x24
  40ce30:	d003      	beq.n	40ce3a <_realloc_r+0x3ca>
  40ce32:	3610      	adds	r6, #16
  40ce34:	f10a 0218 	add.w	r2, sl, #24
  40ce38:	e747      	b.n	40ccca <_realloc_r+0x25a>
  40ce3a:	6932      	ldr	r2, [r6, #16]
  40ce3c:	f8ca 2018 	str.w	r2, [sl, #24]
  40ce40:	6972      	ldr	r2, [r6, #20]
  40ce42:	f8ca 201c 	str.w	r2, [sl, #28]
  40ce46:	3618      	adds	r6, #24
  40ce48:	f10a 0220 	add.w	r2, sl, #32
  40ce4c:	e73d      	b.n	40ccca <_realloc_r+0x25a>
  40ce4e:	bf00      	nop

0040ce50 <_sbrk_r>:
  40ce50:	b538      	push	{r3, r4, r5, lr}
  40ce52:	4c07      	ldr	r4, [pc, #28]	; (40ce70 <_sbrk_r+0x20>)
  40ce54:	2300      	movs	r3, #0
  40ce56:	4605      	mov	r5, r0
  40ce58:	4608      	mov	r0, r1
  40ce5a:	6023      	str	r3, [r4, #0]
  40ce5c:	f7f9 fdda 	bl	406a14 <_sbrk>
  40ce60:	1c43      	adds	r3, r0, #1
  40ce62:	d000      	beq.n	40ce66 <_sbrk_r+0x16>
  40ce64:	bd38      	pop	{r3, r4, r5, pc}
  40ce66:	6823      	ldr	r3, [r4, #0]
  40ce68:	2b00      	cmp	r3, #0
  40ce6a:	d0fb      	beq.n	40ce64 <_sbrk_r+0x14>
  40ce6c:	602b      	str	r3, [r5, #0]
  40ce6e:	bd38      	pop	{r3, r4, r5, pc}
  40ce70:	20401094 	.word	0x20401094

0040ce74 <__sread>:
  40ce74:	b510      	push	{r4, lr}
  40ce76:	460c      	mov	r4, r1
  40ce78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ce7c:	f000 fa74 	bl	40d368 <_read_r>
  40ce80:	2800      	cmp	r0, #0
  40ce82:	db03      	blt.n	40ce8c <__sread+0x18>
  40ce84:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40ce86:	4403      	add	r3, r0
  40ce88:	6523      	str	r3, [r4, #80]	; 0x50
  40ce8a:	bd10      	pop	{r4, pc}
  40ce8c:	89a3      	ldrh	r3, [r4, #12]
  40ce8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40ce92:	81a3      	strh	r3, [r4, #12]
  40ce94:	bd10      	pop	{r4, pc}
  40ce96:	bf00      	nop

0040ce98 <__swrite>:
  40ce98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ce9c:	4616      	mov	r6, r2
  40ce9e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40cea2:	461f      	mov	r7, r3
  40cea4:	05d3      	lsls	r3, r2, #23
  40cea6:	460c      	mov	r4, r1
  40cea8:	4605      	mov	r5, r0
  40ceaa:	d507      	bpl.n	40cebc <__swrite+0x24>
  40ceac:	2200      	movs	r2, #0
  40ceae:	2302      	movs	r3, #2
  40ceb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ceb4:	f000 fa42 	bl	40d33c <_lseek_r>
  40ceb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40cebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40cec0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40cec4:	81a2      	strh	r2, [r4, #12]
  40cec6:	463b      	mov	r3, r7
  40cec8:	4632      	mov	r2, r6
  40ceca:	4628      	mov	r0, r5
  40cecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40ced0:	f000 b922 	b.w	40d118 <_write_r>

0040ced4 <__sseek>:
  40ced4:	b510      	push	{r4, lr}
  40ced6:	460c      	mov	r4, r1
  40ced8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cedc:	f000 fa2e 	bl	40d33c <_lseek_r>
  40cee0:	89a3      	ldrh	r3, [r4, #12]
  40cee2:	1c42      	adds	r2, r0, #1
  40cee4:	bf0e      	itee	eq
  40cee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40ceea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40ceee:	6520      	strne	r0, [r4, #80]	; 0x50
  40cef0:	81a3      	strh	r3, [r4, #12]
  40cef2:	bd10      	pop	{r4, pc}

0040cef4 <__sclose>:
  40cef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cef8:	f000 b9a6 	b.w	40d248 <_close_r>

0040cefc <__ssprint_r>:
  40cefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cf00:	6893      	ldr	r3, [r2, #8]
  40cf02:	b083      	sub	sp, #12
  40cf04:	4690      	mov	r8, r2
  40cf06:	2b00      	cmp	r3, #0
  40cf08:	d072      	beq.n	40cff0 <__ssprint_r+0xf4>
  40cf0a:	4683      	mov	fp, r0
  40cf0c:	f04f 0900 	mov.w	r9, #0
  40cf10:	6816      	ldr	r6, [r2, #0]
  40cf12:	6808      	ldr	r0, [r1, #0]
  40cf14:	688b      	ldr	r3, [r1, #8]
  40cf16:	460d      	mov	r5, r1
  40cf18:	464c      	mov	r4, r9
  40cf1a:	2c00      	cmp	r4, #0
  40cf1c:	d045      	beq.n	40cfaa <__ssprint_r+0xae>
  40cf1e:	429c      	cmp	r4, r3
  40cf20:	461f      	mov	r7, r3
  40cf22:	469a      	mov	sl, r3
  40cf24:	d346      	bcc.n	40cfb4 <__ssprint_r+0xb8>
  40cf26:	89ab      	ldrh	r3, [r5, #12]
  40cf28:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40cf2c:	d02d      	beq.n	40cf8a <__ssprint_r+0x8e>
  40cf2e:	696f      	ldr	r7, [r5, #20]
  40cf30:	6929      	ldr	r1, [r5, #16]
  40cf32:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40cf36:	ebc1 0a00 	rsb	sl, r1, r0
  40cf3a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40cf3e:	1c60      	adds	r0, r4, #1
  40cf40:	107f      	asrs	r7, r7, #1
  40cf42:	4450      	add	r0, sl
  40cf44:	42b8      	cmp	r0, r7
  40cf46:	463a      	mov	r2, r7
  40cf48:	bf84      	itt	hi
  40cf4a:	4607      	movhi	r7, r0
  40cf4c:	463a      	movhi	r2, r7
  40cf4e:	055b      	lsls	r3, r3, #21
  40cf50:	d533      	bpl.n	40cfba <__ssprint_r+0xbe>
  40cf52:	4611      	mov	r1, r2
  40cf54:	4658      	mov	r0, fp
  40cf56:	f7fe fe73 	bl	40bc40 <_malloc_r>
  40cf5a:	2800      	cmp	r0, #0
  40cf5c:	d037      	beq.n	40cfce <__ssprint_r+0xd2>
  40cf5e:	4652      	mov	r2, sl
  40cf60:	6929      	ldr	r1, [r5, #16]
  40cf62:	9001      	str	r0, [sp, #4]
  40cf64:	f7ff f974 	bl	40c250 <memcpy>
  40cf68:	89aa      	ldrh	r2, [r5, #12]
  40cf6a:	9b01      	ldr	r3, [sp, #4]
  40cf6c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40cf70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40cf74:	81aa      	strh	r2, [r5, #12]
  40cf76:	ebca 0207 	rsb	r2, sl, r7
  40cf7a:	eb03 000a 	add.w	r0, r3, sl
  40cf7e:	616f      	str	r7, [r5, #20]
  40cf80:	612b      	str	r3, [r5, #16]
  40cf82:	6028      	str	r0, [r5, #0]
  40cf84:	60aa      	str	r2, [r5, #8]
  40cf86:	4627      	mov	r7, r4
  40cf88:	46a2      	mov	sl, r4
  40cf8a:	4652      	mov	r2, sl
  40cf8c:	4649      	mov	r1, r9
  40cf8e:	f7ff f9f9 	bl	40c384 <memmove>
  40cf92:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40cf96:	68ab      	ldr	r3, [r5, #8]
  40cf98:	6828      	ldr	r0, [r5, #0]
  40cf9a:	1bdb      	subs	r3, r3, r7
  40cf9c:	4450      	add	r0, sl
  40cf9e:	1b14      	subs	r4, r2, r4
  40cfa0:	60ab      	str	r3, [r5, #8]
  40cfa2:	6028      	str	r0, [r5, #0]
  40cfa4:	f8c8 4008 	str.w	r4, [r8, #8]
  40cfa8:	b314      	cbz	r4, 40cff0 <__ssprint_r+0xf4>
  40cfaa:	f8d6 9000 	ldr.w	r9, [r6]
  40cfae:	6874      	ldr	r4, [r6, #4]
  40cfb0:	3608      	adds	r6, #8
  40cfb2:	e7b2      	b.n	40cf1a <__ssprint_r+0x1e>
  40cfb4:	4627      	mov	r7, r4
  40cfb6:	46a2      	mov	sl, r4
  40cfb8:	e7e7      	b.n	40cf8a <__ssprint_r+0x8e>
  40cfba:	4658      	mov	r0, fp
  40cfbc:	f7ff fd58 	bl	40ca70 <_realloc_r>
  40cfc0:	4603      	mov	r3, r0
  40cfc2:	2800      	cmp	r0, #0
  40cfc4:	d1d7      	bne.n	40cf76 <__ssprint_r+0x7a>
  40cfc6:	6929      	ldr	r1, [r5, #16]
  40cfc8:	4658      	mov	r0, fp
  40cfca:	f7fe fb1b 	bl	40b604 <_free_r>
  40cfce:	230c      	movs	r3, #12
  40cfd0:	f8cb 3000 	str.w	r3, [fp]
  40cfd4:	89ab      	ldrh	r3, [r5, #12]
  40cfd6:	2200      	movs	r2, #0
  40cfd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40cfdc:	f04f 30ff 	mov.w	r0, #4294967295
  40cfe0:	81ab      	strh	r3, [r5, #12]
  40cfe2:	f8c8 2008 	str.w	r2, [r8, #8]
  40cfe6:	f8c8 2004 	str.w	r2, [r8, #4]
  40cfea:	b003      	add	sp, #12
  40cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cff0:	2000      	movs	r0, #0
  40cff2:	f8c8 0004 	str.w	r0, [r8, #4]
  40cff6:	b003      	add	sp, #12
  40cff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040cffc <__swbuf_r>:
  40cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cffe:	460e      	mov	r6, r1
  40d000:	4614      	mov	r4, r2
  40d002:	4607      	mov	r7, r0
  40d004:	b110      	cbz	r0, 40d00c <__swbuf_r+0x10>
  40d006:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d008:	2b00      	cmp	r3, #0
  40d00a:	d04a      	beq.n	40d0a2 <__swbuf_r+0xa6>
  40d00c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d010:	69a3      	ldr	r3, [r4, #24]
  40d012:	60a3      	str	r3, [r4, #8]
  40d014:	b291      	uxth	r1, r2
  40d016:	0708      	lsls	r0, r1, #28
  40d018:	d538      	bpl.n	40d08c <__swbuf_r+0x90>
  40d01a:	6923      	ldr	r3, [r4, #16]
  40d01c:	2b00      	cmp	r3, #0
  40d01e:	d035      	beq.n	40d08c <__swbuf_r+0x90>
  40d020:	0489      	lsls	r1, r1, #18
  40d022:	b2f5      	uxtb	r5, r6
  40d024:	d515      	bpl.n	40d052 <__swbuf_r+0x56>
  40d026:	6822      	ldr	r2, [r4, #0]
  40d028:	6961      	ldr	r1, [r4, #20]
  40d02a:	1ad3      	subs	r3, r2, r3
  40d02c:	428b      	cmp	r3, r1
  40d02e:	da1c      	bge.n	40d06a <__swbuf_r+0x6e>
  40d030:	3301      	adds	r3, #1
  40d032:	68a1      	ldr	r1, [r4, #8]
  40d034:	1c50      	adds	r0, r2, #1
  40d036:	3901      	subs	r1, #1
  40d038:	60a1      	str	r1, [r4, #8]
  40d03a:	6020      	str	r0, [r4, #0]
  40d03c:	7016      	strb	r6, [r2, #0]
  40d03e:	6962      	ldr	r2, [r4, #20]
  40d040:	429a      	cmp	r2, r3
  40d042:	d01a      	beq.n	40d07a <__swbuf_r+0x7e>
  40d044:	89a3      	ldrh	r3, [r4, #12]
  40d046:	07db      	lsls	r3, r3, #31
  40d048:	d501      	bpl.n	40d04e <__swbuf_r+0x52>
  40d04a:	2d0a      	cmp	r5, #10
  40d04c:	d015      	beq.n	40d07a <__swbuf_r+0x7e>
  40d04e:	4628      	mov	r0, r5
  40d050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d052:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40d054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40d058:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40d05c:	81a2      	strh	r2, [r4, #12]
  40d05e:	6822      	ldr	r2, [r4, #0]
  40d060:	6661      	str	r1, [r4, #100]	; 0x64
  40d062:	6961      	ldr	r1, [r4, #20]
  40d064:	1ad3      	subs	r3, r2, r3
  40d066:	428b      	cmp	r3, r1
  40d068:	dbe2      	blt.n	40d030 <__swbuf_r+0x34>
  40d06a:	4621      	mov	r1, r4
  40d06c:	4638      	mov	r0, r7
  40d06e:	f7fe f96b 	bl	40b348 <_fflush_r>
  40d072:	b940      	cbnz	r0, 40d086 <__swbuf_r+0x8a>
  40d074:	6822      	ldr	r2, [r4, #0]
  40d076:	2301      	movs	r3, #1
  40d078:	e7db      	b.n	40d032 <__swbuf_r+0x36>
  40d07a:	4621      	mov	r1, r4
  40d07c:	4638      	mov	r0, r7
  40d07e:	f7fe f963 	bl	40b348 <_fflush_r>
  40d082:	2800      	cmp	r0, #0
  40d084:	d0e3      	beq.n	40d04e <__swbuf_r+0x52>
  40d086:	f04f 30ff 	mov.w	r0, #4294967295
  40d08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d08c:	4621      	mov	r1, r4
  40d08e:	4638      	mov	r0, r7
  40d090:	f7fd f882 	bl	40a198 <__swsetup_r>
  40d094:	2800      	cmp	r0, #0
  40d096:	d1f6      	bne.n	40d086 <__swbuf_r+0x8a>
  40d098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d09c:	6923      	ldr	r3, [r4, #16]
  40d09e:	b291      	uxth	r1, r2
  40d0a0:	e7be      	b.n	40d020 <__swbuf_r+0x24>
  40d0a2:	f7fe f9e5 	bl	40b470 <__sinit>
  40d0a6:	e7b1      	b.n	40d00c <__swbuf_r+0x10>

0040d0a8 <_wcrtomb_r>:
  40d0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d0ac:	4605      	mov	r5, r0
  40d0ae:	b086      	sub	sp, #24
  40d0b0:	461e      	mov	r6, r3
  40d0b2:	460c      	mov	r4, r1
  40d0b4:	b1a1      	cbz	r1, 40d0e0 <_wcrtomb_r+0x38>
  40d0b6:	4b10      	ldr	r3, [pc, #64]	; (40d0f8 <_wcrtomb_r+0x50>)
  40d0b8:	4617      	mov	r7, r2
  40d0ba:	f8d3 8000 	ldr.w	r8, [r3]
  40d0be:	f7fe fd35 	bl	40bb2c <__locale_charset>
  40d0c2:	9600      	str	r6, [sp, #0]
  40d0c4:	4603      	mov	r3, r0
  40d0c6:	463a      	mov	r2, r7
  40d0c8:	4621      	mov	r1, r4
  40d0ca:	4628      	mov	r0, r5
  40d0cc:	47c0      	blx	r8
  40d0ce:	1c43      	adds	r3, r0, #1
  40d0d0:	d103      	bne.n	40d0da <_wcrtomb_r+0x32>
  40d0d2:	2200      	movs	r2, #0
  40d0d4:	238a      	movs	r3, #138	; 0x8a
  40d0d6:	6032      	str	r2, [r6, #0]
  40d0d8:	602b      	str	r3, [r5, #0]
  40d0da:	b006      	add	sp, #24
  40d0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d0e0:	4b05      	ldr	r3, [pc, #20]	; (40d0f8 <_wcrtomb_r+0x50>)
  40d0e2:	681f      	ldr	r7, [r3, #0]
  40d0e4:	f7fe fd22 	bl	40bb2c <__locale_charset>
  40d0e8:	9600      	str	r6, [sp, #0]
  40d0ea:	4603      	mov	r3, r0
  40d0ec:	4622      	mov	r2, r4
  40d0ee:	a903      	add	r1, sp, #12
  40d0f0:	4628      	mov	r0, r5
  40d0f2:	47b8      	blx	r7
  40d0f4:	e7eb      	b.n	40d0ce <_wcrtomb_r+0x26>
  40d0f6:	bf00      	nop
  40d0f8:	20400940 	.word	0x20400940

0040d0fc <__ascii_wctomb>:
  40d0fc:	b121      	cbz	r1, 40d108 <__ascii_wctomb+0xc>
  40d0fe:	2aff      	cmp	r2, #255	; 0xff
  40d100:	d804      	bhi.n	40d10c <__ascii_wctomb+0x10>
  40d102:	700a      	strb	r2, [r1, #0]
  40d104:	2001      	movs	r0, #1
  40d106:	4770      	bx	lr
  40d108:	4608      	mov	r0, r1
  40d10a:	4770      	bx	lr
  40d10c:	238a      	movs	r3, #138	; 0x8a
  40d10e:	6003      	str	r3, [r0, #0]
  40d110:	f04f 30ff 	mov.w	r0, #4294967295
  40d114:	4770      	bx	lr
  40d116:	bf00      	nop

0040d118 <_write_r>:
  40d118:	b570      	push	{r4, r5, r6, lr}
  40d11a:	460d      	mov	r5, r1
  40d11c:	4c08      	ldr	r4, [pc, #32]	; (40d140 <_write_r+0x28>)
  40d11e:	4611      	mov	r1, r2
  40d120:	4606      	mov	r6, r0
  40d122:	461a      	mov	r2, r3
  40d124:	4628      	mov	r0, r5
  40d126:	2300      	movs	r3, #0
  40d128:	6023      	str	r3, [r4, #0]
  40d12a:	f7f7 fedd 	bl	404ee8 <_write>
  40d12e:	1c43      	adds	r3, r0, #1
  40d130:	d000      	beq.n	40d134 <_write_r+0x1c>
  40d132:	bd70      	pop	{r4, r5, r6, pc}
  40d134:	6823      	ldr	r3, [r4, #0]
  40d136:	2b00      	cmp	r3, #0
  40d138:	d0fb      	beq.n	40d132 <_write_r+0x1a>
  40d13a:	6033      	str	r3, [r6, #0]
  40d13c:	bd70      	pop	{r4, r5, r6, pc}
  40d13e:	bf00      	nop
  40d140:	20401094 	.word	0x20401094

0040d144 <__register_exitproc>:
  40d144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d148:	4c25      	ldr	r4, [pc, #148]	; (40d1e0 <__register_exitproc+0x9c>)
  40d14a:	6825      	ldr	r5, [r4, #0]
  40d14c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40d150:	4606      	mov	r6, r0
  40d152:	4688      	mov	r8, r1
  40d154:	4692      	mov	sl, r2
  40d156:	4699      	mov	r9, r3
  40d158:	b3c4      	cbz	r4, 40d1cc <__register_exitproc+0x88>
  40d15a:	6860      	ldr	r0, [r4, #4]
  40d15c:	281f      	cmp	r0, #31
  40d15e:	dc17      	bgt.n	40d190 <__register_exitproc+0x4c>
  40d160:	1c43      	adds	r3, r0, #1
  40d162:	b176      	cbz	r6, 40d182 <__register_exitproc+0x3e>
  40d164:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40d168:	2201      	movs	r2, #1
  40d16a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40d16e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40d172:	4082      	lsls	r2, r0
  40d174:	4311      	orrs	r1, r2
  40d176:	2e02      	cmp	r6, #2
  40d178:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40d17c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40d180:	d01e      	beq.n	40d1c0 <__register_exitproc+0x7c>
  40d182:	3002      	adds	r0, #2
  40d184:	6063      	str	r3, [r4, #4]
  40d186:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40d18a:	2000      	movs	r0, #0
  40d18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d190:	4b14      	ldr	r3, [pc, #80]	; (40d1e4 <__register_exitproc+0xa0>)
  40d192:	b303      	cbz	r3, 40d1d6 <__register_exitproc+0x92>
  40d194:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40d198:	f7fe fd4a 	bl	40bc30 <malloc>
  40d19c:	4604      	mov	r4, r0
  40d19e:	b1d0      	cbz	r0, 40d1d6 <__register_exitproc+0x92>
  40d1a0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40d1a4:	2700      	movs	r7, #0
  40d1a6:	e880 0088 	stmia.w	r0, {r3, r7}
  40d1aa:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d1ae:	4638      	mov	r0, r7
  40d1b0:	2301      	movs	r3, #1
  40d1b2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40d1b6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40d1ba:	2e00      	cmp	r6, #0
  40d1bc:	d0e1      	beq.n	40d182 <__register_exitproc+0x3e>
  40d1be:	e7d1      	b.n	40d164 <__register_exitproc+0x20>
  40d1c0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40d1c4:	430a      	orrs	r2, r1
  40d1c6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40d1ca:	e7da      	b.n	40d182 <__register_exitproc+0x3e>
  40d1cc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40d1d0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d1d4:	e7c1      	b.n	40d15a <__register_exitproc+0x16>
  40d1d6:	f04f 30ff 	mov.w	r0, #4294967295
  40d1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d1de:	bf00      	nop
  40d1e0:	0040ef04 	.word	0x0040ef04
  40d1e4:	0040bc31 	.word	0x0040bc31

0040d1e8 <_calloc_r>:
  40d1e8:	b510      	push	{r4, lr}
  40d1ea:	fb02 f101 	mul.w	r1, r2, r1
  40d1ee:	f7fe fd27 	bl	40bc40 <_malloc_r>
  40d1f2:	4604      	mov	r4, r0
  40d1f4:	b1d8      	cbz	r0, 40d22e <_calloc_r+0x46>
  40d1f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40d1fa:	f022 0203 	bic.w	r2, r2, #3
  40d1fe:	3a04      	subs	r2, #4
  40d200:	2a24      	cmp	r2, #36	; 0x24
  40d202:	d818      	bhi.n	40d236 <_calloc_r+0x4e>
  40d204:	2a13      	cmp	r2, #19
  40d206:	d914      	bls.n	40d232 <_calloc_r+0x4a>
  40d208:	2300      	movs	r3, #0
  40d20a:	2a1b      	cmp	r2, #27
  40d20c:	6003      	str	r3, [r0, #0]
  40d20e:	6043      	str	r3, [r0, #4]
  40d210:	d916      	bls.n	40d240 <_calloc_r+0x58>
  40d212:	2a24      	cmp	r2, #36	; 0x24
  40d214:	6083      	str	r3, [r0, #8]
  40d216:	60c3      	str	r3, [r0, #12]
  40d218:	bf11      	iteee	ne
  40d21a:	f100 0210 	addne.w	r2, r0, #16
  40d21e:	6103      	streq	r3, [r0, #16]
  40d220:	6143      	streq	r3, [r0, #20]
  40d222:	f100 0218 	addeq.w	r2, r0, #24
  40d226:	2300      	movs	r3, #0
  40d228:	6013      	str	r3, [r2, #0]
  40d22a:	6053      	str	r3, [r2, #4]
  40d22c:	6093      	str	r3, [r2, #8]
  40d22e:	4620      	mov	r0, r4
  40d230:	bd10      	pop	{r4, pc}
  40d232:	4602      	mov	r2, r0
  40d234:	e7f7      	b.n	40d226 <_calloc_r+0x3e>
  40d236:	2100      	movs	r1, #0
  40d238:	f7fa fb54 	bl	4078e4 <memset>
  40d23c:	4620      	mov	r0, r4
  40d23e:	bd10      	pop	{r4, pc}
  40d240:	f100 0208 	add.w	r2, r0, #8
  40d244:	e7ef      	b.n	40d226 <_calloc_r+0x3e>
  40d246:	bf00      	nop

0040d248 <_close_r>:
  40d248:	b538      	push	{r3, r4, r5, lr}
  40d24a:	4c07      	ldr	r4, [pc, #28]	; (40d268 <_close_r+0x20>)
  40d24c:	2300      	movs	r3, #0
  40d24e:	4605      	mov	r5, r0
  40d250:	4608      	mov	r0, r1
  40d252:	6023      	str	r3, [r4, #0]
  40d254:	f7f9 fc0a 	bl	406a6c <_close>
  40d258:	1c43      	adds	r3, r0, #1
  40d25a:	d000      	beq.n	40d25e <_close_r+0x16>
  40d25c:	bd38      	pop	{r3, r4, r5, pc}
  40d25e:	6823      	ldr	r3, [r4, #0]
  40d260:	2b00      	cmp	r3, #0
  40d262:	d0fb      	beq.n	40d25c <_close_r+0x14>
  40d264:	602b      	str	r3, [r5, #0]
  40d266:	bd38      	pop	{r3, r4, r5, pc}
  40d268:	20401094 	.word	0x20401094

0040d26c <_fclose_r>:
  40d26c:	2900      	cmp	r1, #0
  40d26e:	d03d      	beq.n	40d2ec <_fclose_r+0x80>
  40d270:	b570      	push	{r4, r5, r6, lr}
  40d272:	4605      	mov	r5, r0
  40d274:	460c      	mov	r4, r1
  40d276:	b108      	cbz	r0, 40d27c <_fclose_r+0x10>
  40d278:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d27a:	b37b      	cbz	r3, 40d2dc <_fclose_r+0x70>
  40d27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d280:	b90b      	cbnz	r3, 40d286 <_fclose_r+0x1a>
  40d282:	2000      	movs	r0, #0
  40d284:	bd70      	pop	{r4, r5, r6, pc}
  40d286:	4621      	mov	r1, r4
  40d288:	4628      	mov	r0, r5
  40d28a:	f7fd ffb9 	bl	40b200 <__sflush_r>
  40d28e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40d290:	4606      	mov	r6, r0
  40d292:	b133      	cbz	r3, 40d2a2 <_fclose_r+0x36>
  40d294:	69e1      	ldr	r1, [r4, #28]
  40d296:	4628      	mov	r0, r5
  40d298:	4798      	blx	r3
  40d29a:	2800      	cmp	r0, #0
  40d29c:	bfb8      	it	lt
  40d29e:	f04f 36ff 	movlt.w	r6, #4294967295
  40d2a2:	89a3      	ldrh	r3, [r4, #12]
  40d2a4:	061b      	lsls	r3, r3, #24
  40d2a6:	d41c      	bmi.n	40d2e2 <_fclose_r+0x76>
  40d2a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d2aa:	b141      	cbz	r1, 40d2be <_fclose_r+0x52>
  40d2ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d2b0:	4299      	cmp	r1, r3
  40d2b2:	d002      	beq.n	40d2ba <_fclose_r+0x4e>
  40d2b4:	4628      	mov	r0, r5
  40d2b6:	f7fe f9a5 	bl	40b604 <_free_r>
  40d2ba:	2300      	movs	r3, #0
  40d2bc:	6323      	str	r3, [r4, #48]	; 0x30
  40d2be:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40d2c0:	b121      	cbz	r1, 40d2cc <_fclose_r+0x60>
  40d2c2:	4628      	mov	r0, r5
  40d2c4:	f7fe f99e 	bl	40b604 <_free_r>
  40d2c8:	2300      	movs	r3, #0
  40d2ca:	6463      	str	r3, [r4, #68]	; 0x44
  40d2cc:	f7fe f8d6 	bl	40b47c <__sfp_lock_acquire>
  40d2d0:	2300      	movs	r3, #0
  40d2d2:	81a3      	strh	r3, [r4, #12]
  40d2d4:	f7fe f8d4 	bl	40b480 <__sfp_lock_release>
  40d2d8:	4630      	mov	r0, r6
  40d2da:	bd70      	pop	{r4, r5, r6, pc}
  40d2dc:	f7fe f8c8 	bl	40b470 <__sinit>
  40d2e0:	e7cc      	b.n	40d27c <_fclose_r+0x10>
  40d2e2:	6921      	ldr	r1, [r4, #16]
  40d2e4:	4628      	mov	r0, r5
  40d2e6:	f7fe f98d 	bl	40b604 <_free_r>
  40d2ea:	e7dd      	b.n	40d2a8 <_fclose_r+0x3c>
  40d2ec:	2000      	movs	r0, #0
  40d2ee:	4770      	bx	lr

0040d2f0 <_fstat_r>:
  40d2f0:	b538      	push	{r3, r4, r5, lr}
  40d2f2:	460b      	mov	r3, r1
  40d2f4:	4c07      	ldr	r4, [pc, #28]	; (40d314 <_fstat_r+0x24>)
  40d2f6:	4605      	mov	r5, r0
  40d2f8:	4611      	mov	r1, r2
  40d2fa:	4618      	mov	r0, r3
  40d2fc:	2300      	movs	r3, #0
  40d2fe:	6023      	str	r3, [r4, #0]
  40d300:	f7f9 fbc0 	bl	406a84 <_fstat>
  40d304:	1c43      	adds	r3, r0, #1
  40d306:	d000      	beq.n	40d30a <_fstat_r+0x1a>
  40d308:	bd38      	pop	{r3, r4, r5, pc}
  40d30a:	6823      	ldr	r3, [r4, #0]
  40d30c:	2b00      	cmp	r3, #0
  40d30e:	d0fb      	beq.n	40d308 <_fstat_r+0x18>
  40d310:	602b      	str	r3, [r5, #0]
  40d312:	bd38      	pop	{r3, r4, r5, pc}
  40d314:	20401094 	.word	0x20401094

0040d318 <_isatty_r>:
  40d318:	b538      	push	{r3, r4, r5, lr}
  40d31a:	4c07      	ldr	r4, [pc, #28]	; (40d338 <_isatty_r+0x20>)
  40d31c:	2300      	movs	r3, #0
  40d31e:	4605      	mov	r5, r0
  40d320:	4608      	mov	r0, r1
  40d322:	6023      	str	r3, [r4, #0]
  40d324:	f7f9 fbbe 	bl	406aa4 <_isatty>
  40d328:	1c43      	adds	r3, r0, #1
  40d32a:	d000      	beq.n	40d32e <_isatty_r+0x16>
  40d32c:	bd38      	pop	{r3, r4, r5, pc}
  40d32e:	6823      	ldr	r3, [r4, #0]
  40d330:	2b00      	cmp	r3, #0
  40d332:	d0fb      	beq.n	40d32c <_isatty_r+0x14>
  40d334:	602b      	str	r3, [r5, #0]
  40d336:	bd38      	pop	{r3, r4, r5, pc}
  40d338:	20401094 	.word	0x20401094

0040d33c <_lseek_r>:
  40d33c:	b570      	push	{r4, r5, r6, lr}
  40d33e:	460d      	mov	r5, r1
  40d340:	4c08      	ldr	r4, [pc, #32]	; (40d364 <_lseek_r+0x28>)
  40d342:	4611      	mov	r1, r2
  40d344:	4606      	mov	r6, r0
  40d346:	461a      	mov	r2, r3
  40d348:	4628      	mov	r0, r5
  40d34a:	2300      	movs	r3, #0
  40d34c:	6023      	str	r3, [r4, #0]
  40d34e:	f7f9 fbb5 	bl	406abc <_lseek>
  40d352:	1c43      	adds	r3, r0, #1
  40d354:	d000      	beq.n	40d358 <_lseek_r+0x1c>
  40d356:	bd70      	pop	{r4, r5, r6, pc}
  40d358:	6823      	ldr	r3, [r4, #0]
  40d35a:	2b00      	cmp	r3, #0
  40d35c:	d0fb      	beq.n	40d356 <_lseek_r+0x1a>
  40d35e:	6033      	str	r3, [r6, #0]
  40d360:	bd70      	pop	{r4, r5, r6, pc}
  40d362:	bf00      	nop
  40d364:	20401094 	.word	0x20401094

0040d368 <_read_r>:
  40d368:	b570      	push	{r4, r5, r6, lr}
  40d36a:	460d      	mov	r5, r1
  40d36c:	4c08      	ldr	r4, [pc, #32]	; (40d390 <_read_r+0x28>)
  40d36e:	4611      	mov	r1, r2
  40d370:	4606      	mov	r6, r0
  40d372:	461a      	mov	r2, r3
  40d374:	4628      	mov	r0, r5
  40d376:	2300      	movs	r3, #0
  40d378:	6023      	str	r3, [r4, #0]
  40d37a:	f7f7 fd8b 	bl	404e94 <_read>
  40d37e:	1c43      	adds	r3, r0, #1
  40d380:	d000      	beq.n	40d384 <_read_r+0x1c>
  40d382:	bd70      	pop	{r4, r5, r6, pc}
  40d384:	6823      	ldr	r3, [r4, #0]
  40d386:	2b00      	cmp	r3, #0
  40d388:	d0fb      	beq.n	40d382 <_read_r+0x1a>
  40d38a:	6033      	str	r3, [r6, #0]
  40d38c:	bd70      	pop	{r4, r5, r6, pc}
  40d38e:	bf00      	nop
  40d390:	20401094 	.word	0x20401094

0040d394 <__aeabi_drsub>:
  40d394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40d398:	e002      	b.n	40d3a0 <__adddf3>
  40d39a:	bf00      	nop

0040d39c <__aeabi_dsub>:
  40d39c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040d3a0 <__adddf3>:
  40d3a0:	b530      	push	{r4, r5, lr}
  40d3a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40d3a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40d3aa:	ea94 0f05 	teq	r4, r5
  40d3ae:	bf08      	it	eq
  40d3b0:	ea90 0f02 	teqeq	r0, r2
  40d3b4:	bf1f      	itttt	ne
  40d3b6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40d3ba:	ea55 0c02 	orrsne.w	ip, r5, r2
  40d3be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40d3c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40d3c6:	f000 80e2 	beq.w	40d58e <__adddf3+0x1ee>
  40d3ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40d3ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40d3d2:	bfb8      	it	lt
  40d3d4:	426d      	neglt	r5, r5
  40d3d6:	dd0c      	ble.n	40d3f2 <__adddf3+0x52>
  40d3d8:	442c      	add	r4, r5
  40d3da:	ea80 0202 	eor.w	r2, r0, r2
  40d3de:	ea81 0303 	eor.w	r3, r1, r3
  40d3e2:	ea82 0000 	eor.w	r0, r2, r0
  40d3e6:	ea83 0101 	eor.w	r1, r3, r1
  40d3ea:	ea80 0202 	eor.w	r2, r0, r2
  40d3ee:	ea81 0303 	eor.w	r3, r1, r3
  40d3f2:	2d36      	cmp	r5, #54	; 0x36
  40d3f4:	bf88      	it	hi
  40d3f6:	bd30      	pophi	{r4, r5, pc}
  40d3f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40d3fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40d400:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40d404:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40d408:	d002      	beq.n	40d410 <__adddf3+0x70>
  40d40a:	4240      	negs	r0, r0
  40d40c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d410:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40d414:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40d418:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40d41c:	d002      	beq.n	40d424 <__adddf3+0x84>
  40d41e:	4252      	negs	r2, r2
  40d420:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40d424:	ea94 0f05 	teq	r4, r5
  40d428:	f000 80a7 	beq.w	40d57a <__adddf3+0x1da>
  40d42c:	f1a4 0401 	sub.w	r4, r4, #1
  40d430:	f1d5 0e20 	rsbs	lr, r5, #32
  40d434:	db0d      	blt.n	40d452 <__adddf3+0xb2>
  40d436:	fa02 fc0e 	lsl.w	ip, r2, lr
  40d43a:	fa22 f205 	lsr.w	r2, r2, r5
  40d43e:	1880      	adds	r0, r0, r2
  40d440:	f141 0100 	adc.w	r1, r1, #0
  40d444:	fa03 f20e 	lsl.w	r2, r3, lr
  40d448:	1880      	adds	r0, r0, r2
  40d44a:	fa43 f305 	asr.w	r3, r3, r5
  40d44e:	4159      	adcs	r1, r3
  40d450:	e00e      	b.n	40d470 <__adddf3+0xd0>
  40d452:	f1a5 0520 	sub.w	r5, r5, #32
  40d456:	f10e 0e20 	add.w	lr, lr, #32
  40d45a:	2a01      	cmp	r2, #1
  40d45c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40d460:	bf28      	it	cs
  40d462:	f04c 0c02 	orrcs.w	ip, ip, #2
  40d466:	fa43 f305 	asr.w	r3, r3, r5
  40d46a:	18c0      	adds	r0, r0, r3
  40d46c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40d470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d474:	d507      	bpl.n	40d486 <__adddf3+0xe6>
  40d476:	f04f 0e00 	mov.w	lr, #0
  40d47a:	f1dc 0c00 	rsbs	ip, ip, #0
  40d47e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40d482:	eb6e 0101 	sbc.w	r1, lr, r1
  40d486:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40d48a:	d31b      	bcc.n	40d4c4 <__adddf3+0x124>
  40d48c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40d490:	d30c      	bcc.n	40d4ac <__adddf3+0x10c>
  40d492:	0849      	lsrs	r1, r1, #1
  40d494:	ea5f 0030 	movs.w	r0, r0, rrx
  40d498:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40d49c:	f104 0401 	add.w	r4, r4, #1
  40d4a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40d4a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40d4a8:	f080 809a 	bcs.w	40d5e0 <__adddf3+0x240>
  40d4ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40d4b0:	bf08      	it	eq
  40d4b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40d4b6:	f150 0000 	adcs.w	r0, r0, #0
  40d4ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d4be:	ea41 0105 	orr.w	r1, r1, r5
  40d4c2:	bd30      	pop	{r4, r5, pc}
  40d4c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40d4c8:	4140      	adcs	r0, r0
  40d4ca:	eb41 0101 	adc.w	r1, r1, r1
  40d4ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d4d2:	f1a4 0401 	sub.w	r4, r4, #1
  40d4d6:	d1e9      	bne.n	40d4ac <__adddf3+0x10c>
  40d4d8:	f091 0f00 	teq	r1, #0
  40d4dc:	bf04      	itt	eq
  40d4de:	4601      	moveq	r1, r0
  40d4e0:	2000      	moveq	r0, #0
  40d4e2:	fab1 f381 	clz	r3, r1
  40d4e6:	bf08      	it	eq
  40d4e8:	3320      	addeq	r3, #32
  40d4ea:	f1a3 030b 	sub.w	r3, r3, #11
  40d4ee:	f1b3 0220 	subs.w	r2, r3, #32
  40d4f2:	da0c      	bge.n	40d50e <__adddf3+0x16e>
  40d4f4:	320c      	adds	r2, #12
  40d4f6:	dd08      	ble.n	40d50a <__adddf3+0x16a>
  40d4f8:	f102 0c14 	add.w	ip, r2, #20
  40d4fc:	f1c2 020c 	rsb	r2, r2, #12
  40d500:	fa01 f00c 	lsl.w	r0, r1, ip
  40d504:	fa21 f102 	lsr.w	r1, r1, r2
  40d508:	e00c      	b.n	40d524 <__adddf3+0x184>
  40d50a:	f102 0214 	add.w	r2, r2, #20
  40d50e:	bfd8      	it	le
  40d510:	f1c2 0c20 	rsble	ip, r2, #32
  40d514:	fa01 f102 	lsl.w	r1, r1, r2
  40d518:	fa20 fc0c 	lsr.w	ip, r0, ip
  40d51c:	bfdc      	itt	le
  40d51e:	ea41 010c 	orrle.w	r1, r1, ip
  40d522:	4090      	lslle	r0, r2
  40d524:	1ae4      	subs	r4, r4, r3
  40d526:	bfa2      	ittt	ge
  40d528:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40d52c:	4329      	orrge	r1, r5
  40d52e:	bd30      	popge	{r4, r5, pc}
  40d530:	ea6f 0404 	mvn.w	r4, r4
  40d534:	3c1f      	subs	r4, #31
  40d536:	da1c      	bge.n	40d572 <__adddf3+0x1d2>
  40d538:	340c      	adds	r4, #12
  40d53a:	dc0e      	bgt.n	40d55a <__adddf3+0x1ba>
  40d53c:	f104 0414 	add.w	r4, r4, #20
  40d540:	f1c4 0220 	rsb	r2, r4, #32
  40d544:	fa20 f004 	lsr.w	r0, r0, r4
  40d548:	fa01 f302 	lsl.w	r3, r1, r2
  40d54c:	ea40 0003 	orr.w	r0, r0, r3
  40d550:	fa21 f304 	lsr.w	r3, r1, r4
  40d554:	ea45 0103 	orr.w	r1, r5, r3
  40d558:	bd30      	pop	{r4, r5, pc}
  40d55a:	f1c4 040c 	rsb	r4, r4, #12
  40d55e:	f1c4 0220 	rsb	r2, r4, #32
  40d562:	fa20 f002 	lsr.w	r0, r0, r2
  40d566:	fa01 f304 	lsl.w	r3, r1, r4
  40d56a:	ea40 0003 	orr.w	r0, r0, r3
  40d56e:	4629      	mov	r1, r5
  40d570:	bd30      	pop	{r4, r5, pc}
  40d572:	fa21 f004 	lsr.w	r0, r1, r4
  40d576:	4629      	mov	r1, r5
  40d578:	bd30      	pop	{r4, r5, pc}
  40d57a:	f094 0f00 	teq	r4, #0
  40d57e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40d582:	bf06      	itte	eq
  40d584:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40d588:	3401      	addeq	r4, #1
  40d58a:	3d01      	subne	r5, #1
  40d58c:	e74e      	b.n	40d42c <__adddf3+0x8c>
  40d58e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40d592:	bf18      	it	ne
  40d594:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40d598:	d029      	beq.n	40d5ee <__adddf3+0x24e>
  40d59a:	ea94 0f05 	teq	r4, r5
  40d59e:	bf08      	it	eq
  40d5a0:	ea90 0f02 	teqeq	r0, r2
  40d5a4:	d005      	beq.n	40d5b2 <__adddf3+0x212>
  40d5a6:	ea54 0c00 	orrs.w	ip, r4, r0
  40d5aa:	bf04      	itt	eq
  40d5ac:	4619      	moveq	r1, r3
  40d5ae:	4610      	moveq	r0, r2
  40d5b0:	bd30      	pop	{r4, r5, pc}
  40d5b2:	ea91 0f03 	teq	r1, r3
  40d5b6:	bf1e      	ittt	ne
  40d5b8:	2100      	movne	r1, #0
  40d5ba:	2000      	movne	r0, #0
  40d5bc:	bd30      	popne	{r4, r5, pc}
  40d5be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40d5c2:	d105      	bne.n	40d5d0 <__adddf3+0x230>
  40d5c4:	0040      	lsls	r0, r0, #1
  40d5c6:	4149      	adcs	r1, r1
  40d5c8:	bf28      	it	cs
  40d5ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40d5ce:	bd30      	pop	{r4, r5, pc}
  40d5d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40d5d4:	bf3c      	itt	cc
  40d5d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40d5da:	bd30      	popcc	{r4, r5, pc}
  40d5dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d5e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40d5e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d5e8:	f04f 0000 	mov.w	r0, #0
  40d5ec:	bd30      	pop	{r4, r5, pc}
  40d5ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40d5f2:	bf1a      	itte	ne
  40d5f4:	4619      	movne	r1, r3
  40d5f6:	4610      	movne	r0, r2
  40d5f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40d5fc:	bf1c      	itt	ne
  40d5fe:	460b      	movne	r3, r1
  40d600:	4602      	movne	r2, r0
  40d602:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d606:	bf06      	itte	eq
  40d608:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40d60c:	ea91 0f03 	teqeq	r1, r3
  40d610:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40d614:	bd30      	pop	{r4, r5, pc}
  40d616:	bf00      	nop

0040d618 <__aeabi_ui2d>:
  40d618:	f090 0f00 	teq	r0, #0
  40d61c:	bf04      	itt	eq
  40d61e:	2100      	moveq	r1, #0
  40d620:	4770      	bxeq	lr
  40d622:	b530      	push	{r4, r5, lr}
  40d624:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d628:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d62c:	f04f 0500 	mov.w	r5, #0
  40d630:	f04f 0100 	mov.w	r1, #0
  40d634:	e750      	b.n	40d4d8 <__adddf3+0x138>
  40d636:	bf00      	nop

0040d638 <__aeabi_i2d>:
  40d638:	f090 0f00 	teq	r0, #0
  40d63c:	bf04      	itt	eq
  40d63e:	2100      	moveq	r1, #0
  40d640:	4770      	bxeq	lr
  40d642:	b530      	push	{r4, r5, lr}
  40d644:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d648:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d64c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40d650:	bf48      	it	mi
  40d652:	4240      	negmi	r0, r0
  40d654:	f04f 0100 	mov.w	r1, #0
  40d658:	e73e      	b.n	40d4d8 <__adddf3+0x138>
  40d65a:	bf00      	nop

0040d65c <__aeabi_f2d>:
  40d65c:	0042      	lsls	r2, r0, #1
  40d65e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40d662:	ea4f 0131 	mov.w	r1, r1, rrx
  40d666:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40d66a:	bf1f      	itttt	ne
  40d66c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40d670:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40d674:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40d678:	4770      	bxne	lr
  40d67a:	f092 0f00 	teq	r2, #0
  40d67e:	bf14      	ite	ne
  40d680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40d684:	4770      	bxeq	lr
  40d686:	b530      	push	{r4, r5, lr}
  40d688:	f44f 7460 	mov.w	r4, #896	; 0x380
  40d68c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d694:	e720      	b.n	40d4d8 <__adddf3+0x138>
  40d696:	bf00      	nop

0040d698 <__aeabi_ul2d>:
  40d698:	ea50 0201 	orrs.w	r2, r0, r1
  40d69c:	bf08      	it	eq
  40d69e:	4770      	bxeq	lr
  40d6a0:	b530      	push	{r4, r5, lr}
  40d6a2:	f04f 0500 	mov.w	r5, #0
  40d6a6:	e00a      	b.n	40d6be <__aeabi_l2d+0x16>

0040d6a8 <__aeabi_l2d>:
  40d6a8:	ea50 0201 	orrs.w	r2, r0, r1
  40d6ac:	bf08      	it	eq
  40d6ae:	4770      	bxeq	lr
  40d6b0:	b530      	push	{r4, r5, lr}
  40d6b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40d6b6:	d502      	bpl.n	40d6be <__aeabi_l2d+0x16>
  40d6b8:	4240      	negs	r0, r0
  40d6ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d6be:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d6c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d6c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40d6ca:	f43f aedc 	beq.w	40d486 <__adddf3+0xe6>
  40d6ce:	f04f 0203 	mov.w	r2, #3
  40d6d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40d6d6:	bf18      	it	ne
  40d6d8:	3203      	addne	r2, #3
  40d6da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40d6de:	bf18      	it	ne
  40d6e0:	3203      	addne	r2, #3
  40d6e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40d6e6:	f1c2 0320 	rsb	r3, r2, #32
  40d6ea:	fa00 fc03 	lsl.w	ip, r0, r3
  40d6ee:	fa20 f002 	lsr.w	r0, r0, r2
  40d6f2:	fa01 fe03 	lsl.w	lr, r1, r3
  40d6f6:	ea40 000e 	orr.w	r0, r0, lr
  40d6fa:	fa21 f102 	lsr.w	r1, r1, r2
  40d6fe:	4414      	add	r4, r2
  40d700:	e6c1      	b.n	40d486 <__adddf3+0xe6>
  40d702:	bf00      	nop

0040d704 <__aeabi_dmul>:
  40d704:	b570      	push	{r4, r5, r6, lr}
  40d706:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d70a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d70e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d712:	bf1d      	ittte	ne
  40d714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d718:	ea94 0f0c 	teqne	r4, ip
  40d71c:	ea95 0f0c 	teqne	r5, ip
  40d720:	f000 f8de 	bleq	40d8e0 <__aeabi_dmul+0x1dc>
  40d724:	442c      	add	r4, r5
  40d726:	ea81 0603 	eor.w	r6, r1, r3
  40d72a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40d72e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40d732:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40d736:	bf18      	it	ne
  40d738:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40d73c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40d744:	d038      	beq.n	40d7b8 <__aeabi_dmul+0xb4>
  40d746:	fba0 ce02 	umull	ip, lr, r0, r2
  40d74a:	f04f 0500 	mov.w	r5, #0
  40d74e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40d752:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40d756:	fbe0 e503 	umlal	lr, r5, r0, r3
  40d75a:	f04f 0600 	mov.w	r6, #0
  40d75e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40d762:	f09c 0f00 	teq	ip, #0
  40d766:	bf18      	it	ne
  40d768:	f04e 0e01 	orrne.w	lr, lr, #1
  40d76c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40d770:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40d774:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40d778:	d204      	bcs.n	40d784 <__aeabi_dmul+0x80>
  40d77a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40d77e:	416d      	adcs	r5, r5
  40d780:	eb46 0606 	adc.w	r6, r6, r6
  40d784:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40d788:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40d78c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40d790:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40d794:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40d798:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d79c:	bf88      	it	hi
  40d79e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d7a2:	d81e      	bhi.n	40d7e2 <__aeabi_dmul+0xde>
  40d7a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40d7a8:	bf08      	it	eq
  40d7aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40d7ae:	f150 0000 	adcs.w	r0, r0, #0
  40d7b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d7b6:	bd70      	pop	{r4, r5, r6, pc}
  40d7b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40d7bc:	ea46 0101 	orr.w	r1, r6, r1
  40d7c0:	ea40 0002 	orr.w	r0, r0, r2
  40d7c4:	ea81 0103 	eor.w	r1, r1, r3
  40d7c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40d7cc:	bfc2      	ittt	gt
  40d7ce:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d7d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d7d6:	bd70      	popgt	{r4, r5, r6, pc}
  40d7d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d7dc:	f04f 0e00 	mov.w	lr, #0
  40d7e0:	3c01      	subs	r4, #1
  40d7e2:	f300 80ab 	bgt.w	40d93c <__aeabi_dmul+0x238>
  40d7e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40d7ea:	bfde      	ittt	le
  40d7ec:	2000      	movle	r0, #0
  40d7ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40d7f2:	bd70      	pople	{r4, r5, r6, pc}
  40d7f4:	f1c4 0400 	rsb	r4, r4, #0
  40d7f8:	3c20      	subs	r4, #32
  40d7fa:	da35      	bge.n	40d868 <__aeabi_dmul+0x164>
  40d7fc:	340c      	adds	r4, #12
  40d7fe:	dc1b      	bgt.n	40d838 <__aeabi_dmul+0x134>
  40d800:	f104 0414 	add.w	r4, r4, #20
  40d804:	f1c4 0520 	rsb	r5, r4, #32
  40d808:	fa00 f305 	lsl.w	r3, r0, r5
  40d80c:	fa20 f004 	lsr.w	r0, r0, r4
  40d810:	fa01 f205 	lsl.w	r2, r1, r5
  40d814:	ea40 0002 	orr.w	r0, r0, r2
  40d818:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40d81c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d820:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d824:	fa21 f604 	lsr.w	r6, r1, r4
  40d828:	eb42 0106 	adc.w	r1, r2, r6
  40d82c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d830:	bf08      	it	eq
  40d832:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d836:	bd70      	pop	{r4, r5, r6, pc}
  40d838:	f1c4 040c 	rsb	r4, r4, #12
  40d83c:	f1c4 0520 	rsb	r5, r4, #32
  40d840:	fa00 f304 	lsl.w	r3, r0, r4
  40d844:	fa20 f005 	lsr.w	r0, r0, r5
  40d848:	fa01 f204 	lsl.w	r2, r1, r4
  40d84c:	ea40 0002 	orr.w	r0, r0, r2
  40d850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d854:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d858:	f141 0100 	adc.w	r1, r1, #0
  40d85c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d860:	bf08      	it	eq
  40d862:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d866:	bd70      	pop	{r4, r5, r6, pc}
  40d868:	f1c4 0520 	rsb	r5, r4, #32
  40d86c:	fa00 f205 	lsl.w	r2, r0, r5
  40d870:	ea4e 0e02 	orr.w	lr, lr, r2
  40d874:	fa20 f304 	lsr.w	r3, r0, r4
  40d878:	fa01 f205 	lsl.w	r2, r1, r5
  40d87c:	ea43 0302 	orr.w	r3, r3, r2
  40d880:	fa21 f004 	lsr.w	r0, r1, r4
  40d884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d888:	fa21 f204 	lsr.w	r2, r1, r4
  40d88c:	ea20 0002 	bic.w	r0, r0, r2
  40d890:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40d894:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d898:	bf08      	it	eq
  40d89a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d89e:	bd70      	pop	{r4, r5, r6, pc}
  40d8a0:	f094 0f00 	teq	r4, #0
  40d8a4:	d10f      	bne.n	40d8c6 <__aeabi_dmul+0x1c2>
  40d8a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40d8aa:	0040      	lsls	r0, r0, #1
  40d8ac:	eb41 0101 	adc.w	r1, r1, r1
  40d8b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d8b4:	bf08      	it	eq
  40d8b6:	3c01      	subeq	r4, #1
  40d8b8:	d0f7      	beq.n	40d8aa <__aeabi_dmul+0x1a6>
  40d8ba:	ea41 0106 	orr.w	r1, r1, r6
  40d8be:	f095 0f00 	teq	r5, #0
  40d8c2:	bf18      	it	ne
  40d8c4:	4770      	bxne	lr
  40d8c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40d8ca:	0052      	lsls	r2, r2, #1
  40d8cc:	eb43 0303 	adc.w	r3, r3, r3
  40d8d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40d8d4:	bf08      	it	eq
  40d8d6:	3d01      	subeq	r5, #1
  40d8d8:	d0f7      	beq.n	40d8ca <__aeabi_dmul+0x1c6>
  40d8da:	ea43 0306 	orr.w	r3, r3, r6
  40d8de:	4770      	bx	lr
  40d8e0:	ea94 0f0c 	teq	r4, ip
  40d8e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d8e8:	bf18      	it	ne
  40d8ea:	ea95 0f0c 	teqne	r5, ip
  40d8ee:	d00c      	beq.n	40d90a <__aeabi_dmul+0x206>
  40d8f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d8f4:	bf18      	it	ne
  40d8f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d8fa:	d1d1      	bne.n	40d8a0 <__aeabi_dmul+0x19c>
  40d8fc:	ea81 0103 	eor.w	r1, r1, r3
  40d900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d904:	f04f 0000 	mov.w	r0, #0
  40d908:	bd70      	pop	{r4, r5, r6, pc}
  40d90a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d90e:	bf06      	itte	eq
  40d910:	4610      	moveq	r0, r2
  40d912:	4619      	moveq	r1, r3
  40d914:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d918:	d019      	beq.n	40d94e <__aeabi_dmul+0x24a>
  40d91a:	ea94 0f0c 	teq	r4, ip
  40d91e:	d102      	bne.n	40d926 <__aeabi_dmul+0x222>
  40d920:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40d924:	d113      	bne.n	40d94e <__aeabi_dmul+0x24a>
  40d926:	ea95 0f0c 	teq	r5, ip
  40d92a:	d105      	bne.n	40d938 <__aeabi_dmul+0x234>
  40d92c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40d930:	bf1c      	itt	ne
  40d932:	4610      	movne	r0, r2
  40d934:	4619      	movne	r1, r3
  40d936:	d10a      	bne.n	40d94e <__aeabi_dmul+0x24a>
  40d938:	ea81 0103 	eor.w	r1, r1, r3
  40d93c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d940:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d944:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d948:	f04f 0000 	mov.w	r0, #0
  40d94c:	bd70      	pop	{r4, r5, r6, pc}
  40d94e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d952:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40d956:	bd70      	pop	{r4, r5, r6, pc}

0040d958 <__aeabi_ddiv>:
  40d958:	b570      	push	{r4, r5, r6, lr}
  40d95a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d95e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d962:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d966:	bf1d      	ittte	ne
  40d968:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d96c:	ea94 0f0c 	teqne	r4, ip
  40d970:	ea95 0f0c 	teqne	r5, ip
  40d974:	f000 f8a7 	bleq	40dac6 <__aeabi_ddiv+0x16e>
  40d978:	eba4 0405 	sub.w	r4, r4, r5
  40d97c:	ea81 0e03 	eor.w	lr, r1, r3
  40d980:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d984:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40d988:	f000 8088 	beq.w	40da9c <__aeabi_ddiv+0x144>
  40d98c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40d990:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40d994:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40d998:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40d99c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40d9a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40d9a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40d9a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40d9ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40d9b0:	429d      	cmp	r5, r3
  40d9b2:	bf08      	it	eq
  40d9b4:	4296      	cmpeq	r6, r2
  40d9b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40d9ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40d9be:	d202      	bcs.n	40d9c6 <__aeabi_ddiv+0x6e>
  40d9c0:	085b      	lsrs	r3, r3, #1
  40d9c2:	ea4f 0232 	mov.w	r2, r2, rrx
  40d9c6:	1ab6      	subs	r6, r6, r2
  40d9c8:	eb65 0503 	sbc.w	r5, r5, r3
  40d9cc:	085b      	lsrs	r3, r3, #1
  40d9ce:	ea4f 0232 	mov.w	r2, r2, rrx
  40d9d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40d9d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40d9da:	ebb6 0e02 	subs.w	lr, r6, r2
  40d9de:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d9e2:	bf22      	ittt	cs
  40d9e4:	1ab6      	subcs	r6, r6, r2
  40d9e6:	4675      	movcs	r5, lr
  40d9e8:	ea40 000c 	orrcs.w	r0, r0, ip
  40d9ec:	085b      	lsrs	r3, r3, #1
  40d9ee:	ea4f 0232 	mov.w	r2, r2, rrx
  40d9f2:	ebb6 0e02 	subs.w	lr, r6, r2
  40d9f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d9fa:	bf22      	ittt	cs
  40d9fc:	1ab6      	subcs	r6, r6, r2
  40d9fe:	4675      	movcs	r5, lr
  40da00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40da04:	085b      	lsrs	r3, r3, #1
  40da06:	ea4f 0232 	mov.w	r2, r2, rrx
  40da0a:	ebb6 0e02 	subs.w	lr, r6, r2
  40da0e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40da12:	bf22      	ittt	cs
  40da14:	1ab6      	subcs	r6, r6, r2
  40da16:	4675      	movcs	r5, lr
  40da18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40da1c:	085b      	lsrs	r3, r3, #1
  40da1e:	ea4f 0232 	mov.w	r2, r2, rrx
  40da22:	ebb6 0e02 	subs.w	lr, r6, r2
  40da26:	eb75 0e03 	sbcs.w	lr, r5, r3
  40da2a:	bf22      	ittt	cs
  40da2c:	1ab6      	subcs	r6, r6, r2
  40da2e:	4675      	movcs	r5, lr
  40da30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40da34:	ea55 0e06 	orrs.w	lr, r5, r6
  40da38:	d018      	beq.n	40da6c <__aeabi_ddiv+0x114>
  40da3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40da3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40da42:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40da46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40da4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40da4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40da52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40da56:	d1c0      	bne.n	40d9da <__aeabi_ddiv+0x82>
  40da58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40da5c:	d10b      	bne.n	40da76 <__aeabi_ddiv+0x11e>
  40da5e:	ea41 0100 	orr.w	r1, r1, r0
  40da62:	f04f 0000 	mov.w	r0, #0
  40da66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40da6a:	e7b6      	b.n	40d9da <__aeabi_ddiv+0x82>
  40da6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40da70:	bf04      	itt	eq
  40da72:	4301      	orreq	r1, r0
  40da74:	2000      	moveq	r0, #0
  40da76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40da7a:	bf88      	it	hi
  40da7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40da80:	f63f aeaf 	bhi.w	40d7e2 <__aeabi_dmul+0xde>
  40da84:	ebb5 0c03 	subs.w	ip, r5, r3
  40da88:	bf04      	itt	eq
  40da8a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40da8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40da92:	f150 0000 	adcs.w	r0, r0, #0
  40da96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40da9a:	bd70      	pop	{r4, r5, r6, pc}
  40da9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40daa0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40daa4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40daa8:	bfc2      	ittt	gt
  40daaa:	ebd4 050c 	rsbsgt	r5, r4, ip
  40daae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40dab2:	bd70      	popgt	{r4, r5, r6, pc}
  40dab4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40dab8:	f04f 0e00 	mov.w	lr, #0
  40dabc:	3c01      	subs	r4, #1
  40dabe:	e690      	b.n	40d7e2 <__aeabi_dmul+0xde>
  40dac0:	ea45 0e06 	orr.w	lr, r5, r6
  40dac4:	e68d      	b.n	40d7e2 <__aeabi_dmul+0xde>
  40dac6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40daca:	ea94 0f0c 	teq	r4, ip
  40dace:	bf08      	it	eq
  40dad0:	ea95 0f0c 	teqeq	r5, ip
  40dad4:	f43f af3b 	beq.w	40d94e <__aeabi_dmul+0x24a>
  40dad8:	ea94 0f0c 	teq	r4, ip
  40dadc:	d10a      	bne.n	40daf4 <__aeabi_ddiv+0x19c>
  40dade:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40dae2:	f47f af34 	bne.w	40d94e <__aeabi_dmul+0x24a>
  40dae6:	ea95 0f0c 	teq	r5, ip
  40daea:	f47f af25 	bne.w	40d938 <__aeabi_dmul+0x234>
  40daee:	4610      	mov	r0, r2
  40daf0:	4619      	mov	r1, r3
  40daf2:	e72c      	b.n	40d94e <__aeabi_dmul+0x24a>
  40daf4:	ea95 0f0c 	teq	r5, ip
  40daf8:	d106      	bne.n	40db08 <__aeabi_ddiv+0x1b0>
  40dafa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40dafe:	f43f aefd 	beq.w	40d8fc <__aeabi_dmul+0x1f8>
  40db02:	4610      	mov	r0, r2
  40db04:	4619      	mov	r1, r3
  40db06:	e722      	b.n	40d94e <__aeabi_dmul+0x24a>
  40db08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40db0c:	bf18      	it	ne
  40db0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40db12:	f47f aec5 	bne.w	40d8a0 <__aeabi_dmul+0x19c>
  40db16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40db1a:	f47f af0d 	bne.w	40d938 <__aeabi_dmul+0x234>
  40db1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40db22:	f47f aeeb 	bne.w	40d8fc <__aeabi_dmul+0x1f8>
  40db26:	e712      	b.n	40d94e <__aeabi_dmul+0x24a>

0040db28 <__gedf2>:
  40db28:	f04f 3cff 	mov.w	ip, #4294967295
  40db2c:	e006      	b.n	40db3c <__cmpdf2+0x4>
  40db2e:	bf00      	nop

0040db30 <__ledf2>:
  40db30:	f04f 0c01 	mov.w	ip, #1
  40db34:	e002      	b.n	40db3c <__cmpdf2+0x4>
  40db36:	bf00      	nop

0040db38 <__cmpdf2>:
  40db38:	f04f 0c01 	mov.w	ip, #1
  40db3c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40db40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40db44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40db48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40db4c:	bf18      	it	ne
  40db4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40db52:	d01b      	beq.n	40db8c <__cmpdf2+0x54>
  40db54:	b001      	add	sp, #4
  40db56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40db5a:	bf0c      	ite	eq
  40db5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40db60:	ea91 0f03 	teqne	r1, r3
  40db64:	bf02      	ittt	eq
  40db66:	ea90 0f02 	teqeq	r0, r2
  40db6a:	2000      	moveq	r0, #0
  40db6c:	4770      	bxeq	lr
  40db6e:	f110 0f00 	cmn.w	r0, #0
  40db72:	ea91 0f03 	teq	r1, r3
  40db76:	bf58      	it	pl
  40db78:	4299      	cmppl	r1, r3
  40db7a:	bf08      	it	eq
  40db7c:	4290      	cmpeq	r0, r2
  40db7e:	bf2c      	ite	cs
  40db80:	17d8      	asrcs	r0, r3, #31
  40db82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40db86:	f040 0001 	orr.w	r0, r0, #1
  40db8a:	4770      	bx	lr
  40db8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40db90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40db94:	d102      	bne.n	40db9c <__cmpdf2+0x64>
  40db96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40db9a:	d107      	bne.n	40dbac <__cmpdf2+0x74>
  40db9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40dba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40dba4:	d1d6      	bne.n	40db54 <__cmpdf2+0x1c>
  40dba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40dbaa:	d0d3      	beq.n	40db54 <__cmpdf2+0x1c>
  40dbac:	f85d 0b04 	ldr.w	r0, [sp], #4
  40dbb0:	4770      	bx	lr
  40dbb2:	bf00      	nop

0040dbb4 <__aeabi_cdrcmple>:
  40dbb4:	4684      	mov	ip, r0
  40dbb6:	4610      	mov	r0, r2
  40dbb8:	4662      	mov	r2, ip
  40dbba:	468c      	mov	ip, r1
  40dbbc:	4619      	mov	r1, r3
  40dbbe:	4663      	mov	r3, ip
  40dbc0:	e000      	b.n	40dbc4 <__aeabi_cdcmpeq>
  40dbc2:	bf00      	nop

0040dbc4 <__aeabi_cdcmpeq>:
  40dbc4:	b501      	push	{r0, lr}
  40dbc6:	f7ff ffb7 	bl	40db38 <__cmpdf2>
  40dbca:	2800      	cmp	r0, #0
  40dbcc:	bf48      	it	mi
  40dbce:	f110 0f00 	cmnmi.w	r0, #0
  40dbd2:	bd01      	pop	{r0, pc}

0040dbd4 <__aeabi_dcmpeq>:
  40dbd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dbd8:	f7ff fff4 	bl	40dbc4 <__aeabi_cdcmpeq>
  40dbdc:	bf0c      	ite	eq
  40dbde:	2001      	moveq	r0, #1
  40dbe0:	2000      	movne	r0, #0
  40dbe2:	f85d fb08 	ldr.w	pc, [sp], #8
  40dbe6:	bf00      	nop

0040dbe8 <__aeabi_dcmplt>:
  40dbe8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dbec:	f7ff ffea 	bl	40dbc4 <__aeabi_cdcmpeq>
  40dbf0:	bf34      	ite	cc
  40dbf2:	2001      	movcc	r0, #1
  40dbf4:	2000      	movcs	r0, #0
  40dbf6:	f85d fb08 	ldr.w	pc, [sp], #8
  40dbfa:	bf00      	nop

0040dbfc <__aeabi_dcmple>:
  40dbfc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dc00:	f7ff ffe0 	bl	40dbc4 <__aeabi_cdcmpeq>
  40dc04:	bf94      	ite	ls
  40dc06:	2001      	movls	r0, #1
  40dc08:	2000      	movhi	r0, #0
  40dc0a:	f85d fb08 	ldr.w	pc, [sp], #8
  40dc0e:	bf00      	nop

0040dc10 <__aeabi_dcmpge>:
  40dc10:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dc14:	f7ff ffce 	bl	40dbb4 <__aeabi_cdrcmple>
  40dc18:	bf94      	ite	ls
  40dc1a:	2001      	movls	r0, #1
  40dc1c:	2000      	movhi	r0, #0
  40dc1e:	f85d fb08 	ldr.w	pc, [sp], #8
  40dc22:	bf00      	nop

0040dc24 <__aeabi_dcmpgt>:
  40dc24:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dc28:	f7ff ffc4 	bl	40dbb4 <__aeabi_cdrcmple>
  40dc2c:	bf34      	ite	cc
  40dc2e:	2001      	movcc	r0, #1
  40dc30:	2000      	movcs	r0, #0
  40dc32:	f85d fb08 	ldr.w	pc, [sp], #8
  40dc36:	bf00      	nop

0040dc38 <__aeabi_dcmpun>:
  40dc38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40dc3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40dc40:	d102      	bne.n	40dc48 <__aeabi_dcmpun+0x10>
  40dc42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40dc46:	d10a      	bne.n	40dc5e <__aeabi_dcmpun+0x26>
  40dc48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40dc4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40dc50:	d102      	bne.n	40dc58 <__aeabi_dcmpun+0x20>
  40dc52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40dc56:	d102      	bne.n	40dc5e <__aeabi_dcmpun+0x26>
  40dc58:	f04f 0000 	mov.w	r0, #0
  40dc5c:	4770      	bx	lr
  40dc5e:	f04f 0001 	mov.w	r0, #1
  40dc62:	4770      	bx	lr

0040dc64 <__aeabi_d2iz>:
  40dc64:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40dc68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40dc6c:	d215      	bcs.n	40dc9a <__aeabi_d2iz+0x36>
  40dc6e:	d511      	bpl.n	40dc94 <__aeabi_d2iz+0x30>
  40dc70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40dc74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40dc78:	d912      	bls.n	40dca0 <__aeabi_d2iz+0x3c>
  40dc7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40dc7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40dc82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40dc86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40dc8a:	fa23 f002 	lsr.w	r0, r3, r2
  40dc8e:	bf18      	it	ne
  40dc90:	4240      	negne	r0, r0
  40dc92:	4770      	bx	lr
  40dc94:	f04f 0000 	mov.w	r0, #0
  40dc98:	4770      	bx	lr
  40dc9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40dc9e:	d105      	bne.n	40dcac <__aeabi_d2iz+0x48>
  40dca0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40dca4:	bf08      	it	eq
  40dca6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40dcaa:	4770      	bx	lr
  40dcac:	f04f 0000 	mov.w	r0, #0
  40dcb0:	4770      	bx	lr
  40dcb2:	bf00      	nop
  40dcb4:	50504128 	.word	0x50504128
  40dcb8:	52452829 	.word	0x52452829
  40dcbc:	255b2952 	.word	0x255b2952
  40dcc0:	255b5d73 	.word	0x255b5d73
  40dcc4:	00005d64 	.word	0x00005d64
  40dcc8:	61766e49 	.word	0x61766e49
  40dccc:	2064696c 	.word	0x2064696c
  40dcd0:	54434f49 	.word	0x54434f49
  40dcd4:	6f63204c 	.word	0x6f63204c
  40dcd8:	6e616d6d 	.word	0x6e616d6d
  40dcdc:	000a2164 	.word	0x000a2164
  40dce0:	0000000d 	.word	0x0000000d

0040dce4 <__FUNCTION__.9672>:
  40dce4:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  40dcf4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40dd04:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
  40dd14:	6b617720 74207075 63206568 0a706968      wakup the chip.
  40dd24:	00000000 0000000d 66696828 49572029     ........(hif) WI
  40dd34:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
  40dd44:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
  40dd54:	66696828 64612029 73657264 75622073     (hif) address bu
  40dd64:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
  40dd74:	70757272 20646574 6b636170 53207465     rrupted packet S
  40dd84:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
  40dd94:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
  40dda4:	3e583230 0000000a 66696828 6e692029     02X>....(hif) in
  40ddb4:	696c6176 72672064 2070756f 000a4449     valid group ID..
  40ddc4:	66696828 6f682029 61207473 64207070     (hif) host app d
  40ddd4:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
  40dde4:	00000a65 66696828 72572029 20676e6f     e...(hif) Wrong 
  40ddf4:	657a6953 0000000a 66696828 61462029     Size....(hif) Fa
  40de04:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
  40de14:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
  40de24:	6552206f 69206461 7265746e 74707572     o Read interrupt
  40de34:	67657220 0000000a 66696828 41462029      reg....(hif) FA
  40de44:	74204c49 6177206f 7075656b 65687420     IL to wakeup the
  40de54:	69686320 00000a70 46494828 61462029      chip...(HIF) Fa
  40de64:	74206c69 6168206f 656c646e 746e6920     il to handle int
  40de74:	75727265 25207470 72742064 67412079     errupt %d try Ag
  40de84:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
  40de94:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
  40dea4:	656d7567 000a746e 20505041 75716552     gument..APP Requ
  40deb4:	65747365 69532064 6920657a 616c2073     ested Size is la
  40dec4:	72656772 61687420 6874206e 65722065     rger than the re
  40ded4:	65766963 75622064 72656666 7a697320     cived buffer siz
  40dee4:	253c2065 253c3e64 000a3e64 20505041     e <%d><%d>..APP 
  40def4:	75716552 65747365 64412064 73657264     Requested Addres
  40df04:	65622073 646e6f79 65687420 63657220     s beyond the rec
  40df14:	64657669 66756220 20726566 72646461     ived buffer addr
  40df24:	20737365 20646e61 676e656c 000a6874     ess and length..
  40df34:	20705247 6425203f 0000000a              GRp ? %d....

0040df40 <__FUNCTION__.8774>:
  40df40:	5f666968 646e6573 00000000              hif_send....

0040df4c <__FUNCTION__.8784>:
  40df4c:	5f666968 00727369                       hif_isr.

0040df54 <__FUNCTION__.8790>:
  40df54:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040df64 <__FUNCTION__.8805>:
  40df64:	5f666968 65636572 00657669              hif_receive.

0040df70 <__FUNCTION__.8820>:
  40df70:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  40df80:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
  40df90:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
  40dfa0:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
  40dfb0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40dfc0:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
  40dfd0:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
  40dfe0:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
  40dff0:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
  40e000:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
  40e010:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
  40e020:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
  40e030:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
  40e040:	455a4953 0000000a 41564e49 2044494c     SIZE....INVALID 
  40e050:	20504557 0a59454b 00000000 41564e49     WEP KEY.....INVA
  40e060:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
  40e070:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
  40e080:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
  40e090:	73746f6c 00000a21 41564e49 2044494c     lots!...INVALID 
  40e0a0:	6e616373 6f6c7320 69742074 0a21656d     scan slot time!.
  40e0b0:	00000000 41564e49 2044494c 6f206f4e     ....INVALID No o
  40e0c0:	72702066 2065626f 75716572 73747365     f probe requests
  40e0d0:	72657020 61637320 6c73206e 000a746f      per scan slot..
  40e0e0:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
  40e0f0:	6f687365 2520646c 000a2064 6d726946     eshold %d ..Firm
  40e100:	65726177 72657620 3a202020 2e752520     ware ver   : %u.
  40e110:	252e7525 00000a75 206e694d 76697264     %u.%u...Min driv
  40e120:	76207265 3a207265 2e752520 252e7525     er ver : %u.%u.%
  40e130:	00000a75 72727543 69726420 20726576     u...Curr driver 
  40e140:	3a726576 2e752520 252e7525 00000a75     ver: %u.%u.%u...
  40e150:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
  40e160:	65562065 6f697372 00000a6e 2079654b     e Version...Key 
  40e170:	6e207369 7620746f 64696c61 0000000a     is not valid....
  40e180:	61766e49 2064696c 0a79654b 00000000     Invalid Key.....
  40e190:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
  40e1a0:	0000000a 49204843 4c41564e 000a4449     ....CH INVALID..
  40e1b0:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
  40e1c0:	65646e69 64252078 0000000a 61766e49     index %d....Inva
  40e1d0:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
  40e1e0:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
  40e1f0:	53502074 656b204b 656c2079 6874676e     t PSK key length
  40e200:	0000000a 65646e75 656e6966 65732064     ....undefined se
  40e210:	79742063 000a6570 5f53505f 56524553     c type.._PS_SERV
  40e220:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
  40e230:	000a6465 7473694c 63206e65 6e6e6168     ed..Listen chann
  40e240:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
  40e250:	2c312065 6f203620 31312072 0000000a     e 1, 6 or 11....
  40e260:	45574f50 41532052 25204556 00000a64     POWER SAVE %d...
  40e270:	41564e49 2044494c 414d4f44 4e204e49     INVALID DOMAIN N
  40e280:	0a454d41 00000000 474e5250 66754220     AME.....PRNG Buf
  40e290:	20726566 65637865 64656465 78616d20     fer exceeded max
  40e2a0:	6d756d69 7a697320 64252065 20726f20     imum size %d or 
  40e2b0:	4c4c554e 66754220 0a726566 00000000     NULL Buffer.....

0040e2c0 <__FUNCTION__.8747>:
  40e2c0:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0040e2cc <__FUNCTION__.8756>:
  40e2cc:	5f6d326d 696c6176 65746164 5f70615f     m2m_validate_ap_
  40e2dc:	61726170 6574656d 00007372              parameters..

0040e2e8 <__FUNCTION__.8771>:
  40e2e8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040e2f8 <__FUNCTION__.8799>:
  40e2f8:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40e308:	0063735f                                _sc.

0040e30c <__FUNCTION__.8945>:
  40e30c:	5f6d326d 69666977 6174735f 705f7472     m2m_wifi_start_p
  40e31c:	69766f72 6e6f6973 646f6d5f 00000065     rovision_mode...
  40e32c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40e33c:	00005d64 20737542 6f727265 31282072     d]..Bus error (1
  40e34c:	57202e29 20656b61 66207075 656c6961     ). Wake up faile
  40e35c:	00000a64 0000000d 20737542 6f727265     d.......Bus erro
  40e36c:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
  40e37c:	656c6961 00000a64 636f6c63 7320736b     ailed...clocks s
  40e38c:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
  40e39c:	61662070 64656c69 0000000a 696d6e5b     p failed....[nmi
  40e3ac:	61747320 3a5d7472 69616620 6572206c      start]: fail re
  40e3bc:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
  40e3cc:	00000a2e 3a676572 2f207825 20782520     ....reg:%x / %x 
  40e3dc:	0000000a 6c696166 74206465 6564206f     ....failed to de
  40e3ec:	696e692d 6c616974 0a657a69 00000000     -initialize.....
  40e3fc:	6f727245 68772072 20656c69 74697277     Error while writ
  40e40c:	20676e69 0a676572 00000000 6f727245     ing reg.....Erro
  40e41c:	68772072 20656c69 64616572 20676e69     r while reading 
  40e42c:	0a676572 00000000 6c75705b 5f70756c     reg.....[pullup_
  40e43c:	6c727463 66203a5d 656c6961 6f742064     ctrl]: failed to
  40e44c:	61657220 00000a64 6c75705b 5f70756c      read...[pullup_
  40e45c:	6c727463 66203a5d 656c6961 6f742064     ctrl]: failed to
  40e46c:	69727720 000a6574                        write..

0040e474 <__FUNCTION__.8584>:
  40e474:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0040e484 <__FUNCTION__.8678>:
  40e484:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
  40e494:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
  40e4a4:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40e4b4:	6e69206c 62207469 000a7375 0000000d     l init bus......
  40e4c4:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
  40e4d4:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
  40e4e4:	74206465 6e65206f 656c6261 746e6920     ed to enable int
  40e4f4:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
  40e504:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
  40e514:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
  40e524:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
  40e534:	69642068 6c626173 61662065 000a6c69     h disable fail..
  40e544:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
  40e554:	696e6920 75622074 00000a73               init bus...

0040e560 <__FUNCTION__.8665>:
  40e560:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040e56c <__FUNCTION__.8672>:
  40e56c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0040e57c <crc7_syndrome_table>:
  40e57c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40e58c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40e59c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40e5ac:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40e5bc:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40e5cc:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40e5dc:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40e5ec:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40e5fc:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40e60c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40e61c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40e62c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40e63c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40e64c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40e65c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40e66c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  40e67c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40e68c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
  40e69c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
  40e6ac:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40e6bc:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40e6cc:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
  40e6dc:	72206573 2c646165 73756220 72726520     se read, bus err
  40e6ec:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
  40e6fc:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
  40e70c:	6f707365 2065736e 64616572 7562202c     esponse read, bu
  40e71c:	72652073 2e726f72 000a2e2e 696d6e5b     s error.....[nmi
  40e72c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40e73c:	72206174 6f707365 2065736e 64616572     ta response read
  40e74c:	282e2e2e 78323025 00000a29 696d6e5b     ...(%02x)...[nmi
  40e75c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40e76c:	62206174 6b636f6c 61657220 62202c64     ta block read, b
  40e77c:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40e78c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e79c:	61642064 62206174 6b636f6c 63726320     d data block crc
  40e7ac:	61657220 62202c64 65207375 726f7272      read, bus error
  40e7bc:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40e7cc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40e7dc:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
  40e7ec:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40e7fc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e80c:	61642064 62206174 6b636f6c 69727720     d data block wri
  40e81c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
  40e82c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40e83c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40e84c:	63726320 69727720 202c6574 20737562      crc write, bus 
  40e85c:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40e86c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40e87c:	77202c64 65746972 67657220 30252820     d, write reg (%0
  40e88c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  40e89c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
  40e8ac:	6e6f7073 202c6573 74697277 65722065     sponse, write re
  40e8bc:	25282067 29783830 0a2e2e2e 00000000     g (%08x)........
  40e8cc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e8dc:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
  40e8ec:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
  40e8fc:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
  40e90c:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
  40e91c:	69727720 62206574 6b636f6c 30252820      write block (%0
  40e92c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  40e93c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40e94c:	61746164 69727720 2e2e6574 00000a2e     data write......
  40e95c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e96c:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40e97c:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40e98c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40e99c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40e9ac:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40e9bc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e9cc:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40e9dc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e9ec:	6d632064 72202c64 20646165 636f6c62     d cmd, read bloc
  40e9fc:	2528206b 29783830 0a2e2e2e 00000000     k (%08x)........
  40ea0c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ea1c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
  40ea2c:	64616572 6f6c6220 28206b63 78383025     read block (%08x
  40ea3c:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
  40ea4c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40ea5c:	61746164 61657220 2e2e2e64 0000000a     data read.......
  40ea6c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ea7c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40ea8c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40ea9c:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40eaac:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40eabc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40eacc:	6e692064 6e726574 72206c61 20646165     d internal read 
  40eadc:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40eaec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40eafc:	6e692064 6e726574 77206c61 65746972     d internal write
  40eb0c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40eb1c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40eb2c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40eb3c:	64692070 0a2e2e2e 00000000              p id........

0040eb48 <__FUNCTION__.8049>:
  40eb48:	5f697073 00646d63                       spi_cmd.

0040eb50 <__FUNCTION__.8057>:
  40eb50:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040eb5c <__FUNCTION__.8073>:
  40eb5c:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040eb6c <__FUNCTION__.8088>:
  40eb6c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040eb7c <__FUNCTION__.8098>:
  40eb7c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040eb8c <__FUNCTION__.8106>:
  40eb8c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040eb9c <__FUNCTION__.8115>:
  40eb9c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040ebac <__FUNCTION__.8123>:
  40ebac:	735f6d6e 725f6970 00646165              nm_spi_read.

0040ebb8 <__FUNCTION__.8140>:
  40ebb8:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
  40ebc8:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
  40ebd8:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
  40ebe8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40ebf8:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
  40ec08:	2078614d 676e654c 000a6874 6e6b6e55     Max Length..Unkn
  40ec18:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
  40ec28:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
  40ec38:	204c5353 6b636f53 000a7465              SSL Socket..

0040ec44 <gacHttpProvDomainName>:
  40ec44:	69666977 666e6f43 632e6769 00006d6f     wifiConfig.com..
  40ec54:	0001c200 000000c0 00000800 00000000     ................
  40ec64:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
  40ec74:	64612050 73657264 73692073 2e642520     P address is %d.
  40ec84:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
  40ec94:	506fe353 6f6c7561 00000000 20544547     S.oPaulo....GET 
  40eca4:	736f702f 312f7374 00000000 73257325     /posts/1....%s%s
  40ecb4:	00007325 00000000 6b636f73 635f7465     %s......socket_c
  40ecc4:	63203a62 656e6e6f 65207463 726f7272     b: connect error
  40ecd4:	000a0d21 0a0d7325 00000000 6b636f73     !...%s......sock
  40ece4:	635f7465 72203a62 20766365 6f727265     et_cb: recv erro
  40ecf4:	0a0d2172 00000000 69666977 3a62635f     r!......wifi_cb:
  40ed04:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
  40ed14:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
  40ed24:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
  40ed34:	5443454e 0a0d4445 00000000 69666977     NECTED......wifi
  40ed44:	3a62635f 20504920 72646461 20737365     _cb: IP address 
  40ed54:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
  40ed64:	00000000 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  40ed74:	4649575f 45525f49 505f5053 49564f52     _WIFI_RESP_PROVI
  40ed84:	4e4f4953 464e495f 000a0d4f 69666977     SION_INFO...wifi
  40ed94:	3a62635f 6f727020 69736976 66206e6f     _cb: provision f
  40eda4:	656c6961 0a0d2164 00000000 57202d2d     ailed!......-- W
  40edb4:	31434e49 20303035 55414620 4f415453     INC1500  FAUSTAO
  40edc4:	61657720 72656874 696c6320 20746e65      weather client 
  40edd4:	6d617865 20656c70 0a0d2d2d 53202d2d     example --..-- S
  40ede4:	37454d41 50582d30 2d20444c 2d0a0d2d     AME70-XPLD --..-
  40edf4:	6f43202d 6c69706d 203a6465 20727041     - Compiled: Apr 
  40ee04:	32203031 20373130 343a3731 36313a33     10 2017 17:43:16
  40ee14:	0d2d2d20 0000000a 6e69616d 326d203a      --.....main: m2
  40ee24:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
  40ee34:	72726520 2821726f 0d296425 0000000a      error!(%d).....
  40ee44:	69666977 666e6f43 632e6769 00006d6f     wifiConfig.com..
  40ee54:	72500a0d 7369766f 206e6f69 65646f4d     ..Provision Mode
  40ee64:	61747320 64657472 430a0d2e 656e6e6f      started...Conne
  40ee74:	74207463 255b206f 76205d73 41206169     ct to [%s] via A
  40ee84:	73255b50 6e61205d 69662064 75206c6c     P[%s] and fill u
  40ee94:	68742070 61702065 0d2e6567 000a0d0a     p the page......
  40eea4:	6e69616d 6166203a 64656c69 206f7420     main: failed to 
  40eeb4:	61657263 54206574 63205043 6e65696c     create TCP clien
  40eec4:	6f732074 74656b63 72726520 0d21726f     t socket error!.
  40eed4:	0000000a 6e69616d 6166203a 64656c69     ....main: failed
  40eee4:	206f7420 6e6e6f63 20746365 6b636f73      to connect sock
  40eef4:	65207465 726f7272 000a0d21 00000043     et error!...C...

0040ef04 <_global_impure_ptr>:
  40ef04:	204000a8                                ..@ 

0040ef08 <zeroes.7035>:
  40ef08:	30303030 30303030 30303030 30303030     0000000000000000
  40ef18:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40ef28:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40ef38:	00000000 33323130 37363534 62613938     ....0123456789ab
  40ef48:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40ef58:	00000030                                0...

0040ef5c <blanks.7034>:
  40ef5c:	20202020 20202020 20202020 20202020                     

0040ef6c <zeroes.6993>:
  40ef6c:	30303030 30303030 30303030 30303030     0000000000000000

0040ef7c <blanks.6992>:
  40ef7c:	20202020 20202020 20202020 20202020                     
  40ef8c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40ef9c:	49534f50 00000058 0000002e              POSIX.......

0040efa8 <__mprec_tens>:
  40efa8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40efb8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40efc8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40efd8:	00000000 412e8480 00000000 416312d0     .......A......cA
  40efe8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40eff8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40f008:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40f018:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40f028:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40f038:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40f048:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40f058:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40f068:	79d99db4 44ea7843                       ...yCx.D

0040f070 <__mprec_bigtens>:
  40f070:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40f080:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40f090:	7f73bf3c 75154fdd                       <.s..O.u

0040f098 <p05.5373>:
  40f098:	00000005 00000019 0000007d              ........}...

0040f0a4 <_init>:
  40f0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f0a6:	bf00      	nop
  40f0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f0aa:	bc08      	pop	{r3}
  40f0ac:	469e      	mov	lr, r3
  40f0ae:	4770      	bx	lr

0040f0b0 <__init_array_start>:
  40f0b0:	0040a261 	.word	0x0040a261

0040f0b4 <__frame_dummy_init_array_entry>:
  40f0b4:	00400165                                e.@.

0040f0b8 <_fini>:
  40f0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f0ba:	bf00      	nop
  40f0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f0be:	bc08      	pop	{r3}
  40f0c0:	469e      	mov	lr, r3
  40f0c2:	4770      	bx	lr

0040f0c4 <__fini_array_start>:
  40f0c4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d                                   ..=.

2040001c <gstrM2MAPConfig>:
2040001c:	6f43 706d 7475 6361 6f61 6d45 6162 6372     ComputacaoEmbarc
2040002c:	6461 0061 0000 0000 0000 0000 0000 0000     ada.............
2040003c:	0100 0a00 3231 3433 3635 3837 3039 0000     ....1234567890..
	...
20400058:	0000 0100 0000 0000 0000 0000               ............

20400064 <gau8MacAddr>:
20400064:	f0f8 4505 84d4 0000                         ...E....

2040006c <gacDeviceName>:
2040006c:	6f43 706d 7475 6361 6f61 6d45 6162 6372     ComputacaoEmbarc
2040007c:	6461 0061                                   ada.

20400080 <tcp_client_socket>:
20400080:	00ff 0000                                   ....

20400084 <server_host_name>:
20400084:	736a 6e6f 6c70 6361 6865 6c6f 6564 2e72     jsonplaceholder.
20400094:	7974 6970 6f63 6564 632e 6d6f 0000 0000     typicode.com....
204000a4:	0000 0000                                   ....

204000a8 <impure_data>:
204000a8:	0000 0000 0394 2040 03fc 2040 0464 2040     ......@ ..@ d.@ 
	...
204000dc:	ef00 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
20400150:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400160:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004d0 <_impure_ptr>:
204004d0:	00a8 2040                                   ..@ 

204004d4 <lconv>:
204004d4:	efa4 0040 ef38 0040 ef38 0040 ef38 0040     ..@.8.@.8.@.8.@.
204004e4:	ef38 0040 ef38 0040 ef38 0040 ef38 0040     8.@.8.@.8.@.8.@.
204004f4:	ef38 0040 ef38 0040 ffff ffff ffff ffff     8.@.8.@.........
20400504:	ffff ffff ffff 0000                         ........

2040050c <lc_ctype_charset>:
2040050c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2040052c <__mb_cur_max>:
2040052c:	0001 0000                                   ....

20400530 <__malloc_av_>:
	...
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 

20400938 <__malloc_trim_threshold>:
20400938:	0000 0002                                   ....

2040093c <__malloc_sbrk_base>:
2040093c:	ffff ffff                                   ....

20400940 <__wctomb>:
20400940:	d0fd 0040                                   ..@.
